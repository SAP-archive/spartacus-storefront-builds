{"version":3,"file":"base-focus.directive.d.ts","sources":["base-focus.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, OnInit } from '@angular/core';\nimport { BaseFocusConfig } from '../keyboard-focus.model';\nimport { BaseFocusService } from './base-focus.service';\n/**\n * Abstract directive that provides a common interface for all focus directives:\n * - Block Focus\n * - Persist Focus\n * - Escape Focus\n * - Auto Focus\n * - Tab Focus\n * - Trap Focus\n * - Lock Focus\n */\nexport declare abstract class BaseFocusDirective implements OnInit {\n    protected elementRef: ElementRef<HTMLElement>;\n    protected service: BaseFocusService;\n    /**\n     * Optional configuration for the focus directive drives the behaviour of the keyboard\n     * focus directive.\n     */\n    protected config: BaseFocusConfig;\n    /**\n     * A default config can be provided for each directive if a specific focus directive\n     * is used directly. i.e. `<div cxAutoFocus></div>`\n     */\n    protected defaultConfig: BaseFocusConfig;\n    tabindex: number;\n    constructor(elementRef: ElementRef<HTMLElement>, service: BaseFocusService);\n    ngOnInit(): void;\n    /**\n     * Override the (input) config if it undefined or an empty string, with the\n     * `defaultConfig`. The `defaultConfig` might be specified for each directive\n     * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\n     * specific (inherited) defaultConfig will be used.\n     */\n    protected setDefaultConfiguration(): void;\n    /**\n     * Helper method to return the host element for the directive\n     * given by the `elementRef`.\n     */\n    protected get host(): HTMLElement;\n    /**\n     * Force a tabindex on the host element if it is _requried_ to make the element\n     * focusable. If the element is focusable by nature or by a given tabindex, the\n     * `tabindex` is not applied.\n     *\n     * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\n     */\n    protected set requiredTabindex(tabindex: number);\n    /**\n     * Returns true if the host element does not have a tabindex defined\n     * and it also doesn't get focus by browsers nature (i.e. button or\n     * active link).\n     */\n    protected get requiresExplicitTabIndex(): boolean;\n}\n"]}