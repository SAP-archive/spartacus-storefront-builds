{"version":3,"file":"auto-focus.directive.d.ts","sources":["auto-focus.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ElementRef } from '@angular/core';\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\nimport { AutoFocusService } from './auto-focus.service';\n/**\n * Directive that focus the first nested _focusable_ element based on state and configuration:\n *\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\n * 4. first focusable element\n * 5. the host element, in case the configured CSS selector is `:host`.\n *\n * Example configurations:\n *\n * `<div cxAutoFocus>[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\n *\n */\nexport declare class AutoFocusDirective extends EscapeFocusDirective implements AfterViewInit {\n    protected elementRef: ElementRef;\n    protected service: AutoFocusService;\n    /** The AutoFocusDirective will be using autofocus by default  */\n    protected defaultConfig: AutoFocusConfig;\n    protected config: AutoFocusConfig;\n    constructor(elementRef: ElementRef, service: AutoFocusService);\n    /**\n     * Focus the element explicitly if it was focussed before.\n     */\n    ngAfterViewInit(): void;\n    /**\n     * Mimic the focus without setting the actual focus on the host. The first\n     * focusable child element will be focussed.\n     */\n    handleFocus(event?: KeyboardEvent): void;\n    /**\n     * Helper function to get the first focusable child element\n     */\n    protected get hasPersistedFocus(): boolean;\n    /**\n     * Helper function to indicate whether we should use autofocus for the\n     * child elements.\n     */\n    protected get shouldAutofocus(): boolean;\n    /**\n     * Helper function to get the first focusable child element.\n     *\n     * We keep this private to not polute the API.\n     */\n    private get firstFocusable();\n}\n"]}