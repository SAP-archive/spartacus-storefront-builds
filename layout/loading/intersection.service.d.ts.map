{"version":3,"file":"intersection.service.d.ts","sources":["/home/travis/build/SAP/cloud-commerce-spartacus-storefront/dist/storefrontlib/layout/loading/intersection.service.d.ts"],"sourcesContent":["import { Observable } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\nexport declare class IntersectionService {\n    protected config: LayoutConfig;\n    constructor(config: LayoutConfig);\n    /**\n     * Returns an Observable that emits only once a boolean value whenever\n     * the given element has shown in the view port.\n     *\n     * The returned obervable will only emit the first value. The\n     * observable must be cleaned up either way, since the value might never emit; it\n     *  depends on whether the element appears in the view port.\n     */\n    isIntersected(element: HTMLElement, options?: IntersectionOptions): Observable<boolean>;\n    /**\n     * Indicates whenever the element intersects the view port. An optional margin\n     * is used to intersects before the element shows up in the viewport.\n     * A value is emitted each time the element intersects.\n     *\n     * This is private for now, but could be exposed as a public API\n     * to introduce additional (css) render effects to the UI.\n     */\n    private intersects;\n    private getRootMargin;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;AAsBA;"}