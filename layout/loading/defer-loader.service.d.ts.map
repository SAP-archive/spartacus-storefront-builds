{"version":3,"file":"defer-loader.service.d.ts","sources":["/home/travis/build/SAP/cloud-commerce-spartacus-storefront/dist/storefrontlib/layout/loading/defer-loader.service.d.ts"],"sourcesContent":["import { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\nexport declare class DeferLoaderService {\n    private platformId;\n    protected config: LayoutConfig;\n    protected intersectionService: IntersectionService;\n    globalLoadStrategy: DeferLoadingStrategy;\n    constructor(platformId: Object, config: LayoutConfig, intersectionService: IntersectionService);\n    /**\n     * Defer loading till the element intersects the viewport.\n     *\n     * We evalutes whether we instantly load the element for different reasons:\n     * - we run in SSR mode\n     * - there's no global strategy given\n     * - the global loading strategy is set to INSTANT loading,\n     *   and the loading strategy in the given is not set to DEFER\n     * - the loading strategy in the given options is set to INSTANT\n     */\n    load(element: HTMLElement, options?: IntersectionOptions): Observable<boolean>;\n    private shouldLoadInstantly;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;AAkBA;"}