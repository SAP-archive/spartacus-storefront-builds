{"version":3,"file":"direction.service.d.ts","sources":["direction.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { OnDestroy } from '@angular/core';\nimport { ConfigInitializerService, LanguageService, WindowRef } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { Direction, DirectionMode } from './config/direction.model';\n/**\n * The `DirectionService` can be used to add the direction to the overall storefront or individual elements.\n * By default, the direction is added to the `html` element (i.e. `<html dir=\"ltr\">`). The API of this service\n * does however provide methods to add direction to individual elements if needed.\n *\n * The direction is configurable and allows for language driven direction configuration.\n *\n * To react to the active language, the service subscribes to the active language in the initialize method. This\n * is called from an APP_INITIALIZER method and should only happen once.\n */\nexport declare class DirectionService implements OnDestroy {\n    protected configInit: ConfigInitializerService;\n    protected languageService: LanguageService;\n    protected winRef: WindowRef;\n    protected config: Direction;\n    protected startsDetecting: boolean;\n    protected subscription: Subscription;\n    constructor(configInit: ConfigInitializerService, languageService: LanguageService, winRef: WindowRef);\n    /**\n     * Initializes the layout direction for the storefront.\n     */\n    initialize(): Promise<void>;\n    /**\n     * Observes the _active_ language and set the required direction for the given language.\n     * The method is guarded to ensure that the active language is observed only once.\n     */\n    protected detect(): void;\n    /**\n     * Sets the direction attribute for the given element. If the direction is undefined, the `dir`\n     * attribute is removed.\n     */\n    setDirection(el: HTMLElement, direction: DirectionMode): void;\n    /**\n     * Gets the `DirectionMode` for the given language isoCode. The language isoCode is compared\n     * to the configured list of languages(`direction.rtlLanguages` vs `direction.ltrLanguages`).\n     *\n     * If no language is given, or no language mapping could be found, we fallback to the default\n     * `direction.mode`.\n     */\n    getDirection(language?: string): DirectionMode;\n    ngOnDestroy(): void;\n}\n"]}