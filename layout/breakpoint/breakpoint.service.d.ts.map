{"version":3,"file":"breakpoint.service.d.ts","sources":["breakpoint.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT, LayoutBreakPoints, LayoutConfig } from '../config/layout-config';\n/**\n * The `BreakpointService` resolves the various screen sizes that are used in\n * the storefront. The screen sizes are globally configurable based on your\n * layout requirements. You can adjust the screen sizes by setting the minimum\n * and/or maximum size for a breakpoint, as well as extending the configuration\n * with new screens.\n *\n * By default, the `BreakpointService` is based on the breakpoints from the\n * Bootstrap ui library:\n * - `xs`: 0 - 576px\n * - `sm`: 576px - 768px\n * - `md`: 768px - 992px\n * - `lg`: 992px - 1200px\n * - `xl`: > 1200px\n */\nexport declare class BreakpointService {\n    protected winRef: WindowRef;\n    protected layoutConfig: LayoutConfig;\n    protected platform: any;\n    private _breakpoints;\n    breakpoint$: Observable<BREAKPOINT>;\n    constructor(winRef: WindowRef, layoutConfig: LayoutConfig, platform: any);\n    /**\n     * Returns the breakpoints for the storefront layout.\n     *\n     * The breakpoints are driven by the `LayoutConfig.breakpoints` and sorted based on\n     * the given screen size.\n     */\n    get breakpoints(): BREAKPOINT[];\n    /**\n     * Returns the _maximum_ size for the breakpoint, given by the `LayoutConfig.breakpoints`\n     * configuration.\n     */\n    getSize(breakpoint: BREAKPOINT): number;\n    /**\n     * Indicates whether the current screen size is smaller than the maximum size of the\n     * given breakpoint.\n     *\n     * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n     * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n     */\n    isDown(breakpoint: BREAKPOINT): Observable<boolean>;\n    /**\n     * Indicates whether the current screen size is larger than the minimum size of the\n     * given breakpoint.\n     *\n     * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n     * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n     */\n    isUp(breakpoint: BREAKPOINT): Observable<boolean>;\n    /**\n     * Indicates whether the given breakpoint fits in the current screen size.\n     */\n    isEqual(breakpoint: BREAKPOINT): Observable<boolean>;\n    /**\n     * Returns the fallback breakpoint in case no breakpoint can be resolved. This is\n     * typically the case when we're on SSR without an actual window.\n     *\n     * Returns the smallest screen size (mobile first).\n     */\n    protected get fallbackBreakpoint(): BREAKPOINT;\n    /**\n     * Resolves the breakpoints and sorts them according to the configured size.\n     *\n     * The sort order is by small to large screens.\n     */\n    protected resolveBreakpointsFromConfig(): BREAKPOINT[];\n    /**\n     * Returns the _maximum_ size for the breakpoint, given by the\n     * `LayoutConfig.breakpoints` configuration. We will try to resolve the\n     * max size form the current breakpoint, but if this is not available, we\n     * resolve it form the next breakpoint\n     */\n    protected getMaxSize(breakpoint: BREAKPOINT): number;\n    protected getMinSize(breakpoint: BREAKPOINT): number;\n    /**\n     * Returns a `BREAKPOINT` for the given window size.\n     *\n     * This method tries to match the closest breakpoint for the give\n     * window size. We'll fallback to the `largest` size in case the window\n     * is greater than the largest configurable breakpoint.\n     */\n    protected getBreakpoint(windowWidth: number): BREAKPOINT;\n    /**\n     * Helper method to return the breakpoint configuration.\n     */\n    protected get config(): LayoutBreakPoints;\n}\n"]}