{"version":3,"file":"breakpoint.service.d.ts","sources":["breakpoint.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\nexport declare class BreakpointService {\n    private winRef;\n    private config;\n    constructor(winRef: WindowRef, config: LayoutConfig);\n    get breakpoint$(): Observable<BREAKPOINT>;\n    /**\n     * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\n     * configuration. If no configuration is available for the given breakpoint, the\n     * method will return the default values:\n     * - xs: 567\n     * - sm: 768\n     * - md: 992\n     * - lg: 1200\n     */\n    getSize(breakpoint: BREAKPOINT): number;\n    /**\n     * Returns all available breakpoints for the system.\n     */\n    get breakpoints(): BREAKPOINT[];\n    /**\n     * Indicates whether the current screen size is smaller than the maximum size of the\n     * given breakpoint.\n     *\n     * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n     * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n     */\n    isDown(breakpoint: BREAKPOINT): Observable<boolean>;\n    /**\n     * Indicates whether the current screen size is larger than the minimum size of the\n     * given breakpoint.\n     *\n     * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n     * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n     */\n    isUp(breakpoint: BREAKPOINT): Observable<boolean>;\n    /**\n     * Indicates whether the current screen size fits to the given breakpoint\n     */\n    isEqual(breakpoint: BREAKPOINT): Observable<boolean>;\n    protected getBreakpoint(windowWidth: number): BREAKPOINT;\n    protected getClosest(windowWidth?: number): BREAKPOINT;\n    get window(): Window;\n}\n"]}