{"version":3,"file":"layout-config.d.ts","sources":["layout-config.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { DeferLoadingStrategy } from '@spartacus/core';\nimport { LaunchConfig } from '../launch-dialog/index';\n/**\n * The `BREAKPOINT` typing defaults to five default screen names:\n * xs, sm, md, lg, xl.\n *\n * The type can be extended to allow for custom screens, such as XLL or `tablet`.\n *\n * While the screen names are fully configurable, other features might have\n * pre-configured layout settings per screen. Page layouts or table configurations,\n * for example, are driven by screen size. In case you change the screen size or\n * introduce new screen names, you might loose out on these configurations.\n */\nexport declare enum BREAKPOINT {\n    xs = \"xs\",\n    sm = \"sm\",\n    md = \"md\",\n    lg = \"lg\",\n    xl = \"xl\"\n}\nexport declare type LayoutSections = 'header' | 'footer' | 'LandingPage2Template' | string;\nexport declare type SlotConfig = {\n    /** The cms page slots are mapped by the `slot.position`. */\n    slots?: string[];\n    /**\n     * The page fold identifies the last expected page slot above-the-fold.\n     * It's perfectly fine to specify this by indication, but keep in mind that\n     * a more precise indication will gain a more positive impact on performance.\n     */\n    pageFold?: string;\n};\nexport declare type SlotGroup = {\n    /** The page slot configuration for large screens */\n    [BREAKPOINT.lg]?: SlotConfig;\n    /** The page slot configuration for medium screens */\n    [BREAKPOINT.md]?: SlotConfig;\n    /** The page slot configuration for small screens */\n    [BREAKPOINT.sm]?: SlotConfig;\n    /** The page slot configuration for extra small screens */\n    [BREAKPOINT.xs]?: SlotConfig;\n};\nexport declare type LayoutSlotConfig = {\n    [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\nexport interface BreakPoint {\n    /**\n     * The minimum screen width.\n     */\n    min?: number;\n    /**\n     * The minimum screen width.\n     */\n    max?: number;\n}\n/**\n * The `LayoutBreakPoints` can be used to configure the size of a specific screen. The screen\n * are defined by breakpoints, with a min and/or max value. The breakpoint size is in pixels,\n * hence a numeric value is expected.\n */\nexport declare type LayoutBreakPoints = {\n    [t in BREAKPOINT]?: number | BreakPoint;\n};\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breakpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport declare abstract class LayoutConfig {\n    /**\n     * The breakpoint configuration is used to defined various screens. A specific screen name can\n     * be used to further configure certain features, such as the overall layout or specific\n     * component configurations.\n     */\n    breakpoints?: LayoutBreakPoints;\n    layoutSlots?: LayoutSlotConfig;\n    /**\n     * Deferred loading is a technique to hold of with the loading / creation\n     * of DOM elements which are not not in the initial view port.\n     * This technique wil increase performance.\n     */\n    deferredLoading?: {\n        /**\n         * The global strategy will be used as a fallback strategy for all DOM creation,\n         * but can be overridden by local configuration, i.e. for cms components.\n         */\n        strategy?: DeferLoadingStrategy;\n        /**\n         * The intersection margin contains the offset used by the Intersection Observer\n         * to observe elements outside the view port.\n         *\n         * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n         */\n        intersectionMargin?: string;\n    };\n    launch?: LaunchConfig;\n}\n"]}