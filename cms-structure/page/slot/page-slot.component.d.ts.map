{"version":3,"file":"page-slot.component.d.ts","sources":["page-slot.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, OnDestroy, OnInit, Renderer2 } from '@angular/core';\nimport { CmsService, ContentSlotComponentData, ContentSlotData, DynamicAttributeService } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\nimport { CmsComponentsService } from '../../services/cms-components.service';\n/**\n * The `PageSlotComponent` is used to render the CMS page slot and it's components.\n *\n * The Page slot host element will be supplemented with css classes so that the layout\n * can be fully controlled by customers:\n * - The page slot _position_ is added as a css class by default.\n * - The `cx-pending` is added for as long as the slot hasn't start loading.\n * - The `page-fold` style class is added for the page slot which is configured as the page fold.\n */\nexport declare class PageSlotComponent implements OnInit, OnDestroy {\n    protected cmsService: CmsService;\n    protected dynamicAttributeService: DynamicAttributeService;\n    protected renderer: Renderer2;\n    protected elementRef: ElementRef;\n    protected cmsComponentsService: CmsComponentsService;\n    protected cd: ChangeDetectorRef;\n    /**\n     * The position represents the unique key for a page slot on a single page, but can\n     * be reused cross pages.\n     *\n     * The position is used to find the CMS components for the page slot. It is also\n     * added as an additional CSS class so that layout can be applied.\n     */\n    set position(value: string);\n    get position(): string;\n    /**\n     * Maintains css classes introduced by the host and adds additional classes.\n     */\n    class: string;\n    /**\n     * Indicates that the page slot is the last page slot above the fold.\n     */\n    isPageFold: boolean;\n    /**\n     * Indicates that the components of the page slot haven't been loaded as long\n     * as the isPending state is true.\n     */\n    isPending: boolean;\n    /**\n     * Indicates that the page slot doesn't contain any components. This is no\n     * longer used in spartacus, but kept for backwards compatibility.\n     */\n    hasComponents: boolean;\n    protected position$: BehaviorSubject<string>;\n    components: ContentSlotComponentData[];\n    protected slot$: Observable<ContentSlotData>;\n    /** Observes the components for the given page slot. */\n    components$: Observable<ContentSlotComponentData[]>;\n    protected subscription: Subscription;\n    /** Keeps track of the pending components that must be loaded for the page slot */\n    private pendingComponentCount;\n    /** Tracks the last used position, in case the page slot is used dynamically */\n    private lastPosition;\n    constructor(cmsService: CmsService, dynamicAttributeService: DynamicAttributeService, renderer: Renderer2, elementRef: ElementRef, cmsComponentsService: CmsComponentsService, cd: ChangeDetectorRef);\n    ngOnInit(): void;\n    protected decorate(slot: ContentSlotData): void;\n    /**\n     * Sets the pending count for the page slot components. Once all pending components are\n     * loaded, the `isPending` flag is updated, so that the associated class can be updated\n     */\n    protected set pending(count: number);\n    protected get pending(): number;\n    isLoaded(loadState: boolean): void;\n    /**\n     * The `DeferLoadingStrategy` indicates whether the component should be\n     * rendered instantly or whether it should be deferred.\n     */\n    getComponentDeferOptions(componentType: string): IntersectionOptions;\n    protected isDistinct(old: ContentSlotData, current: ContentSlotData): boolean;\n    private addSmartEditSlotClass;\n    ngOnDestroy(): void;\n}\n"]}