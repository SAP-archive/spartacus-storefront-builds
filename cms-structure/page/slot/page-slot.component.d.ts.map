{"version":3,"file":"page-slot.component.d.ts","sources":["/home/travis/build/SAP/cloud-commerce-spartacus-storefront/dist/storefrontlib/cms-structure/page/slot/page-slot.component.d.ts"],"sourcesContent":["import { ElementRef, OnDestroy, OnInit, Renderer2 } from '@angular/core';\nimport { CmsConfig, CmsService, ContentSlotComponentData, ContentSlotData, DynamicAttributeService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\nexport declare class PageSlotComponent implements OnInit, OnDestroy {\n    protected cmsService: CmsService;\n    protected dynamicAttributeService: DynamicAttributeService;\n    protected renderer: Renderer2;\n    protected hostElement: ElementRef;\n    protected config?: CmsConfig;\n    /**\n     * The position is used to find the CMS page slot (and optional outlet)\n     * that is rendered in the PageSlotComponent. Furthermore, the position\n     * is added as a CSS class name to the host element.\n     */\n    set position(position: string);\n    get position(): string;\n    isPending: boolean;\n    hasComponents: boolean;\n    isPageFold: boolean;\n    private pendingComponentCount;\n    readonly position$: BehaviorSubject<string>;\n    /**\n     * observable with `ContentSlotData` for the current position\n     *\n     * @deprecated we'll stop supporting this property in 2.0 as\n     * it is not used separately.\n     */\n    readonly slot$: Observable<ContentSlotData>;\n    readonly components$: Observable<ContentSlotComponentData[]>;\n    private subscription;\n    constructor(cmsService: CmsService, dynamicAttributeService: DynamicAttributeService, renderer: Renderer2, hostElement: ElementRef, config: CmsConfig);\n    /**\n     * @deprecated since version 1.4\n     * Use constructor(cmsService: CmsService, dynamicAttributeService: DynamicAttributeService, renderer: Renderer2, hostElement: ElementRef, config?: CmsConfig) instead\n     */\n    constructor(cmsService: CmsService, dynamicAttributeService: DynamicAttributeService, renderer: Renderer2, hostElement: ElementRef);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Is triggered when a component is added to the view.\n     * We use this information to dropthe `is-pending` class from the page slot\n     * when all nested components have been added.\n     */\n    isLoaded(loadState: boolean): void;\n    getComponentDeferOptions(componentType: string): IntersectionOptions;\n    /**\n     * The `DeferLoadingStrategy` indicates whether component rendering\n     * should be deferred.\n     */\n    private getDeferLoadingStrategy;\n    private addSmartEditSlotClass;\n    private addSmartEditContract;\n}\n"],"names":[],"mappings":"AAAA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;"}