import { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';
import { CmsActivatedRouteSnapshot, CmsService, ProtectedRoutesGuard, RoutingService, SemanticPathService } from '@spartacus/core';
import { Observable } from 'rxjs';
import { CmsGuardsService } from '../services/cms-guards.service';
import { CmsI18nService } from '../services/cms-i18n.service';
import { CmsRoutesService } from '../services/cms-routes.service';
import * as ɵngcc0 from '@angular/core';
export declare class CmsPageGuard implements CanActivate {
    protected routingService: RoutingService;
    protected cmsService: CmsService;
    private cmsRoutes;
    private cmsI18n;
    private cmsGuards;
    protected semanticPathService: SemanticPathService;
    protected protectedRoutesGuard?: ProtectedRoutesGuard;
    static guardName: string;
    constructor(routingService: RoutingService, cmsService: CmsService, cmsRoutes: CmsRoutesService, cmsI18n: CmsI18nService, cmsGuards: CmsGuardsService, semanticPathService: SemanticPathService, protectedRoutesGuard: ProtectedRoutesGuard);
    /**
     * @deprecated since version 1.2.0
     * Use constructor with more dependencies and make them all required.
     *
     * TODO(issue:4646) deprecated since version 1.2.0
     */
    constructor(routingService: RoutingService, cmsService: CmsService, cmsRoutes: CmsRoutesService, cmsI18n: CmsI18nService, cmsGuards: CmsGuardsService, semanticPathService: SemanticPathService);
    canActivate(route: CmsActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree>;
    private getCmsPage;
    private resolveCmsPageLogic;
    private handleNotFoundPage;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CmsPageGuard, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21zLXBhZ2UuZ3VhcmQuZC50cyIsInNvdXJjZXMiOlsiY21zLXBhZ2UuZ3VhcmQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQU1BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUJBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FuQWN0aXZhdGUsIFJvdXRlclN0YXRlU25hcHNob3QsIFVybFRyZWUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQ21zQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgQ21zU2VydmljZSwgUHJvdGVjdGVkUm91dGVzR3VhcmQsIFJvdXRpbmdTZXJ2aWNlLCBTZW1hbnRpY1BhdGhTZXJ2aWNlIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENtc0d1YXJkc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9jbXMtZ3VhcmRzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ21zSTE4blNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9jbXMtaTE4bi5zZXJ2aWNlJztcbmltcG9ydCB7IENtc1JvdXRlc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9jbXMtcm91dGVzLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ21zUGFnZUd1YXJkIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUge1xuICAgIHByb3RlY3RlZCByb3V0aW5nU2VydmljZTogUm91dGluZ1NlcnZpY2U7XG4gICAgcHJvdGVjdGVkIGNtc1NlcnZpY2U6IENtc1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBjbXNSb3V0ZXM7XG4gICAgcHJpdmF0ZSBjbXNJMThuO1xuICAgIHByaXZhdGUgY21zR3VhcmRzO1xuICAgIHByb3RlY3RlZCBzZW1hbnRpY1BhdGhTZXJ2aWNlOiBTZW1hbnRpY1BhdGhTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBwcm90ZWN0ZWRSb3V0ZXNHdWFyZD86IFByb3RlY3RlZFJvdXRlc0d1YXJkO1xuICAgIHN0YXRpYyBndWFyZE5hbWU6IHN0cmluZztcbiAgICBjb25zdHJ1Y3Rvcihyb3V0aW5nU2VydmljZTogUm91dGluZ1NlcnZpY2UsIGNtc1NlcnZpY2U6IENtc1NlcnZpY2UsIGNtc1JvdXRlczogQ21zUm91dGVzU2VydmljZSwgY21zSTE4bjogQ21zSTE4blNlcnZpY2UsIGNtc0d1YXJkczogQ21zR3VhcmRzU2VydmljZSwgc2VtYW50aWNQYXRoU2VydmljZTogU2VtYW50aWNQYXRoU2VydmljZSwgcHJvdGVjdGVkUm91dGVzR3VhcmQ6IFByb3RlY3RlZFJvdXRlc0d1YXJkKTtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuMi4wXG4gICAgICogVXNlIGNvbnN0cnVjdG9yIHdpdGggbW9yZSBkZXBlbmRlbmNpZXMgYW5kIG1ha2UgdGhlbSBhbGwgcmVxdWlyZWQuXG4gICAgICpcbiAgICAgKiBUT0RPKGlzc3VlOjQ2NDYpIGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjIuMFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHJvdXRpbmdTZXJ2aWNlOiBSb3V0aW5nU2VydmljZSwgY21zU2VydmljZTogQ21zU2VydmljZSwgY21zUm91dGVzOiBDbXNSb3V0ZXNTZXJ2aWNlLCBjbXNJMThuOiBDbXNJMThuU2VydmljZSwgY21zR3VhcmRzOiBDbXNHdWFyZHNTZXJ2aWNlLCBzZW1hbnRpY1BhdGhTZXJ2aWNlOiBTZW1hbnRpY1BhdGhTZXJ2aWNlKTtcbiAgICBjYW5BY3RpdmF0ZShyb3V0ZTogQ21zQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QpOiBPYnNlcnZhYmxlPGJvb2xlYW4gfCBVcmxUcmVlPjtcbiAgICBwcml2YXRlIGdldENtc1BhZ2U7XG4gICAgcHJpdmF0ZSByZXNvbHZlQ21zUGFnZUxvZ2ljO1xuICAgIHByaXZhdGUgaGFuZGxlTm90Rm91bmRQYWdlO1xufVxuIl19