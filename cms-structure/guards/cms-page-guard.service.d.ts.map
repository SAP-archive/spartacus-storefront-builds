{"version":3,"file":"cms-page-guard.service.d.ts","sources":["cms-page-guard.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot, CmsService, Page, PageContext, SemanticPathService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentsService } from '../services/cms-components.service';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n/**\n * Helper service for `CmsPageGuard`\n */\nexport declare class CmsPageGuardService {\n    protected semanticPathService: SemanticPathService;\n    protected cmsService: CmsService;\n    protected cmsRoutes: CmsRoutesService;\n    protected cmsI18n: CmsI18nService;\n    protected cmsGuards: CmsGuardsService;\n    protected cmsComponentsService: CmsComponentsService;\n    constructor(semanticPathService: SemanticPathService, cmsService: CmsService, cmsRoutes: CmsRoutesService, cmsI18n: CmsI18nService, cmsGuards: CmsGuardsService, cmsComponentsService: CmsComponentsService);\n    /**\n     * Takes CMS components types in the current CMS page, triggers (configurable) side effects and returns a boolean - whether the route can be activated.\n     *\n     * Based on `cmsComponents` config for the components in the page:\n     * - Evaluates components' guards; if one of them emits false or UrlTree - the route cannot be activated or redirects to the given UrlTree, respectively.\n     * - If all components' guards emitted true, then the route can be activated\n     * - Then we trigger loading of configured i18n chunks in parallel\n     * - And we register the configured children routes of cms components\n     *\n     * @param pageContext current cms page context\n     * @param pageData cms page data\n     * @param route activated route snapshot\n     * @param state router state snapshot\n     *\n     * @returns boolean observable - whether the route can be activated\n     */\n    canActivatePage(pageContext: PageContext, pageData: Page, route: CmsActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree>;\n    /**\n     * Activates the \"NOT FOUND\" cms page.\n     *\n     * It loads cms page data for the \"NOT FOUND\" page and puts it in the state of the the requested page label.\n     * Then it processes its CMS components with the method `canActivatePage()` of this service. For more, see its docs.\n     */\n    canActivateNotFoundPage(pageContext: PageContext, route: CmsActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree>;\n}\n"]}