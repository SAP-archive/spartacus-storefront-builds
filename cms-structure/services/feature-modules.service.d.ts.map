{"version":3,"file":"feature-modules.service.d.ts","sources":["feature-modules.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { NgModuleRef, OnDestroy } from '@angular/core';\nimport { CmsComponentMapping, ConfigInitializerService, LazyModulesService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n/**\n * Service responsible for resolving cms config based feature modules.\n */\nexport declare class FeatureModulesService implements OnDestroy {\n    protected configInitializer: ConfigInitializerService;\n    protected lazyModules: LazyModulesService;\n    private featureModulesConfig?;\n    private componentFeatureMap;\n    private features;\n    constructor(configInitializer: ConfigInitializerService, lazyModules: LazyModulesService);\n    private initFeatureMap;\n    /**\n     * Check if there is feature module configuration that covers specified\n     * component type\n     */\n    hasFeatureFor(componentType: string): boolean;\n    /**\n     * Return full CmsComponent mapping defined in feature module\n     */\n    getCmsMapping(componentType: string): Observable<CmsComponentMapping>;\n    /**\n     * Resolves feature module for provided component type\n     *\n     * @param componentType\n     */\n    getModule(componentType: string): NgModuleRef<any> | undefined;\n    /**\n     * Resolve feature based on feature name, if feature was not yet resolved\n     *\n     * It will first resolve all module dependencies if defined\n     */\n    private resolveFeature;\n    /**\n     * Initialize feature module by returning feature instance\n     */\n    private resolveFeatureModule;\n    /**\n     * Returns configuration provided in feature module\n     */\n    private resolveFeatureConfiguration;\n    ngOnDestroy(): void;\n}\n"]}