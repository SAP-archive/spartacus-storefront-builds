{"version":3,"file":"outlet.directive.d.ts","sources":["outlet.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ComponentRef, EmbeddedViewRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletRendererService } from './outlet-renderer.service';\nimport { OutletPosition } from './outlet.model';\nimport { OutletService } from './outlet.service';\nexport declare class OutletDirective implements OnDestroy, OnChanges {\n    private vcr;\n    private templateRef;\n    private outletService;\n    private deferLoaderService;\n    private outletRendererService;\n    private renderedTemplate;\n    renderedComponents: Map<OutletPosition, (ComponentRef<any> | EmbeddedViewRef<any>)[]>;\n    cxOutlet: string;\n    cxOutletContext: any;\n    /**\n     * Defers loading options for the the templates of this outlet.\n     */\n    cxOutletDefer: IntersectionOptions;\n    loaded: EventEmitter<Boolean>;\n    subscription: Subscription;\n    constructor(vcr: ViewContainerRef, templateRef: TemplateRef<any>, outletService: OutletService, deferLoaderService: DeferLoaderService, outletRendererService: OutletRendererService);\n    render(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    private deferLoading;\n    private build;\n    private buildOutlet;\n    private create;\n    /**\n     * Returns injector with OutletContextData that can be injected to the component\n     * rendered in the outlet\n     */\n    private getComponentInjector;\n    /**\n     * Returns the closest `HtmlElement`, by iterating over the\n     * parent nodes of the given element.\n     *\n     * We avoid traversing the parent _elements_, as this is blocking\n     * ie11 implementations. One of the spare exclusions we make to not\n     * supporting ie11.\n     *\n     * @param element\n     */\n    private getHostElement;\n    ngOnDestroy(): void;\n}\n"]}