{"version":3,"file":"consent-management.component.d.ts","sources":["consent-management.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnDestroy, OnInit } from '@angular/core';\nimport { AnonymousConsentsConfig, AnonymousConsentsService, AuthService, ConsentTemplate, GlobalMessageService, UserConsentService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nexport declare class ConsentManagementComponent implements OnInit, OnDestroy {\n    protected userConsentService: UserConsentService;\n    protected globalMessageService: GlobalMessageService;\n    protected anonymousConsentsConfig: AnonymousConsentsConfig;\n    protected anonymousConsentsService: AnonymousConsentsService;\n    protected authService: AuthService;\n    private subscriptions;\n    private allConsentsLoading;\n    templateList$: Observable<ConsentTemplate[]>;\n    loading$: Observable<boolean>;\n    requiredConsents: string[];\n    constructor(userConsentService: UserConsentService, globalMessageService: GlobalMessageService, anonymousConsentsConfig: AnonymousConsentsConfig, anonymousConsentsService: AnonymousConsentsService, authService: AuthService);\n    ngOnInit(): void;\n    private consentListInit;\n    private hideAnonymousConsents;\n    private giveConsentInit;\n    private withdrawConsentInit;\n    private consentsExists;\n    onConsentChange({ given, template, }: {\n        given: boolean;\n        template: ConsentTemplate;\n    }): void;\n    private onConsentGivenSuccess;\n    private onConsentWithdrawnSuccess;\n    rejectAll(templates?: ConsentTemplate[]): void;\n    private setupWithdrawalStream;\n    allowAll(templates?: ConsentTemplate[]): void;\n    private setupGiveStream;\n    private isRequiredConsent;\n    ngOnDestroy(): void;\n}\n"]}