{"version":3,"file":"asm-enabler.service.d.ts","sources":["/home/travis/build/SAP/cloud-commerce-spartacus-storefront/dist/storefrontlib/cms-components/asm/services/asm-enabler.service.d.ts"],"sourcesContent":["import { Location } from '@angular/common';\nimport { ComponentFactory, ComponentFactoryResolver } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { OutletService } from '../../../cms-structure/index';\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\nexport declare class AsmEnablerService {\n    protected location: Location;\n    protected winRef: WindowRef;\n    protected componentFactoryResolver: ComponentFactoryResolver;\n    protected outletService: OutletService<ComponentFactory<any>>;\n    /** indicates whether the ASM UI has been added already */\n    private isUiAdded;\n    constructor(location: Location, winRef: WindowRef, componentFactoryResolver: ComponentFactoryResolver, outletService: OutletService<ComponentFactory<any>>);\n    /**\n     * Loads the ASM UI if needed. The ASM UI will be added based on the\n     * existence of a URL parameter or previous usage given by local storage.\n     */\n    load(): void;\n    /**\n     * Indicates whether the ASM module is enabled.\n     */\n    private isEnabled;\n    /**\n     * Indicates whether ASM is launched through the URL,\n     * using the asm flag in the URL.\n     */\n    private isLaunched;\n    /**\n     * Evaluates local storage where we persist the usage of ASM.\n     */\n    private isUsedBefore;\n    /**\n     * Adds the ASM UI by using the `cx-storefront` outlet.\n     */\n    private addUi;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;"}