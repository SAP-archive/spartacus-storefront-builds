{"version":3,"file":"logout-guard.d.ts","sources":["logout-guard.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { CanActivate } from '@angular/router';\nimport { AuthService, CmsService, ProtectedRoutesService, RoutingService, SemanticPathService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n/**\n * Guards the _logout_ route.\n *\n * Takes care of routing the user to a logout page (if available) or redirects to\n * the homepage. If the homepage is protected, the user is redirected\n * to the login route instead.\n */\nexport declare class LogoutGuard implements CanActivate {\n    protected auth: AuthService;\n    protected cms: CmsService;\n    protected routing: RoutingService;\n    protected semanticPathService: SemanticPathService;\n    protected protectedRoutes: ProtectedRoutesService;\n    constructor(auth: AuthService, cms: CmsService, routing: RoutingService, semanticPathService: SemanticPathService, protectedRoutes: ProtectedRoutesService);\n    canActivate(): Observable<any>;\n    /**\n     * Whenever there is no specific \"logout\" page configured in the CMS,\n     * we redirect after the user is logged out.\n     *\n     * The user gets redirected to the homepage, unless the homepage is protected\n     * (in case of a closed shop). We'll redirect to the login page instead.\n     */\n    protected redirect(): void;\n    /**\n     * Log user out.\n     *\n     * This is delegated to the `AuthService`.\n     */\n    protected logout(): void;\n}\n"]}