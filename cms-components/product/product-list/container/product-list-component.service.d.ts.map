{"version":3,"file":"product-list-component.service.d.ts","sources":["product-list-component.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { ActivatedRoute, Router } from '@angular/router';\nimport { ActivatedRouterStateSnapshot, CurrencyService, LanguageService, ProductSearchPage, ProductSearchService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ProductListRouteParams, SearchCriteria } from './product-list.model';\n/**\n * The `ProductListComponentService` is used to search products. The service is used\n * on the Product Listing Page, for listing products and the facet navigation.\n *\n * The service exposes the product search results based on the category and search\n * route parameters. The route parameters are used to query products by the help of\n * the `ProductSearchService`.\n */\nexport declare class ProductListComponentService {\n    protected productSearchService: ProductSearchService;\n    protected routing: RoutingService;\n    protected activatedRoute: ActivatedRoute;\n    protected currencyService: CurrencyService;\n    protected languageService: LanguageService;\n    protected router: Router;\n    protected defaultPageSize: number;\n    protected readonly RELEVANCE_ALLCATEGORIES = \":relevance:allCategories:\";\n    constructor(productSearchService: ProductSearchService, routing: RoutingService, activatedRoute: ActivatedRoute, currencyService: CurrencyService, languageService: LanguageService, router: Router);\n    /**\n     * Emits the search results for the current search query.\n     *\n     * The `searchResults$` is _not_ concerned with querying, it only observes the\n     * `productSearchService.getResults()`\n     */\n    protected searchResults$: Observable<ProductSearchPage>;\n    /**\n     * Observes the route and performs a search on each route change.\n     *\n     * Context changes, such as language and currencies are also taken\n     * into account, so that the search is performed again.\n     */\n    protected searchByRouting$: Observable<ActivatedRouterStateSnapshot>;\n    /**\n     * This stream is used for the Product Listing and Product Facets.\n     *\n     * It not only emits search results, but also performs a search on every change\n     * of the route (i.e. route params or query params).\n     *\n     * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n     * so no longer the search is performed on route change.\n     */\n    readonly model$: Observable<ProductSearchPage>;\n    /**\n     * Expose the `SearchCriteria`. The search criteria are driven by the route parameters.\n     *\n     * This search route configuration is not yet configurable\n     * (see https://github.com/SAP/spartacus/issues/7191).\n     */\n    protected getCriteriaFromRoute(routeParams: ProductListRouteParams, queryParams: SearchCriteria): SearchCriteria;\n    /**\n     * Resolves the search query from the given `ProductListRouteParams`.\n     */\n    protected getQueryFromRouteParams({ query, categoryCode, brandCode, }: ProductListRouteParams): string;\n    /**\n     * Performs a search based on the given search criteria.\n     *\n     * The search is delegated to the `ProductSearchService`.\n     */\n    protected search(criteria: SearchCriteria): void;\n    /**\n     * Get items from a given page without using navigation\n     */\n    getPageItems(pageNumber: number): void;\n    /**\n     * Sort the search results by the given sort code.\n     */\n    sort(sortCode: string): void;\n    /**\n     * Routes to the next product listing page, using the given `queryParams`. The\n     * `queryParams` support sorting, pagination and querying.\n     *\n     * The `queryParams` are delegated to the Angular router `NavigationExtras`.\n     */\n    protected route(queryParams: SearchCriteria): void;\n    /**\n     * The site context is used to update the search query in case of a\n     * changing context. The context will typically influence the search data.\n     *\n     * We keep this private for now, as we're likely refactoring this in the next\n     * major version.\n     */\n    private get siteContext();\n}\n"]}