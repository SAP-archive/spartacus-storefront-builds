{"version":3,"file":"active-facets.component.d.ts","sources":["active-facets.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Breadcrumb } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FacetList } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n/**\n * Active facets render the applied facet values as a list of focusable buttons\n * which can be used to remove the applied facet value.\n */\nexport declare class ActiveFacetsComponent {\n    protected facetService: FacetService;\n    /** Active facets which are applied to the product results. */\n    facetList$: Observable<FacetList>;\n    /** Configurable icon which is used for the active facet close button */\n    closeIcon: ICON_TYPE;\n    constructor(facetService: FacetService);\n    getLinkParams(facet: Breadcrumb): {\n        [key: string]: string;\n    };\n    /**\n     * The focus key is used to persist the focus on the facet when the DOM is being\n     * recreated. We only apply the focus key for the given _active_ facet when there\n     * the original facets is not available. This happens for non multi-valued facets.\n     *\n     * With this approach, the we keep the focus, either at the facet list or on the\n     * active facets.\n     */\n    getFocusKey(facetList: FacetList, facet: Breadcrumb): string;\n}\n"]}