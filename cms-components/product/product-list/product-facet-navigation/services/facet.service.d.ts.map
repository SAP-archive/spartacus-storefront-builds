{"version":3,"file":"facet.service.d.ts","sources":["facet.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Facet } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { FacetCollapseState, FacetList } from '../facet.model';\nimport { ProductFacetService } from './product-facet.service';\n/**\n * Provides access to the facets as well as their UI state. The UI state\n * represents user related changes on the facets, such as expanding or\n * collapsing a facet group or expanding the number of _visible_ facet values.\n */\nexport declare class FacetService {\n    protected productFacetService: ProductFacetService;\n    /**\n     * An internal map where we keep the UI state of the facets.\n     */\n    protected facetState: Map<string, BehaviorSubject<FacetCollapseState>>;\n    constructor(productFacetService: ProductFacetService);\n    /**\n     * Observes the facets for the given page and configures the initial UI state.\n     *\n     * Facets are configured on each emission so that we keep the facet UI state.\n     * This is mainly done to keep the state during usage of the facet, but also\n     * benefitial when the facets are rebuild while using them.\n     */\n    facetList$: Observable<FacetList>;\n    /**\n     * Returns the observed UI state for the facet.\n     *\n     * The state is initialized using the `initialize` method.\n     */\n    getState(facet: Facet): Observable<FacetCollapseState>;\n    /**\n     * Returns the UI state for the facet.\n     *\n     * The state is initialized using the `initialize` method.\n     */\n    protected getStateSnapshot(facet: Facet): FacetCollapseState;\n    /**\n     * Toggles the facet expanded state. If the expanded state becomes false,\n     * the visible values will decrease to the top values only.\n     *\n     * If the optional value argument is provided the expanded state will be set\n     * to this value, regardless of the current `expanded` state.\n     */\n    toggle(facet: Facet, isExpanded: boolean): void;\n    /**\n     * Increases the visible values to the maximum values of the facet.\n     */\n    increaseVisibleValues(facet: Facet): void;\n    /**\n     * Decreases the visible values to the topValueCount.\n     *\n     * The topValueCount defaults to 6, but can be controlled in\n     * the backend as well.\n     */\n    decreaseVisibleValues(facet: Facet): void;\n    /**\n     * Persists the facet state and initializes the default values for the top\n     * and max visible values.\n     */\n    protected initialize(facet: Facet): void;\n    /**\n     * Updates the state of the facet in the local facet map.\n     */\n    protected updateState(facet: Facet, property: FacetCollapseState): void;\n    protected hasState(facet: Facet): boolean;\n    getLinkParams(query: string): {\n        [key: string]: string;\n    };\n}\n"]}