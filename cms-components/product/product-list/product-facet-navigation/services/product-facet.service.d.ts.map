{"version":3,"file":"product-facet.service.d.ts","sources":["product-facet.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { ActivatedRouterStateSnapshot, ProductSearchPage, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ProductListComponentService } from '../../container/product-list-component.service';\nimport { FacetList } from '../facet.model';\n/**\n * Provides access to all the facets and active facets for the Product Listing Page.\n */\nexport declare class ProductFacetService {\n    protected routing: RoutingService;\n    protected productListComponentService: ProductListComponentService;\n    protected readonly routeState$: Observable<ActivatedRouterStateSnapshot>;\n    protected readonly searchResult$: Observable<ProductSearchPage>;\n    constructor(routing: RoutingService, productListComponentService: ProductListComponentService);\n    /**\n     * Observes the facets and active facets for the given page. The facet data\n     * is provided in a `FacetList`.\n     */\n    readonly facetList$: Observable<FacetList>;\n    /**\n     * Filters the current result by verifying if the result is related to the page.\n     * This is done to avoid a combination of the next page and the current search results.\n     */\n    protected filterForPage(state: ActivatedRouterStateSnapshot, page: ProductSearchPage): boolean;\n    private mapResults;\n    /**\n     * filter breadcrumbs which are not actively selected\n     * but coming from the route navigation\n     */\n    private filterBreadcrumbs;\n    /**\n     * Indicates whether the breadcrumb is related to navigation parameters,\n     * since either the category or brand code should match those codes.\n     */\n    private hasBreadcrumb;\n}\n"]}