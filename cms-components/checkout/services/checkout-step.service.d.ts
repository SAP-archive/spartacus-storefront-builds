import { ActivatedRoute } from '@angular/router';
import { RoutingConfigService, RoutingService } from '@spartacus/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';
import { CheckoutConfigService } from './checkout-config.service';
import * as ɵngcc0 from '@angular/core';
export declare class CheckoutStepService {
    protected routingService: RoutingService;
    protected checkoutConfigService: CheckoutConfigService;
    protected routingConfigService: RoutingConfigService;
    allSteps: CheckoutStep[];
    readonly steps$: BehaviorSubject<CheckoutStep[]>;
    readonly activeStepIndex$: Observable<number>;
    constructor(routingService: RoutingService, checkoutConfigService: CheckoutConfigService, routingConfigService: RoutingConfigService);
    back(activatedRoute: ActivatedRoute): void;
    next(activatedRoute: ActivatedRoute): void;
    goToStepWithIndex(stepIndex: number): void;
    getBackBntText(activatedRoute: ActivatedRoute): string;
    resetSteps(): void;
    disableEnableStep(currentStepType: CheckoutStepType, disabled: boolean): void;
    getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep;
    getCheckoutStepRoute(currentStepType: CheckoutStepType): string;
    getFirstCheckoutStepRoute(): string;
    getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string;
    getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string;
    getCurrentStepIndex(activatedRoute: ActivatedRoute): number;
    private getStepUrlFromActivatedRoute;
    private getStepUrlFromStepRoute;
    private getCheckoutStepIndex;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CheckoutStepService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tvdXQtc3RlcC5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImNoZWNrb3V0LXN0ZXAuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgUm91dGluZ0NvbmZpZ1NlcnZpY2UsIFJvdXRpbmdTZXJ2aWNlIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ2hlY2tvdXRTdGVwLCBDaGVja291dFN0ZXBUeXBlIH0gZnJvbSAnLi4vbW9kZWwvY2hlY2tvdXQtc3RlcC5tb2RlbCc7XG5pbXBvcnQgeyBDaGVja291dENvbmZpZ1NlcnZpY2UgfSBmcm9tICcuL2NoZWNrb3V0LWNvbmZpZy5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENoZWNrb3V0U3RlcFNlcnZpY2Uge1xuICAgIHByb3RlY3RlZCByb3V0aW5nU2VydmljZTogUm91dGluZ1NlcnZpY2U7XG4gICAgcHJvdGVjdGVkIGNoZWNrb3V0Q29uZmlnU2VydmljZTogQ2hlY2tvdXRDb25maWdTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCByb3V0aW5nQ29uZmlnU2VydmljZTogUm91dGluZ0NvbmZpZ1NlcnZpY2U7XG4gICAgYWxsU3RlcHM6IENoZWNrb3V0U3RlcFtdO1xuICAgIHJlYWRvbmx5IHN0ZXBzJDogQmVoYXZpb3JTdWJqZWN0PENoZWNrb3V0U3RlcFtdPjtcbiAgICByZWFkb25seSBhY3RpdmVTdGVwSW5kZXgkOiBPYnNlcnZhYmxlPG51bWJlcj47XG4gICAgY29uc3RydWN0b3Iocm91dGluZ1NlcnZpY2U6IFJvdXRpbmdTZXJ2aWNlLCBjaGVja291dENvbmZpZ1NlcnZpY2U6IENoZWNrb3V0Q29uZmlnU2VydmljZSwgcm91dGluZ0NvbmZpZ1NlcnZpY2U6IFJvdXRpbmdDb25maWdTZXJ2aWNlKTtcbiAgICBiYWNrKGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSk6IHZvaWQ7XG4gICAgbmV4dChhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUpOiB2b2lkO1xuICAgIGdvVG9TdGVwV2l0aEluZGV4KHN0ZXBJbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBnZXRCYWNrQm50VGV4dChhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUpOiBzdHJpbmc7XG4gICAgcmVzZXRTdGVwcygpOiB2b2lkO1xuICAgIGRpc2FibGVFbmFibGVTdGVwKGN1cnJlbnRTdGVwVHlwZTogQ2hlY2tvdXRTdGVwVHlwZSwgZGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIGdldENoZWNrb3V0U3RlcChjdXJyZW50U3RlcFR5cGU6IENoZWNrb3V0U3RlcFR5cGUpOiBDaGVja291dFN0ZXA7XG4gICAgZ2V0Q2hlY2tvdXRTdGVwUm91dGUoY3VycmVudFN0ZXBUeXBlOiBDaGVja291dFN0ZXBUeXBlKTogc3RyaW5nO1xuICAgIGdldEZpcnN0Q2hlY2tvdXRTdGVwUm91dGUoKTogc3RyaW5nO1xuICAgIGdldE5leHRDaGVja291dFN0ZXBVcmwoYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlKTogc3RyaW5nO1xuICAgIGdldFByZXZpb3VzQ2hlY2tvdXRTdGVwVXJsKGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSk6IHN0cmluZztcbiAgICBnZXRDdXJyZW50U3RlcEluZGV4KGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSk6IG51bWJlcjtcbiAgICBwcml2YXRlIGdldFN0ZXBVcmxGcm9tQWN0aXZhdGVkUm91dGU7XG4gICAgcHJpdmF0ZSBnZXRTdGVwVXJsRnJvbVN0ZXBSb3V0ZTtcbiAgICBwcml2YXRlIGdldENoZWNrb3V0U3RlcEluZGV4O1xufVxuIl19