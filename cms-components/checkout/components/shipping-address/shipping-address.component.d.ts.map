{"version":3,"file":"shipping-address.component.d.ts","sources":["shipping-address.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ActiveCartService, Address, CheckoutCostCenterService, CheckoutDeliveryService, PaymentTypeService, TranslationService, UserAddressService, UserCostCenterService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepService } from '../../services/checkout-step.service';\nexport interface CardWithAddress {\n    card: Card;\n    address: Address;\n}\nexport declare class ShippingAddressComponent implements OnInit {\n    protected userAddressService: UserAddressService;\n    protected checkoutDeliveryService: CheckoutDeliveryService;\n    protected activatedRoute: ActivatedRoute;\n    protected translation: TranslationService;\n    protected activeCartService: ActiveCartService;\n    protected checkoutStepService: CheckoutStepService;\n    protected paymentTypeService?: PaymentTypeService;\n    protected userCostCenterService?: UserCostCenterService;\n    protected checkoutCostCenterService?: CheckoutCostCenterService;\n    addressFormOpened: boolean;\n    forceLoader: boolean;\n    selectedAddress: Address;\n    doneAutoSelect: boolean;\n    isAccountPayment: boolean;\n    constructor(userAddressService: UserAddressService, checkoutDeliveryService: CheckoutDeliveryService, activatedRoute: ActivatedRoute, translation: TranslationService, activeCartService: ActiveCartService, checkoutStepService: CheckoutStepService, paymentTypeService?: PaymentTypeService, userCostCenterService?: UserCostCenterService, checkoutCostCenterService?: CheckoutCostCenterService);\n    get isGuestCheckout(): boolean;\n    get backBtnText(): string;\n    get isLoading$(): Observable<boolean>;\n    get selectedAddress$(): Observable<Address>;\n    get cards$(): Observable<CardWithAddress[]>;\n    getSupportedAddresses(): Observable<Address[]>;\n    selectDefaultAddress(addresses: Address[], selected: Address): void;\n    ngOnInit(): void;\n    getCardContent(address: Address, selected: any, textDefaultShippingAddress: string, textShipToThisAddress: string, textSelected: string): Card;\n    selectAddress(address: Address): void;\n    addAddress(address: Address): void;\n    showNewAddressForm(): void;\n    hideNewAddressForm(goPrevious?: boolean): void;\n    next(): void;\n    back(): void;\n}\n"]}