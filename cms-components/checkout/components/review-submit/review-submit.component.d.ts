import { ActiveCartService, Address, Cart, CheckoutCostCenterService, CheckoutDeliveryService, CheckoutPaymentService, CostCenter, DeliveryMode, OrderEntry, PaymentDetails, PaymentTypeService, PromotionLocation, PromotionResult, TranslationService, UserAddressService, UserCostCenterService } from '@spartacus/core';
import { Observable } from 'rxjs';
import { Card } from '../../../../shared/components/card/card.component';
import { PromotionService } from '../../../../shared/services/promotion/promotion.service';
import { ICON_TYPE } from '../../../misc/icon/icon.model';
import { CheckoutStep } from '../../model/checkout-step.model';
import { CheckoutStepType } from '../../model/index';
import { CheckoutStepService } from '../../services/index';
export declare class ReviewSubmitComponent {
    protected checkoutDeliveryService: CheckoutDeliveryService;
    protected checkoutPaymentService: CheckoutPaymentService;
    protected userAddressService: UserAddressService;
    protected activeCartService: ActiveCartService;
    protected translation: TranslationService;
    protected promotionService: PromotionService;
    protected checkoutStepService: CheckoutStepService;
    protected paymentTypeService: PaymentTypeService;
    protected checkoutCostCenterService: CheckoutCostCenterService;
    protected userCostCenterService: UserCostCenterService;
    iconTypes: typeof ICON_TYPE;
    checkoutStepType: typeof CheckoutStepType;
    promotionLocation: PromotionLocation;
    constructor(checkoutDeliveryService: CheckoutDeliveryService, checkoutPaymentService: CheckoutPaymentService, userAddressService: UserAddressService, activeCartService: ActiveCartService, translation: TranslationService, promotionService: PromotionService, checkoutStepService: CheckoutStepService, paymentTypeService: PaymentTypeService, checkoutCostCenterService: CheckoutCostCenterService, userCostCenterService: UserCostCenterService);
    get cart$(): Observable<Cart>;
    get entries$(): Observable<OrderEntry[]>;
    get steps$(): Observable<CheckoutStep[]>;
    get deliveryAddress$(): Observable<Address>;
    get deliveryMode$(): Observable<DeliveryMode>;
    get paymentDetails$(): Observable<PaymentDetails>;
    get orderPromotions$(): Observable<PromotionResult[]>;
    get countryName$(): Observable<string>;
    get poNumber$(): Observable<string>;
    get paymentType$(): Observable<string>;
    get isAccountPayment$(): Observable<boolean>;
    get costCenter$(): Observable<CostCenter>;
    getShippingAddressCard(deliveryAddress: Address, countryName: string): Observable<Card>;
    getCostCenterCard(costCenter: CostCenter): Observable<Card>;
    getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card>;
    getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card>;
    getPoNumberCard(poNumber: string): Observable<Card>;
    getPaymentTypeCard(paymentType: string): Observable<Card>;
    getCheckoutStepUrl(stepType: CheckoutStepType): string;
    shippingSteps(steps: CheckoutStep[]): CheckoutStep[];
    paymentSteps(steps: CheckoutStep[]): CheckoutStep[];
}
