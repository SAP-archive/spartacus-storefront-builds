{"version":3,"file":"payment-method.component.d.ts","sources":["payment-method.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ActiveCartService, Address, CheckoutDeliveryService, CheckoutPaymentService, CheckoutService, GlobalMessageService, PaymentDetails, TranslationService, UserPaymentService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutStepService } from '../../services/checkout-step.service';\nexport declare class PaymentMethodComponent implements OnInit, OnDestroy {\n    protected userPaymentService: UserPaymentService;\n    protected checkoutService: CheckoutService;\n    protected checkoutDeliveryService: CheckoutDeliveryService;\n    protected checkoutPaymentService: CheckoutPaymentService;\n    protected globalMessageService: GlobalMessageService;\n    protected activatedRoute: ActivatedRoute;\n    protected translation: TranslationService;\n    protected activeCartService: ActiveCartService;\n    protected checkoutStepService: CheckoutStepService;\n    iconTypes: typeof ICON_TYPE;\n    existingPaymentMethods$: Observable<PaymentDetails[]>;\n    isLoading$: Observable<boolean>;\n    cards$: Observable<{\n        content: Card;\n        paymentMethod: PaymentDetails;\n    }[]>;\n    selectedMethod$: Observable<PaymentDetails>;\n    isGuestCheckout: boolean;\n    newPaymentFormManuallyOpened: boolean;\n    backBtnText: string;\n    protected shouldRedirect: boolean;\n    protected deliveryAddress: Address;\n    constructor(userPaymentService: UserPaymentService, checkoutService: CheckoutService, checkoutDeliveryService: CheckoutDeliveryService, checkoutPaymentService: CheckoutPaymentService, globalMessageService: GlobalMessageService, activatedRoute: ActivatedRoute, translation: TranslationService, activeCartService: ActiveCartService, checkoutStepService: CheckoutStepService);\n    ngOnInit(): void;\n    selectPaymentMethod(paymentDetails: PaymentDetails): void;\n    showNewPaymentForm(): void;\n    hideNewPaymentForm(): void;\n    setPaymentDetails({ paymentDetails, billingAddress, }: {\n        paymentDetails: PaymentDetails;\n        billingAddress?: Address;\n    }): void;\n    ngOnDestroy(): void;\n    protected getCardIcon(code: string): string;\n    protected sendPaymentMethodFailGlobalMessage(field: string): void;\n    protected createCard(paymentDetails: PaymentDetails, cardLabels: {\n        textDefaultPaymentMethod: string;\n        textExpires: string;\n        textUseThisPayment: string;\n        textSelected: string;\n    }, selected: PaymentDetails): Card;\n    next(): void;\n    back(): void;\n}\n"]}