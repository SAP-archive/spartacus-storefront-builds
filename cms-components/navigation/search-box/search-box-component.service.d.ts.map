{"version":3,"file":"search-box-component.service.d.ts","sources":["search-box-component.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { ProductSearchPage, RoutingService, SearchboxService, TranslationService, WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\nexport declare class SearchBoxComponentService {\n    searchService: SearchboxService;\n    protected routingService: RoutingService;\n    protected translationService: TranslationService;\n    protected winRef: WindowRef;\n    constructor(searchService: SearchboxService, routingService: RoutingService, translationService: TranslationService, winRef: WindowRef);\n    /**\n     * Executes the search for products and suggestions,\n     * unless the configuration is setup to not search for\n     * products or suggestions.\n     */\n    search(query: string, config: SearchBoxConfig): void;\n    /**\n     * Returns an observable with the SearchResults. When there's any\n     * result, the body tag will get a classname, so that specific style\n     * rules can be applied.\n     */\n    getResults(config: SearchBoxConfig): Observable<SearchResults>;\n    /**\n     * Clears the searchbox results, so that old values are\n     * no longer emited upon next search.\n     */\n    clearResults(): void;\n    hasBodyClass(className: string): boolean;\n    toggleBodyClass(className: string, add?: boolean): void;\n    /**\n     * For search results model, it returns true when:\n     * * there is any product OR\n     * * the is any search suggestion OR\n     * * there is a message.\n     *\n     * Otherwise it returns false.\n     */\n    protected hasResults(results: SearchResults): boolean;\n    /**\n     * Emits product search results in case when the config property `displayProducts` is true.\n     * Otherwise it emits an empty object.\n     */\n    protected getProductResults(config: SearchBoxConfig): Observable<ProductSearchPage>;\n    /**\n     * Loads suggestions from the backend. In case there's no suggestion\n     * available, we try to get an exact match suggestion.\n     */\n    protected getProductSuggestions(config: SearchBoxConfig): Observable<string[]>;\n    /**\n     * Whenever there is at least 1 product, we simulate\n     * a suggestion to provide easy access to the search result page\n     */\n    protected getExactSuggestion(config: SearchBoxConfig): Observable<string>;\n    /**\n     * Emits a 'no match' message, in case the product search results and search suggestions are empty.\n     * Otherwise it emits null.\n     */\n    protected getSearchMessage(config: SearchBoxConfig): Observable<string>;\n    /**\n     * Navigates to the search result page with a given query\n     */\n    launchSearchPage(query: string): void;\n    private fetchTranslation;\n}\n"]}