{"version":3,"file":"icon.model.d.ts","sources":["icon.model.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { DirectionMode } from '../../../layout/direction/config/direction.model';\nexport declare enum ICON_TYPE {\n    STAR = \"STAR\",\n    SEARCH = \"SEARCH\",\n    CART = \"CART\",\n    INFO = \"INFO\",\n    GRID = \"GRID\",\n    LIST = \"LIST\",\n    CARET_DOWN = \"CARET_DOWN\",\n    CARET_LEFT = \"CARET_LEFT\",\n    CARET_RIGHT = \"CARET_RIGHT\",\n    CLOSE = \"CLOSE\",\n    ERROR = \"ERROR\",\n    WARNING = \"WARNING\",\n    SUCCESS = \"SUCCESS\",\n    VISA = \"VISA\",\n    MASTER_CARD = \"MASTER_CARD\",\n    AMEX = \"AMEX\",\n    DINERS_CLUB = \"DINERS_CLUB\",\n    CREDIT_CARD = \"CREDIT_CARD\",\n    EXPAND = \"EXPAND\",\n    COLLAPSE = \"COLLAPSE\",\n    RESET = \"RESET\",\n    CIRCLE = \"CIRCLE\",\n    HEART = \"HEART\",\n    EMPTY_HEART = \"EMPTY_HEART\",\n    FILTER = \"FILTER\",\n    PENCIL = \"PENCIL\"\n}\nexport declare abstract class IconConfig {\n    icon?: IconOptions;\n}\nexport interface IconOptions {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n        [ICON_TYPE: string]: string;\n    };\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n    /**\n     * Lists icons that should be flipped for a specific direction.\n     */\n    flipDirection?: {\n        [ICON_TYPE: string]: DirectionMode;\n    };\n}\nexport interface IconConfigResource {\n    type: IconResourceType | string;\n    url?: string;\n    types?: (ICON_TYPE | string)[];\n}\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automatically loaded in case they're required for the `ICON_TYPE`.\n */\nexport declare enum IconResourceType {\n    /**\n     * An svg based icon requires an SVG resource that must be loaded,\n     * this is typically a sprite svg file.\n     */\n    SVG = \"svg\",\n    /**\n     * A font based ICON might require an additional CSS file to be loaded.\n     */\n    LINK = \"link\",\n    /**\n     * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n     * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n     */\n    TEXT = \"text\"\n}\n"]}