{"version":3,"file":"qualtrics-loader.service.d.ts","sources":["qualtrics-loader.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Renderer2, RendererFactory2 } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nexport declare const QUALTRICS_EVENT_NAME = \"qsi_js_loaded\";\n/**\n * Service to integration Qualtrics.\n *\n * The integration observes the Qualtrics API, and when available, it runs the QSI API\n * to let Qualtrics evaluate the application.\n *\n * The service supports an additional _hook_ (`isDataLoaded()`) that can be used to load application\n * data before pulling the QSI API. This is beneficial in a single page application when additional\n * data is required before the Qualtrics _creatives_ run.\n *\n * This service also supports the creation of the Qualtrics deployment script. This is optional, as\n * the script can be added in alternatives ways.\n */\nexport declare class QualtricsLoaderService {\n    protected winRef: WindowRef;\n    protected rendererFactory: RendererFactory2;\n    /**\n     * Reference to the QSI API.\n     */\n    protected qsiApi: any;\n    /**\n     * QSI load event that happens when the QSI JS file is loaded.\n     */\n    private qsiLoaded$;\n    /**\n     * Emits the Qualtrics Site Intercept (QSI) JavaScript API whenever available.\n     *\n     * The API is emitted when the JavaScript resource holding this API is fully loaded.\n     * The API is also stored locally in the service, in case it's required later on.\n     */\n    protected qsi$: Observable<any>;\n    constructor(winRef: WindowRef, rendererFactory: RendererFactory2);\n    /**\n     * Starts observing the Qualtrics integration. The integration is based on a\n     * Qualtrics specific event (`qsi_js_loaded`). As soon as this events happens,\n     * we run the API.\n     */\n    protected initialize(): void;\n    /**\n     * Evaluates the Qualtrics project code for the application.\n     *\n     * In order to reload the evaluation in Qualtrics, the API requires to unload the API before\n     * running it again. We don't do this by default, but offer a flag to conditionally unload the API.\n     */\n    protected run(reload?: boolean): void;\n    /**\n     * Adds the deployment script to the DOM.\n     *\n     * The script will not be added twice if it was loaded before. In that case, we use\n     * the Qualtrics API directly to _unload_ and _run_ the project.\n     */\n    addScript(scriptSource: string): void;\n    /**\n     * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data.\n     * You can observe any data in this method.\n     *\n     * Defaults to true.\n     */\n    protected isDataLoaded(): Observable<boolean>;\n    /**\n     * Indicates if the script is already added to the DOM.\n     */\n    protected hasScript(source?: string): boolean;\n    protected get renderer(): Renderer2;\n}\n"]}