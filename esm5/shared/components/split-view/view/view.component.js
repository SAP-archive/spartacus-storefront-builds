import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output, } from '@angular/core';
import { SplitViewService } from '../split-view.service';
/**
 * The view component is part of the `SplitViewComponent`. The view
 * contains the navigable content that should be split up. It maintains
 * a view position and allows to show or hide the view.
 *
 * The ViewComponent interacts with the `SplitViewService` for handing over the
 * view state, so that the overarching `SplitViewComponent` can manage the
 * overall experience.
 */
var ViewComponent = /** @class */ (function () {
    function ViewComponent(splitService, elementRef) {
        this.splitService = splitService;
        this.elementRef = elementRef;
        /**
         * The disappeared flag is added to the
         */
        this.disappeared = true;
        /**
         * An update of the view visibility is emitted to the hiddenChange output.
         */
        this.hiddenChange = new EventEmitter();
    }
    Object.defineProperty(ViewComponent.prototype, "hidden", {
        /**
         * The hidden input is used to set the initial visible state of the view.
         * The hidden state defaults to false.
         *
         * The hidden input supports 2-way binding, see `hiddenChange` property.
         */
        set: function (hidden) {
            this._hidden = hidden;
            this.splitService.toggle(this.viewPosition, hidden);
        },
        enumerable: true,
        configurable: true
    });
    ViewComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.splitService.splitViewCount = this.splitViewCount;
        var hidden = this._hidden ? { hidden: this._hidden } : {};
        this.splitService.add(this.viewPosition, hidden);
        this.subscription = this.splitService
            .getViewState(Number(this.position))
            .subscribe(function (view) {
            _this.hiddenChange.emit(view.hidden);
            _this._hidden = view.hidden;
            if (view.hidden) {
                setTimeout(function () {
                    _this.disappeared = true;
                }, _this.duration * 1.25);
            }
            else {
                _this.disappeared = false;
            }
        });
    };
    /**
     * Toggles the visibility of the view.
     *
     * An optional force flag can be used to explicitly show or hide view component.
     */
    ViewComponent.prototype.toggle = function (force) {
        this.splitService.toggle(this.viewPosition, force);
    };
    Object.defineProperty(ViewComponent.prototype, "viewPosition", {
        /**
         * Returns the position for the view.
         *
         * The position is either taken from the input `position` or generated by the `SplitService`.
         */
        get: function () {
            if (!(Number(this.position) >= 0)) {
                this.position = this.splitService.nextPosition.toString();
            }
            return Number(this.position);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewComponent.prototype, "duration", {
        /**
         * Returns the duration in milliseconds. The duration is based on the CSS custom property
         * `--cx-transition-duration`. Defaults to 300 milliseconds.
         */
        get: function () {
            var duration = getComputedStyle(this.elementRef.nativeElement)
                .getPropertyValue('--cx-transition-duration')
                .trim();
            if (duration.indexOf('ms') > -1) {
                return Number(duration.split('ms')[0]);
            }
            else if (duration.indexOf('s') > -1) {
                return Number(duration.split('s')[0]) * 1000;
            }
            else {
                return 300;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewComponent.prototype, "splitViewCount", {
        /**
         * Returns the maximum number of views per split-view. The number is based on the CSS custom property
         * `--cx-max-views`. Defaults to `2`
         */
        get: function () {
            return Number(getComputedStyle(this.elementRef.nativeElement)
                .getPropertyValue('--cx-max-views')
                .trim() || 2);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * The view is removed from the `SplitService` so that the view no longer
     * plays a role in the overall split view.
     */
    ViewComponent.prototype.ngOnDestroy = function () {
        var _a;
        this.splitService.remove(this.viewPosition);
        (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    };
    ViewComponent.ctorParameters = function () { return [
        { type: SplitViewService },
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        HostBinding('attr.position')
    ], ViewComponent.prototype, "position", void 0);
    __decorate([
        HostBinding('attr.disappeared')
    ], ViewComponent.prototype, "disappeared", void 0);
    __decorate([
        Input()
    ], ViewComponent.prototype, "hidden", null);
    __decorate([
        Output()
    ], ViewComponent.prototype, "hiddenChange", void 0);
    ViewComponent = __decorate([
        Component({
            selector: 'cx-view',
            template: "<ng-content></ng-content>\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], ViewComponent);
    return ViewComponent;
}());
export { ViewComponent };
//# sourceMappingURL=data:application/json;base64,