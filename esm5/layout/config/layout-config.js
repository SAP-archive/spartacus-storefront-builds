import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Config } from '@spartacus/core';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
export var BREAKPOINT;
(function (BREAKPOINT) {
    BREAKPOINT["xs"] = "xs";
    BREAKPOINT["sm"] = "sm";
    BREAKPOINT["md"] = "md";
    BREAKPOINT["lg"] = "lg";
    BREAKPOINT["xl"] = "xl";
})(BREAKPOINT || (BREAKPOINT = {}));
/**
 * The LayoutConfig supports the configuration of page slots by page templates
 * or page sections, such as headers and footers. The configuration also supports
 * adaptive design per breakpoint (not per device type), so that the DOM is (re)rendered
 * por a given breakpoint.
 */
var LayoutConfig = /** @class */ (function () {
    function LayoutConfig() {
    }
    LayoutConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function LayoutConfig_Factory() { return i0.ɵɵinject(i1.Config); }, token: LayoutConfig, providedIn: "root" });
    LayoutConfig = __decorate([
        Injectable({
            providedIn: 'root',
            useExisting: Config,
        })
    ], LayoutConfig);
    return LayoutConfig;
}());
export { LayoutConfig };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvc3RvcmVmcm9udC8iLCJzb3VyY2VzIjpbImxheW91dC9jb25maWcvbGF5b3V0LWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUF3QixNQUFNLGlCQUFpQixDQUFDOzs7QUFHL0QsTUFBTSxDQUFOLElBQVksVUFNWDtBQU5ELFdBQVksVUFBVTtJQUNwQix1QkFBUyxDQUFBO0lBQ1QsdUJBQVMsQ0FBQTtJQUNULHVCQUFTLENBQUE7SUFDVCx1QkFBUyxDQUFBO0lBQ1QsdUJBQVMsQ0FBQTtBQUNYLENBQUMsRUFOVyxVQUFVLEtBQVYsVUFBVSxRQU1yQjtBQW1DRDs7Ozs7R0FLRztBQUtIO0lBQUE7S0FrQ0M7O0lBbENxQixZQUFZO1FBSmpDLFVBQVUsQ0FBQztZQUNWLFVBQVUsRUFBRSxNQUFNO1lBQ2xCLFdBQVcsRUFBRSxNQUFNO1NBQ3BCLENBQUM7T0FDb0IsWUFBWSxDQWtDakM7dUJBekZEO0NBeUZDLEFBbENELElBa0NDO1NBbENxQixZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29uZmlnLCBEZWZlckxvYWRpbmdTdHJhdGVneSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBMYXVuY2hDb25maWcgfSBmcm9tICcuLi9sYXVuY2gtZGlhbG9nL2luZGV4JztcblxuZXhwb3J0IGVudW0gQlJFQUtQT0lOVCB7XG4gIHhzID0gJ3hzJyxcbiAgc20gPSAnc20nLFxuICBtZCA9ICdtZCcsXG4gIGxnID0gJ2xnJyxcbiAgeGwgPSAneGwnLFxufVxuXG5leHBvcnQgdHlwZSBMYXlvdXRTZWN0aW9ucyA9XG4gIHwgJ2hlYWRlcidcbiAgfCAnZm9vdGVyJ1xuICB8ICdMYW5kaW5nUGFnZTJUZW1wbGF0ZSdcbiAgfCBzdHJpbmc7XG5cbmV4cG9ydCB0eXBlIFNsb3RDb25maWcgPSB7XG4gIC8qKiBUaGUgY21zIHBhZ2Ugc2xvdHMgYXJlIG1hcHBlZCBieSB0aGUgYHNsb3QucG9zaXRpb25gLiAqL1xuICBzbG90cz86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBUaGUgcGFnZSBmb2xkIGlkZW50aWZpZXMgdGhlIGxhc3QgZXhwZWN0ZWQgcGFnZSBzbG90IGFib3ZlLXRoZS1mb2xkLlxuICAgKiBJdCdzIHBlcmZlY3RseSBmaW5lIHRvIHNwZWNpZnkgdGhpcyBieSBpbmRpY2F0aW9uLCBidXQga2VlcCBpbiBtaW5kIHRoYXRcbiAgICogYSBtb3JlIHByZWNpc2UgaW5kaWNhdGlvbiB3aWxsIGdhaW4gYSBtb3JlIHBvc2l0aXZlIGltcGFjdCBvbiBwZXJmb3JtYW5jZS5cbiAgICovXG4gIHBhZ2VGb2xkPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgU2xvdEdyb3VwID0ge1xuICAvKiogVGhlIHBhZ2Ugc2xvdCBjb25maWd1cmF0aW9uIGZvciBsYXJnZSBzY3JlZW5zICovXG4gIFtCUkVBS1BPSU5ULmxnXT86IFNsb3RDb25maWc7XG4gIC8qKiBUaGUgcGFnZSBzbG90IGNvbmZpZ3VyYXRpb24gZm9yIG1lZGl1bSBzY3JlZW5zICovXG4gIFtCUkVBS1BPSU5ULm1kXT86IFNsb3RDb25maWc7XG4gIC8qKiBUaGUgcGFnZSBzbG90IGNvbmZpZ3VyYXRpb24gZm9yIHNtYWxsIHNjcmVlbnMgKi9cbiAgW0JSRUFLUE9JTlQuc21dPzogU2xvdENvbmZpZztcbiAgLyoqIFRoZSBwYWdlIHNsb3QgY29uZmlndXJhdGlvbiBmb3IgZXh0cmEgc21hbGwgc2NyZWVucyAqL1xuICBbQlJFQUtQT0lOVC54c10/OiBTbG90Q29uZmlnO1xufTtcblxuZXhwb3J0IHR5cGUgTGF5b3V0U2xvdENvbmZpZyA9IHtcbiAgW3NlY3Rpb24gaW4gTGF5b3V0U2VjdGlvbnNdOiBTbG90Q29uZmlnIHwgU2xvdEdyb3VwIHwgTGF5b3V0U2xvdENvbmZpZztcbn07XG5cbi8qKlxuICogVGhlIExheW91dENvbmZpZyBzdXBwb3J0cyB0aGUgY29uZmlndXJhdGlvbiBvZiBwYWdlIHNsb3RzIGJ5IHBhZ2UgdGVtcGxhdGVzXG4gKiBvciBwYWdlIHNlY3Rpb25zLCBzdWNoIGFzIGhlYWRlcnMgYW5kIGZvb3RlcnMuIFRoZSBjb25maWd1cmF0aW9uIGFsc28gc3VwcG9ydHNcbiAqIGFkYXB0aXZlIGRlc2lnbiBwZXIgYnJlYWtwb2ludCAobm90IHBlciBkZXZpY2UgdHlwZSksIHNvIHRoYXQgdGhlIERPTSBpcyAocmUpcmVuZGVyZWRcbiAqIHBvciBhIGdpdmVuIGJyZWFrcG9pbnQuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxuICB1c2VFeGlzdGluZzogQ29uZmlnLFxufSlcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBMYXlvdXRDb25maWcge1xuICAvKipcbiAgICogVGhlIGJyZWFrcG9pbnQgY29uZmlndXJhdGlvbiBpcyB1c2VkIHdoZW4gdGhlIERPTSBpcyAocmUpcmVuZGVyZWQgaW4gc3BlY2lmaWMgdmlldy5cbiAgICogVGhpcyBhbGxvd3MgZm9yIGFkYXB0aXZlIHJlbmRlcmluZywgc28gdGhhdCB0aGUgRE9NIGlzIHJlbmRlcmVkIGZvciBzcGVjaWZpYyBicmVha3BvaW50cy5cbiAgICovXG4gIGJyZWFrcG9pbnRzPzoge1xuICAgIFtCUkVBS1BPSU5ULnhzXT86IG51bWJlcjtcbiAgICBbQlJFQUtQT0lOVC5zbV0/OiBudW1iZXI7XG4gICAgW0JSRUFLUE9JTlQubWRdPzogbnVtYmVyO1xuICAgIFtCUkVBS1BPSU5ULmxnXT86IG51bWJlcjtcbiAgfTtcbiAgbGF5b3V0U2xvdHM/OiBMYXlvdXRTbG90Q29uZmlnO1xuXG4gIC8qKlxuICAgKiBEZWZlcnJlZCBsb2FkaW5nIGlzIGEgdGVjaG5pcXVlIHRvIGhvbGQgb2Ygd2l0aCB0aGUgbG9hZGluZyAvIGNyZWF0aW9uXG4gICAqIG9mIERPTSBlbGVtZW50cyB3aGljaCBhcmUgbm90IG5vdCBpbiB0aGUgaW5pdGlhbCB2aWV3IHBvcnQuXG4gICAqIFRoaXMgdGVjaG5pcXVlIHdpbCBpbmNyZWFzZSBwZXJmb3JtYW5jZS5cbiAgICovXG4gIGRlZmVycmVkTG9hZGluZz86IHtcbiAgICAvKipcbiAgICAgKiBUaGUgZ2xvYmFsIHN0cmF0ZWd5IHdpbGwgYmUgdXNlZCBhcyBhIGZhbGxiYWNrIHN0cmF0ZWd5IGZvciBhbGwgRE9NIGNyZWF0aW9uLFxuICAgICAqIGJ1dCBjYW4gYmUgb3ZlcnJpZGRlbiBieSBsb2NhbCBjb25maWd1cmF0aW9uLCBpLmUuIGZvciBjbXMgY29tcG9uZW50cy5cbiAgICAgKi9cbiAgICBzdHJhdGVneT86IERlZmVyTG9hZGluZ1N0cmF0ZWd5O1xuICAgIC8qKlxuICAgICAqIFRoZSBpbnRlcnNlY3Rpb24gbWFyZ2luIGNvbnRhaW5zIHRoZSBvZmZzZXQgdXNlZCBieSB0aGUgSW50ZXJzZWN0aW9uIE9ic2VydmVyXG4gICAgICogdG8gb2JzZXJ2ZSBlbGVtZW50cyBvdXRzaWRlIHRoZSB2aWV3IHBvcnQuXG4gICAgICpcbiAgICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ludGVyc2VjdGlvbk9ic2VydmVyL3Jvb3RNYXJnaW5cbiAgICAgKi9cbiAgICBpbnRlcnNlY3Rpb25NYXJnaW4/OiBzdHJpbmc7XG4gIH07XG5cbiAgbGF1bmNoPzogTGF1bmNoQ29uZmlnO1xufVxuIl19