import { Injectable } from '@angular/core';
import { Config } from '@spartacus/core';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
export var ICON_TYPE;
(function (ICON_TYPE) {
    ICON_TYPE["STAR"] = "STAR";
    ICON_TYPE["SEARCH"] = "SEARCH";
    ICON_TYPE["CART"] = "CART";
    ICON_TYPE["INFO"] = "INFO";
    ICON_TYPE["GRID"] = "GRID";
    ICON_TYPE["LIST"] = "LIST";
    ICON_TYPE["CARET_DOWN"] = "CARET_DOWN";
    ICON_TYPE["CARET_LEFT"] = "CARET_LEFT";
    ICON_TYPE["CARET_RIGHT"] = "CARET_RIGHT";
    ICON_TYPE["CLOSE"] = "CLOSE";
    ICON_TYPE["ERROR"] = "ERROR";
    ICON_TYPE["WARNING"] = "WARNING";
    ICON_TYPE["SUCCESS"] = "SUCCESS";
    ICON_TYPE["VISA"] = "VISA";
    ICON_TYPE["MASTER_CARD"] = "MASTER_CARD";
    ICON_TYPE["AMEX"] = "AMEX";
    ICON_TYPE["DINERS_CLUB"] = "DINERS_CLUB";
    ICON_TYPE["CREDIT_CARD"] = "CREDIT_CARD";
    ICON_TYPE["EXPAND"] = "EXPAND";
    ICON_TYPE["COLLAPSE"] = "COLLAPSE";
    ICON_TYPE["RESET"] = "RESET";
    ICON_TYPE["CIRCLE"] = "CIRCLE";
    ICON_TYPE["HEART"] = "HEART";
    ICON_TYPE["EMPTY_HEART"] = "EMPTY_HEART";
    ICON_TYPE["FILTER"] = "FILTER";
    ICON_TYPE["PENCIL"] = "PENCIL";
    ICON_TYPE["TRASH"] = "TRASH";
    ICON_TYPE["ACTIVE"] = "ACTIVE";
    ICON_TYPE["SORT_DOWN"] = "SORT_DOWN";
    ICON_TYPE["SORT"] = "SORT";
    ICON_TYPE["ON"] = "ON";
    ICON_TYPE["OFF"] = "OFF";
    ICON_TYPE["LINK_OUT"] = "LINK_OUT";
})(ICON_TYPE || (ICON_TYPE = {}));
export class IconConfig {
}
IconConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function IconConfig_Factory() { return i0.ɵɵinject(i1.Config); }, token: IconConfig, providedIn: "root" });
IconConfig.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
                useExisting: Config,
            },] }
];
/**
 * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.
 * The resources will be automatically loaded in case they're required for the `ICON_TYPE`.
 */
export var IconResourceType;
(function (IconResourceType) {
    /**
     * An svg based icon requires an SVG resource that must be loaded,
     * this is typically a sprite svg file.
     */
    IconResourceType["SVG"] = "svg";
    /**
     * A font based ICON might require an additional CSS file to be loaded.
     */
    IconResourceType["LINK"] = "link";
    /**
     * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image
     * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)
     */
    IconResourceType["TEXT"] = "text";
})(IconResourceType || (IconResourceType = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N0b3JlZnJvbnRsaWIvc3JjL2Ntcy1jb21wb25lbnRzL21pc2MvaWNvbi9pY29uLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7QUFHekMsTUFBTSxDQUFOLElBQVksU0FxQ1g7QUFyQ0QsV0FBWSxTQUFTO0lBQ25CLDBCQUFhLENBQUE7SUFDYiw4QkFBaUIsQ0FBQTtJQUNqQiwwQkFBYSxDQUFBO0lBQ2IsMEJBQWEsQ0FBQTtJQUNiLDBCQUFhLENBQUE7SUFDYiwwQkFBYSxDQUFBO0lBQ2Isc0NBQXlCLENBQUE7SUFDekIsc0NBQXlCLENBQUE7SUFDekIsd0NBQTJCLENBQUE7SUFDM0IsNEJBQWUsQ0FBQTtJQUNmLDRCQUFlLENBQUE7SUFDZixnQ0FBbUIsQ0FBQTtJQUNuQixnQ0FBbUIsQ0FBQTtJQUNuQiwwQkFBYSxDQUFBO0lBQ2Isd0NBQTJCLENBQUE7SUFDM0IsMEJBQWEsQ0FBQTtJQUNiLHdDQUEyQixDQUFBO0lBQzNCLHdDQUEyQixDQUFBO0lBQzNCLDhCQUFpQixDQUFBO0lBQ2pCLGtDQUFxQixDQUFBO0lBQ3JCLDRCQUFlLENBQUE7SUFDZiw4QkFBaUIsQ0FBQTtJQUNqQiw0QkFBZSxDQUFBO0lBQ2Ysd0NBQTJCLENBQUE7SUFDM0IsOEJBQWlCLENBQUE7SUFDakIsOEJBQWlCLENBQUE7SUFDakIsNEJBQWUsQ0FBQTtJQUVmLDhCQUFpQixDQUFBO0lBQ2pCLG9DQUF1QixDQUFBO0lBQ3ZCLDBCQUFhLENBQUE7SUFFYixzQkFBUyxDQUFBO0lBQ1Qsd0JBQVcsQ0FBQTtJQUVYLGtDQUFxQixDQUFBO0FBQ3ZCLENBQUMsRUFyQ1csU0FBUyxLQUFULFNBQVMsUUFxQ3BCO0FBTUQsTUFBTSxPQUFnQixVQUFVOzs7O1lBSi9CLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTtnQkFDbEIsV0FBVyxFQUFFLE1BQU07YUFDcEI7O0FBMkNEOzs7R0FHRztBQUNILE1BQU0sQ0FBTixJQUFZLGdCQWdCWDtBQWhCRCxXQUFZLGdCQUFnQjtJQUMxQjs7O09BR0c7SUFDSCwrQkFBVyxDQUFBO0lBRVg7O09BRUc7SUFDSCxpQ0FBYSxDQUFBO0lBQ2I7OztPQUdHO0lBQ0gsaUNBQWEsQ0FBQTtBQUNmLENBQUMsRUFoQlcsZ0JBQWdCLEtBQWhCLGdCQUFnQixRQWdCM0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgRGlyZWN0aW9uTW9kZSB9IGZyb20gJy4uLy4uLy4uL2xheW91dC9kaXJlY3Rpb24vY29uZmlnL2RpcmVjdGlvbi5tb2RlbCc7XG5cbmV4cG9ydCBlbnVtIElDT05fVFlQRSB7XG4gIFNUQVIgPSAnU1RBUicsXG4gIFNFQVJDSCA9ICdTRUFSQ0gnLFxuICBDQVJUID0gJ0NBUlQnLFxuICBJTkZPID0gJ0lORk8nLFxuICBHUklEID0gJ0dSSUQnLFxuICBMSVNUID0gJ0xJU1QnLFxuICBDQVJFVF9ET1dOID0gJ0NBUkVUX0RPV04nLFxuICBDQVJFVF9MRUZUID0gJ0NBUkVUX0xFRlQnLFxuICBDQVJFVF9SSUdIVCA9ICdDQVJFVF9SSUdIVCcsXG4gIENMT1NFID0gJ0NMT1NFJyxcbiAgRVJST1IgPSAnRVJST1InLFxuICBXQVJOSU5HID0gJ1dBUk5JTkcnLFxuICBTVUNDRVNTID0gJ1NVQ0NFU1MnLFxuICBWSVNBID0gJ1ZJU0EnLFxuICBNQVNURVJfQ0FSRCA9ICdNQVNURVJfQ0FSRCcsXG4gIEFNRVggPSAnQU1FWCcsXG4gIERJTkVSU19DTFVCID0gJ0RJTkVSU19DTFVCJyxcbiAgQ1JFRElUX0NBUkQgPSAnQ1JFRElUX0NBUkQnLFxuICBFWFBBTkQgPSAnRVhQQU5EJyxcbiAgQ09MTEFQU0UgPSAnQ09MTEFQU0UnLFxuICBSRVNFVCA9ICdSRVNFVCcsXG4gIENJUkNMRSA9ICdDSVJDTEUnLFxuICBIRUFSVCA9ICdIRUFSVCcsXG4gIEVNUFRZX0hFQVJUID0gJ0VNUFRZX0hFQVJUJyxcbiAgRklMVEVSID0gJ0ZJTFRFUicsXG4gIFBFTkNJTCA9ICdQRU5DSUwnLFxuICBUUkFTSCA9ICdUUkFTSCcsXG5cbiAgQUNUSVZFID0gJ0FDVElWRScsXG4gIFNPUlRfRE9XTiA9ICdTT1JUX0RPV04nLFxuICBTT1JUID0gJ1NPUlQnLFxuXG4gIE9OID0gJ09OJyxcbiAgT0ZGID0gJ09GRicsXG5cbiAgTElOS19PVVQgPSAnTElOS19PVVQnLFxufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290JyxcbiAgdXNlRXhpc3Rpbmc6IENvbmZpZyxcbn0pXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSWNvbkNvbmZpZyB7XG4gIGljb24/OiBJY29uT3B0aW9ucztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJY29uT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBFYWNoIGljb24gdHlwZSBjYW4gYmUgY29uZmlndXJlZCB3aXRoIGEgc28tY2FsbGVkIHN5bWJvbC4gVGhlIHN5bWJvbCB3aWxsXG4gICAqIGJlIHVzZWQgdG8gbWFwIHRoZSBpY29uIHRvIGFuIFNWRyBgc3ltYm9sYCAoaWQpIG9yIHRvIHRoZSBzdHlsZSBjbGFzc2VzIG9mXG4gICAqIGEgZm9udCBiYXNlZCBpY29uLiBUaGUgZm9sbG93aW5nIGNvbmZpZ3VyYXRpb24gd291bGQgbWFwIHRvIGEgZm9udGF3ZXNvbWVcbiAgICogaWNvbjpcbiAgICpcbiAgICogaWNvbjoge1xuICAgKiAgIHN5bWJvbHM6IHtcbiAgICogICAgIENBUlQ6ICdmYXMgZmEtc2hvcHBpbmctY2FydCdcbiAgICogICB9XG4gICAqIH1cbiAgICovXG4gIHN5bWJvbHM/OiB7XG4gICAgW0lDT05fVFlQRTogc3RyaW5nXTogc3RyaW5nO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXNvdXJjZXMgYXJlIHVzZWQgdG8gbWFwIGljb24gdHlwZXMgdG8gY2VydGFpbiBhc3NldCwgc3VjaCBhcyBhbiBTVkcgKHNwcml0ZSkgaW1hZ2UuXG4gICAqIFRoZSByZXNvdXJjZSB0eXBlIChgSWNvblJlc291cmNlVHlwZWApIGRpY3RhdGVzIHdoZXRoZXIgYW4gU1ZHIGltYWdlIGlzIHVzZWQuIFRoZSBVUkxcbiAgICogaXMgdXNlZCBmb3IgdGhlIFNWRyB4bGluayByZWZlcmVuY2UuXG4gICAqL1xuICByZXNvdXJjZXM/OiBJY29uQ29uZmlnUmVzb3VyY2VbXTtcblxuICAvKipcbiAgICogTGlzdHMgaWNvbnMgdGhhdCBzaG91bGQgYmUgZmxpcHBlZCBmb3IgYSBzcGVjaWZpYyBkaXJlY3Rpb24uXG4gICAqL1xuICBmbGlwRGlyZWN0aW9uPzoge1xuICAgIFtJQ09OX1RZUEU6IHN0cmluZ106IERpcmVjdGlvbk1vZGU7XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSWNvbkNvbmZpZ1Jlc291cmNlIHtcbiAgdHlwZTogSWNvblJlc291cmNlVHlwZSB8IHN0cmluZztcbiAgdXJsPzogc3RyaW5nO1xuICB0eXBlcz86IChJQ09OX1RZUEUgfCBzdHJpbmcpW107XG59XG5cbi8qKlxuICogRWFjaCBJQ09OIHR5cGUgY2FuIGhhdmUgYW4gY29tcGFuaWVkIHJlc291cmNlIHR5cGUsIHN1Y2ggYXMgU1ZHLCBMSU5LIChmb250KSBvciBqdXN0IFRFWFQuXG4gKiBUaGUgcmVzb3VyY2VzIHdpbGwgYmUgYXV0b21hdGljYWxseSBsb2FkZWQgaW4gY2FzZSB0aGV5J3JlIHJlcXVpcmVkIGZvciB0aGUgYElDT05fVFlQRWAuXG4gKi9cbmV4cG9ydCBlbnVtIEljb25SZXNvdXJjZVR5cGUge1xuICAvKipcbiAgICogQW4gc3ZnIGJhc2VkIGljb24gcmVxdWlyZXMgYW4gU1ZHIHJlc291cmNlIHRoYXQgbXVzdCBiZSBsb2FkZWQsXG4gICAqIHRoaXMgaXMgdHlwaWNhbGx5IGEgc3ByaXRlIHN2ZyBmaWxlLlxuICAgKi9cbiAgU1ZHID0gJ3N2ZycsXG5cbiAgLyoqXG4gICAqIEEgZm9udCBiYXNlZCBJQ09OIG1pZ2h0IHJlcXVpcmUgYW4gYWRkaXRpb25hbCBDU1MgZmlsZSB0byBiZSBsb2FkZWQuXG4gICAqL1xuICBMSU5LID0gJ2xpbmsnLFxuICAvKipcbiAgICogVGV4dCBiYXNlZCBpY29ucyB3aWxsIHNpbXBseSBhZGQgdGhlIElDT04gc3RyaW5nIHRvIHRoZSBET00uIFRleHQgaWNvbnMgZG8gbm90IG5lZWQgYW4gaW1hZ2VcbiAgICogb3IgQ1NTIHBzZXVkbyBjbGFzcyAoaS5lLiA6YmVmb3JlKSwgYXMgdGhlIHRleHQgaXRzZWxmIGlzIHRoZSBpY29uIChpLmUuICspXG4gICAqL1xuICBURVhUID0gJ3RleHQnLFxufVxuIl19