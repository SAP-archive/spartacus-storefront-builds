import { Injectable } from '@angular/core';
import { RoutingConfigService, RoutingService } from '@spartacus/core';
import { BehaviorSubject } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { CheckoutConfigService } from './checkout-config.service';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "./checkout-config.service";
export class CheckoutStepService {
    constructor(routingService, checkoutConfigService, routingConfigService) {
        this.routingService = routingService;
        this.checkoutConfigService = checkoutConfigService;
        this.routingConfigService = routingConfigService;
        this.steps$ = new BehaviorSubject(undefined);
        this.activeStepIndex$ = this.routingService.getRouterState().pipe(switchMap((router) => {
            const activeStepUrl = router.state.context.id;
            return this.steps$.pipe(map((steps) => {
                let activeIndex;
                steps.forEach((step, index) => {
                    const routeUrl = `/${this.routingConfigService.getRouteConfig(step.routeName).paths[0]}`;
                    if (routeUrl === activeStepUrl) {
                        activeIndex = index;
                    }
                });
                return activeIndex;
            }));
        }));
        this.resetSteps();
    }
    back(activatedRoute) {
        const previousUrl = this.getPreviousCheckoutStepUrl(activatedRoute);
        this.routingService.go(previousUrl === null ? 'cart' : previousUrl);
    }
    next(activatedRoute) {
        const nextUrl = this.getNextCheckoutStepUrl(activatedRoute);
        this.routingService.go(nextUrl);
    }
    goToStepWithIndex(stepIndex) {
        this.routingService.go(this.getStepUrlFromStepRoute(this.allSteps[stepIndex].routeName));
    }
    getBackBntText(activatedRoute) {
        if (this.getPreviousCheckoutStepUrl(activatedRoute) === null) {
            return 'checkout.backToCart';
        }
        return 'common.back';
    }
    resetSteps() {
        this.allSteps = this.checkoutConfigService.steps
            .filter((step) => !step.disabled)
            .map((x) => Object.assign({}, x));
        this.steps$.next(this.allSteps);
    }
    disableEnableStep(currentStepType, disabled) {
        const currentStep = this.allSteps.find((step) => step.type.includes(currentStepType));
        if (currentStep && currentStep.disabled !== disabled) {
            currentStep.disabled = disabled;
            this.steps$.next(this.allSteps.filter((step) => !step.disabled));
        }
    }
    getCheckoutStep(currentStepType) {
        return this.allSteps[this.getCheckoutStepIndex('type', currentStepType)];
    }
    getCheckoutStepRoute(currentStepType) {
        return this.getCheckoutStep(currentStepType).routeName;
    }
    getFirstCheckoutStepRoute() {
        return this.allSteps[0].routeName;
    }
    getNextCheckoutStepUrl(activatedRoute) {
        const stepIndex = this.getCurrentStepIndex(activatedRoute);
        if (stepIndex >= 0) {
            let i = 1;
            while (this.allSteps[stepIndex + i] &&
                this.allSteps[stepIndex + i].disabled) {
                i++;
            }
            const nextStep = this.allSteps[stepIndex + i];
            if (nextStep) {
                return this.getStepUrlFromStepRoute(nextStep.routeName);
            }
        }
        return null;
    }
    getPreviousCheckoutStepUrl(activatedRoute) {
        const stepIndex = this.getCurrentStepIndex(activatedRoute);
        if (stepIndex >= 0) {
            let i = 1;
            while (this.allSteps[stepIndex - i] &&
                this.allSteps[stepIndex - i].disabled) {
                i++;
            }
            const previousStep = this.allSteps[stepIndex - i];
            if (previousStep) {
                return this.getStepUrlFromStepRoute(previousStep.routeName);
            }
        }
        return null;
    }
    getCurrentStepIndex(activatedRoute) {
        const currentStepUrl = this.getStepUrlFromActivatedRoute(activatedRoute);
        return this.allSteps.findIndex((step) => currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`);
    }
    getStepUrlFromActivatedRoute(activatedRoute) {
        return activatedRoute &&
            activatedRoute.snapshot &&
            activatedRoute.snapshot.url
            ? `/${activatedRoute.snapshot.url.join('/')}`
            : null;
    }
    getStepUrlFromStepRoute(stepRoute) {
        return this.routingConfigService.getRouteConfig(stepRoute).paths[0];
    }
    getCheckoutStepIndex(key, value) {
        return key && value
            ? this.allSteps.findIndex((step) => step[key].includes(value))
            : null;
    }
}
CheckoutStepService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CheckoutStepService_Factory() { return new CheckoutStepService(i0.ɵɵinject(i1.RoutingService), i0.ɵɵinject(i2.CheckoutConfigService), i0.ɵɵinject(i1.RoutingConfigService)); }, token: CheckoutStepService, providedIn: "root" });
CheckoutStepService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
CheckoutStepService.ctorParameters = () => [
    { type: RoutingService },
    { type: CheckoutConfigService },
    { type: RoutingConfigService }
];
//# sourceMappingURL=data:application/json;base64,