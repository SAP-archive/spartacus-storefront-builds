import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { FeatureConfigService } from '@spartacus/core';
import { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';
import * as i0 from "@angular/core";
let OutletService = class OutletService {
    constructor(features) {
        this.features = features;
        this.templatesRefs = {
            [OutletPosition.BEFORE]: new Map(),
            [OutletPosition.REPLACE]: new Map(),
            [OutletPosition.AFTER]: new Map(),
        };
    }
    /**
     * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.
     */
    add(outlet, templateOrFactory, position = OutletPosition.REPLACE) {
        const store = this.templatesRefs[position];
        if (store) {
            const existing = store.get(outlet) || [];
            const newValue = existing.concat([templateOrFactory]);
            store.set(outlet, newValue);
        }
    }
    /**
     *
     * Returns a single object or multiple objects for the given outlet reference,
     * depending on the `stacked` argument.
     *
     * @param outlet The outlet reference
     * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`
     * @param stacked Indicates whether an array of outlet components is returned
     */
    get(outlet, position = OutletPosition.REPLACE, stacked = AVOID_STACKED_OUTLETS) {
        const store = this.templatesRefs[position] ||
            this.templatesRefs[OutletPosition.REPLACE];
        const templateRef = store.get(outlet);
        if (templateRef && !stacked) {
            return templateRef[0];
        }
        return templateRef;
    }
    remove(outlet, position = OutletPosition.REPLACE, value) {
        const store = this.templatesRefs[position] ||
            this.templatesRefs[OutletPosition.REPLACE];
        this.removeValueOrAll(store, outlet, value);
    }
    removeValueOrAll(store, outlet, value) {
        var _a;
        if (!value && store.has(outlet)) {
            store.delete(outlet);
        }
        else if (value && store.has(outlet)) {
            let existing = store.get(outlet);
            if ((_a = this.features) === null || _a === void 0 ? void 0 : _a.isLevel('2.1')) {
                existing = existing.filter((val) => val !== value);
            }
            else {
                // deprecated since 2.1, see #8116:
                existing = existing.filter((val) => val === value);
            }
            store.set(outlet, existing);
        }
    }
};
OutletService.ctorParameters = () => [
    { type: FeatureConfigService }
];
OutletService.ɵprov = i0.ɵɵdefineInjectable({ factory: function OutletService_Factory() { return new OutletService(); }, token: OutletService, providedIn: "root" });
OutletService = __decorate([
    Injectable({
        providedIn: 'root',
    })
], OutletService);
export { OutletService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0bGV0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL3N0b3JlZnJvbnQvIiwic291cmNlcyI6WyJjbXMtc3RydWN0dXJlL291dGxldC9vdXRsZXQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBZSxNQUFNLGVBQWUsQ0FBQztBQUN4RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBS3ZFLElBQWEsYUFBYSxHQUExQixNQUFhLGFBQWE7SUFPeEIsWUFBc0IsUUFBK0I7UUFBL0IsYUFBUSxHQUFSLFFBQVEsQ0FBdUI7UUFFN0Msa0JBQWEsR0FBRztZQUN0QixDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEdBQUcsRUFBZTtZQUMvQyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEdBQUcsRUFBZTtZQUNoRCxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLEdBQUcsRUFBZTtTQUMvQyxDQUFDO0lBTnNELENBQUM7SUE0QnpEOztPQUVHO0lBQ0gsR0FBRyxDQUNELE1BQWMsRUFDZCxpQkFBb0IsRUFDcEIsV0FBMkIsY0FBYyxDQUFDLE9BQU87UUFFakQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQyxJQUFJLEtBQUssRUFBRTtZQUNULE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3pDLE1BQU0sUUFBUSxHQUFRLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7WUFDM0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDN0I7SUFDSCxDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSCxHQUFHLENBQ0QsTUFBYyxFQUNkLFdBQTJCLGNBQWMsQ0FBQyxPQUFPLEVBQ2pELE9BQU8sR0FBRyxxQkFBcUI7UUFFL0IsTUFBTSxLQUFLLEdBQ1QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7WUFDNUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFN0MsTUFBTSxXQUFXLEdBQVEsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzQyxJQUFJLFdBQVcsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUMzQixPQUFPLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN2QjtRQUNELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxNQUFNLENBQ0osTUFBYyxFQUNkLFdBQTJCLGNBQWMsQ0FBQyxPQUFPLEVBQ2pELEtBQVM7UUFFVCxNQUFNLEtBQUssR0FDVCxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztZQUM1QixJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU3QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRVMsZ0JBQWdCLENBQ3hCLEtBQXVCLEVBQ3ZCLE1BQWMsRUFDZCxLQUFTOztRQUVULElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUMvQixLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU0sSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNyQyxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRWpDLFVBQUksSUFBSSxDQUFDLFFBQVEsMENBQUUsT0FBTyxDQUFDLEtBQUssR0FBRztnQkFDakMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsS0FBSyxLQUFLLENBQUMsQ0FBQzthQUNwRDtpQkFBTTtnQkFDTCxtQ0FBbUM7Z0JBQ25DLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEtBQUssS0FBSyxDQUFDLENBQUM7YUFDcEQ7WUFFRCxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztTQUM3QjtJQUNILENBQUM7Q0FDRixDQUFBOztZQXJHa0Msb0JBQW9COzs7QUFQMUMsYUFBYTtJQUh6QixVQUFVLENBQUM7UUFDVixVQUFVLEVBQUUsTUFBTTtLQUNuQixDQUFDO0dBQ1csYUFBYSxDQTRHekI7U0E1R1ksYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGZWF0dXJlQ29uZmlnU2VydmljZSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBBVk9JRF9TVEFDS0VEX09VVExFVFMsIE91dGxldFBvc2l0aW9uIH0gZnJvbSAnLi9vdXRsZXQubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgT3V0bGV0U2VydmljZTxUID0gVGVtcGxhdGVSZWY8YW55Pj4ge1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgc2luY2UgMi4xLCBzZWUgIzgxMTZcbiAgICovXG4gIGNvbnN0cnVjdG9yKCk7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogdW5pZmllZC1zaWduYXR1cmVzXG4gIGNvbnN0cnVjdG9yKGZlYXR1cmVzOiBGZWF0dXJlQ29uZmlnU2VydmljZSk7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBmZWF0dXJlcz86IEZlYXR1cmVDb25maWdTZXJ2aWNlKSB7fVxuXG4gIHByaXZhdGUgdGVtcGxhdGVzUmVmcyA9IHtcbiAgICBbT3V0bGV0UG9zaXRpb24uQkVGT1JFXTogbmV3IE1hcDxzdHJpbmcsIFRbXT4oKSxcbiAgICBbT3V0bGV0UG9zaXRpb24uUkVQTEFDRV06IG5ldyBNYXA8c3RyaW5nLCBUW10+KCksXG4gICAgW091dGxldFBvc2l0aW9uLkFGVEVSXTogbmV3IE1hcDxzdHJpbmcsIFRbXT4oKSxcbiAgfTtcblxuICAvKipcbiAgICogQWRkcyBhIHRlbXBsYXRlIG9yIENvbXBvbmVudEZhY3RvcnksIHNvIHRoYXQgVUkgb3V0bGV0cyBjYW4gYmUgcmVwbGFjZWQgZHluYW1pY2FsbHkuXG4gICAqIFRoZSBVSSBwb3NpdGlvbiB3aGVyZSB0aGlzIHRlbXBsYXRlIG9yIENvbXBvbmVudEZhY3RvcnkgaXMgaW5zZXJ0ZWQgaXMgZ2l2ZW4gYnkgYVxuICAgKiBzdHJpbmcgcmVmZXJlbmNlIChjYWxsZWQgYG91dGxldGApIGFuZCBvcHRpb25hbCBgT3V0bGV0UG9zaXRpb25gLiBUaGUgYE91dGxldFBvc2l0aW9uYFxuICAgKiBpcyBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyLCBvciByZXBsYWNlcyB0aGUgZW50aXJlIFVJLlxuICAgKlxuICAgKiBAcGFyYW0gb3V0bGV0IHRoZSBVSSBsb2NhdGlvbiByZXByZXNlbnRlZCBieSBhIHN0cmluZ1xuICAgKiBAcGFyYW0gdGVtcGxhdGUgdGhlIGBUZW1wbGF0ZVJlZmAgdGhhdCB3aWxsIGJlIHVzZWQgdG8gaW5zZXJ0IFVJXG4gICAqIEBwYXJhbSBwb3NpdGlvbiB0aGUgYE91dGxldFBvc2l0aW9uYCBpbiB0aGUgVUlcbiAgICovXG4gIGFkZChvdXRsZXQ6IHN0cmluZywgdGVtcGxhdGU6IFQsIHBvc2l0aW9uPzogT3V0bGV0UG9zaXRpb24pOiB2b2lkO1xuICAvKipcbiAgICogQHBhcmFtIGZhY3RvcnkgVGhlIGBDb21wb25lbnRGYWN0b3J5YCB0aGF0IHdpbGwgYmUgZHluYW1pY2FsbHkgYWRkZWQgdG8gdGhlIG91dGxldCBVSVxuICAgKi9cbiAgYWRkKFxuICAgIG91dGxldDogc3RyaW5nLFxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogdW5pZmllZC1zaWduYXR1cmVzXG4gICAgZmFjdG9yeTogVCxcbiAgICBwb3NpdGlvbj86IE91dGxldFBvc2l0aW9uXG4gICk6IHZvaWQ7XG4gIC8qKlxuICAgKiBAcGFyYW0gdGVtcGxhdGVPckZhY3RvcnkgQSBgQ29tcG9uZW50RmFjdG9yeWAgdGhhdCBpbnNlcnRzIGEgY29tcG9uZW50IGR5bmFtaWNhbGx5LlxuICAgKi9cbiAgYWRkKFxuICAgIG91dGxldDogc3RyaW5nLFxuICAgIHRlbXBsYXRlT3JGYWN0b3J5OiBULFxuICAgIHBvc2l0aW9uOiBPdXRsZXRQb3NpdGlvbiA9IE91dGxldFBvc2l0aW9uLlJFUExBQ0VcbiAgKTogdm9pZCB7XG4gICAgY29uc3Qgc3RvcmUgPSB0aGlzLnRlbXBsYXRlc1JlZnNbcG9zaXRpb25dO1xuICAgIGlmIChzdG9yZSkge1xuICAgICAgY29uc3QgZXhpc3RpbmcgPSBzdG9yZS5nZXQob3V0bGV0KSB8fCBbXTtcbiAgICAgIGNvbnN0IG5ld1ZhbHVlOiBUW10gPSBleGlzdGluZy5jb25jYXQoW3RlbXBsYXRlT3JGYWN0b3J5XSk7XG4gICAgICBzdG9yZS5zZXQob3V0bGV0LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIFJldHVybnMgYSBzaW5nbGUgb2JqZWN0IG9yIG11bHRpcGxlIG9iamVjdHMgZm9yIHRoZSBnaXZlbiBvdXRsZXQgcmVmZXJlbmNlLFxuICAgKiBkZXBlbmRpbmcgb24gdGhlIGBzdGFja2VkYCBhcmd1bWVudC5cbiAgICpcbiAgICogQHBhcmFtIG91dGxldCBUaGUgb3V0bGV0IHJlZmVyZW5jZVxuICAgKiBAcGFyYW0gcG9zaXRpb24gdGhlIG91dGxldCBwb3NpdGlvbiwgYE91dGxldFBvc2l0aW9uLmJlZm9yZWAsIGBPdXRsZXRQb3NpdGlvbi5BRlRFUmAgb3IgYE91dGxldFBvc2l0aW9uLlJFUExBQ0VgXG4gICAqIEBwYXJhbSBzdGFja2VkIEluZGljYXRlcyB3aGV0aGVyIGFuIGFycmF5IG9mIG91dGxldCBjb21wb25lbnRzIGlzIHJldHVybmVkXG4gICAqL1xuICBnZXQoXG4gICAgb3V0bGV0OiBzdHJpbmcsXG4gICAgcG9zaXRpb246IE91dGxldFBvc2l0aW9uID0gT3V0bGV0UG9zaXRpb24uUkVQTEFDRSxcbiAgICBzdGFja2VkID0gQVZPSURfU1RBQ0tFRF9PVVRMRVRTXG4gICk6IFRbXSB8IFQge1xuICAgIGNvbnN0IHN0b3JlID1cbiAgICAgIHRoaXMudGVtcGxhdGVzUmVmc1twb3NpdGlvbl0gfHxcbiAgICAgIHRoaXMudGVtcGxhdGVzUmVmc1tPdXRsZXRQb3NpdGlvbi5SRVBMQUNFXTtcblxuICAgIGNvbnN0IHRlbXBsYXRlUmVmOiBUW10gPSBzdG9yZS5nZXQob3V0bGV0KTtcbiAgICBpZiAodGVtcGxhdGVSZWYgJiYgIXN0YWNrZWQpIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZVJlZlswXTtcbiAgICB9XG4gICAgcmV0dXJuIHRlbXBsYXRlUmVmO1xuICB9XG5cbiAgcmVtb3ZlKFxuICAgIG91dGxldDogc3RyaW5nLFxuICAgIHBvc2l0aW9uOiBPdXRsZXRQb3NpdGlvbiA9IE91dGxldFBvc2l0aW9uLlJFUExBQ0UsXG4gICAgdmFsdWU/OiBUXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IHN0b3JlID1cbiAgICAgIHRoaXMudGVtcGxhdGVzUmVmc1twb3NpdGlvbl0gfHxcbiAgICAgIHRoaXMudGVtcGxhdGVzUmVmc1tPdXRsZXRQb3NpdGlvbi5SRVBMQUNFXTtcblxuICAgIHRoaXMucmVtb3ZlVmFsdWVPckFsbChzdG9yZSwgb3V0bGV0LCB2YWx1ZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVtb3ZlVmFsdWVPckFsbChcbiAgICBzdG9yZTogTWFwPHN0cmluZywgVFtdPixcbiAgICBvdXRsZXQ6IHN0cmluZyxcbiAgICB2YWx1ZT86IFRcbiAgKTogdm9pZCB7XG4gICAgaWYgKCF2YWx1ZSAmJiBzdG9yZS5oYXMob3V0bGV0KSkge1xuICAgICAgc3RvcmUuZGVsZXRlKG91dGxldCk7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSAmJiBzdG9yZS5oYXMob3V0bGV0KSkge1xuICAgICAgbGV0IGV4aXN0aW5nID0gc3RvcmUuZ2V0KG91dGxldCk7XG5cbiAgICAgIGlmICh0aGlzLmZlYXR1cmVzPy5pc0xldmVsKCcyLjEnKSkge1xuICAgICAgICBleGlzdGluZyA9IGV4aXN0aW5nLmZpbHRlcigodmFsKSA9PiB2YWwgIT09IHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlcHJlY2F0ZWQgc2luY2UgMi4xLCBzZWUgIzgxMTY6XG4gICAgICAgIGV4aXN0aW5nID0gZXhpc3RpbmcuZmlsdGVyKCh2YWwpID0+IHZhbCA9PT0gdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBzdG9yZS5zZXQob3V0bGV0LCBleGlzdGluZyk7XG4gICAgfVxuICB9XG59XG4iXX0=