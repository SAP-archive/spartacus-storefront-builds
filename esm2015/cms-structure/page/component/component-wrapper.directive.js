import { ChangeDetectorRef, Directive, Injector, Input, Renderer2, ViewContainerRef, } from '@angular/core';
import { DynamicAttributeService, } from '@spartacus/core';
import { CmsComponentsService } from '../../services/cms-components.service';
import { CmsInjectorService } from './services/cms-injector.service';
import { ComponentHandlerService } from './services/component-handler.service';
/**
 * Directive used to facilitate instantiation of CMS driven dynamic components
 */
export class ComponentWrapperDirective {
    constructor(vcr, cmsComponentsService, injector, dynamicAttributeService, renderer, componentHandler, cmsInjector) {
        this.vcr = vcr;
        this.cmsComponentsService = cmsComponentsService;
        this.injector = injector;
        this.dynamicAttributeService = dynamicAttributeService;
        this.renderer = renderer;
        this.componentHandler = componentHandler;
        this.cmsInjector = cmsInjector;
    }
    ngOnInit() {
        this.cmsComponentsService
            .determineMappings([this.cxComponentWrapper.flexType])
            .subscribe(() => {
            if (this.cmsComponentsService.shouldRender(this.cxComponentWrapper.flexType)) {
                this.launchComponent();
            }
        });
    }
    launchComponent() {
        var _a;
        const componentMapping = this.cmsComponentsService.getMapping(this.cxComponentWrapper.flexType);
        if (!componentMapping) {
            return;
        }
        this.launcherResource = (_a = this.componentHandler
            .getLauncher(componentMapping, this.vcr, this.cmsInjector.getInjector(this.cxComponentWrapper.flexType, this.cxComponentWrapper.uid, this.injector))) === null || _a === void 0 ? void 0 : _a.subscribe(({ elementRef, componentRef }) => {
            this.cmpRef = componentRef;
            this.decorate(elementRef);
            this.injector.get(ChangeDetectorRef).markForCheck();
        });
    }
    decorate(elementRef) {
        this.dynamicAttributeService.addDynamicAttributes(elementRef.nativeElement, this.renderer, { componentData: this.cxComponentWrapper });
    }
    ngOnDestroy() {
        if (this.launcherResource) {
            this.launcherResource.unsubscribe();
        }
    }
}
ComponentWrapperDirective.decorators = [
    { type: Directive, args: [{
                selector: '[cxComponentWrapper]',
            },] }
];
ComponentWrapperDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: CmsComponentsService },
    { type: Injector },
    { type: DynamicAttributeService },
    { type: Renderer2 },
    { type: ComponentHandlerService },
    { type: CmsInjectorService }
];
ComponentWrapperDirective.propDecorators = {
    cxComponentWrapper: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LXdyYXBwZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RvcmVmcm9udGxpYi9zcmMvY21zLXN0cnVjdHVyZS9wYWdlL2NvbXBvbmVudC9jb21wb25lbnQtd3JhcHBlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGlCQUFpQixFQUVqQixTQUFTLEVBRVQsUUFBUSxFQUNSLEtBQUssRUFHTCxTQUFTLEVBQ1QsZ0JBQWdCLEdBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFFTCx1QkFBdUIsR0FDeEIsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNyRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUUvRTs7R0FFRztBQUlILE1BQU0sT0FBTyx5QkFBeUI7SUFjcEMsWUFDWSxHQUFxQixFQUNyQixvQkFBMEMsRUFDMUMsUUFBa0IsRUFDbEIsdUJBQWdELEVBQ2hELFFBQW1CLEVBQ25CLGdCQUF5QyxFQUN6QyxXQUErQjtRQU4vQixRQUFHLEdBQUgsR0FBRyxDQUFrQjtRQUNyQix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBQzFDLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtRQUNoRCxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBeUI7UUFDekMsZ0JBQVcsR0FBWCxXQUFXLENBQW9CO0lBQ3hDLENBQUM7SUFFSixRQUFRO1FBQ04sSUFBSSxDQUFDLG9CQUFvQjthQUN0QixpQkFBaUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNyRCxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFDRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsWUFBWSxDQUNwQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUNqQyxFQUNEO2dCQUNBLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQzthQUN4QjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLGVBQWU7O1FBQ3JCLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFVBQVUsQ0FDM0QsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FDakMsQ0FBQztRQUVGLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUNyQixPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsZ0JBQWdCLFNBQUcsSUFBSSxDQUFDLGdCQUFnQjthQUMxQyxXQUFXLENBQ1YsZ0JBQWdCLEVBQ2hCLElBQUksQ0FBQyxHQUFHLEVBQ1IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQzFCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQ2hDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQzNCLElBQUksQ0FBQyxRQUFRLENBQ2QsQ0FDRiwwQ0FDQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFO1lBQzNDLElBQUksQ0FBQyxNQUFNLEdBQUcsWUFBWSxDQUFDO1lBQzNCLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0RCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTyxRQUFRLENBQUMsVUFBc0I7UUFDckMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLG9CQUFvQixDQUMvQyxVQUFVLENBQUMsYUFBYSxFQUN4QixJQUFJLENBQUMsUUFBUSxFQUNiLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUMzQyxDQUFDO0lBQ0osQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN6QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDckM7SUFDSCxDQUFDOzs7WUEvRUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxzQkFBc0I7YUFDakM7OztZQWhCQyxnQkFBZ0I7WUFPVCxvQkFBb0I7WUFaM0IsUUFBUTtZQVNSLHVCQUF1QjtZQUx2QixTQUFTO1lBVUYsdUJBQXVCO1lBRHZCLGtCQUFrQjs7O2lDQVV4QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudFJlZixcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBJbmplY3RvcixcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBSZW5kZXJlcjIsXG4gIFZpZXdDb250YWluZXJSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQ29udGVudFNsb3RDb21wb25lbnREYXRhLFxuICBEeW5hbWljQXR0cmlidXRlU2VydmljZSxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ21zQ29tcG9uZW50c1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jbXMtY29tcG9uZW50cy5zZXJ2aWNlJztcbmltcG9ydCB7IENtc0luamVjdG9yU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvY21zLWluamVjdG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29tcG9uZW50SGFuZGxlclNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2NvbXBvbmVudC1oYW5kbGVyLnNlcnZpY2UnO1xuXG4vKipcbiAqIERpcmVjdGl2ZSB1c2VkIHRvIGZhY2lsaXRhdGUgaW5zdGFudGlhdGlvbiBvZiBDTVMgZHJpdmVuIGR5bmFtaWMgY29tcG9uZW50c1xuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbY3hDb21wb25lbnRXcmFwcGVyXScsXG59KVxuZXhwb3J0IGNsYXNzIENvbXBvbmVudFdyYXBwZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIGN4Q29tcG9uZW50V3JhcHBlcjogQ29udGVudFNsb3RDb21wb25lbnREYXRhO1xuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBzaW5jZSAyLjBcbiAgICpcbiAgICogVGhpcyBwcm9wZXJ0eSBpbiB1bnNhZmUsIGkuZS5cbiAgICogLSBjbXBSZWYgY2FuIGJlIHNldCBsYXRlciBiZWNhdXNlIG9mIGxhenkgbG9hZGluZyBvciBkZWZlcnJlZCBsb2FkaW5nXG4gICAqIC0gY21wUmVmIGNhbiBiZSBub3Qgc2V0IGF0IGFsbCBpZiBmb3IgZXhhbXBsZSwgd2ViIGNvbXBvbmVudHMgYXJlIHVzZWQgYXMgY21zIGNvbXBvbmVudHNcbiAgICovXG4gIGNtcFJlZj86IENvbXBvbmVudFJlZjxhbnk+O1xuXG4gIHByaXZhdGUgbGF1bmNoZXJSZXNvdXJjZT86IFN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgdmNyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByb3RlY3RlZCBjbXNDb21wb25lbnRzU2VydmljZTogQ21zQ29tcG9uZW50c1NlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3RvcixcbiAgICBwcm90ZWN0ZWQgZHluYW1pY0F0dHJpYnV0ZVNlcnZpY2U6IER5bmFtaWNBdHRyaWJ1dGVTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByb3RlY3RlZCBjb21wb25lbnRIYW5kbGVyOiBDb21wb25lbnRIYW5kbGVyU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgY21zSW5qZWN0b3I6IENtc0luamVjdG9yU2VydmljZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jbXNDb21wb25lbnRzU2VydmljZVxuICAgICAgLmRldGVybWluZU1hcHBpbmdzKFt0aGlzLmN4Q29tcG9uZW50V3JhcHBlci5mbGV4VHlwZV0pXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuY21zQ29tcG9uZW50c1NlcnZpY2Uuc2hvdWxkUmVuZGVyKFxuICAgICAgICAgICAgdGhpcy5jeENvbXBvbmVudFdyYXBwZXIuZmxleFR5cGVcbiAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMubGF1bmNoQ29tcG9uZW50KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBsYXVuY2hDb21wb25lbnQoKSB7XG4gICAgY29uc3QgY29tcG9uZW50TWFwcGluZyA9IHRoaXMuY21zQ29tcG9uZW50c1NlcnZpY2UuZ2V0TWFwcGluZyhcbiAgICAgIHRoaXMuY3hDb21wb25lbnRXcmFwcGVyLmZsZXhUeXBlXG4gICAgKTtcblxuICAgIGlmICghY29tcG9uZW50TWFwcGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMubGF1bmNoZXJSZXNvdXJjZSA9IHRoaXMuY29tcG9uZW50SGFuZGxlclxuICAgICAgLmdldExhdW5jaGVyKFxuICAgICAgICBjb21wb25lbnRNYXBwaW5nLFxuICAgICAgICB0aGlzLnZjcixcbiAgICAgICAgdGhpcy5jbXNJbmplY3Rvci5nZXRJbmplY3RvcihcbiAgICAgICAgICB0aGlzLmN4Q29tcG9uZW50V3JhcHBlci5mbGV4VHlwZSxcbiAgICAgICAgICB0aGlzLmN4Q29tcG9uZW50V3JhcHBlci51aWQsXG4gICAgICAgICAgdGhpcy5pbmplY3RvclxuICAgICAgICApXG4gICAgICApXG4gICAgICA/LnN1YnNjcmliZSgoeyBlbGVtZW50UmVmLCBjb21wb25lbnRSZWYgfSkgPT4ge1xuICAgICAgICB0aGlzLmNtcFJlZiA9IGNvbXBvbmVudFJlZjtcbiAgICAgICAgdGhpcy5kZWNvcmF0ZShlbGVtZW50UmVmKTtcbiAgICAgICAgdGhpcy5pbmplY3Rvci5nZXQoQ2hhbmdlRGV0ZWN0b3JSZWYpLm1hcmtGb3JDaGVjaygpO1xuICAgICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGRlY29yYXRlKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpOiB2b2lkIHtcbiAgICB0aGlzLmR5bmFtaWNBdHRyaWJ1dGVTZXJ2aWNlLmFkZER5bmFtaWNBdHRyaWJ1dGVzKFxuICAgICAgZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LFxuICAgICAgdGhpcy5yZW5kZXJlcixcbiAgICAgIHsgY29tcG9uZW50RGF0YTogdGhpcy5jeENvbXBvbmVudFdyYXBwZXIgfVxuICAgICk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5sYXVuY2hlclJlc291cmNlKSB7XG4gICAgICB0aGlzLmxhdW5jaGVyUmVzb3VyY2UudW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==