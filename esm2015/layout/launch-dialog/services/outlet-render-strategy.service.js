import { __decorate } from "tslib";
import { ComponentFactory, ComponentFactoryResolver, Injectable, ViewContainerRef, } from '@angular/core';
import { OutletPosition, OutletService, } from '../../../cms-structure/outlet/index';
import { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';
import { LaunchRenderStrategy } from './launch-render.strategy';
import * as i0 from "@angular/core";
import * as i1 from "../../../cms-structure/outlet/outlet.service";
import * as i2 from "../../../cms-structure/outlet/outlet-renderer.service";
let OutletRenderStrategy = class OutletRenderStrategy extends LaunchRenderStrategy {
    constructor(outletService, componentFactoryResolver, outletRendererService) {
        super();
        this.outletService = outletService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.outletRendererService = outletRendererService;
    }
    /**
     * Renders the element in the configured outlet
     *
     * @param config
     * @param caller
     * @param vcr
     */
    render(config, caller, vcr) {
        if (this.shouldRender(caller, config)) {
            const template = this.componentFactoryResolver.resolveComponentFactory(config.component);
            this.outletService.add(config.outlet, template, config.position ? config.position : OutletPosition.BEFORE);
            this.outletRendererService.render(config.outlet);
            const element = vcr === null || vcr === void 0 ? void 0 : vcr.element;
            this.renderedCallers.push({ caller, element });
        }
    }
    match(config) {
        return Boolean(config.outlet);
    }
    remove(caller, config) {
        const template = this.componentFactoryResolver.resolveComponentFactory(config.component);
        this.renderedCallers = this.renderedCallers.filter((el) => el.caller === caller);
        this.outletService.remove(config.outlet, config.position ? config.position : OutletPosition.BEFORE, template);
    }
};
OutletRenderStrategy.ctorParameters = () => [
    { type: OutletService },
    { type: ComponentFactoryResolver },
    { type: OutletRendererService }
];
OutletRenderStrategy.ɵprov = i0.ɵɵdefineInjectable({ factory: function OutletRenderStrategy_Factory() { return new OutletRenderStrategy(i0.ɵɵinject(i1.OutletService), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i2.OutletRendererService)); }, token: OutletRenderStrategy, providedIn: "root" });
OutletRenderStrategy = __decorate([
    Injectable({ providedIn: 'root' })
], OutletRenderStrategy);
export { OutletRenderStrategy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0bGV0LXJlbmRlci1zdHJhdGVneS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9zdG9yZWZyb250LyIsInNvdXJjZXMiOlsibGF5b3V0L2xhdW5jaC1kaWFsb2cvc2VydmljZXMvb3V0bGV0LXJlbmRlci1zdHJhdGVneS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLHdCQUF3QixFQUN4QixVQUFVLEVBQ1YsZ0JBQWdCLEdBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFDTCxjQUFjLEVBQ2QsYUFBYSxHQUNkLE1BQU0scUNBQXFDLENBQUM7QUFDN0MsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdURBQXVELENBQUM7QUFFOUYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7QUFHaEUsSUFBYSxvQkFBb0IsR0FBakMsTUFBYSxvQkFBcUIsU0FBUSxvQkFBb0I7SUFDNUQsWUFDWSxhQUFtRCxFQUNuRCx3QkFBa0QsRUFDbEQscUJBQTRDO1FBRXRELEtBQUssRUFBRSxDQUFDO1FBSkUsa0JBQWEsR0FBYixhQUFhLENBQXNDO1FBQ25ELDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUFDbEQsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtJQUd4RCxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsTUFBTSxDQUNKLE1BQTBCLEVBQzFCLE1BQXFCLEVBQ3JCLEdBQXNCO1FBRXRCLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDckMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLHVCQUF1QixDQUNwRSxNQUFNLENBQUMsU0FBUyxDQUNqQixDQUFDO1lBQ0YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQ3BCLE1BQU0sQ0FBQyxNQUFNLEVBQ2IsUUFBUSxFQUNSLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQzFELENBQUM7WUFDRixJQUFJLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUVqRCxNQUFNLE9BQU8sR0FBRyxHQUFHLGFBQUgsR0FBRyx1QkFBSCxHQUFHLENBQUUsT0FBTyxDQUFDO1lBQzdCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDaEQ7SUFDSCxDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQTBCO1FBQzlCLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQXFCLEVBQUUsTUFBMEI7UUFDdEQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLHVCQUF1QixDQUNwRSxNQUFNLENBQUMsU0FBUyxDQUNqQixDQUFDO1FBQ0YsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FDaEQsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUM3QixDQUFDO1FBRUYsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQ3ZCLE1BQU0sQ0FBQyxNQUFNLEVBQ2IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFDekQsUUFBUSxDQUNULENBQUM7SUFDSixDQUFDO0NBQ0YsQ0FBQTs7WUFyRDRCLGFBQWE7WUFDRix3QkFBd0I7WUFDM0IscUJBQXFCOzs7QUFKN0Msb0JBQW9CO0lBRGhDLFVBQVUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQztHQUN0QixvQkFBb0IsQ0F1RGhDO1NBdkRZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudEZhY3RvcnksXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgSW5qZWN0YWJsZSxcbiAgVmlld0NvbnRhaW5lclJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBPdXRsZXRQb3NpdGlvbixcbiAgT3V0bGV0U2VydmljZSxcbn0gZnJvbSAnLi4vLi4vLi4vY21zLXN0cnVjdHVyZS9vdXRsZXQvaW5kZXgnO1xuaW1wb3J0IHsgT3V0bGV0UmVuZGVyZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vY21zLXN0cnVjdHVyZS9vdXRsZXQvb3V0bGV0LXJlbmRlcmVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTGF1bmNoT3V0bGV0RGlhbG9nLCBMQVVOQ0hfQ0FMTEVSIH0gZnJvbSAnLi4vY29uZmlnL2luZGV4JztcbmltcG9ydCB7IExhdW5jaFJlbmRlclN0cmF0ZWd5IH0gZnJvbSAnLi9sYXVuY2gtcmVuZGVyLnN0cmF0ZWd5JztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBPdXRsZXRSZW5kZXJTdHJhdGVneSBleHRlbmRzIExhdW5jaFJlbmRlclN0cmF0ZWd5IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIG91dGxldFNlcnZpY2U6IE91dGxldFNlcnZpY2U8Q29tcG9uZW50RmFjdG9yeTxhbnk+PixcbiAgICBwcm90ZWN0ZWQgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgcHJvdGVjdGVkIG91dGxldFJlbmRlcmVyU2VydmljZTogT3V0bGV0UmVuZGVyZXJTZXJ2aWNlXG4gICkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgZWxlbWVudCBpbiB0aGUgY29uZmlndXJlZCBvdXRsZXRcbiAgICpcbiAgICogQHBhcmFtIGNvbmZpZ1xuICAgKiBAcGFyYW0gY2FsbGVyXG4gICAqIEBwYXJhbSB2Y3JcbiAgICovXG4gIHJlbmRlcihcbiAgICBjb25maWc6IExhdW5jaE91dGxldERpYWxvZyxcbiAgICBjYWxsZXI6IExBVU5DSF9DQUxMRVIsXG4gICAgdmNyPzogVmlld0NvbnRhaW5lclJlZlxuICApIHtcbiAgICBpZiAodGhpcy5zaG91bGRSZW5kZXIoY2FsbGVyLCBjb25maWcpKSB7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFxuICAgICAgICBjb25maWcuY29tcG9uZW50XG4gICAgICApO1xuICAgICAgdGhpcy5vdXRsZXRTZXJ2aWNlLmFkZChcbiAgICAgICAgY29uZmlnLm91dGxldCxcbiAgICAgICAgdGVtcGxhdGUsXG4gICAgICAgIGNvbmZpZy5wb3NpdGlvbiA/IGNvbmZpZy5wb3NpdGlvbiA6IE91dGxldFBvc2l0aW9uLkJFRk9SRVxuICAgICAgKTtcbiAgICAgIHRoaXMub3V0bGV0UmVuZGVyZXJTZXJ2aWNlLnJlbmRlcihjb25maWcub3V0bGV0KTtcblxuICAgICAgY29uc3QgZWxlbWVudCA9IHZjcj8uZWxlbWVudDtcbiAgICAgIHRoaXMucmVuZGVyZWRDYWxsZXJzLnB1c2goeyBjYWxsZXIsIGVsZW1lbnQgfSk7XG4gICAgfVxuICB9XG5cbiAgbWF0Y2goY29uZmlnOiBMYXVuY2hPdXRsZXREaWFsb2cpIHtcbiAgICByZXR1cm4gQm9vbGVhbihjb25maWcub3V0bGV0KTtcbiAgfVxuXG4gIHJlbW92ZShjYWxsZXI6IExBVU5DSF9DQUxMRVIsIGNvbmZpZzogTGF1bmNoT3V0bGV0RGlhbG9nKTogdm9pZCB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSB0aGlzLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShcbiAgICAgIGNvbmZpZy5jb21wb25lbnRcbiAgICApO1xuICAgIHRoaXMucmVuZGVyZWRDYWxsZXJzID0gdGhpcy5yZW5kZXJlZENhbGxlcnMuZmlsdGVyKFxuICAgICAgKGVsKSA9PiBlbC5jYWxsZXIgPT09IGNhbGxlclxuICAgICk7XG5cbiAgICB0aGlzLm91dGxldFNlcnZpY2UucmVtb3ZlKFxuICAgICAgY29uZmlnLm91dGxldCxcbiAgICAgIGNvbmZpZy5wb3NpdGlvbiA/IGNvbmZpZy5wb3NpdGlvbiA6IE91dGxldFBvc2l0aW9uLkJFRk9SRSxcbiAgICAgIHRlbXBsYXRlXG4gICAgKTtcbiAgfVxufVxuIl19