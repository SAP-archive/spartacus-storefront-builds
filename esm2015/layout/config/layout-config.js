import { Injectable } from '@angular/core';
import { Config } from '@spartacus/core';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
export var BREAKPOINT;
(function (BREAKPOINT) {
    BREAKPOINT["xs"] = "xs";
    BREAKPOINT["sm"] = "sm";
    BREAKPOINT["md"] = "md";
    BREAKPOINT["lg"] = "lg";
    BREAKPOINT["xl"] = "xl";
})(BREAKPOINT || (BREAKPOINT = {}));
/**
 * The LayoutConfig supports the configuration of page slots by page templates
 * or page sections, such as headers and footers. The configuration also supports
 * adaptive design per breakpoint (not per device type), so that the DOM is (re)rendered
 * por a given breakpoint.
 */
export class LayoutConfig {
}
LayoutConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function LayoutConfig_Factory() { return i0.ɵɵinject(i1.Config); }, token: LayoutConfig, providedIn: "root" });
LayoutConfig.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
                useExisting: Config,
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N0b3JlZnJvbnRsaWIvc3JjL2xheW91dC9jb25maWcvbGF5b3V0LWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQXdCLE1BQU0saUJBQWlCLENBQUM7OztBQUcvRCxNQUFNLENBQU4sSUFBWSxVQU1YO0FBTkQsV0FBWSxVQUFVO0lBQ3BCLHVCQUFTLENBQUE7SUFDVCx1QkFBUyxDQUFBO0lBQ1QsdUJBQVMsQ0FBQTtJQUNULHVCQUFTLENBQUE7SUFDVCx1QkFBUyxDQUFBO0FBQ1gsQ0FBQyxFQU5XLFVBQVUsS0FBVixVQUFVLFFBTXJCO0FBbUNEOzs7OztHQUtHO0FBS0gsTUFBTSxPQUFnQixZQUFZOzs7O1lBSmpDLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTtnQkFDbEIsV0FBVyxFQUFFLE1BQU07YUFDcEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb25maWcsIERlZmVyTG9hZGluZ1N0cmF0ZWd5IH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IExhdW5jaENvbmZpZyB9IGZyb20gJy4uL2xhdW5jaC1kaWFsb2cvaW5kZXgnO1xuXG5leHBvcnQgZW51bSBCUkVBS1BPSU5UIHtcbiAgeHMgPSAneHMnLFxuICBzbSA9ICdzbScsXG4gIG1kID0gJ21kJyxcbiAgbGcgPSAnbGcnLFxuICB4bCA9ICd4bCcsXG59XG5cbmV4cG9ydCB0eXBlIExheW91dFNlY3Rpb25zID1cbiAgfCAnaGVhZGVyJ1xuICB8ICdmb290ZXInXG4gIHwgJ0xhbmRpbmdQYWdlMlRlbXBsYXRlJ1xuICB8IHN0cmluZztcblxuZXhwb3J0IHR5cGUgU2xvdENvbmZpZyA9IHtcbiAgLyoqIFRoZSBjbXMgcGFnZSBzbG90cyBhcmUgbWFwcGVkIGJ5IHRoZSBgc2xvdC5wb3NpdGlvbmAuICovXG4gIHNsb3RzPzogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIFRoZSBwYWdlIGZvbGQgaWRlbnRpZmllcyB0aGUgbGFzdCBleHBlY3RlZCBwYWdlIHNsb3QgYWJvdmUtdGhlLWZvbGQuXG4gICAqIEl0J3MgcGVyZmVjdGx5IGZpbmUgdG8gc3BlY2lmeSB0aGlzIGJ5IGluZGljYXRpb24sIGJ1dCBrZWVwIGluIG1pbmQgdGhhdFxuICAgKiBhIG1vcmUgcHJlY2lzZSBpbmRpY2F0aW9uIHdpbGwgZ2FpbiBhIG1vcmUgcG9zaXRpdmUgaW1wYWN0IG9uIHBlcmZvcm1hbmNlLlxuICAgKi9cbiAgcGFnZUZvbGQ/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBTbG90R3JvdXAgPSB7XG4gIC8qKiBUaGUgcGFnZSBzbG90IGNvbmZpZ3VyYXRpb24gZm9yIGxhcmdlIHNjcmVlbnMgKi9cbiAgW0JSRUFLUE9JTlQubGddPzogU2xvdENvbmZpZztcbiAgLyoqIFRoZSBwYWdlIHNsb3QgY29uZmlndXJhdGlvbiBmb3IgbWVkaXVtIHNjcmVlbnMgKi9cbiAgW0JSRUFLUE9JTlQubWRdPzogU2xvdENvbmZpZztcbiAgLyoqIFRoZSBwYWdlIHNsb3QgY29uZmlndXJhdGlvbiBmb3Igc21hbGwgc2NyZWVucyAqL1xuICBbQlJFQUtQT0lOVC5zbV0/OiBTbG90Q29uZmlnO1xuICAvKiogVGhlIHBhZ2Ugc2xvdCBjb25maWd1cmF0aW9uIGZvciBleHRyYSBzbWFsbCBzY3JlZW5zICovXG4gIFtCUkVBS1BPSU5ULnhzXT86IFNsb3RDb25maWc7XG59O1xuXG5leHBvcnQgdHlwZSBMYXlvdXRTbG90Q29uZmlnID0ge1xuICBbc2VjdGlvbiBpbiBMYXlvdXRTZWN0aW9uc106IFNsb3RDb25maWcgfCBTbG90R3JvdXAgfCBMYXlvdXRTbG90Q29uZmlnO1xufTtcblxuLyoqXG4gKiBUaGUgTGF5b3V0Q29uZmlnIHN1cHBvcnRzIHRoZSBjb25maWd1cmF0aW9uIG9mIHBhZ2Ugc2xvdHMgYnkgcGFnZSB0ZW1wbGF0ZXNcbiAqIG9yIHBhZ2Ugc2VjdGlvbnMsIHN1Y2ggYXMgaGVhZGVycyBhbmQgZm9vdGVycy4gVGhlIGNvbmZpZ3VyYXRpb24gYWxzbyBzdXBwb3J0c1xuICogYWRhcHRpdmUgZGVzaWduIHBlciBicmVha3BvaW50IChub3QgcGVyIGRldmljZSB0eXBlKSwgc28gdGhhdCB0aGUgRE9NIGlzIChyZSlyZW5kZXJlZFxuICogcG9yIGEgZ2l2ZW4gYnJlYWtwb2ludC5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG4gIHVzZUV4aXN0aW5nOiBDb25maWcsXG59KVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIExheW91dENvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgYnJlYWtwb2ludCBjb25maWd1cmF0aW9uIGlzIHVzZWQgd2hlbiB0aGUgRE9NIGlzIChyZSlyZW5kZXJlZCBpbiBzcGVjaWZpYyB2aWV3LlxuICAgKiBUaGlzIGFsbG93cyBmb3IgYWRhcHRpdmUgcmVuZGVyaW5nLCBzbyB0aGF0IHRoZSBET00gaXMgcmVuZGVyZWQgZm9yIHNwZWNpZmljIGJyZWFrcG9pbnRzLlxuICAgKi9cbiAgYnJlYWtwb2ludHM/OiB7XG4gICAgW0JSRUFLUE9JTlQueHNdPzogbnVtYmVyO1xuICAgIFtCUkVBS1BPSU5ULnNtXT86IG51bWJlcjtcbiAgICBbQlJFQUtQT0lOVC5tZF0/OiBudW1iZXI7XG4gICAgW0JSRUFLUE9JTlQubGddPzogbnVtYmVyO1xuICB9O1xuICBsYXlvdXRTbG90cz86IExheW91dFNsb3RDb25maWc7XG5cbiAgLyoqXG4gICAqIERlZmVycmVkIGxvYWRpbmcgaXMgYSB0ZWNobmlxdWUgdG8gaG9sZCBvZiB3aXRoIHRoZSBsb2FkaW5nIC8gY3JlYXRpb25cbiAgICogb2YgRE9NIGVsZW1lbnRzIHdoaWNoIGFyZSBub3Qgbm90IGluIHRoZSBpbml0aWFsIHZpZXcgcG9ydC5cbiAgICogVGhpcyB0ZWNobmlxdWUgd2lsIGluY3JlYXNlIHBlcmZvcm1hbmNlLlxuICAgKi9cbiAgZGVmZXJyZWRMb2FkaW5nPzoge1xuICAgIC8qKlxuICAgICAqIFRoZSBnbG9iYWwgc3RyYXRlZ3kgd2lsbCBiZSB1c2VkIGFzIGEgZmFsbGJhY2sgc3RyYXRlZ3kgZm9yIGFsbCBET00gY3JlYXRpb24sXG4gICAgICogYnV0IGNhbiBiZSBvdmVycmlkZGVuIGJ5IGxvY2FsIGNvbmZpZ3VyYXRpb24sIGkuZS4gZm9yIGNtcyBjb21wb25lbnRzLlxuICAgICAqL1xuICAgIHN0cmF0ZWd5PzogRGVmZXJMb2FkaW5nU3RyYXRlZ3k7XG4gICAgLyoqXG4gICAgICogVGhlIGludGVyc2VjdGlvbiBtYXJnaW4gY29udGFpbnMgdGhlIG9mZnNldCB1c2VkIGJ5IHRoZSBJbnRlcnNlY3Rpb24gT2JzZXJ2ZXJcbiAgICAgKiB0byBvYnNlcnZlIGVsZW1lbnRzIG91dHNpZGUgdGhlIHZpZXcgcG9ydC5cbiAgICAgKlxuICAgICAqIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSW50ZXJzZWN0aW9uT2JzZXJ2ZXIvcm9vdE1hcmdpblxuICAgICAqL1xuICAgIGludGVyc2VjdGlvbk1hcmdpbj86IHN0cmluZztcbiAgfTtcblxuICBsYXVuY2g/OiBMYXVuY2hDb25maWc7XG59XG4iXX0=