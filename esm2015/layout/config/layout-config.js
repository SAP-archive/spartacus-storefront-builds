import { Injectable } from '@angular/core';
import { Config } from '@spartacus/core';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
/**
 * The `BREAKPOINT` typing defaults to five default screen names:
 * xs, sm, md, lg, xl.
 *
 * The type can be extended to allow for custom screens, such as XLL or `tablet`.
 *
 * While the screen names are fully configurable, other features might have
 * pre-configured layout settings per screen. Page layouts or table configurations,
 * for example, are driven by screen size. In case you change the screen size or
 * introduce new screen names, you might loose out on these configurations.
 */
export var BREAKPOINT;
(function (BREAKPOINT) {
    BREAKPOINT["xs"] = "xs";
    BREAKPOINT["sm"] = "sm";
    BREAKPOINT["md"] = "md";
    BREAKPOINT["lg"] = "lg";
    BREAKPOINT["xl"] = "xl";
})(BREAKPOINT || (BREAKPOINT = {}));
/**
 * The LayoutConfig supports the configuration of page slots by page templates
 * or page sections, such as headers and footers. The configuration also supports
 * adaptive design per breakpoint (not per device type), so that the DOM is (re)rendered
 * por a given breakpoint.
 */
export class LayoutConfig {
}
LayoutConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function LayoutConfig_Factory() { return i0.ɵɵinject(i1.Config); }, token: LayoutConfig, providedIn: "root" });
LayoutConfig.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
                useExisting: Config,
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N0b3JlZnJvbnRsaWIvc3JjL2xheW91dC9jb25maWcvbGF5b3V0LWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQXdCLE1BQU0saUJBQWlCLENBQUM7OztBQUcvRDs7Ozs7Ozs7OztHQVVHO0FBQ0gsTUFBTSxDQUFOLElBQVksVUFNWDtBQU5ELFdBQVksVUFBVTtJQUNwQix1QkFBUyxDQUFBO0lBQ1QsdUJBQVMsQ0FBQTtJQUNULHVCQUFTLENBQUE7SUFDVCx1QkFBUyxDQUFBO0lBQ1QsdUJBQVMsQ0FBQTtBQUNYLENBQUMsRUFOVyxVQUFVLEtBQVYsVUFBVSxRQU1yQjtBQXdERDs7Ozs7R0FLRztBQUtILE1BQU0sT0FBZ0IsWUFBWTs7OztZQUpqQyxVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07Z0JBQ2xCLFdBQVcsRUFBRSxNQUFNO2FBQ3BCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29uZmlnLCBEZWZlckxvYWRpbmdTdHJhdGVneSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBMYXVuY2hDb25maWcgfSBmcm9tICcuLi9sYXVuY2gtZGlhbG9nL2luZGV4JztcblxuLyoqXG4gKiBUaGUgYEJSRUFLUE9JTlRgIHR5cGluZyBkZWZhdWx0cyB0byBmaXZlIGRlZmF1bHQgc2NyZWVuIG5hbWVzOlxuICogeHMsIHNtLCBtZCwgbGcsIHhsLlxuICpcbiAqIFRoZSB0eXBlIGNhbiBiZSBleHRlbmRlZCB0byBhbGxvdyBmb3IgY3VzdG9tIHNjcmVlbnMsIHN1Y2ggYXMgWExMIG9yIGB0YWJsZXRgLlxuICpcbiAqIFdoaWxlIHRoZSBzY3JlZW4gbmFtZXMgYXJlIGZ1bGx5IGNvbmZpZ3VyYWJsZSwgb3RoZXIgZmVhdHVyZXMgbWlnaHQgaGF2ZVxuICogcHJlLWNvbmZpZ3VyZWQgbGF5b3V0IHNldHRpbmdzIHBlciBzY3JlZW4uIFBhZ2UgbGF5b3V0cyBvciB0YWJsZSBjb25maWd1cmF0aW9ucyxcbiAqIGZvciBleGFtcGxlLCBhcmUgZHJpdmVuIGJ5IHNjcmVlbiBzaXplLiBJbiBjYXNlIHlvdSBjaGFuZ2UgdGhlIHNjcmVlbiBzaXplIG9yXG4gKiBpbnRyb2R1Y2UgbmV3IHNjcmVlbiBuYW1lcywgeW91IG1pZ2h0IGxvb3NlIG91dCBvbiB0aGVzZSBjb25maWd1cmF0aW9ucy5cbiAqL1xuZXhwb3J0IGVudW0gQlJFQUtQT0lOVCB7XG4gIHhzID0gJ3hzJyxcbiAgc20gPSAnc20nLFxuICBtZCA9ICdtZCcsXG4gIGxnID0gJ2xnJyxcbiAgeGwgPSAneGwnLFxufVxuXG5leHBvcnQgdHlwZSBMYXlvdXRTZWN0aW9ucyA9XG4gIHwgJ2hlYWRlcidcbiAgfCAnZm9vdGVyJ1xuICB8ICdMYW5kaW5nUGFnZTJUZW1wbGF0ZSdcbiAgfCBzdHJpbmc7XG5cbmV4cG9ydCB0eXBlIFNsb3RDb25maWcgPSB7XG4gIC8qKiBUaGUgY21zIHBhZ2Ugc2xvdHMgYXJlIG1hcHBlZCBieSB0aGUgYHNsb3QucG9zaXRpb25gLiAqL1xuICBzbG90cz86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBUaGUgcGFnZSBmb2xkIGlkZW50aWZpZXMgdGhlIGxhc3QgZXhwZWN0ZWQgcGFnZSBzbG90IGFib3ZlLXRoZS1mb2xkLlxuICAgKiBJdCdzIHBlcmZlY3RseSBmaW5lIHRvIHNwZWNpZnkgdGhpcyBieSBpbmRpY2F0aW9uLCBidXQga2VlcCBpbiBtaW5kIHRoYXRcbiAgICogYSBtb3JlIHByZWNpc2UgaW5kaWNhdGlvbiB3aWxsIGdhaW4gYSBtb3JlIHBvc2l0aXZlIGltcGFjdCBvbiBwZXJmb3JtYW5jZS5cbiAgICovXG4gIHBhZ2VGb2xkPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgU2xvdEdyb3VwID0ge1xuICAvKiogVGhlIHBhZ2Ugc2xvdCBjb25maWd1cmF0aW9uIGZvciBsYXJnZSBzY3JlZW5zICovXG4gIFtCUkVBS1BPSU5ULmxnXT86IFNsb3RDb25maWc7XG4gIC8qKiBUaGUgcGFnZSBzbG90IGNvbmZpZ3VyYXRpb24gZm9yIG1lZGl1bSBzY3JlZW5zICovXG4gIFtCUkVBS1BPSU5ULm1kXT86IFNsb3RDb25maWc7XG4gIC8qKiBUaGUgcGFnZSBzbG90IGNvbmZpZ3VyYXRpb24gZm9yIHNtYWxsIHNjcmVlbnMgKi9cbiAgW0JSRUFLUE9JTlQuc21dPzogU2xvdENvbmZpZztcbiAgLyoqIFRoZSBwYWdlIHNsb3QgY29uZmlndXJhdGlvbiBmb3IgZXh0cmEgc21hbGwgc2NyZWVucyAqL1xuICBbQlJFQUtQT0lOVC54c10/OiBTbG90Q29uZmlnO1xufTtcblxuZXhwb3J0IHR5cGUgTGF5b3V0U2xvdENvbmZpZyA9IHtcbiAgW3NlY3Rpb24gaW4gTGF5b3V0U2VjdGlvbnNdOiBTbG90Q29uZmlnIHwgU2xvdEdyb3VwIHwgTGF5b3V0U2xvdENvbmZpZztcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJlYWtQb2ludCB7XG4gIC8qKlxuICAgKiBUaGUgbWluaW11bSBzY3JlZW4gd2lkdGguXG4gICAqL1xuICBtaW4/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBtaW5pbXVtIHNjcmVlbiB3aWR0aC5cbiAgICovXG4gIG1heD86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBUaGUgYExheW91dEJyZWFrUG9pbnRzYCBjYW4gYmUgdXNlZCB0byBjb25maWd1cmUgdGhlIHNpemUgb2YgYSBzcGVjaWZpYyBzY3JlZW4uIFRoZSBzY3JlZW5cbiAqIGFyZSBkZWZpbmVkIGJ5IGJyZWFrcG9pbnRzLCB3aXRoIGEgbWluIGFuZC9vciBtYXggdmFsdWUuIFRoZSBicmVha3BvaW50IHNpemUgaXMgaW4gcGl4ZWxzLFxuICogaGVuY2UgYSBudW1lcmljIHZhbHVlIGlzIGV4cGVjdGVkLlxuICovXG5leHBvcnQgdHlwZSBMYXlvdXRCcmVha1BvaW50cyA9IHtcbiAgW3QgaW4gQlJFQUtQT0lOVF0/OiBudW1iZXIgfCBCcmVha1BvaW50O1xufTtcblxuLyoqXG4gKiBUaGUgTGF5b3V0Q29uZmlnIHN1cHBvcnRzIHRoZSBjb25maWd1cmF0aW9uIG9mIHBhZ2Ugc2xvdHMgYnkgcGFnZSB0ZW1wbGF0ZXNcbiAqIG9yIHBhZ2Ugc2VjdGlvbnMsIHN1Y2ggYXMgaGVhZGVycyBhbmQgZm9vdGVycy4gVGhlIGNvbmZpZ3VyYXRpb24gYWxzbyBzdXBwb3J0c1xuICogYWRhcHRpdmUgZGVzaWduIHBlciBicmVha3BvaW50IChub3QgcGVyIGRldmljZSB0eXBlKSwgc28gdGhhdCB0aGUgRE9NIGlzIChyZSlyZW5kZXJlZFxuICogcG9yIGEgZ2l2ZW4gYnJlYWtwb2ludC5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG4gIHVzZUV4aXN0aW5nOiBDb25maWcsXG59KVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIExheW91dENvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgYnJlYWtwb2ludCBjb25maWd1cmF0aW9uIGlzIHVzZWQgdG8gZGVmaW5lZCB2YXJpb3VzIHNjcmVlbnMuIEEgc3BlY2lmaWMgc2NyZWVuIG5hbWUgY2FuXG4gICAqIGJlIHVzZWQgdG8gZnVydGhlciBjb25maWd1cmUgY2VydGFpbiBmZWF0dXJlcywgc3VjaCBhcyB0aGUgb3ZlcmFsbCBsYXlvdXQgb3Igc3BlY2lmaWNcbiAgICogY29tcG9uZW50IGNvbmZpZ3VyYXRpb25zLlxuICAgKi9cbiAgYnJlYWtwb2ludHM/OiBMYXlvdXRCcmVha1BvaW50cztcblxuICBsYXlvdXRTbG90cz86IExheW91dFNsb3RDb25maWc7XG5cbiAgLyoqXG4gICAqIERlZmVycmVkIGxvYWRpbmcgaXMgYSB0ZWNobmlxdWUgdG8gaG9sZCBvZiB3aXRoIHRoZSBsb2FkaW5nIC8gY3JlYXRpb25cbiAgICogb2YgRE9NIGVsZW1lbnRzIHdoaWNoIGFyZSBub3Qgbm90IGluIHRoZSBpbml0aWFsIHZpZXcgcG9ydC5cbiAgICogVGhpcyB0ZWNobmlxdWUgd2lsIGluY3JlYXNlIHBlcmZvcm1hbmNlLlxuICAgKi9cbiAgZGVmZXJyZWRMb2FkaW5nPzoge1xuICAgIC8qKlxuICAgICAqIFRoZSBnbG9iYWwgc3RyYXRlZ3kgd2lsbCBiZSB1c2VkIGFzIGEgZmFsbGJhY2sgc3RyYXRlZ3kgZm9yIGFsbCBET00gY3JlYXRpb24sXG4gICAgICogYnV0IGNhbiBiZSBvdmVycmlkZGVuIGJ5IGxvY2FsIGNvbmZpZ3VyYXRpb24sIGkuZS4gZm9yIGNtcyBjb21wb25lbnRzLlxuICAgICAqL1xuICAgIHN0cmF0ZWd5PzogRGVmZXJMb2FkaW5nU3RyYXRlZ3k7XG4gICAgLyoqXG4gICAgICogVGhlIGludGVyc2VjdGlvbiBtYXJnaW4gY29udGFpbnMgdGhlIG9mZnNldCB1c2VkIGJ5IHRoZSBJbnRlcnNlY3Rpb24gT2JzZXJ2ZXJcbiAgICAgKiB0byBvYnNlcnZlIGVsZW1lbnRzIG91dHNpZGUgdGhlIHZpZXcgcG9ydC5cbiAgICAgKlxuICAgICAqIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSW50ZXJzZWN0aW9uT2JzZXJ2ZXIvcm9vdE1hcmdpblxuICAgICAqL1xuICAgIGludGVyc2VjdGlvbk1hcmdpbj86IHN0cmluZztcbiAgfTtcblxuICBsYXVuY2g/OiBMYXVuY2hDb25maWc7XG59XG4iXX0=