import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { createFrom, EventService, ProductSearchService, ProductService, } from '@spartacus/core';
import { EMPTY } from 'rxjs';
import { filter, map, skip, switchMap, take } from 'rxjs/operators';
import { PageVisitedEvent } from '../page/page.events';
import { CategoryPageResultsEvent, ProductDetailsPageEvent, SearchPageResultsEvent, } from './product-page.events';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
let ProductPageEventBuilder = class ProductPageEventBuilder {
    constructor(eventService, productService, productSearchService) {
        this.eventService = eventService;
        this.productService = productService;
        this.productSearchService = productSearchService;
        this.register();
    }
    register() {
        this.eventService.register(SearchPageResultsEvent, this.buildSearchPageResultsEvent());
        this.eventService.register(ProductDetailsPageEvent, this.buildProductDetailsPageEvent());
        this.eventService.register(CategoryPageResultsEvent, this.buildCategoryResultsPageEvent());
    }
    buildProductDetailsPageEvent() {
        return this.eventService.get(PageVisitedEvent).pipe(filter((pageVisitedEvent) => pageVisitedEvent.semanticRoute === 'product'), map((pageVisitedEvent) => pageVisitedEvent.context.id), switchMap((productId) => this.productService.get(productId).pipe(filter((product) => Boolean(product)), take(1), map((product) => createFrom(ProductDetailsPageEvent, {
            categories: product.categories,
            code: product.code,
            name: product.name,
            price: product.price,
        })))));
    }
    buildCategoryResultsPageEvent() {
        const searchResults$ = this.productSearchService.getResults().pipe(
        // skipping the initial value, and preventing emission of the previous search state
        skip(1));
        const categoryPageVisitedEvent$ = this.eventService
            .get(PageVisitedEvent)
            .pipe(map((pageVisitedEvent) => ({
            isCategoryPage: pageVisitedEvent.semanticRoute === 'category',
            categoryCode: pageVisitedEvent.context.id,
        })));
        return categoryPageVisitedEvent$.pipe(switchMap((pageEvent) => {
            if (!pageEvent.isCategoryPage) {
                return EMPTY;
            }
            return searchResults$.pipe(map((searchResults) => ({
                categoryCode: pageEvent.categoryCode,
                categoryName: searchResults.breadcrumbs[0].facetValueName,
            })), map((categoryPage) => createFrom(CategoryPageResultsEvent, categoryPage)));
        }));
    }
    buildSearchPageResultsEvent() {
        const searchResults$ = this.productSearchService.getResults().pipe(
        // skipping the initial value, and preventing emission of the previous search state
        skip(1), map((searchResults) => ({
            searchTerm: searchResults.freeTextSearch,
            numberOfResults: searchResults.pagination.totalResults,
        })), map((searchPage) => createFrom(SearchPageResultsEvent, searchPage)));
        const searchPageVisitedEvent$ = this.eventService
            .get(PageVisitedEvent)
            .pipe(map((pageVisitedEvent) => pageVisitedEvent.semanticRoute === 'search'));
        return searchPageVisitedEvent$.pipe(switchMap((isSearchPage) => (isSearchPage ? searchResults$ : EMPTY)));
    }
};
ProductPageEventBuilder.ctorParameters = () => [
    { type: EventService },
    { type: ProductService },
    { type: ProductSearchService }
];
ProductPageEventBuilder.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProductPageEventBuilder_Factory() { return new ProductPageEventBuilder(i0.ɵɵinject(i1.EventService), i0.ɵɵinject(i1.ProductService), i0.ɵɵinject(i1.ProductSearchService)); }, token: ProductPageEventBuilder, providedIn: "root" });
ProductPageEventBuilder = __decorate([
    Injectable({
        providedIn: 'root',
    })
], ProductPageEventBuilder);
export { ProductPageEventBuilder };
//# sourceMappingURL=data:application/json;base64,