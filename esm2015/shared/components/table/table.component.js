import { ChangeDetectionStrategy, Component, HostBinding, Input, isDevMode, } from '@angular/core';
/**
 * The table component provides a generic DOM structure based on the `dataset` input.
 * The `Table` dataset contains a type, table structure and table data.
 *
 * The table component only supports horizontal table structure.
 *
 * The implementation is fairly "dumb" and only provides the following features:
 * - Use outlet for table headers (`<th>`) and cells (`<td>`).
 * - Localizing table headers, using the `I18nModule`.
 * - Add CSS classes on each cell to
 *
 * Al features are optional.
 *
 * By default, the headers and columns are rendered with an outlet template. The template
 * reference is generated by concatenating the table `type` and table header `key`.
 * The following snippet shows an outlet generated for a table header, for the table type
 * "cost-center" with a label "name":
 *
 * ```
 * <th>
 *   <template cxOutlet="tbl.cost-center.header.name">
 *     [localized label is generated here]
 *   </template>
 * </th>
 * ```
 *
 * Similarly, the `<td>` is generated with the outlet template reference `tbl.cost-center.data.name`.
 *
 * This allows smart components to further customize the table rendering. More over, customers can
 * customize the header and data by using the generated outlets.
 */
export class TableComponent {
    set dataset(dataset) {
        this._dataset = dataset;
        this.addTableDebugInfo();
    }
    get dataset() {
        return this._dataset;
    }
    /**
     * Returns the configured data value by the label key.
     * If there's no headerKey available, or no corresponding value, the
     * first value in the data row is returned.
     */
    getDataValue(dataRow, headerKey, index) {
        return dataRow[headerKey] || Object.values(dataRow)[index];
    }
    /**
     * Generates the table type into the UI in devMode, so that developers
     * can easily get the notion of the table type.
     */
    addTableDebugInfo() {
        var _a, _b;
        if (isDevMode) {
            this.tableType = (_b = (_a = this.dataset) === null || _a === void 0 ? void 0 : _a.structure) === null || _b === void 0 ? void 0 : _b.type;
        }
    }
}
TableComponent.decorators = [
    { type: Component, args: [{
                selector: 'cx-table',
                template: "<table *ngIf=\"dataset?.structure as structure\">\n  <thead *ngIf=\"!structure.hideHeader\">\n    <tr>\n      <th\n        scope=\"col\"\n        *ngFor=\"let header of structure.headers; let i = index\"\n        [class]=\"header.key\"\n      >\n        <!-- render an outlet for each column header -->\n        <ng-template\n          [cxOutlet]=\"\n            'table.' + structure.type + '.header.' + (header.key || i)\n          \"\n          [cxOutletContext]=\"header\"\n        >\n          <!-- Render the label by default, fallback to localize the label by it's key -->\n          {{\n            header.label || (structure.type + '.' + header.key | cxTranslate)\n          }}\n        </ng-template>\n      </th>\n    </tr>\n  </thead>\n\n  <tr *ngFor=\"let row of dataset.data$ | async\">\n    <td *ngFor=\"let col of structure.headers; let i = index\" [class]=\"col.key\">\n      <!-- render an outlet for each cell -->\n      <ng-template\n        [cxOutlet]=\"'table.' + structure.type + '.data.' + (col.key || i)\"\n        [cxOutletContext]=\"row\"\n      >\n        {{ getDataValue(row, col.key, i) }}\n      </ng-template>\n    </td>\n  </tr>\n</table>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
TableComponent.propDecorators = {
    tableType: [{ type: HostBinding, args: ['attr.__cx-table-type',] }],
    dataset: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RvcmVmcm9udGxpYi9zcmMvc2hhcmVkL2NvbXBvbmVudHMvdGFibGUvdGFibGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFdBQVcsRUFDWCxLQUFLLEVBQ0wsU0FBUyxHQUNWLE1BQU0sZUFBZSxDQUFDO0FBR3ZCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E4Qkc7QUFNSCxNQUFNLE9BQU8sY0FBYztJQUl6QixJQUNJLE9BQU8sQ0FBQyxPQUFjO1FBQ3hCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxZQUFZLENBQUMsT0FBWSxFQUFFLFNBQWlCLEVBQUUsS0FBYTtRQUN6RCxPQUFPLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRDs7O09BR0c7SUFDTyxpQkFBaUI7O1FBQ3pCLElBQUksU0FBUyxFQUFFO1lBQ2IsSUFBSSxDQUFDLFNBQVMsZUFBRyxJQUFJLENBQUMsT0FBTywwQ0FBRSxTQUFTLDBDQUFFLElBQUksQ0FBQztTQUNoRDtJQUNILENBQUM7OztZQXBDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLGdxQ0FBcUM7Z0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7d0JBRUUsV0FBVyxTQUFDLHNCQUFzQjtzQkFHbEMsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIEhvc3RCaW5kaW5nLFxuICBJbnB1dCxcbiAgaXNEZXZNb2RlLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRhYmxlIH0gZnJvbSAnLi90YWJsZS5tb2RlbCc7XG5cbi8qKlxuICogVGhlIHRhYmxlIGNvbXBvbmVudCBwcm92aWRlcyBhIGdlbmVyaWMgRE9NIHN0cnVjdHVyZSBiYXNlZCBvbiB0aGUgYGRhdGFzZXRgIGlucHV0LlxuICogVGhlIGBUYWJsZWAgZGF0YXNldCBjb250YWlucyBhIHR5cGUsIHRhYmxlIHN0cnVjdHVyZSBhbmQgdGFibGUgZGF0YS5cbiAqXG4gKiBUaGUgdGFibGUgY29tcG9uZW50IG9ubHkgc3VwcG9ydHMgaG9yaXpvbnRhbCB0YWJsZSBzdHJ1Y3R1cmUuXG4gKlxuICogVGhlIGltcGxlbWVudGF0aW9uIGlzIGZhaXJseSBcImR1bWJcIiBhbmQgb25seSBwcm92aWRlcyB0aGUgZm9sbG93aW5nIGZlYXR1cmVzOlxuICogLSBVc2Ugb3V0bGV0IGZvciB0YWJsZSBoZWFkZXJzIChgPHRoPmApIGFuZCBjZWxscyAoYDx0ZD5gKS5cbiAqIC0gTG9jYWxpemluZyB0YWJsZSBoZWFkZXJzLCB1c2luZyB0aGUgYEkxOG5Nb2R1bGVgLlxuICogLSBBZGQgQ1NTIGNsYXNzZXMgb24gZWFjaCBjZWxsIHRvXG4gKlxuICogQWwgZmVhdHVyZXMgYXJlIG9wdGlvbmFsLlxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoZSBoZWFkZXJzIGFuZCBjb2x1bW5zIGFyZSByZW5kZXJlZCB3aXRoIGFuIG91dGxldCB0ZW1wbGF0ZS4gVGhlIHRlbXBsYXRlXG4gKiByZWZlcmVuY2UgaXMgZ2VuZXJhdGVkIGJ5IGNvbmNhdGVuYXRpbmcgdGhlIHRhYmxlIGB0eXBlYCBhbmQgdGFibGUgaGVhZGVyIGBrZXlgLlxuICogVGhlIGZvbGxvd2luZyBzbmlwcGV0IHNob3dzIGFuIG91dGxldCBnZW5lcmF0ZWQgZm9yIGEgdGFibGUgaGVhZGVyLCBmb3IgdGhlIHRhYmxlIHR5cGVcbiAqIFwiY29zdC1jZW50ZXJcIiB3aXRoIGEgbGFiZWwgXCJuYW1lXCI6XG4gKlxuICogYGBgXG4gKiA8dGg+XG4gKiAgIDx0ZW1wbGF0ZSBjeE91dGxldD1cInRibC5jb3N0LWNlbnRlci5oZWFkZXIubmFtZVwiPlxuICogICAgIFtsb2NhbGl6ZWQgbGFiZWwgaXMgZ2VuZXJhdGVkIGhlcmVdXG4gKiAgIDwvdGVtcGxhdGU+XG4gKiA8L3RoPlxuICogYGBgXG4gKlxuICogU2ltaWxhcmx5LCB0aGUgYDx0ZD5gIGlzIGdlbmVyYXRlZCB3aXRoIHRoZSBvdXRsZXQgdGVtcGxhdGUgcmVmZXJlbmNlIGB0YmwuY29zdC1jZW50ZXIuZGF0YS5uYW1lYC5cbiAqXG4gKiBUaGlzIGFsbG93cyBzbWFydCBjb21wb25lbnRzIHRvIGZ1cnRoZXIgY3VzdG9taXplIHRoZSB0YWJsZSByZW5kZXJpbmcuIE1vcmUgb3ZlciwgY3VzdG9tZXJzIGNhblxuICogY3VzdG9taXplIHRoZSBoZWFkZXIgYW5kIGRhdGEgYnkgdXNpbmcgdGhlIGdlbmVyYXRlZCBvdXRsZXRzLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjeC10YWJsZScsXG4gIHRlbXBsYXRlVXJsOiAnLi90YWJsZS5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBUYWJsZUNvbXBvbmVudCB7XG4gIEBIb3N0QmluZGluZygnYXR0ci5fX2N4LXRhYmxlLXR5cGUnKSB0YWJsZVR5cGU6IHN0cmluZztcblxuICBwcm90ZWN0ZWQgX2RhdGFzZXQ6IFRhYmxlO1xuICBASW5wdXQoKVxuICBzZXQgZGF0YXNldChkYXRhc2V0OiBUYWJsZSkge1xuICAgIHRoaXMuX2RhdGFzZXQgPSBkYXRhc2V0O1xuICAgIHRoaXMuYWRkVGFibGVEZWJ1Z0luZm8oKTtcbiAgfVxuXG4gIGdldCBkYXRhc2V0KCk6IFRhYmxlIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YXNldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjb25maWd1cmVkIGRhdGEgdmFsdWUgYnkgdGhlIGxhYmVsIGtleS5cbiAgICogSWYgdGhlcmUncyBubyBoZWFkZXJLZXkgYXZhaWxhYmxlLCBvciBubyBjb3JyZXNwb25kaW5nIHZhbHVlLCB0aGVcbiAgICogZmlyc3QgdmFsdWUgaW4gdGhlIGRhdGEgcm93IGlzIHJldHVybmVkLlxuICAgKi9cbiAgZ2V0RGF0YVZhbHVlKGRhdGFSb3c6IGFueSwgaGVhZGVyS2V5OiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiBkYXRhUm93W2hlYWRlcktleV0gfHwgT2JqZWN0LnZhbHVlcyhkYXRhUm93KVtpbmRleF07XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIHRoZSB0YWJsZSB0eXBlIGludG8gdGhlIFVJIGluIGRldk1vZGUsIHNvIHRoYXQgZGV2ZWxvcGVyc1xuICAgKiBjYW4gZWFzaWx5IGdldCB0aGUgbm90aW9uIG9mIHRoZSB0YWJsZSB0eXBlLlxuICAgKi9cbiAgcHJvdGVjdGVkIGFkZFRhYmxlRGVidWdJbmZvKCkge1xuICAgIGlmIChpc0Rldk1vZGUpIHtcbiAgICAgIHRoaXMudGFibGVUeXBlID0gdGhpcy5kYXRhc2V0Py5zdHJ1Y3R1cmU/LnR5cGU7XG4gICAgfVxuICB9XG59XG4iXX0=