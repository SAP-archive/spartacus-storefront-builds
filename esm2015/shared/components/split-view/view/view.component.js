import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import { SplitViewService } from '../split-view.service';
/**
 * The view component is part of the `SplitViewComponent`. The view
 * contains the navigable content that should be split up. It maintains
 * a view position and allows to show or hide the view.
 *
 * The ViewComponent interacts with the `SplitViewService` for handing over the
 * view state, so that the overarching `SplitViewComponent` can manage the
 * overall experience.
 */
let ViewComponent = class ViewComponent {
    constructor(splitService) {
        this.splitService = splitService;
        /**
         * An update of the view visibility is emitted to the hiddenChange output.
         */
        this.hiddenChange = new EventEmitter();
    }
    /**
     * The hidden input is used to set the initial visible state of the view.
     * The hidden state defaults to false.
     *
     * The hidden input supports 2-way binding, see `hiddenChange` property.
     */
    set hidden(hidden) {
        this.splitService.toggle(this.viewPosition, hidden);
    }
    ngOnInit() {
        this.splitService.add(this.viewPosition, this.hidden);
        this.subscription = this.splitService
            .visibleViewCount()
            .subscribe((visible) => {
            if (this.hidden !== this.viewPosition >= visible) {
                this.hiddenChange.emit(this.viewPosition >= visible);
            }
        });
    }
    /**
     * Toggles the visibility of the view.
     *
     * An optional force flag can be used to explicitly show or hide view component.
     */
    toggle(force) {
        this.splitService.toggle(this.viewPosition, force);
    }
    /**
     * Returns the position for the view.
     *
     * The position is either taken from the input `position` or generated by the `SplitService`.
     */
    get viewPosition() {
        if (this.position === undefined) {
            this.position = this.splitService.generateNextPosition();
        }
        return this.position;
    }
    /**
     * The view is removed from the `SplitService` so that the view no longer
     * plays a role in the overall split view.
     */
    ngOnDestroy() {
        var _a;
        this.splitService.remove(this.viewPosition);
        (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
};
ViewComponent.ctorParameters = () => [
    { type: SplitViewService }
];
__decorate([
    Input(),
    HostBinding('attr.position')
], ViewComponent.prototype, "position", void 0);
__decorate([
    Input()
], ViewComponent.prototype, "hidden", null);
__decorate([
    Output()
], ViewComponent.prototype, "hiddenChange", void 0);
ViewComponent = __decorate([
    Component({
        selector: 'cx-view',
        template: "<ng-content></ng-content>\n",
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], ViewComponent);
export { ViewComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL3N0b3JlZnJvbnQvIiwic291cmNlcyI6WyJzaGFyZWQvY29tcG9uZW50cy9zcGxpdC12aWV3L3ZpZXcvdmlldy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFlBQVksRUFDWixXQUFXLEVBQ1gsS0FBSyxFQUdMLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV6RDs7Ozs7Ozs7R0FRRztBQU1ILElBQWEsYUFBYSxHQUExQixNQUFhLGFBQWE7SUF3QnhCLFlBQXNCLFlBQThCO1FBQTlCLGlCQUFZLEdBQVosWUFBWSxDQUFrQjtRQVJwRDs7V0FFRztRQUVILGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUlxQixDQUFDO0lBbkJ4RDs7Ozs7T0FLRztJQUVILElBQUksTUFBTSxDQUFDLE1BQWU7UUFDeEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBWUQsUUFBUTtRQUNOLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXRELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVk7YUFDbEMsZ0JBQWdCLEVBQUU7YUFDbEIsU0FBUyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDckIsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxZQUFZLElBQUksT0FBTyxFQUFFO2dCQUNoRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxJQUFJLE9BQU8sQ0FBQyxDQUFDO2FBQ3REO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxLQUFlO1FBQ3BCLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxJQUFjLFlBQVk7UUFDeEIsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUMvQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztTQUMxRDtRQUNELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsV0FBVzs7UUFDVCxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDNUMsTUFBQSxJQUFJLENBQUMsWUFBWSwwQ0FBRSxXQUFXLEdBQUc7SUFDbkMsQ0FBQztDQUNGLENBQUE7O1lBM0NxQyxnQkFBZ0I7O0FBckJwRDtJQUZDLEtBQUssRUFBRTtJQUNQLFdBQVcsQ0FBQyxlQUFlLENBQUM7K0NBQ1o7QUFTakI7SUFEQyxLQUFLLEVBQUU7MkNBR1A7QUFNRDtJQURDLE1BQU0sRUFBRTttREFDeUI7QUFwQnZCLGFBQWE7SUFMekIsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLFNBQVM7UUFDbkIsdUNBQW9DO1FBQ3BDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO0tBQ2hELENBQUM7R0FDVyxhQUFhLENBbUV6QjtTQW5FWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgRXZlbnRFbWl0dGVyLFxuICBIb3N0QmluZGluZyxcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBTcGxpdFZpZXdTZXJ2aWNlIH0gZnJvbSAnLi4vc3BsaXQtdmlldy5zZXJ2aWNlJztcblxuLyoqXG4gKiBUaGUgdmlldyBjb21wb25lbnQgaXMgcGFydCBvZiB0aGUgYFNwbGl0Vmlld0NvbXBvbmVudGAuIFRoZSB2aWV3XG4gKiBjb250YWlucyB0aGUgbmF2aWdhYmxlIGNvbnRlbnQgdGhhdCBzaG91bGQgYmUgc3BsaXQgdXAuIEl0IG1haW50YWluc1xuICogYSB2aWV3IHBvc2l0aW9uIGFuZCBhbGxvd3MgdG8gc2hvdyBvciBoaWRlIHRoZSB2aWV3LlxuICpcbiAqIFRoZSBWaWV3Q29tcG9uZW50IGludGVyYWN0cyB3aXRoIHRoZSBgU3BsaXRWaWV3U2VydmljZWAgZm9yIGhhbmRpbmcgb3ZlciB0aGVcbiAqIHZpZXcgc3RhdGUsIHNvIHRoYXQgdGhlIG92ZXJhcmNoaW5nIGBTcGxpdFZpZXdDb21wb25lbnRgIGNhbiBtYW5hZ2UgdGhlXG4gKiBvdmVyYWxsIGV4cGVyaWVuY2UuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2N4LXZpZXcnLFxuICB0ZW1wbGF0ZVVybDogJy4vdmlldy5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBWaWV3Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBASW5wdXQoKVxuICBASG9zdEJpbmRpbmcoJ2F0dHIucG9zaXRpb24nKVxuICBwb3NpdGlvbjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgaGlkZGVuIGlucHV0IGlzIHVzZWQgdG8gc2V0IHRoZSBpbml0aWFsIHZpc2libGUgc3RhdGUgb2YgdGhlIHZpZXcuXG4gICAqIFRoZSBoaWRkZW4gc3RhdGUgZGVmYXVsdHMgdG8gZmFsc2UuXG4gICAqXG4gICAqIFRoZSBoaWRkZW4gaW5wdXQgc3VwcG9ydHMgMi13YXkgYmluZGluZywgc2VlIGBoaWRkZW5DaGFuZ2VgIHByb3BlcnR5LlxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IGhpZGRlbihoaWRkZW46IGJvb2xlYW4pIHtcbiAgICB0aGlzLnNwbGl0U2VydmljZS50b2dnbGUodGhpcy52aWV3UG9zaXRpb24sIGhpZGRlbik7XG4gIH1cblxuICAvKipcbiAgICogQW4gdXBkYXRlIG9mIHRoZSB2aWV3IHZpc2liaWxpdHkgaXMgZW1pdHRlZCB0byB0aGUgaGlkZGVuQ2hhbmdlIG91dHB1dC5cbiAgICovXG4gIEBPdXRwdXQoKVxuICBoaWRkZW5DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgcHJvdGVjdGVkIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBzcGxpdFNlcnZpY2U6IFNwbGl0Vmlld1NlcnZpY2UpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zcGxpdFNlcnZpY2UuYWRkKHRoaXMudmlld1Bvc2l0aW9uLCB0aGlzLmhpZGRlbik7XG5cbiAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMuc3BsaXRTZXJ2aWNlXG4gICAgICAudmlzaWJsZVZpZXdDb3VudCgpXG4gICAgICAuc3Vic2NyaWJlKCh2aXNpYmxlKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmhpZGRlbiAhPT0gdGhpcy52aWV3UG9zaXRpb24gPj0gdmlzaWJsZSkge1xuICAgICAgICAgIHRoaXMuaGlkZGVuQ2hhbmdlLmVtaXQodGhpcy52aWV3UG9zaXRpb24gPj0gdmlzaWJsZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIHZpc2liaWxpdHkgb2YgdGhlIHZpZXcuXG4gICAqXG4gICAqIEFuIG9wdGlvbmFsIGZvcmNlIGZsYWcgY2FuIGJlIHVzZWQgdG8gZXhwbGljaXRseSBzaG93IG9yIGhpZGUgdmlldyBjb21wb25lbnQuXG4gICAqL1xuICB0b2dnbGUoZm9yY2U/OiBib29sZWFuKSB7XG4gICAgdGhpcy5zcGxpdFNlcnZpY2UudG9nZ2xlKHRoaXMudmlld1Bvc2l0aW9uLCBmb3JjZSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcG9zaXRpb24gZm9yIHRoZSB2aWV3LlxuICAgKlxuICAgKiBUaGUgcG9zaXRpb24gaXMgZWl0aGVyIHRha2VuIGZyb20gdGhlIGlucHV0IGBwb3NpdGlvbmAgb3IgZ2VuZXJhdGVkIGJ5IHRoZSBgU3BsaXRTZXJ2aWNlYC5cbiAgICovXG4gIHByb3RlY3RlZCBnZXQgdmlld1Bvc2l0aW9uKCk6IG51bWJlciB7XG4gICAgaWYgKHRoaXMucG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMuc3BsaXRTZXJ2aWNlLmdlbmVyYXRlTmV4dFBvc2l0aW9uKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB2aWV3IGlzIHJlbW92ZWQgZnJvbSB0aGUgYFNwbGl0U2VydmljZWAgc28gdGhhdCB0aGUgdmlldyBubyBsb25nZXJcbiAgICogcGxheXMgYSByb2xlIGluIHRoZSBvdmVyYWxsIHNwbGl0IHZpZXcuXG4gICAqL1xuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnNwbGl0U2VydmljZS5yZW1vdmUodGhpcy52aWV3UG9zaXRpb24pO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uPy51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iXX0=