import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output, } from '@angular/core';
import { SplitViewService } from '../split-view.service';
/**
 * The view component is part of the `SplitViewComponent`. The view
 * contains the navigable content that should be split up. It maintains
 * a view position and allows to show or hide the view.
 *
 * The ViewComponent interacts with the `SplitViewService` for handing over the
 * view state, so that the overarching `SplitViewComponent` can manage the
 * overall experience.
 */
let ViewComponent = class ViewComponent {
    constructor(splitService, elementRef) {
        this.splitService = splitService;
        this.elementRef = elementRef;
        /**
         * The disappeared flag is added to the
         */
        this.disappeared = true;
        /**
         * An update of the view visibility is emitted to the hiddenChange output.
         */
        this.hiddenChange = new EventEmitter();
    }
    /**
     * The hidden input is used to set the initial visible state of the view.
     * The hidden state defaults to false.
     *
     * The hidden input supports 2-way binding, see `hiddenChange` property.
     */
    set hidden(hidden) {
        this._hidden = hidden;
        this.splitService.toggle(this.viewPosition, hidden);
    }
    ngOnInit() {
        this.splitService.splitViewCount = this.splitViewCount;
        const hidden = this._hidden ? { hidden: this._hidden } : {};
        this.splitService.add(this.viewPosition, hidden);
        this.subscription = this.splitService
            .getViewState(Number(this.position))
            .subscribe((view) => {
            this.hiddenChange.emit(view.hidden);
            this._hidden = view.hidden;
            if (view.hidden) {
                setTimeout(() => {
                    this.disappeared = true;
                }, this.duration * 1.25);
            }
            else {
                this.disappeared = false;
            }
        });
    }
    /**
     * Toggles the visibility of the view.
     *
     * An optional force flag can be used to explicitly show or hide view component.
     */
    toggle(force) {
        this.splitService.toggle(this.viewPosition, force);
    }
    /**
     * Returns the position for the view.
     *
     * The position is either taken from the input `position` or generated by the `SplitService`.
     */
    get viewPosition() {
        if (!(Number(this.position) >= 0)) {
            this.position = this.splitService.nextPosition.toString();
        }
        return Number(this.position);
    }
    /**
     * Returns the duration in milliseconds. The duration is based on the CSS custom property
     * `--cx-transition-duration`. Defaults to 300 milliseconds.
     */
    get duration() {
        const duration = getComputedStyle(this.elementRef.nativeElement)
            .getPropertyValue('--cx-transition-duration')
            .trim();
        if (duration.indexOf('ms') > -1) {
            return Number(duration.split('ms')[0]);
        }
        else if (duration.indexOf('s') > -1) {
            return Number(duration.split('s')[0]) * 1000;
        }
        else {
            return 300;
        }
    }
    /**
     * Returns the maximum number of views per split-view. The number is based on the CSS custom property
     * `--cx-max-views`. Defaults to `2`
     */
    get splitViewCount() {
        return Number(getComputedStyle(this.elementRef.nativeElement)
            .getPropertyValue('--cx-max-views')
            .trim() || 2);
    }
    /**
     * The view is removed from the `SplitService` so that the view no longer
     * plays a role in the overall split view.
     */
    ngOnDestroy() {
        var _a;
        this.splitService.remove(this.viewPosition);
        (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
};
ViewComponent.ctorParameters = () => [
    { type: SplitViewService },
    { type: ElementRef }
];
__decorate([
    Input(),
    HostBinding('attr.position')
], ViewComponent.prototype, "position", void 0);
__decorate([
    HostBinding('attr.disappeared')
], ViewComponent.prototype, "disappeared", void 0);
__decorate([
    Input()
], ViewComponent.prototype, "hidden", null);
__decorate([
    Output()
], ViewComponent.prototype, "hiddenChange", void 0);
ViewComponent = __decorate([
    Component({
        selector: 'cx-view',
        template: "<ng-content></ng-content>\n",
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], ViewComponent);
export { ViewComponent };
//# sourceMappingURL=data:application/json;base64,