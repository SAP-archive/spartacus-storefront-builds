/**
 * Indicates how the browser should load the image.
 *
 * While this might not add too much value in some scenarios, as we have other
 * optimizations to defer loading of larger pieces of the DOM, there might be
 * components who haven't implemented other lazy loading techniques. Moreover,
 * a server sides rendered page that lands directly in the browser could benefit
 * enormously from the lazy loading of images.
 */
export var ImageLoadingStrategy;
(function (ImageLoadingStrategy) {
    /**
     * Loads the image immediately, regardless of whether or not the image
     * is currently within the visible viewport (this is the default value).
     */
    ImageLoadingStrategy["EAGER"] = "eager";
    /**
     * Defers loading the image until it reaches a calculated distance from the viewport,
     * as defined by the browser. The intent is to avoid the network and storage bandwidth
     * needed to handle the image until it's reasonably certain that it will be needed.
     * This generally improves the performance of the content in most typical use cases.
     */
    ImageLoadingStrategy["LAZY"] = "lazy";
})(ImageLoadingStrategy || (ImageLoadingStrategy = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zdG9yZWZyb250bGliL3NyYy9zaGFyZWQvY29tcG9uZW50cy9tZWRpYS9tZWRpYS5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF5Q0E7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLENBQU4sSUFBWSxvQkFhWDtBQWJELFdBQVksb0JBQW9CO0lBQzlCOzs7T0FHRztJQUNILHVDQUFlLENBQUE7SUFDZjs7Ozs7T0FLRztJQUNILHFDQUFhLENBQUE7QUFDZixDQUFDLEVBYlcsb0JBQW9CLEtBQXBCLG9CQUFvQixRQWEvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEltYWdlIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBNZWRpYSB7XG4gIC8qKlxuICAgKiBJZGVudGlmeSB0aGUg4oCcZGVmYXVsdOKAnSBpbWFnZSBVUkwgd2hpY2ggaXMgdXNlZCBpbiBjYXNlIHRoZSBzcmNzZXQgaXMgbm90IHNwZWNpZmljaWVkLlxuICAgKiBCcm93c2VycyB3aXRob3R1IHNyY3NldCBzdXBwb3J0IHdpbGwgYWxzbyBmYWxsYmFjayB0byB0aGlzIFVSbC5cbiAgICovXG4gIHNyYzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgc3Jjc2V0IGF0dHJpYnV0ZSBob2xkcyBhIGxpc3Qgb2YgaW1hZ2UgZmlsZSBVUkxzLCBhbG9uZyB3aXRoIHNpemUgZGVzY3JpcHRpb25zLlxuICAgKi9cbiAgc3Jjc2V0Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhbHRlcm5hdGl2ZSBpbmZvcm1hdGlvbiBmb3IgYSBtZWRpYSBpZiBhIHVzZXIgY2Fubm90IHZpZXcgdGhlIHZpc3VhbC4gSXQgaXNcbiAgICogYWxzbyB1c2VkIGJ5IHdlYiBjcmF3bGVycyBhbmQgc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBhbHQ/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQ29udGFpbnMgbXVsdGlwbGUgbWVkaWEgZm9yIGRpZmZlcmVudCBmb3JtYXRzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWVkaWFDb250YWluZXIge1xuICBbZm9ybWF0OiBzdHJpbmddOiBJbWFnZTtcbn1cblxuLyoqXG4gKiBTcGVjaWZpZXMgbWVkaWEgc2l6ZSBpbmZvcm1hdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIGdlbmVyYXRlIGluZm9ybWF0aW9uIGZvciB0aGVcbiAqIGJyb3dzZXIgdG8gcmVzb2x2ZSB0aGUgcmlnaHQgbWVkaWEgZm9yIHRoZSByaWdodCBsYXlvdXQgb3IgZGV2aWNlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1lZGlhRm9ybWF0U2l6ZSB7XG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIHdpZHRoIGZvciBhIGdpdmVuIG1lZGlhIGZvcm1hdC4gVGhlIG1lZGlhIGZvcm1hdCB3aWR0aCBpcyB1c2VkXG4gICAqIHRvIGFsaWduIHRoZSB3aWR0aCBvZiB0aGUgbWVkaWEgd2l0aCB0aGUgYXZhaWxhYmxlIHNpemUgaW4gdGhlIGxheW91dCwgc28gdGhhdFxuICAgKiBkaWZmZXJlbnQgbWVkaWEncyBjYW4gYmUgdXNlZCBpbiBhIHJlc3BvbnNpdmUgbGF5b3V0LlxuICAgKi9cbiAgd2lkdGg/OiBudW1iZXI7XG59XG5cbi8qKlxuICogSW5kaWNhdGVzIGhvdyB0aGUgYnJvd3NlciBzaG91bGQgbG9hZCB0aGUgaW1hZ2UuXG4gKlxuICogV2hpbGUgdGhpcyBtaWdodCBub3QgYWRkIHRvbyBtdWNoIHZhbHVlIGluIHNvbWUgc2NlbmFyaW9zLCBhcyB3ZSBoYXZlIG90aGVyXG4gKiBvcHRpbWl6YXRpb25zIHRvIGRlZmVyIGxvYWRpbmcgb2YgbGFyZ2VyIHBpZWNlcyBvZiB0aGUgRE9NLCB0aGVyZSBtaWdodCBiZVxuICogY29tcG9uZW50cyB3aG8gaGF2ZW4ndCBpbXBsZW1lbnRlZCBvdGhlciBsYXp5IGxvYWRpbmcgdGVjaG5pcXVlcy4gTW9yZW92ZXIsXG4gKiBhIHNlcnZlciBzaWRlcyByZW5kZXJlZCBwYWdlIHRoYXQgbGFuZHMgZGlyZWN0bHkgaW4gdGhlIGJyb3dzZXIgY291bGQgYmVuZWZpdFxuICogZW5vcm1vdXNseSBmcm9tIHRoZSBsYXp5IGxvYWRpbmcgb2YgaW1hZ2VzLlxuICovXG5leHBvcnQgZW51bSBJbWFnZUxvYWRpbmdTdHJhdGVneSB7XG4gIC8qKlxuICAgKiBMb2FkcyB0aGUgaW1hZ2UgaW1tZWRpYXRlbHksIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciBvciBub3QgdGhlIGltYWdlXG4gICAqIGlzIGN1cnJlbnRseSB3aXRoaW4gdGhlIHZpc2libGUgdmlld3BvcnQgKHRoaXMgaXMgdGhlIGRlZmF1bHQgdmFsdWUpLlxuICAgKi9cbiAgRUFHRVIgPSAnZWFnZXInLFxuICAvKipcbiAgICogRGVmZXJzIGxvYWRpbmcgdGhlIGltYWdlIHVudGlsIGl0IHJlYWNoZXMgYSBjYWxjdWxhdGVkIGRpc3RhbmNlIGZyb20gdGhlIHZpZXdwb3J0LFxuICAgKiBhcyBkZWZpbmVkIGJ5IHRoZSBicm93c2VyLiBUaGUgaW50ZW50IGlzIHRvIGF2b2lkIHRoZSBuZXR3b3JrIGFuZCBzdG9yYWdlIGJhbmR3aWR0aFxuICAgKiBuZWVkZWQgdG8gaGFuZGxlIHRoZSBpbWFnZSB1bnRpbCBpdCdzIHJlYXNvbmFibHkgY2VydGFpbiB0aGF0IGl0IHdpbGwgYmUgbmVlZGVkLlxuICAgKiBUaGlzIGdlbmVyYWxseSBpbXByb3ZlcyB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhlIGNvbnRlbnQgaW4gbW9zdCB0eXBpY2FsIHVzZSBjYXNlcy5cbiAgICovXG4gIExBWlkgPSAnbGF6eScsXG59XG4iXX0=