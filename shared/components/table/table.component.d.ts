import { EventEmitter } from '@angular/core';
import { PaginationModel } from '@spartacus/core';
import { Table, TableHeader } from './table.model';
/**
 * The table component provides a generic DOM structure based on the `dataset` input.
 * The `Table` dataset contains both a type, table structure, table data and controls
 * for pagination and sorting.
 *
 * The table component only supports horizontal table structure.
 *
 * The implementation is fairly "dumb" and only provides the following features:
 * - Use outlet for table headers (`<th>`) and cells (`<td>`).
 * - Localizing table headers, using the `I18nModule`.
 * - Sorting table columns.
 * - Add CSS classes on each cell to
 *
 * Al features are optional.
 *
 * By default, the headers and columns are rendered with an outlet template. The template
 * reference is generated by concatenating the table _type_ and table _label key_.
 * The following snippet shows an outlet generated for the table type "cost-center" with
 * a label "name":
 *
 * ```
 * <th>
 *   <template cxOutlet="tbl.cost-center.header.name">
 *     [localized label is generated here]
 *   </template>
 * </th>
 * ```
 *
 * Similarly, the `<td>` is generated with the outlet template reference `tbl.cost-center.data.name`.
 *
 * This allows container components (and customers) to further customize the table rendering.
 *
 *
 */
export declare class TableComponent {
    tableType: string;
    protected _dataset: Table;
    set dataset(dataset: Table);
    get dataset(): Table;
    /**
     * The paginateEvent is triggered when a new page is required. This includes sorting.
     */
    paginateEvent: EventEmitter<PaginationModel>;
    /**
     * Returns the configured data value by the label key.
     * If there's no headerKey available, or no corresponding value, the
     * first value in the data row is returned.
     */
    getDataValue(dataRow: any, headerKey: string, index: number): string;
    /**
     * Sorts the table by emitting the pagination to the container/host component.
     */
    sort(header: TableHeader): void;
    /**
     * Generates the table type into the UI in devMode, so that developers
     * can easily get the notion of the table type.
     */
    protected addTableDebugInfo(): void;
}
