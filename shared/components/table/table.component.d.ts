import { Table } from './table.model';
/**
 * The table component provides a generic DOM structure based on the `dataset` input.
 * The `Table` dataset contains a type, table structure and table data.
 *
 * The table component only supports horizontal table structure.
 *
 * The implementation is fairly "dumb" and only provides the following features:
 * - Use outlet for table headers (`<th>`) and cells (`<td>`).
 * - Localizing table headers, using the `I18nModule`.
 * - Add CSS classes on each cell to
 *
 * Al features are optional.
 *
 * By default, the headers and columns are rendered with an outlet template. The template
 * reference is generated by concatenating the table `type` and table header `key`.
 * The following snippet shows an outlet generated for a table header, for the table type
 * "cost-center" with a label "name":
 *
 * ```
 * <th>
 *   <template cxOutlet="tbl.cost-center.header.name">
 *     [localized label is generated here]
 *   </template>
 * </th>
 * ```
 *
 * Similarly, the `<td>` is generated with the outlet template reference `tbl.cost-center.data.name`.
 *
 * This allows smart components to further customize the table rendering. More over, customers can
 * customize the header and data by using the generated outlets.
 */
import * as ɵngcc0 from '@angular/core';
export declare class TableComponent {
    tableType: string;
    protected _dataset: Table;
    set dataset(dataset: Table);
    get dataset(): Table;
    /**
     * Returns the configured data value by the label key.
     * If there's no headerKey available, or no corresponding value, the
     * first value in the data row is returned.
     */
    getDataValue(dataRow: any, headerKey: string, index: number): string;
    /**
     * Generates the table type into the UI in devMode, so that developers
     * can easily get the notion of the table type.
     */
    protected addTableDebugInfo(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TableComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TableComponent, "cx-table", never, { "dataset": "dataset"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRhYmxlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRhYmxlIH0gZnJvbSAnLi90YWJsZS5tb2RlbCc7XG4vKipcbiAqIFRoZSB0YWJsZSBjb21wb25lbnQgcHJvdmlkZXMgYSBnZW5lcmljIERPTSBzdHJ1Y3R1cmUgYmFzZWQgb24gdGhlIGBkYXRhc2V0YCBpbnB1dC5cbiAqIFRoZSBgVGFibGVgIGRhdGFzZXQgY29udGFpbnMgYSB0eXBlLCB0YWJsZSBzdHJ1Y3R1cmUgYW5kIHRhYmxlIGRhdGEuXG4gKlxuICogVGhlIHRhYmxlIGNvbXBvbmVudCBvbmx5IHN1cHBvcnRzIGhvcml6b250YWwgdGFibGUgc3RydWN0dXJlLlxuICpcbiAqIFRoZSBpbXBsZW1lbnRhdGlvbiBpcyBmYWlybHkgXCJkdW1iXCIgYW5kIG9ubHkgcHJvdmlkZXMgdGhlIGZvbGxvd2luZyBmZWF0dXJlczpcbiAqIC0gVXNlIG91dGxldCBmb3IgdGFibGUgaGVhZGVycyAoYDx0aD5gKSBhbmQgY2VsbHMgKGA8dGQ+YCkuXG4gKiAtIExvY2FsaXppbmcgdGFibGUgaGVhZGVycywgdXNpbmcgdGhlIGBJMThuTW9kdWxlYC5cbiAqIC0gQWRkIENTUyBjbGFzc2VzIG9uIGVhY2ggY2VsbCB0b1xuICpcbiAqIEFsIGZlYXR1cmVzIGFyZSBvcHRpb25hbC5cbiAqXG4gKiBCeSBkZWZhdWx0LCB0aGUgaGVhZGVycyBhbmQgY29sdW1ucyBhcmUgcmVuZGVyZWQgd2l0aCBhbiBvdXRsZXQgdGVtcGxhdGUuIFRoZSB0ZW1wbGF0ZVxuICogcmVmZXJlbmNlIGlzIGdlbmVyYXRlZCBieSBjb25jYXRlbmF0aW5nIHRoZSB0YWJsZSBgdHlwZWAgYW5kIHRhYmxlIGhlYWRlciBga2V5YC5cbiAqIFRoZSBmb2xsb3dpbmcgc25pcHBldCBzaG93cyBhbiBvdXRsZXQgZ2VuZXJhdGVkIGZvciBhIHRhYmxlIGhlYWRlciwgZm9yIHRoZSB0YWJsZSB0eXBlXG4gKiBcImNvc3QtY2VudGVyXCIgd2l0aCBhIGxhYmVsIFwibmFtZVwiOlxuICpcbiAqIGBgYFxuICogPHRoPlxuICogICA8dGVtcGxhdGUgY3hPdXRsZXQ9XCJ0YmwuY29zdC1jZW50ZXIuaGVhZGVyLm5hbWVcIj5cbiAqICAgICBbbG9jYWxpemVkIGxhYmVsIGlzIGdlbmVyYXRlZCBoZXJlXVxuICogICA8L3RlbXBsYXRlPlxuICogPC90aD5cbiAqIGBgYFxuICpcbiAqIFNpbWlsYXJseSwgdGhlIGA8dGQ+YCBpcyBnZW5lcmF0ZWQgd2l0aCB0aGUgb3V0bGV0IHRlbXBsYXRlIHJlZmVyZW5jZSBgdGJsLmNvc3QtY2VudGVyLmRhdGEubmFtZWAuXG4gKlxuICogVGhpcyBhbGxvd3Mgc21hcnQgY29tcG9uZW50cyB0byBmdXJ0aGVyIGN1c3RvbWl6ZSB0aGUgdGFibGUgcmVuZGVyaW5nLiBNb3JlIG92ZXIsIGN1c3RvbWVycyBjYW5cbiAqIGN1c3RvbWl6ZSB0aGUgaGVhZGVyIGFuZCBkYXRhIGJ5IHVzaW5nIHRoZSBnZW5lcmF0ZWQgb3V0bGV0cy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGFibGVDb21wb25lbnQge1xuICAgIHRhYmxlVHlwZTogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBfZGF0YXNldDogVGFibGU7XG4gICAgc2V0IGRhdGFzZXQoZGF0YXNldDogVGFibGUpO1xuICAgIGdldCBkYXRhc2V0KCk6IFRhYmxlO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvbmZpZ3VyZWQgZGF0YSB2YWx1ZSBieSB0aGUgbGFiZWwga2V5LlxuICAgICAqIElmIHRoZXJlJ3Mgbm8gaGVhZGVyS2V5IGF2YWlsYWJsZSwgb3Igbm8gY29ycmVzcG9uZGluZyB2YWx1ZSwgdGhlXG4gICAgICogZmlyc3QgdmFsdWUgaW4gdGhlIGRhdGEgcm93IGlzIHJldHVybmVkLlxuICAgICAqL1xuICAgIGdldERhdGFWYWx1ZShkYXRhUm93OiBhbnksIGhlYWRlcktleTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyB0aGUgdGFibGUgdHlwZSBpbnRvIHRoZSBVSSBpbiBkZXZNb2RlLCBzbyB0aGF0IGRldmVsb3BlcnNcbiAgICAgKiBjYW4gZWFzaWx5IGdldCB0aGUgbm90aW9uIG9mIHRoZSB0YWJsZSB0eXBlLlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBhZGRUYWJsZURlYnVnSW5mbygpOiB2b2lkO1xufVxuIl19