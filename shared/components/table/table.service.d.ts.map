{"version":3,"file":"table.service.d.ts","sources":["table.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Observable } from 'rxjs';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { TableConfig } from './config/table.config';\nimport { TableStructure, TableStructureConfiguration } from './table.model';\n/**\n * Responsive table service.\n *\n * The `TableService` is used to generate a `TableStructure` based on configuration. The table\n * structure configuration allows for breakpoint specific configuration, so that the table\n * experience can be differentiated various screen sizes.\n *\n * The table structure configuration is driven by a table type. The various supported\n * table types are exposed in feature libraries.\n *\n * If there is no table configuration for the given type found, a table header structure\n * is generated based on the actual data or randomly (in case no data is passed in) by\n * generating 5 headers. In case of a generated header, we warn the developer in devMode that\n * there is no configuration available.\n */\nexport declare class TableService {\n    protected breakpointService: BreakpointService;\n    protected config: TableConfig;\n    constructor(breakpointService: BreakpointService, config: TableConfig);\n    /**\n     * Builds the table structure. The table structure can be created by the help of\n     * the `tableType`. The `tableType` can be used in the configuration `TableConfig`,\n     * so that the table headers can be defined.\n     */\n    buildStructure(tableType: string, data$?: Observable<any>): Observable<TableStructure>;\n    /**\n     * Returns the table structure by configuration. The configuration can be\n     * breakpoint-driven, which means that an alternative header structure can\n     * be created per screen size.\n     *\n     * The breakpoint is resolved by teh `BreakpointService`.\n     */\n    protected buildStructureFromConfig(type: string): Observable<TableStructure>;\n    /**\n     * This method generates a table structure by the help of the first data row.\n     */\n    protected buildStructureFromData(type: string, data$: Observable<any>): Observable<TableStructure>;\n    /**\n     * As a last resort, the table structure is randomly created. We add 5 unknown headers\n     * and use the `hideHeader` to avoid the unknown headers to be rendered.\n     */\n    protected buildRandomStructure(type: string): Observable<TableStructure>;\n    /**\n     * Finds the best applicable table configuration for the given type\n     * and breakpoint. If there is no configuration available for the breakpoint,\n     * the best match will be returned, using mobile first approach.\n     *\n     * If there is no match for any breakpoint, the fallback is a configuration\n     * without the notion of a breakpoint. Otherwise we fallback to the first\n     * available config.\n     */\n    protected getTableConfig(type: string, breakpoint: BREAKPOINT): TableStructureConfiguration;\n    protected hasTableConfig(tableType: string): boolean;\n    /**\n     * Prints a convenient message in the console to increase developer experience.\n     */\n    private warn;\n}\n"]}