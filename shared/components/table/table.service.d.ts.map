{"version":3,"file":"table.service.d.ts","sources":["table.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Observable } from 'rxjs';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { ResponsiveTableConfiguration, TableConfig } from './config/table.config';\nimport { TableStructure, TableStructureConfiguration } from './table.model';\n/**\n * Responsive table service.\n *\n * The `TableService` is used to build a `TableStructure` by configuration. The configuration\n * allows for breakpoint specific configuration, so that the table can differentiate for\n * various screen sizes.\n *\n * While there are some global options, the configuration is mainly driven by the table _type_.\n *\n * If there is no table configuration for the given type found, a table header structure\n * is generated based on the actual data (if available) or randomly by generating 5 random headers.\n */\nexport declare class TableService {\n    protected breakpointService: BreakpointService;\n    protected config: TableConfig;\n    constructor(breakpointService: BreakpointService, config: TableConfig);\n    /**\n     * Builds the table structure.\n     *\n     * @param tableType The table type is used  to find the specific table configuration.\n     * @param defaultStructure (optional) Default table structure that contains fallback options. More specific options are merged with the default structure.\n     * @param data$ (optional) The actual data can be passed in to generate the table structure based on actual data.\n     */\n    buildStructure(tableType: string, defaultStructure?: ResponsiveTableConfiguration, data$?: Observable<any>): Observable<TableStructure>;\n    /**\n     * Returns the table structure by configuration. The configuration can be\n     * breakpoint-driven, which means that an alternative header structure can\n     * be created per screen size.\n     *\n     * The breakpoint is resolved by teh `BreakpointService`.\n     */\n    protected buildStructureFromConfig(type: string, defaultStructure?: ResponsiveTableConfiguration): Observable<TableStructure>;\n    /**\n     * Finds all applicable table configuration for the given type and breakpoint.\n     * The default table configuration is merged with all relevant breakpoint\n     * configurations.\n     *\n     * This allows to have some default configurations that apply to all screens, and\n     * add configuration options for some screens.\n     */\n    protected getTableConfig(type: string, breakpoint: BREAKPOINT, defaultStructure?: ResponsiveTableConfiguration): TableStructureConfiguration;\n    /**\n     * Generates the table structure by the help of the first data row.\n     */\n    protected buildStructureFromData(type: string, data$: Observable<any>): Observable<TableStructure>;\n    /**\n     * As a last resort, the table structure is randomly created. The random structure\n     * contains 5 headers, so that some of the unknown data is visualized.\n     */\n    protected buildRandomStructure(type: string): Observable<TableStructure>;\n    /**\n     * Finds all the breakpoints can contribute to the table configuration, from small\n     * to current.\n     *\n     * For example, if the current breakpoint is `MD`, this returns `[XS, SM, MD]`.\n     */\n    protected findRelevantBreakpoints(breakpoint: BREAKPOINT): BREAKPOINT[];\n    /**\n     * Indicates if the there is a configuration for the table available.\n     */\n    protected hasTableConfig(tableType: string): boolean;\n    /**\n     * Logs a message in the console to increase developer experience.\n     *\n     * The message is only logged in dev mode.\n     */\n    private logWarning;\n}\n"]}