{"version":3,"file":"table.component.d.ts","sources":["table.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Table } from './table.model';\n/**\n * The table component provides a generic DOM structure based on the `dataset` input.\n * The `Table` dataset contains a type, table structure and table data.\n *\n * The table component only supports horizontal table structure.\n *\n * The implementation is fairly \"dumb\" and only provides the following features:\n * - Use outlet for table headers (`<th>`) and cells (`<td>`).\n * - Localizing table headers, using the `I18nModule`.\n * - Add CSS classes on each cell to\n *\n * Al features are optional.\n *\n * By default, the headers and columns are rendered with an outlet template. The template\n * reference is generated by concatenating the table `type` and table header `key`.\n * The following snippet shows an outlet generated for a table header, for the table type\n * \"cost-center\" with a label \"name\":\n *\n * ```\n * <th>\n *   <template cxOutlet=\"tbl.cost-center.header.name\">\n *     [localized label is generated here]\n *   </template>\n * </th>\n * ```\n *\n * Similarly, the `<td>` is generated with the outlet template reference `tbl.cost-center.data.name`.\n *\n * This allows smart components to further customize the table rendering. More over, customers can\n * customize the header and data by using the generated outlets.\n */\nexport declare class TableComponent {\n    tableType: string;\n    protected _dataset: Table;\n    set dataset(dataset: Table);\n    get dataset(): Table;\n    /**\n     * Returns the configured data value by the label key.\n     * If there's no headerKey available, or no corresponding value, the\n     * first value in the data row is returned.\n     */\n    getDataValue(dataRow: any, headerKey: string, index: number): string;\n    /**\n     * Generates the table type into the UI in devMode, so that developers\n     * can easily get the notion of the table type.\n     */\n    protected addTableDebugInfo(): void;\n}\n"]}