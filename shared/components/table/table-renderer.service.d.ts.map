{"version":3,"file":"table-renderer.service.d.ts","sources":["table-renderer.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { ComponentFactoryResolver, Type } from '@angular/core';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { TableConfig } from './config/table.config';\nimport { TableDataOutletContext, TableHeaderOutletContext, TableOptions, TableStructure } from './table.model';\n/**\n * The table renderer service adds a component for each table cells (th and td)\n * based on a fine grained configuration. Each table type can configure both global\n * components for headers and cells as well as individual components for field\n * specific cells.\n *\n * The components are added to the outlet slots for the corresponding cells. The table\n * structure and data is added to the outlet context.\n */\nexport declare class TableRendererService {\n    protected outletService: OutletService;\n    protected componentFactoryResolver: ComponentFactoryResolver;\n    protected config: TableConfig;\n    protected outletRefs: Map<any, any>;\n    constructor(outletService: OutletService, componentFactoryResolver: ComponentFactoryResolver, config: TableConfig);\n    /**\n     * Adds the configured table component for the header and data.\n     */\n    add(structure: TableStructure): void;\n    protected render(outletRef: string, renderer: Type<any>): void;\n    /**\n     * Returns the header render component for the given field.\n     */\n    protected getHeaderRenderer(structure: TableStructure, field: string): Type<any>;\n    /**\n     * Returns the data render component for the given field.\n     */\n    protected getDataRenderer(structure: TableStructure, field: string): Type<any>;\n    /**\n     * Returns the header (th) outlet reference for the given field.\n     *\n     * The outlet reference is generated as:\n     * `table.[tableType].header.[field]`\n     */\n    getHeaderOutletRef(type: string, field: string): string;\n    /**\n     * Returns the header (th) outlet context for the given field.\n     */\n    getHeaderOutletContext(type: string, options: TableOptions, i18nRoot: string, field: string): TableHeaderOutletContext;\n    /**\n     * Returns the data (td) outlet reference for the given field.\n     *\n     * The field is generated as:\n     * `table.[tableType].data.[tableField]`\n     */\n    getDataOutletRef(type: string, field: string): string;\n    /**\n     * Returns the data (td) outlet context for the given field.\n     */\n    getDataOutletContext(type: string, options: TableOptions, i18nRoot: string, field: string, data: any): TableDataOutletContext;\n}\n"]}