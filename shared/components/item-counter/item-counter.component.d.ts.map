{"version":3,"file":"item-counter.component.d.ts","sources":["item-counter.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnDestroy, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functionality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\nexport declare class ItemCounterComponent implements OnInit, OnDestroy {\n    /**\n     * Holds the value of the counter, the state of the `FormControl`\n     * can be managed outside of the item counter.\n     */\n    control: FormControl;\n    /**\n     * This can be used in case an item has a minmum order quantity.\n     * @default 1\n     */\n    min: number;\n    /**\n     * This can be used in case an item has a maximum order quantity.\n     */\n    max: number;\n    /**\n     * The step is used to increment the count. It is supposed to be a\n     * positive integer or float.\n     * @default 1\n     */\n    step: number;\n    /**\n     * Indicates that the input can be manually set to zero,\n     * despite the fact that the input controls will be limited to\n     * the minimum. The zero value can be used to remove an item.\n     */\n    allowZero: boolean;\n    /**\n     * In readonly mode the item counter will only be shown as a label,\n     * the form controls are not rendered.\n     * Please not that readonly is different from the `disabled` form state.\n     * @default false\n     */\n    readonly: boolean;\n    private input;\n    /**\n     * Subscription responsible for auto-correcting control's value when it's invalid.\n     */\n    private sub;\n    handleClick(): void;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    increment(): void;\n    decrement(): void;\n    /**\n     * Validate that the given value is in between\n     * the `min` and `max` value. If the value is out\n     * of  the min/max range, it will be altered.\n     * If `allowZero` is set to true, the 0 value is ignored.\n     *\n     */\n    private getValidCount;\n}\n"]}