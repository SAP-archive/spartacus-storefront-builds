{"version":3,"file":"pagination.component.d.ts","sources":["pagination.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem } from './pagination.model';\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\nexport declare class PaginationComponent {\n    private paginationBuilder;\n    private activatedRoute;\n    /** The (optional) pageRoute used for the anchor links created in the pagination   */\n    pageRoute: string;\n    /** The (optional) query parameter which is added to the page route.  */\n    queryParam: string;\n    /**\n     * Whenever there's a default page specified, the routing logic\n     * will omit the page number in routeLink or parameters.\n     */\n    defaultPage: any;\n    private _pagination;\n    get pagination(): PaginationModel;\n    set pagination(value: PaginationModel);\n    viewPageEvent: EventEmitter<number>;\n    pages: PaginationItem[];\n    constructor(paginationBuilder: PaginationBuilder, activatedRoute: ActivatedRoute);\n    private render;\n    /**\n     * Indicates whether the given item is the current item.\n     *\n     * @param item PaginationItem\n     * @returns boolean\n     */\n    isCurrent(item: PaginationItem): boolean;\n    /**\n     * Indicates whether the pagination item is inactive. This is used\n     * to disabled a link or set the tabindex to `-1`.\n     *\n     * Defaults to true\n     *\n     * @param item PaginationItem\n     * @returns returns -1 in case of a disabled\n     */\n    isInactive(item: PaginationItem): boolean;\n    getQueryParams(item: PaginationItem): Params;\n    pageChange(page: PaginationItem): void;\n}\n"]}