{"version":3,"file":"media.service.d.ts","sources":["media.service.d.ts"],"names":[],"mappingssourcesContent":["import { Image } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { StorefrontConfig } from '../../../storefront-config';\nimport { ImageLoadingStrategy, Media, MediaContainer, MediaFormatSize } from './media.model';\n/**\n * Service which generates media URLs. It leverage the MediaContainer and MediaFormats so\n * that URLs and sizes are generated for the same media. This helps to improve performance\n * across difference devices and layouts.\n *\n * Media formats are optional, but highly recommended. The format will help the browser to\n * identify the right media for the right experience.\n *\n * The MediaService will generate absolute URLs in case relative URLs are provided for the Media.\n * The baseUrl is read from the `occConfig.backend.media.baseUrl` or\n * `occConfig.backend.occ.baseUrl`.\n */\nexport declare class MediaService {\n    protected config: StorefrontConfig;\n    /**\n     * The BreakpointService is no longer used in version 2.0 as the different size formats are\n     * driven by configuration only. There's however a change that this service will play a role\n     * in the near future, which is why we keep the constructor as-is.\n     *\n     * @deprecated\n     */\n    protected breakpointService: BreakpointService;\n    /**\n     * The media formats sorted by size. The media format representing the smallest\n     * size is sorted on top.\n     */\n    private _sortedFormats;\n    private _reversedFormats;\n    constructor(config: StorefrontConfig, \n    /**\n     * The BreakpointService is no longer used in version 2.0 as the different size formats are\n     * driven by configuration only. There's however a change that this service will play a role\n     * in the near future, which is why we keep the constructor as-is.\n     *\n     * @deprecated\n     */\n    breakpointService: BreakpointService);\n    /**\n     * Returns a `Media` object with the main media (`src`) and various media (`src`)\n     * for specific formats.\n     */\n    getMedia(mediaContainer: MediaContainer | Image, format?: string, alt?: string): Media;\n    /**\n     * Reads the loading strategy from the `MediaConfig`.\n     *\n     * Defaults to `ImageLoadingStrategy.EAGER`.\n     */\n    get loadingStrategy(): ImageLoadingStrategy;\n    /**\n     * Creates the media formats in a logical sorted order. The map contains the\n     * format key and the format size information. We do this only once for performance\n     * benefits.\n     */\n    protected get sortedFormats(): {\n        code: string;\n        size: MediaFormatSize;\n    }[];\n    /**\n     * Creates the media formats in a reversed sorted order.\n     */\n    protected get reversedFormats(): {\n        code: string;\n        size: MediaFormatSize;\n    }[];\n    /**\n     * Resolves the right media for the given format. The fo\n     */\n    protected resolveMedia(media: MediaContainer, format?: string): Image;\n    /**\n     * Validates the format against the given mediaContainer. If there is no format available,\n     * or if the mediaContainer doesn't contain a media for the given media, the most optimal\n     * format is resolved. If even that is not possible, the first format is returned.\n     */\n    protected resolveFormat(mediaContainer: MediaContainer, format?: string): string;\n    /**\n     * Returns the media format code with the best size.\n     */\n    protected resolveBestFormat(media: MediaContainer | Image): string;\n    /**\n     * Returns a set of media for the available media formats. Additionally, the configured media\n     * format width is added to the srcset, so that browsers can select the appropriate media.\n     *\n     * The optional maxFormat indicates that only sources till a certain format should be added\n     * to the srcset.\n     */\n    protected resolveSrcSet(media: MediaContainer | Image, maxFormat?: string): string;\n    /**\n     * Resolves the absolute URL for the given url. In most cases, this URL represents\n     * the relative URL on the backend. In that case, we prefix the url with the baseUrl.\n     */\n    protected resolveAbsoluteUrl(url: string): string;\n    /**\n     * The base URL is either driven by a specific `backend.media.baseUrl`, or by the\n     * `backend.occ.baseUrl`.\n     *\n     * The `backend.media.baseUrl` can be used to load media from a different location.\n     *\n     * In Commerce Cloud, a different location could mean a different \"aspect\".\n     *\n     * Defaults to empty string in case no config is provided.\n     */\n    protected getBaseUrl(): string;\n}\n"]}