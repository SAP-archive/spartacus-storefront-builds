{"version":3,"file":"date-picker-fallback.directive.d.ts","sources":["date-picker-fallback.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef } from '@angular/core';\nimport { AbstractControl, ValidationErrors, Validator } from '@angular/forms';\nimport { DatePickerService } from './date-picker.service';\n/**\n * Directive that adds an alternative for the native html5 date picker\n * for those browsers that won't support it, Safari being our main concern.\n *\n * An input with `type=\"date\"` will be ignored by browsers that do not support\n * the native date picker. The default text type will be used instead. This directive\n * introduces a few features to ensure that valid dates are added:\n *\n * - add a placeholder to the text input so that the user understands the date format he should provide\n * - add a pattern validator to the input, based on the the placeholder. Please note that the\n *   standard pattern will no longer be applicable since the pattern is added dynamically.\n * - support the `min` and `max` properties by validating the input against those values.\n *\n * The placeholder is provided by the `DatePickerService.placeholder` to allow for customizations.\n *\n */\nexport declare class DatePickerFallbackDirective implements Validator {\n    protected elementRef: ElementRef<HTMLInputElement>;\n    protected service: DatePickerService;\n    placeholder: string;\n    pattern: string;\n    constructor(elementRef: ElementRef<HTMLInputElement>, service: DatePickerService);\n    validate(formControl: AbstractControl): ValidationErrors;\n    protected validateMin(formControl: AbstractControl): boolean;\n    protected validateMax(formControl: AbstractControl): boolean;\n    protected get min(): Date;\n    protected get max(): Date;\n    protected get host(): HTMLInputElement;\n}\n"]}