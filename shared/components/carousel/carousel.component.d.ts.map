{"version":3,"file":"carousel.component.d.ts","sources":["carousel.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, OnInit, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\nexport declare class CarouselComponent implements OnInit {\n    protected el: ElementRef;\n    protected service: CarouselService;\n    /**\n     * The title is rendered as the carousel heading.\n     */\n    title: string;\n    /**\n     * The items$ represent the carousel items. The items$ are\n     * observables so that the items can be loaded on demand.\n     */\n    items: Observable<any>[];\n    set setItems(inputItems: Observable<any>[]);\n    /**\n     * The template is rendered for each item, so that the actual\n     * view can be given by the compoent that uses the `CarouselComponent`.\n     */\n    template: TemplateRef<any>;\n    /**\n     * Specifies the minimum size of the carousel item, either in px or %.\n     * This value is used for the calculation of numbers per carousel, so that\n     * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n     * and the host element `clientWidth`, so that the carousel is reusable in\n     * different layouts (for example in a 50% grid).\n     */\n    itemWidth: string;\n    /**\n     * Indicates whether the visual indicators are used.\n     */\n    hideIndicators: boolean;\n    indicatorIcon: ICON_TYPE;\n    previousIcon: ICON_TYPE;\n    nextIcon: ICON_TYPE;\n    activeSlide: number;\n    size$: Observable<number>;\n    constructor(el: ElementRef, service: CarouselService);\n    ngOnInit(): void;\n}\n"]}