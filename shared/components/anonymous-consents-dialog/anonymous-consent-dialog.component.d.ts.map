{"version":3,"file":"anonymous-consent-dialog.component.d.ts","sources":["anonymous-consent-dialog.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, OnDestroy, OnInit } from '@angular/core';\nimport { AnonymousConsent, AnonymousConsentsConfig, AnonymousConsentsService, ConsentTemplate } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { FocusConfig } from '../../../layout/a11y/keyboard-focus/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\nexport declare class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n    protected config: AnonymousConsentsConfig;\n    protected anonymousConsentsService: AnonymousConsentsService;\n    protected el: ElementRef;\n    protected launchDialogService: LaunchDialogService;\n    role: string;\n    modal: boolean;\n    private subscriptions;\n    showLegalDescription: boolean;\n    iconTypes: typeof ICON_TYPE;\n    requiredConsents: string[];\n    loading$: Observable<boolean>;\n    templates$: Observable<ConsentTemplate[]>;\n    consents$: Observable<AnonymousConsent[]>;\n    focusConfig: FocusConfig;\n    handleClick(event: UIEvent): void;\n    constructor(config: AnonymousConsentsConfig, anonymousConsentsService: AnonymousConsentsService, el: ElementRef, launchDialogService: LaunchDialogService);\n    ngOnInit(): void;\n    close(reason?: any): void;\n    rejectAll(): void;\n    allowAll(): void;\n    private isRequiredConsent;\n    onConsentChange({ given, template, }: {\n        given: boolean;\n        template: ConsentTemplate;\n    }): void;\n    getCorrespondingConsent(template: ConsentTemplate, consents?: AnonymousConsent[]): AnonymousConsent;\n    ngOnDestroy(): void;\n}\n"]}