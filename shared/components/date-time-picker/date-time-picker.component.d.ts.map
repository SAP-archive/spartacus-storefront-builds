{"version":3,"file":"date-time-picker.component.d.ts","sources":["date-time-picker.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef } from '@angular/core';\nimport { ControlValueAccessor, Validator } from '@angular/forms';\nimport { DateTimePickerFormatterService } from './date-time-picker-formatter.service';\n/**\n * This component serves the browser's native `<input type=\"datetime-local\">` HTML element\n * in whilst projecting the value in the standard date format with regards to timezone offsets.\n */\nexport declare class DateTimePickerComponent implements ControlValueAccessor, Validator {\n    protected dateFormatterService: DateTimePickerFormatterService;\n    value: string;\n    nativeValue: string;\n    /**\n     * Reference to input element of type 'datetime-local'.\n     */\n    input: ElementRef;\n    /**\n     * Minimum value allowed for input element.\n     */\n    min?: string;\n    /**\n     * Maximum value allowed for input element.\n     */\n    max?: string;\n    /**\n     * Whether to use `required` validator.\n     */\n    required?: boolean;\n    /**\n     * Condition to display as invalid.\n     */\n    invalid?: boolean;\n    constructor(dateFormatterService: DateTimePickerFormatterService);\n    /**\n     * Handler method for input interactions.\n     * @param event: Input event.\n     */\n    onInput(event: any): void;\n    /**\n     * Handler method for when the value is modified.\n     * @param event: Change event.\n     */\n    onChange(_event: any): void;\n    /**\n     * Handler method for when the element is interacted with.\n     */\n    onTouched(): void;\n    /**\n     * Register the `onChange()` handler method.\n     */\n    registerOnChange(fn: (_: any) => void): void;\n    /**\n     * Register the `onTouched()` handler method.\n     */\n    registerOnTouched(fn: () => void): void;\n    /**\n     * Set the value of the input element.\n     * @param value: Date-like string to be set\n     */\n    writeValue(value: string): void;\n    /**\n     * Get the minimum value allowed for the input.\n     */\n    getMin(): string;\n    /**\n     * Get the maximum value allowed for the input.\n     */\n    getMax(): string;\n    /**\n     * Returns failing validators if input value is invalid\n     */\n    validate(): {\n        [key: string]: any;\n    };\n}\n"]}