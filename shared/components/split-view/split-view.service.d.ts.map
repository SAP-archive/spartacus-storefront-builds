{"version":3,"file":"split-view.service.d.ts","sources":["split-view.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { BehaviorSubject, Observable } from 'rxjs';\nimport { SplitViewState } from './split/split-view.model';\n/**\n * Supposed to be injected in the split view component, so that the split view state\n * is maintained for a single split view.\n */\nexport declare class SplitViewService {\n    /**\n     * Newly added views are hidden by default, unless it is the first view of the split view.\n     * The default hide mode can be overridden.\n     */\n    defaultHideMode: boolean;\n    protected _splitViewCount: number;\n    protected _views$: BehaviorSubject<any[]>;\n    /**\n     * Adds a view to the list of views. The view is initialized with the `SplitViewState`\n     * state. If no state is provided, the state is created with the hidden property. The hidden\n     * property is provided by the `defaultHideMode`, unless it's the first view (position: 0).\n     */\n    add(position: number, initialState?: SplitViewState): void;\n    /**\n     * Returns an observable with the active view number. The active view number\n     * represents the last visible view.\n     */\n    getActiveView(): Observable<number>;\n    /**\n     * Returns an observable with the SplitViewState for the given view position.\n     */\n    getViewState(position: number): Observable<SplitViewState>;\n    /**\n     * Removes a view from the list of views.\n     *\n     * Removing a view is different from hiding a view. Removing a view is typically done\n     * when a component is destroyed.\n     *\n     * When the view is removed, the SplitViewState is updated to reflect that new organization\n     * of views.\n     */\n    remove(position: number): void;\n    /**\n     * Returns the next view position. This is useful for views that do not want to be bothered\n     * with controlling view numbers.\n     */\n    get nextPosition(): number;\n    /**\n     * Toggles the visibility of the views based on the given view position. If the view\n     * is already visible, we close the view and active the former view. Unless the hide flag\n     * is used, to force the view.\n     *\n     * The view state of other views in the split view are updated as well.\n     *\n     * @param position The zero-based position number of the view.\n     * @param forceHide The (optional) hide state for the view position.\n     */\n    toggle(position: number, forceHide?: boolean): void;\n    protected updateState(position: number, hide?: boolean): void;\n    /**\n     * Returns the active view count for the list of views.\n     */\n    protected getActive(views: SplitViewState[]): number;\n    /**\n     * Sets the view count for the split view.\n     *\n     * Defaults to 2.\n     */\n    set splitViewCount(count: number);\n    /**\n     * Utility method that resolves all views from the subject.\n     */\n    protected get views(): SplitViewState[];\n}\n"]}