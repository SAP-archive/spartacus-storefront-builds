{"version":3,"file":"view.component.d.ts","sources":["view.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { SplitViewService } from '../split-view.service';\n/**\n * The view component is part of the `SplitViewComponent`. The view\n * contains the navigable content that should be split up. It maintains\n * a view position and allows to show or hide the view.\n *\n * The ViewComponent interacts with the `SplitViewService` for handing over the\n * view state, so that the overarching `SplitViewComponent` can manage the\n * overall experience.\n */\nexport declare class ViewComponent implements OnInit, OnDestroy {\n    protected splitService: SplitViewService;\n    protected elementRef: ElementRef;\n    protected _hidden: any;\n    position: string;\n    /**\n     * The disappeared flag is added to the\n     */\n    disappeared: boolean;\n    /**\n     * The hidden input is used to set the initial visible state of the view.\n     * The hidden state defaults to false.\n     *\n     * The hidden input supports 2-way binding, see `hiddenChange` property.\n     */\n    set hidden(hidden: boolean);\n    /**\n     * An update of the view visibility is emitted to the hiddenChange output.\n     */\n    hiddenChange: EventEmitter<any>;\n    protected subscription: Subscription;\n    constructor(splitService: SplitViewService, elementRef: ElementRef);\n    ngOnInit(): void;\n    /**\n     * Toggles the visibility of the view.\n     *\n     * An optional force flag can be used to explicitly show or hide view component.\n     */\n    toggle(force?: boolean): void;\n    /**\n     * Returns the position for the view.\n     *\n     * The position is either taken from the input `position` or generated by the `SplitService`.\n     */\n    protected get viewPosition(): number;\n    /**\n     * Returns the duration in milliseconds. The duration is based on the CSS custom property\n     * `--cx-transition-duration`. Defaults to 300 milliseconds.\n     */\n    protected get duration(): number;\n    /**\n     * Returns the maximum number of views per split-view. The number is based on the CSS custom property\n     * `--cx-max-views`. Defaults to `2`\n     */\n    protected get splitViewCount(): number;\n    /**\n     * The view is removed from the `SplitService` so that the view no longer\n     * plays a role in the overall split view.\n     */\n    ngOnDestroy(): void;\n}\n"]}