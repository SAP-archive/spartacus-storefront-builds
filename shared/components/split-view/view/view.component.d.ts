import { ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { Subscription } from 'rxjs';
import { SplitViewService } from '../split-view.service';
/**
 * The view component is part of the `SplitViewComponent`. The view
 * contains the navigable content that should be split up. It maintains
 * a view position and allows to show or hide the view.
 *
 * The ViewComponent interacts with the `SplitViewService` for handing over the
 * view state, so that the overarching `SplitViewComponent` can manage the
 * overall experience.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ViewComponent implements OnInit, OnDestroy {
    protected splitService: SplitViewService;
    protected elementRef: ElementRef;
    protected _hidden: any;
    position: string;
    /**
     * The disappeared flag is added to the
     */
    disappeared: boolean;
    /**
     * The hidden input is used to set the initial visible state of the view.
     * The hidden state defaults to false.
     *
     * The hidden input supports 2-way binding, see `hiddenChange` property.
     */
    set hidden(hidden: boolean);
    /**
     * An update of the view visibility is emitted to the hiddenChange output.
     */
    hiddenChange: EventEmitter<any>;
    protected subscription: Subscription;
    constructor(splitService: SplitViewService, elementRef: ElementRef);
    ngOnInit(): void;
    /**
     * Toggles the visibility of the view.
     *
     * An optional force flag can be used to explicitly show or hide view component.
     */
    toggle(force?: boolean): void;
    /**
     * Returns the position for the view.
     *
     * The position is either taken from the input `position` or generated by the `SplitService`.
     */
    protected get viewPosition(): number;
    /**
     * Returns the duration in milliseconds. The duration is based on the CSS custom property
     * `--cx-transition-duration`. Defaults to 300 milliseconds.
     */
    protected get duration(): number;
    /**
     * Returns the maximum number of views per split-view. The number is based on the CSS custom property
     * `--cx-max-views`. Defaults to `2`
     */
    protected get splitViewCount(): number;
    /**
     * The view is removed from the `SplitService` so that the view no longer
     * plays a role in the overall split view.
     */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ViewComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ViewComponent, "cx-view", never, { "hidden": "hidden"; "position": "position"; }, { "hiddenChange": "hiddenChange"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidmlldy5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztBQVlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0RBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBTcGxpdFZpZXdTZXJ2aWNlIH0gZnJvbSAnLi4vc3BsaXQtdmlldy5zZXJ2aWNlJztcbi8qKlxuICogVGhlIHZpZXcgY29tcG9uZW50IGlzIHBhcnQgb2YgdGhlIGBTcGxpdFZpZXdDb21wb25lbnRgLiBUaGUgdmlld1xuICogY29udGFpbnMgdGhlIG5hdmlnYWJsZSBjb250ZW50IHRoYXQgc2hvdWxkIGJlIHNwbGl0IHVwLiBJdCBtYWludGFpbnNcbiAqIGEgdmlldyBwb3NpdGlvbiBhbmQgYWxsb3dzIHRvIHNob3cgb3IgaGlkZSB0aGUgdmlldy5cbiAqXG4gKiBUaGUgVmlld0NvbXBvbmVudCBpbnRlcmFjdHMgd2l0aCB0aGUgYFNwbGl0Vmlld1NlcnZpY2VgIGZvciBoYW5kaW5nIG92ZXIgdGhlXG4gKiB2aWV3IHN0YXRlLCBzbyB0aGF0IHRoZSBvdmVyYXJjaGluZyBgU3BsaXRWaWV3Q29tcG9uZW50YCBjYW4gbWFuYWdlIHRoZVxuICogb3ZlcmFsbCBleHBlcmllbmNlLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBWaWV3Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByb3RlY3RlZCBzcGxpdFNlcnZpY2U6IFNwbGl0Vmlld1NlcnZpY2U7XG4gICAgcHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XG4gICAgcHJvdGVjdGVkIF9oaWRkZW46IGFueTtcbiAgICBwb3NpdGlvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBkaXNhcHBlYXJlZCBmbGFnIGlzIGFkZGVkIHRvIHRoZVxuICAgICAqL1xuICAgIGRpc2FwcGVhcmVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZSBoaWRkZW4gaW5wdXQgaXMgdXNlZCB0byBzZXQgdGhlIGluaXRpYWwgdmlzaWJsZSBzdGF0ZSBvZiB0aGUgdmlldy5cbiAgICAgKiBUaGUgaGlkZGVuIHN0YXRlIGRlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAqXG4gICAgICogVGhlIGhpZGRlbiBpbnB1dCBzdXBwb3J0cyAyLXdheSBiaW5kaW5nLCBzZWUgYGhpZGRlbkNoYW5nZWAgcHJvcGVydHkuXG4gICAgICovXG4gICAgc2V0IGhpZGRlbihoaWRkZW46IGJvb2xlYW4pO1xuICAgIC8qKlxuICAgICAqIEFuIHVwZGF0ZSBvZiB0aGUgdmlldyB2aXNpYmlsaXR5IGlzIGVtaXR0ZWQgdG8gdGhlIGhpZGRlbkNoYW5nZSBvdXRwdXQuXG4gICAgICovXG4gICAgaGlkZGVuQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwcm90ZWN0ZWQgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gICAgY29uc3RydWN0b3Ioc3BsaXRTZXJ2aWNlOiBTcGxpdFZpZXdTZXJ2aWNlLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgdGhlIHZpc2liaWxpdHkgb2YgdGhlIHZpZXcuXG4gICAgICpcbiAgICAgKiBBbiBvcHRpb25hbCBmb3JjZSBmbGFnIGNhbiBiZSB1c2VkIHRvIGV4cGxpY2l0bHkgc2hvdyBvciBoaWRlIHZpZXcgY29tcG9uZW50LlxuICAgICAqL1xuICAgIHRvZ2dsZShmb3JjZT86IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBvc2l0aW9uIGZvciB0aGUgdmlldy5cbiAgICAgKlxuICAgICAqIFRoZSBwb3NpdGlvbiBpcyBlaXRoZXIgdGFrZW4gZnJvbSB0aGUgaW5wdXQgYHBvc2l0aW9uYCBvciBnZW5lcmF0ZWQgYnkgdGhlIGBTcGxpdFNlcnZpY2VgLlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXQgdmlld1Bvc2l0aW9uKCk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMuIFRoZSBkdXJhdGlvbiBpcyBiYXNlZCBvbiB0aGUgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuICAgICAqIGAtLWN4LXRyYW5zaXRpb24tZHVyYXRpb25gLiBEZWZhdWx0cyB0byAzMDAgbWlsbGlzZWNvbmRzLlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXQgZHVyYXRpb24oKTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1heGltdW0gbnVtYmVyIG9mIHZpZXdzIHBlciBzcGxpdC12aWV3LiBUaGUgbnVtYmVyIGlzIGJhc2VkIG9uIHRoZSBDU1MgY3VzdG9tIHByb3BlcnR5XG4gICAgICogYC0tY3gtbWF4LXZpZXdzYC4gRGVmYXVsdHMgdG8gYDJgXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldCBzcGxpdFZpZXdDb3VudCgpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIHZpZXcgaXMgcmVtb3ZlZCBmcm9tIHRoZSBgU3BsaXRTZXJ2aWNlYCBzbyB0aGF0IHRoZSB2aWV3IG5vIGxvbmdlclxuICAgICAqIHBsYXlzIGEgcm9sZSBpbiB0aGUgb3ZlcmFsbCBzcGxpdCB2aWV3LlxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG4iXX0=