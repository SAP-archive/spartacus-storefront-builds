{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/visible/visible-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/block/block-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.model.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/select-focus.util.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/keyboard-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.module.ts","ng://@spartacus/storefront/layout/launch-dialog/config/launch-config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/launch-dialog/config/default-launch-config.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-dialog.service.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.component.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/inline-render-strategy.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-renderer.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/outlet-render-strategy.service.ts","ng://@spartacus/storefront/layout/launch-dialog/services/routing-render-strategy.service.ts","ng://@spartacus/storefront/layout/launch-dialog/launch-dialog.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes-impl.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page-guard.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","ICON_TYPE","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","ar","error","__spread","concat","IconResourceType","SkipLinkScrollPosition","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","resources","type","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getStyleClasses","iconType","resourceType","config","find","res","types","includes","svgResource","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","IconConfig","DomSanitizer","Injectable","providedIn","IconComponent","iconLoader","elementRef","renderer","setIcon","addStyleClasses","_this","addClass","host","styleClasses","forEach","cls","removeClass","split","nativeElement","ElementRef","Renderer2","Input","Component","selector","template","IconModule","NgModule","declarations","imports","CommonModule","providers","provideDefaultConfig","provide","useExisting","Config","exports","ModalRef","_super","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","requiredConsents","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","cmsComponents","component","deferLoading","DeferLoadingStrategy","INSTANT","entryComponents","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","console","warn","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","componentType","Promise","resolve","path","script","setAttribute","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","CmsConfig","Inject","args","DOCUMENT","PLATFORM_ID","CxApiService","auth","cart","checkout","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","translation","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","selectiveCartService","ngZone","AuthService","Optional","ActiveCartService","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","CmsService","PageMetaService","FeatureConfigService","GlobalMessageService","TranslationService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","RoutingService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserConsentService","UserOrderService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","SelectiveCartService","NgZone","ComponentWrapperDirective","vcr","componentMapper","injector","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","cmpRef","createComponent","undefined","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","get","element","parentElement","P","reject","fulfilled","rejected","result","then","uid","data$","getComponentData","configProviders","Injector","CmsComponentData","useValue","parent","addDynamicAttributes","properties","destroy","remove","ViewContainerRef","DynamicAttributeService","Directive","PageComponentModule","AsmComponentService","authService","asmAuthService","routingService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","go","cxRoute","isCustomerEmulationSessionInProgress","mergeMap","userToken","of","unload","localStorage","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","globalMessageService","disabled","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","switchMap","access_token","handleCustomerSessionStartRedirection","GlobalMessageType","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","password","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","HostBinding","encapsulation","ViewEncapsulation","None","BaseFocusService","BaseFocusDirective","service","defaultConfig","setDefaultConfiguration","requiredTabindex","tabindex","requiresExplicitTabIndex","indexOf","tagName","toLowerCase","hasAttribute","VisibleFocusDirective","disableMouseFocus","mouseFocus","handleMousedown","shouldFocusVisible","handleKeydown","HostListener","BlockFocusDirective","block","PersistFocusService","focus","Map","group","set","clear","delete","getPersistenceGroup","getAttribute","PersistFocusDirective","handleFocus","event","preventDefault","stopPropagation","attr","ngAfterViewInit","isPersisted","preventScroll","SelectFocusUtility","focusableSelectors","focusableSelectorSuffix","query","from","querySelectorAll","findFirstFocusable","autofocus","el","isHidden","findFocusable","locked","invisible","suffix","map","join","filter","offsetParent","EscapeFocusService","selectFocusUtil","shouldFocus","focusOnEscape","handleEscape","focusOnDoubleEscape","EscapeFocusDirective","esc","EventEmitter","emit","Output","AutoFocusService","hasPersistedFocus","getPersisted","focussed","AutoFocusDirective","shouldAutofocus","firstFocusable","TabFocusService","moveTab","increment","tab","findNextScrollable","findNext","active","getActiveChild","virtualSlideCount","Math","round","scrollWidth","clientWidth","nextVirtualSlide","offsetLeft","getChildren","childs","activeIndex","findIndex","persisted","children","index","isActive","child","activeElement","TabFocusDirective","handleNextTab","handlePreviousTab","TrapFocusService","hasFocusableChildren","moveFocus","focusable","getTrapStart","trap","getTrapEnd","TrapFocusDirective","handleTrapDown","handleTrapUp","LockFocusService","LockFocusDirective","lock","unlock","handleEnter","shouldLock","unlockFocus","handleClick","isLocked","lockFocus","addTabindexToChildren","shouldUnlockAfterAutofocus","setTimeout","toString","KeyboardFocusService","FocusDirective","directives","KeyboardFocusModule","DIALOG_TYPE","LAUNCH_CALLER","SkipLinkService","keyboardFocusService","skipLinks$","BehaviorSubject","getSkipLinks","found","skipLinks","skipLink","existing","splice","getSkipLinkIndexInArray","i18nKey","position","scrollToTarget","HTMLElement","hasTabindex","removeAttribute","previous","this_1","SkipLinkConfig","SkipLinkComponent","skipLinkService","changeDetection","ChangeDetectionStrategy","OnPush","DEFAULT_LAUNCH_CONFIG","launch","ASM","outlet","SKIP_LINKS","LaunchRenderStrategy","renderedCallers","shouldRender","caller","some","multi","_config","LaunchDialogService","renderStrategies","launchConfig","findConfiguration","getStrategy","render","strategy","match","LaunchConfig","AsmEnablerService","launchDialogService","load","isEnabled","addUi","isLaunched","isUsedBefore","setItem","params","getItem","Location","AsmLoaderModule","APP_INITIALIZER","useFactory","asmFactory","deps","asmEnablerService","BREAKPOINT","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","markForCheck","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","floor","seconds","slice","Pipe","name","CSAgentLoginFormComponent","fb","csAgentTokenLoading","submitEvent","csAgentLoginForm","Validators","required","onSubmit","valid","markAllAsTouched","FormBuilder","CustomerEmulationComponent","subscription","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","customerSelectionForm","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","controls","valueChanges","debounceTime","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","pageSize","maxResults","selectCustomerFromList","setValue","onDocumentClick","resultList","contains","closeResults","AsmService","ViewChild","(document:click)","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","CarouselComponent","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","isDevMode","size$","PaginationItemType","PaginationNavigationPosition","LayoutConfig","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","window","getBreakpoint","innerWidth","getSize","breakpoint","breakpoints","xl","isDown","breakpoint$","br","isUp","isEqual","windowWidth","getClosest","nativeWindow","MediaService","breakpointService","code","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","getHighestAvailableFormat","mediaFormat_1","mediaFormats","altText","reduce","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","ItemCounterComponent","min","allowZero","readonly","input","control","markAsDirty","decrement","getControl","_control$","startWith","getValidCount","emitEvent","max","ItemCounterModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","test","GenericLinkModule","defaultPaginationConfig","pagination","addStart","addEnd","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","number","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","BEFORE","AFTER","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","minStart","maxStart","PaginationConfig","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","item","isInactive","getQueryParams","queryParams","snapshot","queryParam","defaultPage","pageChange","page","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","FormsModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","isQualtricsConfigured","initialize","setup","fromEvent","qualtricsScript","defer","idScript","qualtrics","projectId","qsi","isDataLoaded","dataLoaded","API","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data","nativeName","symbol","isocode","ContextServiceMap","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","StarRatingComponent","change","initialRate","setRate","rating","force","saveRate","setRateOnEvent","StarRatingModule","FormErrorsComponent","_control","errors$","statusChanges","errors","entries","invalid","dirty","touched","FormErrorsModule","ViewConfigModule","forRoot","ngModule","ViewConfigModule_1","view","ViewConfig","OrderDetailsService","userOrderService","orderCode$","getRouterState","routingData","state","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","_c","e_2","_d","consumedEntry","isConsumedByEntry","entry","consumedEntryNumber","orderEntryNumber","entryNumber","CustomFormValidators","emailValidator","email","EMAIL_PATTERN","cxInvalidEmail","passwordValidator","PASSWORD_PATTERN","cxInvalidPassword","starRatingEmpty","cxStarRatingEmpty","passwordsMustMatch","passwordConfirmation","formGroup","controlsMustMatch","emailsMustMatch","emailConfirmation","firstControlName","secondControlName","errorName","firstControl","secondControl","setErrors","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","DeliveryModePreferences","AsmModule","AsmCoreModule","CurrentProductService","productService","DEFAULT_PRODUCT_SCOPE","ProductScope","DETAILS","getProduct","scopes","productCode","x","AddedToCartDialogComponent","cartService","promotionService","quantity","modalIsOpen","form","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","addToCartForm","cartEntry$","getEntry","setStockInfo","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","isStable","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","sort","a","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","isLevel","getCustomerCoupons","customerCoupons","cartId","OCC_USER_ID_ANONYMOUS","guid","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponForm","couponCode","getAddVoucherResultSuccess","success","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","addVoucher","applyCustomerCoupon","blur","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","isSaveForLaterEnabled","every","consignmentEntry","orderEntry","updateable","removeEntry","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","cartLoaded$","getLoaded","isUserLoggedIn","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","getCart","slots","selectiveCart","slot","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","features","CartComponentModule","CartModule","CheckoutStepType","CheckoutConfig","OutletPosition","defaultCheckoutConfig","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","paths","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","skipWhile","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","keys","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","router","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","guards","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","withLatestFrom","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","selectedCountry$","goBack","closeForm","paymentForm","cardType","accountHolderName","cardNumber","expiryMonth","expiryYear","cvn","billingAddressForm","firstName","lastName","line1","line2","town","region","isocodeShort","country","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","regions$","getRegions","regions","regionControl","year","Date","getFullYear","j","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","catch","verifyAddress","countrySelected","regionSelected","paymentDetails","billingAddress","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","payment","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","msg","field","cardLabels","title","img","actions","header","goNext","goPrevious","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","checkoutSubmitForm","termsAndConditions","requiredTrue","submitForm","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","addressForm","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","obj","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","templateOrFactory","REPLACE","store","stacked","templateRef","removeValueOrAll","newValue","has","val","SkipLinkModule","ConfigModule","withConfig","skipLinkFactory","outletService","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","InlineRenderStrategy","inline","OutletRefDirective","tpl","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","IntersectionService","isIntersected","intersects","first","Observable","observer","rootMargin","getRootMargin","intersectionObserver","IntersectionObserver","observe","disconnect","flatMap","isIntersecting","layoutConfig","deferredLoading","intersectionMargin","DeferLoaderService","intersectionService","globalLoadStrategy","shouldLoadInstantly","elementLoadingStrategy","DEFER","OutletRendererService","outletRefs","register","cxOutlet","OutletDirective","deferLoaderService","outletRendererService","renderedTemplate","cxOutletDefer","build","changes","hostElement","getHostElement","buildOutlet","isArray","tmplOrFactory","ComponentFactory","createEmbeddedView","$implicit","cxOutletContext","OutletModule","OutletRenderStrategy","RoutingRenderStrategy","_caller","LaunchDialogModule","LaunchDialogModule_1","provideConfig","LayoutModule","PageSlotComponent","cdRef","isPending","hasComponents","isPageFold","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","pendingComponentCount","isLoaded","loadState","getComponentDeferOptions","getDeferLoadingStrategy","PageSlotModule","PageLayoutService","handlers","warnLogMessages","logSlots","getSlots","page$","resolveSlots","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","pageFoldSlot$","templateName","currentClass","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","replace","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","JsonLdScriptFactory","rendererFactory","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","createRenderer","JSON","stringify","_key","SecurityContext","HTML","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","ConsentManagementFormComponent","consentGiven","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","keyboardFocusConfig","navigateSubscription","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","Error","endWith","CmsI18nService","translationChunk","loadForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesImplService","cmsRouteExists","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","resetConfig","CmsRoutesService","CmsPageGuardService","semanticPathService","cmsRoutes","cmsI18n","cmsGuards","canActivatePage","pageData","getPageComponentTypes","canActivateNotFoundPage","notFoundCmsPageContext","getPage","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","SemanticPathService","CmsPageGuard","protectedRoutesGuard","getNextPageContext","shouldReloadCmsData","isFeatureEnabled","guardName","ProtectedRoutesGuard","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","notFound","login","protected","forgotPassword","resetPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","orders","orderDetails","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","couponClaim","defaultRoutingConfig","RoutingModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","AmendOrderType","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","distinctUntilKeyChanged","select","tabNum","routeState","history","getTitleParams","tabComps","comp","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","forgotPasswordForm","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","AmendOrderActionsModule","ValidateQuantity","q","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","activeTab","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","paymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","resetPasswordForm","repassword","isPasswordReset","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","updateEmailForm","confirmEmail","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitted","cancelled","updatePasswordForm","oldPassword","newPassword","newPasswordConfirm","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","updateProfileForm","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","getLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","observeOn","asyncScheduler","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","node","populateLink","itemType","linkName","getLink","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getTotalDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","matches","wrapper","querySelector","navBar","removeStyle","offsetWidth","setStyle","navs","childNodes","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","classList","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","scrollIntoView","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","ProductDetailOutlets","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","model","setConditions","ProductFacetNavigationComponent","collapsedFacets","showAllPerFacetMap","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","visible","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","toggleFacet","getVisibleFacetValues","values","topValueCount","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","property","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductRefinementComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","viewStore","prepareRouteUrl","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","checkoutLoginForm","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","prefilledEmail","loginForm","_e","loginUser","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","registerForm","newsletter","isConsentRequired","termsandconditions","getRegisterUserResultLoading","registerUserProcessInit","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","registerUser","collectDataFromRegisterForm","formData","onRegisterUserSuccess","resetRegisterUserProcessState","getRegisterUserResultSuccess","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","StorefrontFoundationModule","StateModule","AuthModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n}\n\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","export abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        (res) =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      (res) =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      (res) =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        (res) => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach((cls) =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach((cls) => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(fontawesomeIconConfig),\n    { provide: IconConfig, useExisting: Config },\n  ],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(() => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, FeaturesConfigModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise((resolve) => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  BaseSiteService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  SelectiveCartService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: ActiveCartService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    @Optional() public selectiveCartService: SelectiveCartService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe((token) => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap((userToken) =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap((token) => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((customerSupportAgentToken) =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class BaseFocusService {}\n","import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseFocusConfig } from '../keyboard-focus.model';\nimport { BaseFocusService } from './base-focus.service';\n\n/**\n * Abstract directive that provides a common interface for all focus directives:\n * - Block Focus\n * - Persist Focus\n * - Escape Focus\n * - Auto Focus\n * - Tab Focus\n * - Trap Focus\n * - Lock Focus\n */\n@Directive()\nexport abstract class BaseFocusDirective implements OnInit {\n  /**\n   * Optional configuration for the focus directive drives the behaviour of the keyboard\n   * focus directive.\n   */\n  protected config: BaseFocusConfig;\n\n  /**\n   * A default config can be provided for each directive if a specific focus directive\n   * is used directly. i.e. `<div cxAutoFocus></div>`\n   */\n  protected defaultConfig: BaseFocusConfig = {};\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected service: BaseFocusService\n  ) {}\n\n  ngOnInit() {\n    this.setDefaultConfiguration();\n    this.requiredTabindex = -1;\n  }\n\n  /**\n   * Override the (input) config if it undefined or an empty string, with the\n   * `defaultConfig`. The `defaultConfig` might be specified for each directive\n   * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\n   * specific (inherited) defaultConfig will be used.\n   */\n  protected setDefaultConfiguration(): void {\n    if ((!this.config || this.config === '') && this.defaultConfig) {\n      this.config = this.defaultConfig;\n    }\n  }\n\n  /**\n   * Helper method to return the host element for the directive\n   * given by the `elementRef`.\n   */\n  protected get host(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /**\n   * Force a tabindex on the host element if it is _requried_ to make the element\n   * focusable. If the element is focusable by nature or by a given tabindex, the\n   * `tabindex` is not applied.\n   *\n   * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\n   */\n  protected set requiredTabindex(tabindex: number) {\n    if (this.requiresExplicitTabIndex) {\n      this.tabindex = tabindex;\n    }\n  }\n\n  /**\n   * Returns true if the host element does not have a tabindex defined\n   * and it also doesn't get focus by browsers nature (i.e. button or\n   * active link).\n   */\n  protected get requiresExplicitTabIndex(): boolean {\n    return (\n      this.tabindex === undefined &&\n      ['button', 'input', 'select', 'textarea'].indexOf(\n        this.host.tagName.toLowerCase()\n      ) === -1 &&\n      !(\n        this.host.tagName === 'A' &&\n        (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))\n      )\n    );\n  }\n}\n","import { Directive, HostBinding, HostListener } from '@angular/core';\nimport { BaseFocusDirective } from '../base/base-focus.directive';\nimport { VisibleFocusConfig } from '../keyboard-focus.model';\n\n/**\n * Directive implementation that adds a CSS class to the host element\n * when the moused is used to focus an element. As soon as the keyboard\n * is used, the class is removed.\n */\n@Directive() // selector: '[cxVisibleFocus]'\nexport class VisibleFocusDirective extends BaseFocusDirective {\n  protected defaultConfig: VisibleFocusConfig = { disableMouseFocus: true };\n\n  // @Input('cxVisibleFocus')\n  protected config: VisibleFocusConfig;\n\n  /** controls a polyfill class for the lacking focus-visible feature */\n  @HostBinding('class.mouse-focus') mouseFocus = false;\n\n  @HostListener('mousedown') handleMousedown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = true;\n    }\n  }\n\n  @HostListener('keydown') handleKeydown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = false;\n    }\n  }\n\n  protected get shouldFocusVisible(): boolean {\n    return this.config?.disableMouseFocus;\n  }\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { BlockFocusConfig } from '../keyboard-focus.model';\nimport { VisibleFocusDirective } from '../visible/visible-focus.directive';\n\n@Directive()\n// { selector: '[cxBlockFocus]' }\nexport class BlockFocusDirective extends VisibleFocusDirective\n  implements OnInit {\n  protected defaultConfig: BlockFocusConfig = { block: true };\n\n  // @Input('cxBlockFocus')\n  protected config: BlockFocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: BaseFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.config.block) {\n      this.tabindex = -1;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { FOCUS_GROUP_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\n\nconst GLOBAL_GROUP = '_g_';\n\n/**\n * Shared service to persist the focus for an element or a group\n * of elements. The persisted element focus can be used to persist\n * the focus for a DOM tree, so that the focus remains after a repaint\n * or reoccurs when a DOM tree is \"unlocked\".\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersistFocusService extends BaseFocusService {\n  // this is going to fail as we have sub services. They will al have their own map.\n  // We must bring this to a singlton map.\n  protected focus = new Map<string, string>();\n\n  get(group?: string): string {\n    return this.focus.get(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Persist the keyboard focus state for the given key. The focus is stored globally\n   * or for the given group.\n   */\n  set(key: string, group?: string) {\n    if (key) {\n      this.focus.set(group || GLOBAL_GROUP, key);\n    }\n  }\n\n  /**\n   * Clears the persisted keyboard focus state globally or for the given group.\n   */\n  clear(group?: string) {\n    this.focus.delete(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Returns the group for the host element based on the configured group or\n   * by the `data-cx-focus-group` attribute stored on the host.\n   */\n  getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string {\n    return config?.group ? config.group : host.getAttribute(FOCUS_GROUP_ATTR);\n  }\n}\n","/** The element attribute used to store the focus state */\nexport const FOCUS_ATTR = 'data-cx-focus';\n/** The element attribute used to store the focus group state */\nexport const FOCUS_GROUP_ATTR = 'data-cx-focus-group';\n\nexport const enum MOVE_FOCUS {\n  NEXT = 1,\n  PREV = -1,\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseFocusConfig {}\n\nexport interface VisibleFocusConfig {\n  /**\n   * When set to true, the mouse-focus class is added to the host element,\n   * indicating that the element focus was not caused by the keyboard.\n   */\n  disableMouseFocus?: boolean;\n}\n\nexport interface BlockFocusConfig extends VisibleFocusConfig {\n  block?: boolean;\n}\n\nexport interface PersistFocusConfig extends BlockFocusConfig {\n  /**\n   * A key to maintain the focus of an element in case the component is\n   * recreated (which often is the case when an `*ngIf` or `*ngFor` is used).\n   */\n  key?: string;\n\n  /**\n   * Optional group identifier that can be used to persist the focus. This allows\n   * to have separate persisted focus available when the DOM is partially rebuild.\n   */\n  group?: string;\n}\n\nexport interface EscapeFocusConfig extends PersistFocusConfig {\n  focusOnEscape?: boolean;\n  /**\n   * Force an autofocus in case of double-escape\n   */\n  focusOnDoubleEscape?: boolean;\n}\n\nexport interface AutoFocusConfig extends EscapeFocusConfig {\n  /**\n   * Autofocus is enabled by default, and will try to focus an _autofocus_ element.\n   * In case the focus is explicitly set to `true`, the first accessible element\n   * is focussed in case there is no _autofocus_ element found.\n   * If the focus is set to false, autofocus will be disabled completely.\n   *\n   * If a string value is given, the autofocus will be restored based on the persisted\n   * focus group, which is driven by `PersistFocusConfig.key` and `PersistFocusConfig.group`.\n   *\n   * Defaults to `true`.\n   */\n  autofocus?: boolean | string;\n\n  // whenever the target autofocus element is selected by the `skipFocus` selector,\n  // autofocus is ignored.\n  skipFocus?: string;\n}\n\nexport interface TabFocusConfig extends AutoFocusConfig {\n  tab?: boolean | 'scroll' | string;\n}\n\n/**\n * The keyboard navigation (tab, shift-tab and up down keys) is _trapped_\n * for the nested focusable elements. This means that the focus can not\n * \"leave\" the elements. If the last element is focused, the keyboard will\n * navigate to the first element and visa versa.\n */\nexport interface TrapFocusConfig extends TabFocusConfig {\n  /** traps the focus */\n  trap?: boolean | 'start' | 'end';\n}\n\nexport interface LockFocusConfig extends TrapFocusConfig {\n  /**\n   * Indicates that the nested DOM is locked for keyboarding (`TAB`).\n   */\n  lock?: boolean;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface FocusConfig extends LockFocusConfig {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { BlockFocusDirective } from '../block/block-focus.directive';\nimport { FOCUS_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from './persist-focus.service';\n\n/**\n * Directive that provides persistence of the focused state. This is useful\n * when a group of focusable elements got refocused or even recreated. That\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\n *\n * The focus state is based on a configured _key_, which can be passed in the\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\n *\n * ```html\n * <button cxPersistFocus=\"myKey\"></button>\n * <button cxFocus=\"myKey\"></button>\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\n * ```\n *\n * The focus state can be part of a focus _group_, so that the state is shared\n * and remember for the given group. In order to detect the persistence for a\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\n *\n * ```html\n * <button data-cx-focus=\"myKey\"></button>\n * ```\n *\n * Other keyboard focus directives can read the key to understand whether the element\n * should retrieve focus.\n *\n */\n@Directive() // selector: '[cxPersistFocus]',\nexport class PersistFocusDirective extends BlockFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: PersistFocusConfig = {};\n\n  /**\n   * The persistence key can be passed directly or through the `FocusConfig.key`.\n   * While this could be considered a global key, the likeliness of conflicts\n   * is very small since the key is cleared when the focus is changed.\n   */\n  // @Input('cxPersistFocus')\n  protected config: PersistFocusConfig = {};\n\n  /**\n   * The persistance key is maintained in an element attribute for other\n   * implementations. This is needed to ensure that we can resolve the focus\n   * state in case of a repaint.\n   */\n  @HostBinding(`attr.${FOCUS_ATTR}`) attr: string;\n\n  @HostListener('focus', ['$event'])\n  handleFocus(event?: KeyboardEvent) {\n    this.service.set(this.key, this.group);\n\n    event?.preventDefault();\n    event?.stopPropagation();\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: PersistFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.attr = this.key ? this.key : undefined;\n  }\n\n  protected setDefaultConfiguration() {\n    if (typeof this.config === 'string' && this.config !== '') {\n      this.config = { key: this.config };\n    }\n    super.setDefaultConfiguration();\n  }\n\n  /**\n   * Focus the element explicitly if it was focused before.\n   */\n  ngAfterViewInit() {\n    if (this.isPersisted) {\n      this.host.focus({ preventScroll: true });\n    }\n  }\n\n  protected get isPersisted(): boolean {\n    return !!this.key && this.service.get(this.group) === this.key;\n  }\n\n  /**\n   * Returns the key for the host element, which is used to persist the\n   * focus state. This is useful in cases where the DOM is rebuild.\n   */\n  protected get key(): string {\n    return (this.config as PersistFocusConfig)?.key;\n  }\n\n  /**\n   * returns the persistence group (if any) for the focusable elements.\n   */\n  protected get group(): string {\n    return this.service.getPersistenceGroup(\n      this.host,\n      this.config as PersistFocusConfig\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectFocusUtility {\n  /**\n   * Query selectors used to query focusable child elements of the host element.\n   * The selectors are supplemented with `:not([disabled])` and `:not([hidden])`.\n   */\n  protected focusableSelectors: string[] = [\n    'a[href]',\n    'button',\n    '[tabindex]',\n    'input',\n    'select',\n    'textarea',\n  ];\n\n  // like to leave out the following as we don't use it, and make this list exensible.\n  //   `[contentEditable=true]`, // very unlikely to suport as we're not a business tool\n  //   `iframe`, // we really don't like iframes...\n  //   `area[href]`, // very debatable!\n\n  protected focusableSelectorSuffix = ':not([disabled]):not([hidden])';\n\n  query(host: HTMLElement, selector: string): HTMLElement[] {\n    if (!selector || selector === '') {\n      return [];\n    }\n    return Array.from(\n      host.querySelectorAll(selector) as NodeListOf<HTMLElement>\n    );\n  }\n\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    const selector =\n      typeof config?.autofocus === 'string' ? config.autofocus : '[autofocus]';\n    // fallback to first focusable\n    return (\n      this.query(host, selector).find((el) => !this.isHidden(el)) ||\n      this.findFocusable(host).find((el) => Boolean(el))\n    );\n  }\n\n  /**\n   * returns all focusable child elements of the host element. The element selectors\n   * are build from the `focusableSelectors`.\n   *\n   * @param host the `HTMLElement` used to query focusable elements\n   * @param locked indicates whether inactive (`tabindex=\"-1\"`) focusable elements should be returned\n   * @param invisible indicates whether hidden focusable elements should be returned\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    let suffix = this.focusableSelectorSuffix;\n    if (!locked) {\n      suffix += `:not([tabindex='-1'])`;\n    }\n    const selector = this.focusableSelectors\n      .map((s) => (s += suffix))\n      .join(',');\n    return this.query(host, selector).filter((el) =>\n      !invisible ? !this.isHidden(el) : Boolean(el)\n    );\n  }\n\n  /**\n   * Indicates whether the element is hidden by CSS. There are various CSS rules and\n   * HTML structures which can lead to an hidden or invisible element. An `offsetParent`\n   * of null indicates that the element or any of it's decendants is hidden (`display:none`).\n   *\n   * Oother techniques use the visibility (`visibility: hidden`), opacity (`opacity`) or\n   * phyisical location on the element itself or any of it's anchestor elements. Those\n   * technique require to work with the _computed styles_, which will cause a performance\n   * downgrade. We don't do this in the standard implementaton.\n   */\n  protected isHidden(el: HTMLElement): boolean {\n    return el.offsetParent === null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from '../persist/persist-focus.service';\nimport { SelectFocusUtility } from '../services/select-focus.util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EscapeFocusService extends PersistFocusService {\n  constructor(protected selectFocusUtil: SelectFocusUtility) {\n    super();\n  }\n\n  shouldFocus(config: EscapeFocusConfig): boolean {\n    return !!config?.focusOnEscape;\n  }\n\n  handleEscape(\n    host: HTMLElement,\n    config: EscapeFocusConfig,\n    event: KeyboardEvent\n  ): void {\n    if (this.shouldFocus(config)) {\n      if (host !== event.target) {\n        host.focus({ preventScroll: true });\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        if (config?.focusOnDoubleEscape) {\n          this.selectFocusUtil\n            .findFirstFocusable(host, { autofocus: true })\n            ?.focus();\n        }\n      }\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusDirective } from '../persist/persist-focus.directive';\nimport { EscapeFocusService } from './escape-focus.service';\n\n/**\n * Directive to focus the host element whenever the `escape` key is captured.\n * UiEvents bubble up by nature, which is why the `cxEscGroup` can be used\n * on a tree of elements. Each time the escape key is used, the focus will\n * move up in the DOM tree.\n *\n */\n@Directive() // selector: '[cxEscFocus]',\nexport class EscapeFocusDirective extends PersistFocusDirective\n  implements OnInit {\n  protected defaultConfig: EscapeFocusConfig = { focusOnEscape: true };\n\n  // @Input('cxEscFocus')\n  protected config: EscapeFocusConfig;\n\n  @Output() esc = new EventEmitter<boolean>();\n\n  /**\n   * Handles the escape key event.\n   * @param event the native keyboard event which contains the escape keydown event\n   */\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    if (this.service.shouldFocus(this.config)) {\n      this.service.handleEscape(this.host, this.config, event);\n    }\n    this.esc.emit(this.service.shouldFocus(this.config));\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: EscapeFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    if (this.service.shouldFocus(this.config)) {\n      this.requiredTabindex = -1;\n    }\n    super.ngOnInit();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusService } from '../escape/escape-focus.service';\nimport {\n  AutoFocusConfig,\n  FOCUS_ATTR,\n  PersistFocusConfig,\n} from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AutoFocusService extends EscapeFocusService {\n  /**\n   * Returns the first focusable child element of the host element.\n   */\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    if (config?.autofocus === ':host') {\n      return host;\n    } else if (this.hasPersistedFocus(host, config)) {\n      return this.getPersisted(host, this.getPersistenceGroup(host, config));\n    } else {\n      return this.selectFocusUtil.findFirstFocusable(host, config) || host;\n    }\n  }\n\n  /**\n   * Indicates whether any of the focusabe child elements is focused.\n   */\n  hasPersistedFocus(host: HTMLElement, config: PersistFocusConfig): boolean {\n    return !!this.getPersisted(host, this.getPersistenceGroup(host, config));\n  }\n\n  /**\n   * Returns the element that has a persisted focus state.\n   *\n   * @param host the `HTMLElement` used to query for focusable children\n   * @param group the optional group for the persistent state, to separate different focus\n   *   groups and remain the persistance\n   */\n  protected getPersisted(host: HTMLElement, group?: string): HTMLElement {\n    if (!this.get(group)) {\n      return;\n    }\n    const focussed = Array.from(\n      host.querySelectorAll(\n        `[${FOCUS_ATTR}='${this.get(group)}']`\n      ) as NodeListOf<HTMLElement>\n    );\n    return focussed.length > 0 ? focussed[0] : null;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\nimport { AutoFocusService } from './auto-focus.service';\n\n/**\n * Directive that focus the first nested _focusable_ element based on state and configuration:\n *\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\n * 4. first focusable element\n * 5. the host element, in case the configured CSS selector is `:host`.\n *\n * Example configurations:\n *\n * `<div cxAutoFocus>[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\n *\n */\n@Directive() // selector: '[cxAutoFocus]'\nexport class AutoFocusDirective extends EscapeFocusDirective\n  implements AfterViewInit {\n  /** The AutoFocusDirective will be using autofocus by default  */\n  protected defaultConfig: AutoFocusConfig = { autofocus: true };\n\n  // @Input('cxAutoFocus')\n  protected config: AutoFocusConfig;\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: AutoFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Focus the element explicitly if it was focussed before.\n   */\n  ngAfterViewInit(): void {\n    if (this.shouldAutofocus) {\n      this.handleFocus();\n    }\n    if (!this.shouldAutofocus || this.hasPersistedFocus) {\n      super.ngAfterViewInit();\n    }\n  }\n\n  /**\n   * Mimic the focus without setting the actual focus on the host. The first\n   * focusable child element will be focussed.\n   */\n  handleFocus(event?: KeyboardEvent) {\n    if (this.shouldAutofocus) {\n      if (!event?.target || event.target === this.host) {\n        this.firstFocusable?.focus();\n      } else {\n        (event.target as HTMLElement).focus();\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  /**\n   * Helper function to get the first focusable child element\n   */\n  protected get hasPersistedFocus() {\n    return this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Helper function to indicate whether we should use autofocus for the\n   * child elements.\n   */\n  protected get shouldAutofocus(): boolean {\n    return !!this.config?.autofocus;\n  }\n\n  /**\n   * Helper function to get the first focusable child element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get firstFocusable(): HTMLElement {\n    return this.service.findFirstFocusable(this.host, this.config);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusService } from '../autofocus/auto-focus.service';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TabFocusService extends AutoFocusService {\n  /**\n   * Moves to the next (or previous) tab.\n   */\n  moveTab(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS,\n    event: KeyboardEvent\n  ): void {\n    if (config?.tab) {\n      const next =\n        config.tab === 'scroll'\n          ? this.findNextScrollable(host, config, increment)\n          : this.findNext(host, config, increment);\n\n      next?.focus();\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * builds out virtual slides out of the full scrollable area, to allow\n   * for maximum flexibility for the underlying layout without using hardcoded\n   * slide sizes.\n   */\n  protected findNextScrollable(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const active = this.getActiveChild(host, config);\n\n    if (!active) {\n      return;\n    }\n    // slide count\n    const virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);\n\n    // find current virtual slide\n    const currentVirtualSlide = Math.round(\n      active.offsetLeft / (host.scrollWidth / virtualSlideCount)\n    );\n\n    let nextVirtualSlide = currentVirtualSlide + increment;\n    if (\n      increment === MOVE_FOCUS.NEXT &&\n      nextVirtualSlide >= virtualSlideCount\n    ) {\n      nextVirtualSlide = 0;\n    }\n    if (increment === MOVE_FOCUS.PREV && nextVirtualSlide < 0) {\n      nextVirtualSlide = virtualSlideCount - 1;\n    }\n\n    const firstItemOnNextSlide = this.getChildren(host, config)?.find(\n      (tab) =>\n        tab.offsetLeft >=\n        (host.scrollWidth / virtualSlideCount) * nextVirtualSlide\n    );\n\n    return firstItemOnNextSlide;\n  }\n\n  protected findNext(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const childs = this.getChildren(host, config);\n    let activeIndex = childs?.findIndex(\n      (c) => c === this.getActiveChild(host, config)\n    );\n\n    if (!activeIndex || activeIndex === -1) {\n      activeIndex = 0;\n    }\n    activeIndex += increment;\n\n    if (increment === MOVE_FOCUS.NEXT && activeIndex >= childs?.length) {\n      activeIndex = childs.length - 1;\n    }\n    if (increment === MOVE_FOCUS.PREV && activeIndex < 0) {\n      activeIndex = 0;\n    }\n    return childs ? childs[activeIndex] : undefined;\n  }\n\n  /**\n   * Returns the active focusable child element. If there's no active\n   * focusable child element, the first focusable child is returned.\n   */\n  protected getActiveChild(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement {\n    const persisted = this.getPersisted(host, config?.group);\n    if (persisted) {\n      return persisted;\n    }\n    const children = this.getChildren(host, config);\n    let index = children.findIndex((tab) => this.isActive(tab));\n    if (!index || index === -1) {\n      index = 0;\n    }\n    return children[index];\n  }\n\n  protected getChildren(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement[] {\n    if (typeof config.tab === 'string' && config.tab !== 'scroll') {\n      return this.selectFocusUtil.query(host, config.tab);\n    } else {\n      return this.findFocusable(host, true);\n    }\n  }\n\n  /**\n   * Returns all focusable child elements of the host element.\n   *\n   * @param host The host element is used to query child focusable elements.\n   * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.\n   * @param invisible Indicates if invisible child elements should be returned, defaults to false.\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    return this.selectFocusUtil.findFocusable(host, locked, invisible);\n  }\n\n  protected isActive(el: HTMLElement): boolean {\n    const child = document.activeElement;\n    const selector = child.tagName;\n\n    return (\n      el === child ||\n      !!Array.from(el.querySelectorAll(selector)).find((e) => e === child)\n    );\n  }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { AutoFocusDirective } from '../autofocus/auto-focus.directive';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from './tab-focus.service';\n\n/**\n * Directive to move the focus of (\"locked\") child elements. This is useful\n * for a nested list of tabs, carousel slides or any group of elements that\n * requires horizontal navigation.\n */\n@Directive() // selector: '[cxTabFocus]'\nexport class TabFocusDirective extends AutoFocusDirective {\n  /** `tab` defaults to true if the directive `cxTabFocus` is used. */\n  protected defaultConfig: TabFocusConfig = { tab: true };\n\n  // @Input('cxTabFocus')\n  protected config: TabFocusConfig = {};\n\n  @HostListener('keydown.arrowRight', ['$event'])\n  handleNextTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.NEXT, event);\n    }\n  }\n\n  @HostListener('keydown.arrowLeft', ['$event'])\n  handlePreviousTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.PREV, event);\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TabFocusService\n  ) {\n    super(elementRef, service);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from '../tab/tab-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrapFocusService extends TabFocusService {\n  /**\n   * Indicates whether any of the child elements of the host are focusable.\n   *\n   * @param host `HTMLElement` that is used to query the focusable elements.\n   */\n  hasFocusableChildren(host: HTMLElement): boolean {\n    return this.findFocusable(host).length > 0;\n  }\n\n  /**\n   * Focus the next or previous element of all available focusable elements.\n   * The focus is _trapped_ in case there's no next or previous available element.\n   * The focus will automatically move the start or end of the list.\n   */\n  moveFocus(\n    host: HTMLElement,\n    config: TrapFocusConfig,\n    increment: MOVE_FOCUS,\n    event: UIEvent\n  ): void {\n    const focusable: HTMLElement[] = this.findFocusable(host);\n\n    let index = focusable.findIndex((v) => v === event.target) + increment;\n\n    const shouldMoveFocus =\n      (index >= 0 && index < focusable.length) ||\n      (index < 0 && this.getTrapStart(config.trap)) ||\n      (index >= focusable.length && this.getTrapEnd(config.trap));\n\n    if (shouldMoveFocus) {\n      if (index >= focusable.length) {\n        index = 0;\n      }\n      if (index < 0) {\n        index = focusable.length - 1;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const el = focusable[index];\n\n      el.focus();\n    }\n  }\n\n  protected getTrapStart(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'start';\n  }\n\n  protected getTrapEnd(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'end';\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\nimport { TrapFocusService } from './trap-focus.service';\n\n/**\n * Directive that keeps the focus inside the focussable child elements,\n * also known as a _focus trap_.\n */\n@Directive() // selector: '[cxTrapFocus]'\nexport class TrapFocusDirective extends TabFocusDirective implements OnInit {\n  protected defaultConfig: TrapFocusConfig = { trap: true };\n\n  // @Input('cxTrapFocus')\n  protected config: TrapFocusConfig = {};\n\n  @HostListener('keydown.arrowdown', ['$event'])\n  @HostListener('keydown.tab', ['$event'])\n  handleTrapDown = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.NEXT);\n    }\n  };\n\n  @HostListener('keydown.arrowup', ['$event'])\n  @HostListener('keydown.shift.tab', ['$event'])\n  handleTrapUp = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.PREV);\n    }\n  };\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TrapFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Moves the focus of the element reference up or down, depending on the increment.\n   * The focus of the element is trapped to avoid it from going out of the group.\n   *\n   * @param event UIEvent that is used to get the target element. The event is blocked\n   *   from standard execution and further bubbling.\n   * @param increment indicates whether the next or previous is focussed.\n   */\n  protected moveFocus(event: UIEvent, increment: number) {\n    if (this.service.hasFocusableChildren(this.host)) {\n      this.service.moveFocus(\n        this.host,\n        this.config,\n        increment,\n        event as UIEvent\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TrapFocusService } from '../trap/trap-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LockFocusService extends TrapFocusService {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { FOCUS_GROUP_ATTR, LockFocusConfig } from '../keyboard-focus.model';\nimport { TrapFocusDirective } from '../trap/trap-focus.directive';\nimport { LockFocusService } from './lock-focus.service';\n\n/**\n * Focusable elements exclude hidden elements by default, but this contradicts with\n * unlocking (hidden) elements.\n */\nconst UNLOCK_HIDDEN_ELEMENTS = true;\n/**\n * Directive that adds persistence for focussed element in case\n * the elements are being rebuild. This happens often when change\n * detection kicks in because of new data set from the backend.\n */\n@Directive() // selector: '[cxLockFocus]'\nexport class LockFocusDirective extends TrapFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: LockFocusConfig = { lock: true };\n\n  // @Input('cxLockFocus')\n  protected config: LockFocusConfig = {};\n\n  /**\n   * Indicates that the host is configured to use locking. This is available as a\n   * CSS class `focus-lock`.\n   */\n  @HostBinding('class.focus-lock') shouldLock: boolean;\n  /**\n   * Indicates that the host is locked. This is available as a CSS class `is-locked`.\n   */\n  @HostBinding('class.is-locked')\n  isLocked: boolean;\n\n  /**\n   * Emits an event when the host is unlocked.\n   */\n  @Output() unlock = new EventEmitter<boolean>();\n\n  /**\n   * When the user selects enter or space, the focusable childs are\n   * unlocked, which means that the tabindex is set to 0.\n   */\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  handleEnter(event: KeyboardEvent) {\n    if (this.shouldLock && this.host === (event.target as HTMLElement)) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * In case any of the children elements is touched by the mouse,\n   * we unlock the group to not break the mouse-experience.\n   */\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    if (this.shouldLock && this.isLocked) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: LockFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service);\n  }\n\n  protected lockFocus() {\n    this.addTabindexToChildren(-1);\n  }\n\n  protected unlockFocus(event?: UIEvent) {\n    this.unlock.emit(true);\n    this.addTabindexToChildren(0);\n    // we focus the host if the event was triggered from a child\n    if (event?.target === this.host) {\n      super.handleFocus(event as KeyboardEvent);\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.shouldLock = this.config?.lock;\n\n    if (this.shouldLock) {\n      this.tabindex = 0;\n\n      // Locked elements will be set to `autofocus` by default if it's not\n      // been configured. This will ensure that autofocus kicks in upon unlock.\n      if (!this.config.hasOwnProperty('autofocus')) {\n        this.config.autofocus = true;\n      }\n      // Locked elements will be set to `focusOnEscape` by default if it's not\n      // been configured. This will ensure that  the host gets locked again when\n      // `escape` is pressed.\n      if (!this.config.hasOwnProperty('focusOnEscape')) {\n        this.config.focusOnEscape = !(this.config?.focusOnEscape === false);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.shouldLock) {\n      /**\n       * If the component hosts a group of focusable children elmenents,\n       * we persist the group key to the children, so that they can taken this\n       * into account when they persist their focus state.\n       */\n      if (!!this.group) {\n        this.service.findFocusable(this.host).forEach((el) =>\n          // we must do this in after view init as\n          this.renderer.setAttribute(el, FOCUS_GROUP_ATTR, this.group)\n        );\n      }\n\n      if (this.shouldAutofocus) {\n        this.handleFocus();\n      }\n    }\n    super.ngAfterViewInit();\n  }\n\n  handleFocus(event?: KeyboardEvent): void {\n    if (this.shouldLock) {\n      if (this.shouldUnlockAfterAutofocus(event)) {\n        // Delay unlocking in case the host is using `ChangeDetectionStrategy.Default`\n        setTimeout(() => this.unlockFocus(event));\n      } else {\n        setTimeout(() => this.lockFocus());\n        event?.stopPropagation();\n        return;\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  handleEscape(event: KeyboardEvent): void {\n    if (this.shouldLock) {\n      this.service.clear(this.config.group);\n    }\n    super.handleEscape(event);\n  }\n\n  /**\n   * When the handleFocus is called without an actual event, it's coming from Autofocus.\n   * In this case we unlock the focusable children in case there's a focusable child that\n   * was unlocked before.\n   *\n   * We keep this private to not polute the API.\n   */\n  private shouldUnlockAfterAutofocus(event?: KeyboardEvent) {\n    return !event && this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Add the tabindex attribute to the focusable children elements\n   */\n  protected addTabindexToChildren(i = 0): void {\n    if (this.shouldLock) {\n      this.isLocked = i === -1;\n      if (!(this.hasFocusableChildren && i === 0) || i === 0) {\n        this.focusable.forEach((el) =>\n          this.renderer.setAttribute(el, 'tabindex', i.toString())\n        );\n      }\n    }\n  }\n\n  /**\n   * Utility method, returns all focusable children for the host element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get hasFocusableChildren(): boolean {\n    return this.service.hasFocusableChildren(this.host);\n  }\n\n  /**\n   * Returns the focusable children of the host element. If the host element\n   * is configured to be locked, the query is restricted to child elements\n   * with a tabindex !== `-1`.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get focusable(): HTMLElement[] {\n    return this.service.findFocusable(\n      this.host,\n      this.shouldLock,\n      UNLOCK_HIDDEN_ELEMENTS\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { LockFocusService } from '../lock/lock-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeyboardFocusService extends LockFocusService {}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { FocusConfig } from './keyboard-focus.model';\nimport { LockFocusDirective } from './lock/lock-focus.directive';\nimport { KeyboardFocusService } from './services/keyboard-focus.service';\n\n@Directive({\n  selector: '[cxFocus]',\n})\nexport class FocusDirective extends LockFocusDirective {\n  protected defaultConfig: FocusConfig = {};\n  // tslint:disable-next-line: no-input-rename\n  @Input('cxFocus') protected config: FocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: KeyboardFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service, renderer);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusDirective } from './focus.directive';\n\nconst directives = [\n  // PersistFocusDirective,\n  // VisibleFocusDirective,\n  // BlockFocusDirective,\n  // AutoFocusDirective,\n  // EscapeFocusDirective,\n  // LockFocusDirective,\n  // TrapFocusDirective,\n  // TabFocusDirective,\n  FocusDirective,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...directives],\n  exports: [...directives],\n})\nexport class KeyboardFocusModule {}\n","import { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\n\nexport abstract class LaunchConfig {\n  launch?: {\n    [key: string]: LaunchOptions;\n  };\n}\n\nexport type LaunchOptions =\n  | LaunchOutletDialog\n  | LaunchInlineDialog\n  | LaunchRoute;\n\n/**\n * Parent type for configurations that render components\n */\nexport interface LaunchDialog {\n  component: any;\n  /**\n   * Can the element be rendered multiple times\n   */\n  multi?: boolean;\n  /**\n   * Optional elements for other configurations\n   */\n  options?: {\n    /**\n     * Dialog type is used to apply CSS classes\n     */\n    dialogType?: DIALOG_TYPE;\n  };\n}\n\n/**\n * Configuration type to render a component in an outlet\n */\nexport interface LaunchOutletDialog extends LaunchDialog {\n  /**\n   * The outlet to render the element in\n   */\n  outlet: string;\n  /**\n   * Default: OutletPosition.BEFORE\n   */\n  position?: OutletPosition;\n}\n\n/**\n * Configuration type to render a component inline (next to the trigger)\n */\nexport interface LaunchInlineDialog extends LaunchDialog {\n  inline: boolean;\n}\n\n/**\n * Configuration type to render as link\n */\nexport interface LaunchRoute {\n  /**\n   * The route for the url\n   */\n  cxRoute: string;\n  /**\n   * The parameters for the route\n   */\n  params?: { [param: string]: any };\n}\n\n/**\n * Types of dialog openings supported\n */\nexport enum DIALOG_TYPE {\n  POPOVER = 'POPOVER',\n  DIALOG = 'DIALOG',\n  SIDEBAR_START = 'SIDEBAR_START',\n  SIDEBAR_END = 'SIDEBAR_END',\n}\n\n/**\n * List of available callers\n */\nexport enum LAUNCH_CALLER {\n  ASM = 'ASM',\n  SKIP_LINKS = 'SKIP_LINKS',\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { KeyboardFocusService } from '../../keyboard-focus';\nimport { SkipLink, SkipLinkConfig } from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(\n    protected config: SkipLinkConfig,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter((skipLink) => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(skipLink: SkipLink): void {\n    const target =\n      skipLink.target instanceof HTMLElement\n        ? skipLink.target\n        : (skipLink.target as Element).parentElement;\n\n    // focus first focusable element in the\n    const firstFocusable =\n      this.keyboardFocusService.findFirstFocusable(target) || target;\n\n    // we force a tabindex if not available, to ensure we can focus into the element\n    const hasTabindex = firstFocusable.hasAttribute('tabindex');\n    if (!hasTabindex) {\n      firstFocusable.setAttribute('tabindex', '-1');\n    }\n\n    firstFocusable.focus();\n\n    // drop the tmp tabindex\n    if (!hasTabindex) {\n      firstFocusable.removeAttribute('tabindex');\n    }\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      (skipLink) => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          (skipLink) => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService.getSkipLinks();\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink): void {\n    this.skipLinkService.scrollToTarget(skipLink);\n  }\n}\n","import { AsmMainUiComponent } from '../../../cms-components/asm/asm-main-ui/asm-main-ui.component';\nimport { SkipLinkComponent } from '../../a11y/skip-link/component/skip-link.component';\nimport { LaunchConfig } from './launch-config';\n\nexport const DEFAULT_LAUNCH_CONFIG: LaunchConfig = {\n  launch: {\n    ASM: {\n      outlet: 'cx-storefront',\n      component: AsmMainUiComponent,\n    },\n    SKIP_LINKS: {\n      outlet: 'cx-storefront',\n      component: SkipLinkComponent,\n    },\n  },\n};\n","import { ViewContainerRef } from '@angular/core';\nimport { LaunchDialog, LaunchOptions, LAUNCH_CALLER } from '../config';\n\nexport abstract class LaunchRenderStrategy {\n  // List of called references; only used for rendered elements\n  protected renderedCallers: Array<{\n    caller: LAUNCH_CALLER;\n    element?: any;\n  }> = [];\n\n  /**\n   * Render method to implement based on the strategy\n   *\n   * @param config Launch configuration\n   */\n  abstract render(\n    config: LaunchOptions,\n    caller: LAUNCH_CALLER,\n    vcr?: ViewContainerRef\n  ): void;\n\n  /**\n   * Determines if the strategy is the right one for the provided configuration\n   *\n   * @param config\n   */\n  abstract match(config: LaunchOptions): boolean;\n\n  /**\n   * Determines if element should render\n   *\n   * @param caller\n   * @param config\n   */\n  protected shouldRender(caller: LAUNCH_CALLER, config: LaunchDialog): boolean {\n    return this.renderedCallers.some((el) => el.caller === caller)\n      ? !!config.multi\n      : true;\n  }\n\n  /**\n   * Method to call when rendered element is destroyed\n   * The element will be removed from the list of rendered elements\n   *\n   * @param caller\n   * @param _config optional parameters used in children strategies\n   */\n  public remove(caller: LAUNCH_CALLER, _config?: LaunchOptions): void {\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller === caller\n    );\n  }\n}\n","import { Inject, Injectable, ViewContainerRef } from '@angular/core';\nimport {\n  LaunchConfig,\n  LaunchOptions,\n  LAUNCH_CALLER,\n} from '../config/launch-config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class LaunchDialogService {\n  // Keep a list of rendered elements\n  protected renderedCallers: LAUNCH_CALLER[] = [];\n\n  constructor(\n    @Inject(LaunchRenderStrategy)\n    protected renderStrategies: LaunchRenderStrategy[],\n    protected launchConfig: LaunchConfig\n  ) {\n    this.renderStrategies = this.renderStrategies || [];\n  }\n\n  /**\n   * Render the element based on the strategy from the launch configuration\n   *\n   * @param caller LAUNCH_CALLER\n   * @param vcr View Container Ref of the container for inline rendering\n   */\n  launch(caller: LAUNCH_CALLER, vcr?: ViewContainerRef): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.render(config, caller, vcr);\n    }\n  }\n\n  /**\n   * Util method to remove element from rendered elements list\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  clear(caller: LAUNCH_CALLER): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.remove(caller, config);\n    }\n  }\n\n  /**\n   * Returns the configuration for the caller\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  protected findConfiguration(caller: LAUNCH_CALLER): LaunchOptions {\n    return this.launchConfig?.launch[caller];\n  }\n\n  /**\n   * Returns the render strategy based on the configuration\n   *\n   * @param config Configuration for launch\n   */\n  protected getStrategy(config: LaunchOptions): LaunchRenderStrategy {\n    return this.renderStrategies.find((strategy) => strategy.match(config));\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { LAUNCH_CALLER } from '../../../layout/launch-dialog/config/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected launchDialogService: LaunchDialogService\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  protected isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  protected isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  protected addUi(): void {\n    this.launchDialogService.launch(LAUNCH_CALLER.ASM);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","import { DeferLoadingStrategy } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe((isNavigating) => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(() => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  csAgentLoginForm: FormGroup;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.csAgentLoginForm = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.csAgentLoginForm.valid) {\n      this.submitEvent.emit({\n        userId: this.csAgentLoginForm.get('userId').value,\n        password: this.csAgentLoginForm.get('password').value,\n      });\n    } else {\n      this.csAgentLoginForm.markAllAsTouched();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe((user) => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:no-host-metadata-property\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  customerSelectionForm: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.customerSelectionForm = this.fb.group({\n      searchTerm: ['', Validators.required],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.customerSelectionForm.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe((searchTermValue) => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.customerSelectionForm.controls.searchTerm.setValue(\n      this.selectedCustomer.name\n    );\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (this.customerSelectionForm.valid && Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    } else {\n      this.customerSelectionForm.markAllAsTouched();\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { CardComponent } from './card.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map((totalWidth) => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return this.winRef.resize$.pipe(\n      map((event) => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\n   * configuration. If no configuration is available for the given breakpoint, the\n   * method will return the default values:\n   * - xs: 567\n   * - sm: 768\n   * - md: 992\n   * - lg: 1200\n   */\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints?.hasOwnProperty(breakpoint)\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  /**\n   * Returns all available breakpoints for the system.\n   */\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  /**\n   * Indicates whether the current screen size is smaller than the maximum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n   */\n  isDown(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(0, this.breakpoints.indexOf(breakpoint) + 1)\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size is larger than the minimum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n   */\n  isUp(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(this.breakpoints.indexOf(breakpoint))\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size fits to the given breakpoint\n   */\n  isEqual(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(map((br) => br === breakpoint));\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth > this.getSize(BREAKPOINT.lg)\n      ? BREAKPOINT.xl\n      : this.breakpoints.find((br) => windowWidth <= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else if (media && media[this.getHighestAvailableFormat(media)]) {\n      return this.getImageUrl(media[this.getHighestAvailableFormat(media)].url);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * returns highest resolution format name from media formats\n   */\n  private getHighestAvailableFormat(media): string {\n    if (media) {\n      let mediaFormat: MediaFormats;\n\n      this.mediaFormats.forEach((format) => {\n        if (\n          !mediaFormat ||\n          (mediaFormat.threshold < format.threshold && media[format.code])\n        ) {\n          mediaFormat = format;\n        }\n      });\n\n      return mediaFormat.code;\n    }\n\n    return null;\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functinality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive inteteger or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Inidicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  private _control$: Observable<FormControl>;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Returns an observable with the control. The value changes of the\n   * control are intercepted in order to suppress invalid values.\n   */\n  getControl(): Observable<FormControl> {\n    if (!this._control$) {\n      this._control$ = this.control.valueChanges.pipe(\n        startWith(this.control.value),\n        tap((value) =>\n          this.control.setValue(this.getValidCount(value), { emitEvent: false })\n        ),\n        map(() => this.control)\n      );\n    }\n    return this._control$;\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\n\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig, PaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultPaginationConfig),\n    { provide: PaginationConfig, useExisting: Config },\n  ],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(() =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter((loaded) => loaded),\n      switchMap(() => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap((dataLoaded) => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: ` <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container> `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap((items) =>\n        this.getContext(context).pipe(\n          switchMap((ctx) => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map((ctx) => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe((service) => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter((s) => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map((data) => data.context),\n        map((ctx) => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  // tslint:disable-next-line:no-output-native\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(protected el: ElementRef, protected renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'style',\n        `--star-fill:${value || this.initialRate};`\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  HostBinding,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { startWith, map } from 'rxjs/operators';\n\n/**\n * This component renders form errors.\n */\n@Component({\n  selector: 'cx-form-errors',\n  templateUrl: './form-errors.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormErrorsComponent {\n  _control: FormControl;\n  errors$: Observable<string[]>;\n\n  @Input()\n  set control(control: FormControl) {\n    this._control = control;\n\n    this.errors$ = control?.statusChanges.pipe(\n      startWith({}),\n      map(() => control.errors || {}),\n      map((errors) =>\n        Object.entries(errors)\n          .filter((error) => error[1])\n          .map((error) => error[0])\n      )\n    );\n  }\n\n  get control(): FormControl {\n    return this._control;\n  }\n\n  @HostBinding('class.control-invalid') get invalid() {\n    return this.control.invalid;\n  }\n  @HostBinding('class.control-dirty') get dirty() {\n    return this.control.dirty;\n  }\n  @HostBinding('class.control-touched') get touched() {\n    return this.control.touched;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormErrorsComponent } from './form-errors.component';\nimport { I18nModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [FormErrorsComponent],\n  exports: [FormErrorsComponent],\n})\nexport class FormErrorsModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map((routingData) => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap((orderCode) => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map((cart) => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map((cart) =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { AbstractControl, ValidationErrors, FormGroup } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  /**\n   * Checks control's value with predefined email regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidEmail' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return !email.length || email.match(EMAIL_PATTERN)\n      ? null\n      : { cxInvalidEmail: true };\n  }\n\n  /**\n   * Checks control's value with predefined password regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidPassword' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n\n    return !password.length || password.match(PASSWORD_PATTERN)\n      ? null\n      : { cxInvalidPassword: true };\n  }\n\n  /**\n   * Checks if control's value is between 1 and 5\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxStarRatingEmpty' validator error\n   * @memberof CustomFormValidators\n   */\n  static starRatingEmpty(control: AbstractControl): ValidationErrors | null {\n    const rating = control.value as number;\n\n    return rating >= 1 && rating <= 5 ? null : { cxStarRatingEmpty: true };\n  }\n\n  /**\n   * Checks if two password controls match\n   *\n   * NOTE: Use it as a form validator and pass password control names as parameters\n   *\n   * @static\n   * @param {string} password First password control name\n   * @param {string} passwordConfirmation Second password control name\n   * @returns Uses 'cxPasswordsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordsMustMatch(\n    password: string,\n    passwordConfirmation: string\n  ): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        password,\n        passwordConfirmation,\n        'cxPasswordsMustMatch'\n      );\n\n    return validator;\n  }\n\n  /**\n   * Checks if two email controls match\n   *\n   * NOTE: Use it as a form validator and pass email control names as parameters\n   *\n   * @static\n   * @param {string} email First email control name\n   * @param {string} emailConfirmation Second email control name\n   * @returns Uses 'cxEmailsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailsMustMatch(email: string, emailConfirmation: string): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        email,\n        emailConfirmation,\n        'cxEmailsMustMatch'\n      );\n\n    return validator;\n  }\n}\n\n/**\n * Generic function for validators, which checks if two passed controls match.\n *\n * @param formGroup\n * @param firstControlName First control to check\n * @param secondControlName Second control to check\n * @param errorName Error which will be returned by validator\n */\nexport function controlsMustMatch(\n  formGroup: FormGroup,\n  firstControlName: string,\n  secondControlName: string,\n  errorName: string\n): void {\n  const firstControl = formGroup.controls[firstControlName];\n  const secondControl = formGroup.controls[secondControlName];\n\n  if (secondControl.errors && !secondControl.errors[errorName]) {\n    return;\n  }\n\n  secondControl.setErrors(\n    firstControl.value !== secondControl.value ? { [errorName]: true } : null\n  );\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsmModule as AsmCoreModule, I18nModule } from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\nimport { FormErrorsModule } from '../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n    FormErrorsModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE = ProductScope.DETAILS;\n\n  /**\n   * Will emit current product or null, if there is no current product (i.e. we are not on PDP)\n   *\n   * @param scopes\n   */\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product | null> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.state.params['productCode']),\n      switchMap((productCode: string) => {\n        return productCode\n          ? this.productService.get(\n              productCode,\n              scopes || this.DEFAULT_PRODUCT_SCOPE\n            )\n          : of(null);\n      }),\n      filter((x) => x !== undefined),\n      distinctUntilChanged()\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  ActiveCartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter((e) => !!e),\n        map((entry) => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap((valueChange) => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe((entry) => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.isStable();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\nimport { FeaturesConfigModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, FeaturesConfigModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  FeatureConfigService,\n  OCC_USER_ID_ANONYMOUS,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  couponForm: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected cartVoucherService: CartVoucherService,\n    protected formBuilder: FormBuilder,\n    protected customerCouponService: CustomerCouponService,\n    protected featureConfig: FeatureConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n    if (this.featureConfig && this.featureConfig.isLevel('1.5')) {\n      this.cart$ = combineLatest([\n        this.activeCartService.getActive(),\n        this.authService.getOccUserId(),\n        this.customerCouponService.getCustomerCoupons(\n          this.MAX_CUSTOMER_COUPON_PAGE\n        ),\n      ]).pipe(\n        tap(\n          ([cart, userId, customerCoupons]: [\n            Cart,\n            string,\n            CustomerCouponSearchResult\n          ]) => {\n            this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code;\n            this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n          }\n        ),\n        map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n    else {\n      this.cart$ = combineLatest([\n        this.activeCartService.getActive(),\n        this.authService.getOccUserId(),\n      ]).pipe(\n        tap(\n          ([cart, userId]: [Cart, string]) =>\n            (this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code)\n        ),\n        map(([cart]: [Cart, string]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n\n    this.cartIsLoading$ = this.activeCartService\n      .isStable()\n      .pipe(map((loaded) => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.couponForm = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe((success) => {\n          this.onSuccess(success);\n        })\n    );\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe((error) => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.couponForm.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach((appliedVoucher) => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          (coupon) => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (this.couponForm.valid) {\n      this.cartVoucherService.addVoucher(\n        this.couponForm.value.couponCode,\n        this.cartId\n      );\n    } else {\n      this.couponForm.markAllAsTouched();\n    }\n  }\n\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    FeaturesConfigModule,\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  ConsignmentEntry,\n  FeatureConfigService,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every((item) => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map((consignmentEntry) => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach((item) => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.activeCartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map((value) => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport {\n  FeatureConfigService,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    promotionService: PromotionService,\n    // tslint:disable-next-line:unified-signatures\n    featureConfig: FeatureConfigService\n  );\n  /**\n   * @deprecated Since 1.5\n   * Add featureConfig for save for later.\n   * Remove issue: #5958\n   */\n  constructor(promotionService: PromotionService);\n\n  constructor(\n    protected promotionService: PromotionService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  FeatureConfigService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private featureConfig: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n\n    if (this.isSaveForLaterEnabled()) {\n      this.cartLoaded$ = combineLatest([\n        this.activeCartService.isStable(),\n        this.selectiveCartService.getLoaded(),\n        this.authService.isUserLoggedIn(),\n      ]).pipe(\n        tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n        map(([cartLoaded, sflLoaded, loggedIn]) =>\n          loggedIn ? cartLoaded && sflLoaded : cartLoaded\n        )\n      );\n    }\n    //TODO remove for #5958\n    else {\n      this.cartLoaded$ = this.activeCartService.isStable();\n    }\n    //TODO  remove for #5958 end\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958 end\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.getCart(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart]) => {\n          if (cart.totalItems) {\n            return slots.filter((slot) => slot !== 'EmptyCartMiddleContent');\n          } else if (selectiveCart.totalItems) {\n            return slots.filter(\n              (slot) =>\n                slot !== 'EmptyCartMiddleContent' &&\n                slot !== 'CenterRightContentSlot'\n            );\n          } else {\n            return slots.filter(\n              (slot) =>\n                slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map((cart) => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter((cart) => !!cart.totalPrice),\n    map((cart) => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter((product) => Boolean(product)),\n    tap((product) => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter((wishlist) => Boolean(wishlist)),\n    map((wishList) => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find((entry) => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CmsParagraphComponent,\n  CmsService,\n  OrderEntry,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map((cart) => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SaveForLaterComponent } from './save-for-later.component';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n      features: {\n        saveForLater: '1.5',\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          (deliveryMode) => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          (deliveryMode) =>\n            deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map((cartData) => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter((cartId) => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap((cartId) => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile((loaded) => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find((address) => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find((address) => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map((data) => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutConfigService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n    { provide: CheckoutConfig, useExisting: Config },\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.activeCartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n    { provide: CheckoutConfig, useExisting: Config },\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  LoaderState,\n  UserPaymentService,\n  Region,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription, BehaviorSubject } from 'rxjs';\nimport { map, tap, switchMap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: string[] = [];\n  years: number[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<LoaderState<void>>;\n  sameAsShippingAddress = true;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  paymentForm: FormGroup = this.fb.group({\n    cardType: this.fb.group({\n      code: [null, Validators.required],\n    }),\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    expiryMonth: [null, Validators.required],\n    expiryYear: [null, Validators.required],\n    cvn: ['', Validators.required],\n    defaultPayment: [false],\n  });\n\n  billingAddressForm: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected modalService: ModalService,\n    protected userAddressService: UserAddressService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap((countries) => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap((cardTypes) => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.billingAddressForm.get(\n          'region.isocodeShort'\n        );\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n\n    for (let i = 0; i < 10; i++) {\n      this.years.push(year + i);\n    }\n\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push(`0${j}`);\n      } else {\n        this.months.push(j.toString());\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.paymentForm.value.defaultPayment = !this.paymentForm.value\n      .defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.paymentForm.get('cardType.code').setValue(card.code);\n  }\n\n  monthSelected(month: string): void {\n    this.paymentForm.get('expiryMonth').setValue(month);\n  }\n\n  yearSelected(year: number): void {\n    this.paymentForm.get('expiryYear').setValue(year);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address?.country &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddressForm.value);\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddressForm.get('country.isocode').setValue(country.isocode);\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddressForm\n      .get('region.isocodeShort')\n      .setValue(region.isocodeShort);\n  }\n\n  next(): void {\n    if (this.paymentForm.valid) {\n      if (this.sameAsShippingAddress) {\n        this.setPaymentDetails.emit({\n          paymentDetails: this.paymentForm.value,\n          billingAddress: null,\n        });\n      } else {\n        if (this.billingAddressForm.valid) {\n          this.setPaymentDetails.emit({\n            paymentDetails: this.paymentForm.value,\n            billingAddress: this.billingAddressForm.value,\n          });\n        } else {\n          this.billingAddressForm.markAllAsTouched();\n        }\n      }\n    } else {\n      this.paymentForm.markAllAsTouched();\n\n      if (!this.sameAsShippingAddress) {\n        this.billingAddressForm.markAllAsTouched();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { PaymentFormComponent } from './payment-form.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(\n          (paymentInfo) => paymentInfo && !!Object.keys(paymentInfo).length\n        )\n      )\n      .subscribe((paymentInfo) => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach((key) => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\nimport { FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  placeOrderSubscription: Subscription;\n\n  checkoutSubmitForm = this.fb.group({\n    termsAndConditions: [false, Validators.requiredTrue],\n  });\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected routingService: RoutingService,\n    protected fb: FormBuilder\n  ) {}\n\n  submitForm(): void {\n    if (this.checkoutSubmitForm.valid) {\n      this.checkoutService.placeOrder();\n    } else {\n      this.checkoutSubmitForm.markAllAsTouched();\n    }\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter((order) => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\nimport { FormErrorsModule } from '../../../../shared/index';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  ActiveCartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutConfigService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  addressForm: FormGroup = this.fb.group({\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n    defaultAddress: [false],\n  });\n\n  constructor(\n    protected fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    protected modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap((countries) => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.addressForm.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.addressForm.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some((error) => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.addressForm.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.addressForm['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.addressForm['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.addressForm['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.addressForm['controls'].defaultAddress.setValue(\n      this.addressForm.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.addressForm.valid) {\n      if (this.addressForm.get('region').value.isocode) {\n        this.regionsSub = this.regions$.pipe(take(1)).subscribe((regions) => {\n          const obj = regions.find(\n            (region) =>\n              region.isocode ===\n              this.addressForm.controls['region'].value.isocode\n          );\n          Object.assign(this.addressForm.value.region, {\n            isocodeShort: obj.isocodeShort,\n          });\n        });\n      }\n\n      if (this.addressForm.dirty) {\n        this.checkoutDeliveryService.verifyAddress(this.addressForm.value);\n      } else {\n        // address form value not changed\n        // ignore duplicate address\n        this.submitAddress.emit(undefined);\n      }\n    } else {\n      this.addressForm.markAllAsTouched();\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.addressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then((address) => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.addressForm.value.titleCode,\n                phone: this.addressForm.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.addressForm.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n  isGuestCheckout = false;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected || Object.keys(selected).length === 0)\n          ) {\n            const defaultAddress = addresses.find(\n              (address) => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map((address) => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  addAddress(address: Address): void {\n    const selectedSub = this.selectedAddress$.subscribe((selected) => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    this.existingAddresses$.pipe(take(1)).subscribe((addresses) => {\n      addresses.includes(address)\n        ? this.selectAddress(address)\n        : this.checkoutDeliveryService.createAndSetAddress(address);\n    });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { SkipLinkConfig } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'cx-header',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'cx-main',\n      i18nKey: 'skipLink.labels.main',\n    },\n    { key: 'cx-footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, T[]>();\n  private templatesRefsBefore = new Map<string, T[]>();\n  private templatesRefsAfter = new Map<string, T[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  remove(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    value?: T\n  ): void {\n    switch (position) {\n      case OutletPosition.BEFORE:\n        this.removeValueOrAll(this.templatesRefsBefore, outlet, value);\n        break;\n      case OutletPosition.AFTER:\n        this.removeValueOrAll(this.templatesRefsAfter, outlet, value);\n        break;\n      default:\n        this.removeValueOrAll(this.templatesRefs, outlet, value);\n    }\n  }\n\n  private store(store: Map<string, T[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n\n  protected removeValueOrAll(\n    store: Map<string, T[]>,\n    outlet: string,\n    value?: T\n  ): void {\n    if (!value && store.has(outlet)) {\n      store.delete(outlet);\n    } else if (value && store.has(outlet)) {\n      let existing = store.get(outlet);\n      existing = existing.filter((val) => val === value);\n      store.set(outlet, existing);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport {\n  Config,\n  ConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkConfig } from './config/skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n    KeyboardFocusModule,\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    { provide: SkipLinkConfig, useExisting: Config },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter((event) => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import {\n  ComponentFactoryResolver,\n  Injectable,\n  isDevMode,\n  ViewContainerRef,\n} from '@angular/core';\nimport { LaunchInlineDialog, LAUNCH_CALLER } from '../config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class InlineRenderStrategy extends LaunchRenderStrategy {\n  constructor(protected componentFactoryResolver: ComponentFactoryResolver) {\n    super();\n  }\n\n  /**\n   * Renders the component from the configuration in the view container ref\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchInlineDialog,\n    caller: LAUNCH_CALLER,\n    vcr: ViewContainerRef\n  ) {\n    // Only render if a ViewContainerRef is provided\n    if (vcr && this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      vcr.createComponent(template);\n      this.renderedCallers.push({ caller, element: vcr.element });\n    } else if (isDevMode()) {\n      if (!vcr) {\n        console.warn(`No view container ref provided for ${caller}`);\n      } else {\n        console.warn(\n          `Element for ${caller} already rendered. To allow multi rendering add property multi: true.`\n        );\n      }\n    }\n  }\n\n  match(config: LaunchInlineDialog) {\n    return Boolean(config.inline);\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned observable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first((v) => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable((observer) => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin };\n      const intersectionObserver = new IntersectionObserver((entries) => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options: IntersectionOptions = {}): string {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evaluate whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OutletDirective } from './outlet.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletRendererService {\n  private outletRefs = new Map<string, OutletDirective>();\n\n  render(outlet: string): void {\n    if (this.outletRefs.size !== 0) {\n      this.outletRefs.get(outlet).render();\n    }\n  }\n\n  register(cxOutlet: string, context: OutletDirective): void {\n    this.outletRefs.set(cxOutlet, context);\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletRendererService } from './outlet-renderer.service';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  private renderedTemplate = [];\n\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService: DeferLoaderService,\n    private outletRendererService?: OutletRendererService\n  ) {}\n\n  public render(): void {\n    this.vcr.clear();\n    this.renderedTemplate = [];\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n    this.outletRendererService.register(this.cxOutlet, this);\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.build();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.render();\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.build();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private build() {\n    this.buildOutlet(OutletPosition.BEFORE);\n    this.buildOutlet(OutletPosition.REPLACE);\n    this.buildOutlet(OutletPosition.AFTER);\n  }\n\n  private buildOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    templates = templates?.filter((el) => !this.renderedTemplate.includes(el));\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    templates.forEach((obj) => {\n      this.create(obj);\n    });\n  }\n\n  private create(tmplOrFactory: any): void {\n    if (tmplOrFactory instanceof ComponentFactory) {\n      this.vcr.createComponent(tmplOrFactory);\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n    }\n    this.renderedTemplate.push(tmplOrFactory);\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent elements of the given element.\n   *\n   * @param element\n   */\n  private getHostElement(element: Element): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentElement);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injectable,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';\nimport { LaunchOutletDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class OutletRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    protected outletService: OutletService<ComponentFactory<any>>,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletRendererService: OutletRendererService\n  ) {\n    super();\n  }\n\n  /**\n   * Renders the element in the configured outlet\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchOutletDialog,\n    caller: LAUNCH_CALLER,\n    vcr?: ViewContainerRef\n  ) {\n    if (this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      this.outletService.add(\n        config.outlet,\n        template,\n        config.position ? config.position : OutletPosition.BEFORE\n      );\n      this.outletRendererService.render(config.outlet);\n\n      const element = vcr?.element;\n      this.renderedCallers.push({ caller, element });\n    }\n  }\n\n  match(config: LaunchOutletDialog) {\n    return Boolean(config.outlet);\n  }\n\n  remove(caller: LAUNCH_CALLER, config: LaunchOutletDialog): void {\n    const template = this.componentFactoryResolver.resolveComponentFactory(\n      config.component\n    );\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller === caller\n    );\n\n    this.outletService.remove(\n      config.outlet,\n      config.position ? config.position : OutletPosition.BEFORE,\n      template\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { LaunchRoute, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingRenderStrategy extends LaunchRenderStrategy {\n  constructor(protected routingService: RoutingService) {\n    super();\n  }\n  /**\n   * Navigates to the route configured for the caller\n   */\n  render(config: LaunchRoute, _caller: LAUNCH_CALLER) {\n    this.routingService.go(config);\n  }\n\n  match(config: LaunchRoute) {\n    return Boolean(config.cxRoute);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideConfig } from '@spartacus/core';\nimport { DEFAULT_LAUNCH_CONFIG } from './config/default-launch-config';\nimport { LaunchConfig } from './config/launch-config';\nimport {\n  InlineRenderStrategy,\n  LaunchRenderStrategy,\n  OutletRenderStrategy,\n  RoutingRenderStrategy,\n} from './services/index';\n\n@NgModule({\n  providers: [\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: OutletRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: InlineRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: RoutingRenderStrategy,\n      multi: true,\n    },\n  ],\n})\nexport class LaunchDialogModule {\n  static forRoot(): ModuleWithProviders<LaunchDialogModule> {\n    return {\n      ngModule: LaunchDialogModule,\n      providers: [\n        provideConfig(DEFAULT_LAUNCH_CONFIG),\n        { provide: LaunchConfig, useExisting: Config },\n      ],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\nimport { LaunchDialogModule } from './launch-dialog/index';\n\n@NgModule({\n  imports: [OutletRefModule, LaunchDialogModule.forRoot()],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DeferLoadingStrategy,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\n\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position is used to find the CMS page slot (and optional outlet)\n   * that is rendered in the PageSlotComponent. Furthermore, the position\n   * is added as a CSS class name to the host element.\n   */\n  @Input()\n  set position(position: string) {\n    this.position$.next(position);\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  @HostBinding('class.cx-pending') isPending = true;\n  @HostBinding('class.has-components') hasComponents = false;\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  private pendingComponentCount: number;\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   *\n   * @deprecated we'll stop supporting this property in 2.0 as\n   * it is not used separately.\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap((position) => this.cmsService.getContentSlot(position)),\n    tap((slot) => this.addSmartEditSlotClass(slot))\n  );\n\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map((slot) => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    )\n  );\n\n  private subscription = new Subscription();\n\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef,\n    // tslint:disable-next-line:unified-signatures\n    config: CmsConfig\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(cmsService: CmsService, dynamicAttributeService: DynamicAttributeService, renderer: Renderer2, hostElement: ElementRef, config?: CmsConfig) instead\n   */\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef\n  );\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef,\n    protected config?: CmsConfig,\n    protected cdRef?: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.components$.subscribe((components) => {\n        this.hasComponents = components && components.length > 0;\n        this.pendingComponentCount = components ? components.length : 0;\n        this.isPending = this.pendingComponentCount > 0;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n   * Is triggered when a component is added to the view.\n   * We use this information to dropthe `is-pending` class from the page slot\n   * when all nested components have been added.\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pendingComponentCount--;\n    }\n    this.isPending = this.pendingComponentCount > 0;\n    this.cdRef?.markForCheck();\n  }\n\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.getDeferLoadingStrategy(componentType);\n    return { deferLoading };\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether component rendering\n   * should be deferred.\n   */\n  private getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    if (this.config) {\n      return ((this.config as CmsConfig).cmsComponents[componentType] || {})\n        .deferLoading;\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter((slot) => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter((page) => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter((page) => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap((section) => (section ? of(section) : this.templateName$)),\n    tap((name) => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap((section) => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap((templateName) =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        (event) => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { LanguageService, WindowRef } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe((lang) => {\n      winRef.document.documentElement.lang = lang.replace(/_/g, '-');\n    });\n  };\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(\n      this.builders.map((builder) => builder.build())\n    ).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  consent: AnonymousConsent;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.requiredConsents.includes(templateId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  constructor(\n    protected userConsentService: UserConsentService,\n    protected globalMessageService: GlobalMessageService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map((template) => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe((success) => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap((withdrawalSuccess) => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe((withdrawalSuccess) =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  FocusConfig,\n  KeyboardFocusService,\n} from '../a11y/keyboard-focus/index';\nimport { SkipLinkComponent } from '../a11y/skip-link/index';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  // required by esc focus\n  @HostBinding('tabindex') tabindex = '0';\n\n  @ViewChild(SkipLinkComponent) child: SkipLinkComponent;\n\n  private keyboardFocusConfig: FocusConfig = {\n    focusOnEscape: true,\n    focusOnDoubleEscape: true,\n  };\n\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    this.keyboardFocusService.handleEscape(\n      this.elementRef.nativeElement,\n      this.keyboardFocusConfig,\n      event\n    );\n  }\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe((val) => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { KeyboardFocusModule } from '../a11y/keyboard-focus/keyboard-focus.module';\nimport { SkipLinkModule } from '../a11y/skip-link/skip-link.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n\n    SkipLinkModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach((guard) =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach((key) =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map((guardClass) => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { TranslationChunkService, TranslationService } from '@spartacus/core';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n// This service should be exposed in public API only after the refactor planned in https://github.com/SAP/spartacus/issues/7070\n@Injectable({ providedIn: 'root' })\nexport class CmsRoutesImplService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  private cmsRouteExists(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    if (this.cmsRouteExists(currentPageLabel)) {\n      return true;\n    }\n\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PageContext } from '@spartacus/core';\nimport { CmsRoutesImplService } from './cms-routes-impl.service';\n\n// Public injection token for the private implementation of the service `CmsRoutesImplService`.\n// After #7070, this class should be replaced with a real implementation.\n@Injectable({\n  providedIn: 'root',\n  useExisting: CmsRoutesImplService,\n})\nexport abstract class CmsRoutesService {\n  abstract handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean;\n}\n","import { Injectable } from '@angular/core';\nimport { RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n/**\n * Helper service for `CmsPageGuard`\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuardService {\n  constructor(\n    protected semanticPathService: SemanticPathService,\n    private cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService\n  ) {}\n\n  /**\n   * Takes CMS components types in the current CMS page, triggers (configurable) side effects and returns a boolean - whether the route can be activated.\n   *\n   * Based on `cmsComponents` config for the components in the page:\n   * - Evaluates components' guards; if one of them emits false or UrlTree - the route cannot be activated or redirects to the given UrlTree, respectively.\n   * - If all components' guards emitted true, then the route can be activated\n   * - Then we trigger loading of configured i18n chunks in parallel\n   * - And we register the configured children routes of cms components\n   *\n   * @param pageContext current cms page context\n   * @param pageData cms page data\n   * @param route activated route snapshot\n   * @param state router state snapshot\n   *\n   * @returns boolean observable - whether the route can be activated\n   */\n  canActivatePage(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap((componentTypes) =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (canActivate === true && !route?.data?.cxCmsRouteContext) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  /**\n   * Activates the \"NOT FOUND\" cms page.\n   *\n   * It loads cms page data for the \"NOT FOUND\" page and puts it in the state of the the requested page label.\n   * Then it processes its CMS components with the method `canActivatePage()` of this service. For more, see its docs.\n   */\n  canActivateNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap((notFoundPage) => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap((notFoundIndex) => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap((notFoundIndex) =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter((index) => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.canActivatePage(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Config,\n  isFeatureEnabled,\n  ProtectedRoutesGuard,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { first, switchMap } from 'rxjs/operators';\nimport { CmsPageGuardService } from './cms-page-guard.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    protected protectedRoutesGuard: ProtectedRoutesGuard,\n    protected service: CmsPageGuardService,\n    @Inject(Config) protected config: any\n  ) {}\n\n  /**\n   * Tries to load the CMS page data for the anticipated route and returns:\n   * - `true` - if it can be activated\n   * - `false` - if it cannot be activated\n   * - `UrlTree` - if user should be redirected to a given `UrlTree`\n   *\n   * If the route can be activated, it fires additional calculations on the CMS components present on this CMS page,\n   * based on their configuration (`cmsComponents` config).\n   *\n   * For more, see docs of the `CmsPageGuardService.canActivatePage`.\n   */\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.protectedRoutesGuard.canActivate(route).pipe(\n      switchMap((canActivate) =>\n        canActivate\n          ? this.routingService.getNextPageContext().pipe(\n              switchMap((pageContext) =>\n                this.cmsService\n                  .getPage(pageContext, this.shouldReloadCmsData())\n                  .pipe(\n                    first(),\n                    switchMap((pageData) =>\n                      pageData\n                        ? this.service.canActivatePage(\n                            pageContext,\n                            pageData,\n                            route,\n                            state\n                          )\n                        : this.service.canActivateNotFoundPage(\n                            pageContext,\n                            route,\n                            state\n                          )\n                    )\n                  )\n              )\n            )\n          : of(false)\n      )\n    );\n  }\n\n  /**\n   * Returns whether we should reload the CMS page data, even when it was loaded before.\n   */\n  private shouldReloadCmsData(): boolean {\n    return !isFeatureEnabled(this.config, 'cmsPageLoadOnce');\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map((review) => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter((rev) => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter((rev) => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${\n        date.getMonth() + 1\n      }-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map((builder) => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map((data) => data.banners.trim().split(' ')),\n    map((codes) => codes.map((code) => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  map,\n  switchMap,\n} from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    // tslint:disable-next-line:unified-signatures\n    winRef: WindowRef\n  );\n  /**\n   * @deprecated since 1.4\n   *\n   * TODO(issue:#5813) Deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService,\n    private winRef?: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilKeyChanged('components'),\n    switchMap((data) =>\n      combineLatest(\n        data.components.split(' ').map((component) =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map((tab) => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['activeTab']) {\n        this.activeTabNum = routeState['activeTab'];\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach((comp) => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n    AddressBookComponentService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe((error) => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotPasswordForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.forgotPasswordForm = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    if (this.forgotPasswordForm.valid) {\n      this.userService.requestForgotPasswordEmail(\n        this.forgotPasswordForm.value.userEmail\n      );\n      this.routingService.go({ cxRoute: 'login' });\n    } else {\n      this.forgotPasswordForm.markAllAsTouched();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() isValid: string;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantity(control: FormControl) {\n  let q = 0;\n  Object.keys(control.value).forEach((key) => (q += control.value[key]));\n\n  return q > 0 ? null : { required: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap((form) => {\n        return this.getEntries().pipe(\n          map((entries) =>\n            entries.filter(\n              (entry) => this.getFormControl(form, entry).value > 0\n            )\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap((order) => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup({}, { validators: [ValidateQuantity] });\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach((entry) => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    if (this.isConfirmation) {\n      control.disable();\n    }\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach((entry) =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => Boolean(order)),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first((r) => !!r))\n      .subscribe((returnRequest) => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter((consignment) =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            (consignment) => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach((element) => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map((order) => order.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap((returnRequest) => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      (success) => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map((returnRequests) => returnRequests.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap((paymentDetails) => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find((paymentDetail) => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n\n  resetPasswordForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'repassword'\n      ),\n    }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe((state) => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe((reset) => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  resetPassword() {\n    if (this.resetPasswordForm.valid) {\n      const password = this.resetPasswordForm.get('password').value;\n      this.userService.resetPassword(this.token, password);\n    } else {\n      this.resetPasswordForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  updateEmailForm: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n    }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit(): void {\n    if (this.updateEmailForm.valid) {\n      const newUid = this.updateEmailForm.get('confirmEmail').value;\n      const password = this.updateEmailForm.get('password').value;\n\n      this.saveEmail.emit({ newUid, password });\n    } else {\n      this.updateEmailForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  updatePasswordForm: FormGroup;\n\n  @Output()\n  submitted = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.updatePasswordForm = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      {\n        validators: CustomFormValidators.passwordsMustMatch(\n          'newPassword',\n          'newPasswordConfirm'\n        ),\n      }\n    );\n  }\n\n  onSubmit(): void {\n    if (this.updatePasswordForm.valid) {\n      this.submitted.emit({\n        oldPassword: this.updatePasswordForm.value.oldPassword,\n        newPassword: this.updatePasswordForm.value.newPassword,\n      });\n    } else {\n      this.updatePasswordForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submitted = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  updateProfileForm = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.updateProfileForm.patchValue(this.user);\n    }\n  }\n\n  onSubmit(): void {\n    if (this.updateProfileForm.valid) {\n      this.submitted.emit({\n        userUpdates: { ...this.updateProfileForm.value },\n      });\n    } else {\n      this.updateProfileForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  PaginationModel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          (coupons) =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe((k) => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe((success) => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap((preferences) => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach((p) => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          (interests) =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map((interest) => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map((result) => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { asyncScheduler, combineLatest, Observable } from 'rxjs';\nimport { filter, map, observeOn } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home').pipe(observeOn(asyncScheduler)),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter((data) => !!data),\n      switchMap((data) => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap((items) => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                (key) => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                (it) => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map((items) => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach((entry) => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach((child) =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map((child) => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navigation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter((event) => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    event.preventDefault();\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter((n) => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getTotalDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(\n        ...node.children.map((n) => this.getTotalDepth(n, depth + 1))\n      );\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter((node) => node.tagName === 'NAV')\n      .forEach((nav) => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d.styleClass)\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap((results) =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map((res) => res.map((suggestion) => suggestion.value)),\n        switchMap((suggestions) => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map((match) => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap((productResult) => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap((c) => (this.config = c)),\n    switchMap((config) => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map((c) => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(() => Boolean(deliveryAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(() => Boolean(deliveryMode)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(() => Boolean(billingAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(() => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap((order) => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    if (this.guestRegisterForm.valid) {\n      this.userService.registerGuest(\n        this.guid,\n        this.guestRegisterForm.value.password\n      );\n      if (!this.subscription) {\n        this.subscription = this.authService\n          .getUserToken()\n          .subscribe((token) => {\n            if (token.access_token) {\n              this.routingService.go({ cxRoute: 'home' });\n            }\n          });\n      }\n    } else {\n      this.guestRegisterForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map((orderDetails) => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\nimport { FormErrorsModule } from '../../shared/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map((product) => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map((ref) =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE = ProductScope.LIST;\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map((data) => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map((data) => data.productCodes.trim().split(' ')),\n    map((codes) =>\n      codes.map((code) => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map((d) => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map((ref) => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map((p: Product) => this.createThumbs(p))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          (t) =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map((c) => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe((reviewsTabLabel) => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter((searchResult) => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach((key) => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe((route) => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(take(1))\n        .subscribe((template) => {\n          this.viewMode$.next(\n            template === 'ProductGridPageTemplate'\n              ? ViewModes.Grid\n              : ViewModes.List\n          );\n        })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe((params) => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap((searchResult) => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach((el) => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map((searchResult) => {\n        return searchResult.facets\n          ? searchResult.facets.filter((facet) => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet: Facet): Facet[] {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : facet.topValueCount\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter((product) => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap((product) => {\n        product.baseOptions.forEach((option) => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find((item) => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach((variant) => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          (item) => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter((variant) => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\nimport { CustomFormValidators } from '../../../../shared/index';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter((p) => !!p),\n    map((p) => p.code),\n    distinctUntilChanged(),\n    switchMap((productCode) =>\n      this.reviewService.getByProductCode(productCode)\n    ),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating: number): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.reviewForm.markAllAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [null, CustomFormValidators.starRatingEmpty],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductReviewsComponent } from './product-reviews.component';\nimport { StarRatingModule, FormErrorsModule } from '../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe((success) => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(\n          (interests) => !!interests.results && interests.results.length === 1\n        )\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap((prefs) => (this.enabledPrefs = prefs)),\n        map((prefs) => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe((error) => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe((success) => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe((text) =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { ActivatedRoute } from '@angular/router';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService, RoutingService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(\n    protected storeDataService: StoreDataService,\n    protected route: ActivatedRoute,\n    protected routingService: RoutingService\n  ) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      (markerIndex) => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe((params) =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  checkoutLoginForm: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch(\n        'email',\n        'emailConfirmation'\n      ),\n    }\n  );\n  sub: Subscription;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  onSubmit() {\n    if (this.checkoutLoginForm.valid) {\n      const email = this.checkoutLoginForm.get('email').value;\n      this.activeCartService.addEmail(email);\n\n      if (!this.sub) {\n        this.sub = this.activeCartService.getAssignedUser().subscribe(() => {\n          if (this.activeCartService.isGuestCart()) {\n            this.authRedirectService.redirect();\n          }\n        });\n      }\n    } else {\n      this.checkoutLoginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\nimport { CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  loginForm: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    protected auth: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected winRef: WindowRef,\n    protected activatedRoute: ActivatedRoute,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    const routeState = this.winRef.nativeWindow?.history?.state;\n    const prefilledEmail = routeState?.['newUid'];\n\n    this.loginForm = this.fb.group({\n      userId: [\n        prefilledEmail?.length ? prefilledEmail : '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n      password: ['', Validators.required],\n    });\n\n    if (this.checkoutConfigService.isGuestCheckout()) {\n      this.loginAsGuest = this.activatedRoute?.snapshot?.queryParams?.[\n        'forced'\n      ];\n    }\n  }\n\n  submitForm(): void {\n    if (this.loginForm.valid) {\n      this.loginUser();\n    } else {\n      this.loginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  protected loginUser(): void {\n    const { userId, password } = this.loginForm.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe((data) => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap((isUserLoggedIn) => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  ProtectedRoutesService,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n/**\n * Guards the _logout_ route.\n *\n * Takes care of routing the user to a logout page (if available) or redirects to\n * the homepage. If the homepage is protected, the user is redirected\n * to the login route instead.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes: ProtectedRoutesService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap((hasPage) => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  /**\n   * Whenever there is no specific \"logout\" page configured in the CMS,\n   * we redirect after the user is logged out.\n   *\n   * The user gets redirected to the homepage, unless the homepage is protected\n   * (in case of a closed shop). We'll redirect to the login page instead.\n   */\n  protected redirect(): void {\n    const cxRoute = this.protectedRoutes.shouldProtect ? 'login' : 'home';\n    this.routing.go({ cxRoute });\n  }\n\n  /**\n   * Log user out.\n   *\n   * This is delegated to the `AuthService`.\n   */\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles, CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  registerForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    this.loading$ = this.userService.getRegisterUserResultLoading();\n    this.registerUserProcessInit();\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some((message) => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const { registerConsent } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n        return {\n          consent,\n          template: template ? template.description : '',\n        };\n      })\n    );\n\n    this.subscription.add(\n      this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submitForm(): void {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.registerForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const {\n      requiredConsents,\n      registerConsent,\n    } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    const { registerConsent } = this.anonymousConsentsConfig.anonymousConsents;\n\n    if (Boolean(this.registerForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(registerConsent);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(registerConsent);\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe((success) => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule, FormErrorsModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n  MyCouponsModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      lg: {\n        slots: [\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n    },\n    navigation: {\n      lg: { slots: [] },\n      slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      lg: {\n        pageFold: 'UpSelling',\n      },\n\n      pageFold: 'Summary',\n\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2cLayoutConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n"]}