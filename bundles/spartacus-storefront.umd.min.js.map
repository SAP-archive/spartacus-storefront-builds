{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-root/asm-root.component.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/assisted-service.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","CLOSE","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","EXPAND","COLLAPSE","RESET","CIRCLE","HEART","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","Injectable","args","providedIn","WindowRef","IconConfig","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","undefined","staticStyleClasses","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","ICON_TYPE","requiredConsents","isLevel13","isFeatureLevel","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","closeModal","rejectAll","_this","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","forEach","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","tslib_1.__values","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","anonymousConsentsFeature","ANONYMOUS_CONSENTS_FEATURE","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","CardComponent","deleteCard","EventEmitter","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","emit","delete","setDefault","send","edit","Output","CardModule","I18nModule","CarouselService","getItemsPerSlide","itemWidth","resize$","map","clientWidth","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","Math","floor","CarouselComponent","el","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","isDevMode","size$","console","changeDetection","ChangeDetectionStrategy","OnPush","xs","sm","md","lg","xl","DEFAULT_BREAKPOINTS","BREAKPOINT","BreakpointService","getSize","breakpoint","breakpoints","window","fromEvent","debounceTime","startWith","target","event","getBreakpoint","innerWidth","of","windowWidth","getClosest","reverse","br","nativeWindow","LayoutConfig","MediaService","breakpointService","code","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","altText","mediaFormats","reduce","set","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","renderer","async","cartIsLoading","isValueChangeable","update","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","subscription","valueChanges","manualChange","Number","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","setProperty","input","onKeyDown","handlers","ArrowDown","decrement","ArrowUp","increment","preventDefault","stopPropagation","onBlur","focus","onFocus","setFocus","registerOnTouched","fn","registerOnChange","updatedQuantity","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","Renderer2","ViewChild","static","OnlyNumberDirective","hostElement","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","onKeyUp","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","replace","Directive","HostListener","OnlyNumberDirectiveModule","ItemCounterModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","GenericLinkModule","PaginationComponent","hideOnSinglePage","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","showPagination","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","get","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","BehaviorSubject","isQualtricsConfigured","initialize","setup","qualtricsScript","defer","idScript","qualtrics","projectId","load","filter","switchMap","qsi","isDataLoaded","dataLoaded","API","unload","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","cmsComponents","component","entryComponents","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","item","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","decorators","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","CMSSiteContextComponent","useClass","deps","SiteContextModule","StarRatingComponent","change","initialRate","setRate","rating","force","setAttribute","style","saveRate","StarRatingModule","ViewConfigModule","forRoot","ngModule","provideConfig","view","ViewConfig","AutoFocusDirective","ngAfterViewInit","FormUtils","isNotValidField","form","formControlName","submitted","control","invalid","touched","dirty","CustomFormValidators","emailDomainValidator","match","InvalidEmail","emailValidator","EMAIL_PATTERN","passwordValidator","PASSWORD_PATTERN","InvalidPassword","matchPassword","NotEqual","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","FeaturesConfigModule","CurrentProductService","routingService","productService","getProduct","getRouterState","state","params","productCode","RoutingService","ProductService","AddedToCartDialogComponent","cartService","fb","quantity","group","entry$","entry","product","controls","setValue","setControl","createEntryFormGroup","markAsPristine","dismissModal","removeEntry","updateEntry","entryNumber","CartService","FormBuilder","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","cartEntry$","getEntry","setStockInfo","markForCheck","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","getAddEntryLoaded","ChangeDetectorRef","AutoFocusDirectiveModule","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","isReadOnly","vouchers","slice","sort","a","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","authService","formBuilder","getOccUserId","cart","userId","cartId","OCC_USER_ID_ANONYMOUS","guid","cartIsLoading$","getLoaded","resetAddVoucherProcessingState","couponCode","Validators","required","submitDisabled$","valid","getAddVoucherResultLoading","btnEnabled","addVoucherIsLoading","getAddVoucherResultSuccess","success","onSuccess","reset","applyVoucher","addVoucher","AuthService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","potentialProductPromotions","getPotentialProductPromotionsForItem","entryPromotions","_c","_d","promotion","description","consumedEntries","_e","e_2","_f","consumedEntry","isConsumedByEntry","consumendEntryNumber","orderEntryNumber","entries","CartItemComponent","compact","isProductOutOfStock","updateItem","removeItem","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","entries$","getEntries","cartLoaded$","getAllPromotionsForCart","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","appliedProductPromotions","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","go","cxRoute","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","slots","slot","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","isUserLoggedIn","loading$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","CartComponentModule","CartModule","FREE","LEAST_EXPENSIVE","MOST_EXPENSIVE","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","checkout","steps","name","routeName","CheckoutStepType","express","defaultDeliveryMode","DeliveryModePreferences","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","leastExpensiveFound","deliveryMode","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","snapshot","join","stepRoute","getRouteConfig","paths","findIndex","CheckoutConfig","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getUserToken","getAssignedUser","token","user","access_token","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","uid","getCheckoutDetailsLoaded$","loadCheckoutDetails","shareReplay","getCheckoutDetailsLoaded","skipWhile","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","keys","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","UserAddressService","UserPaymentService","CheckoutGuard","router","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","guards","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","warn","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","withLatestFrom","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","selectedCountry$","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","goBack","closeForm","payment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","clearAddressVerificationResults","decision","MSG_TYPE_ERROR","openSuggestedAddress","year","Date","getFullYear","j","toString","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","then","catch","verifyAddress","paymentDetails","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","getCardIcon","msg","field","cardLabels","title","img","actions","header","goNext","goPrevious","paymentMethodSelected","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","UserService","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","getOrderDetails","order","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","userService","showCancelBtn","submitAddress","backToAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","obj","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","cards","goTo","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","tempAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","addressSelected","addNewAddress","setAddressSub","selectedAddressSub","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","outlet","position","OutletPosition","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","layoutModules","LayoutModule","OutletDirective","vcr","_context","nodes","renderTemplate","cxOutlet","ref","createEmbeddedView","$implicit","rootNodes","ViewContainerRef","OutletModule","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","componentType","Promise","resolve","split","path","script","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","CmsConfig","Inject","DOCUMENT","PLATFORM_ID","CxApiService","auth","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","kyma","occEndpoints","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","userAddress","userConsent","userOrder","userPayment","ngZone","CartDataService","CmsService","PageMetaService","FeatureConfigService","KymaService","OccEndpointsService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","CurrencyService","LanguageService","BaseSiteService","UserConsentService","UserOrderService","NgZone","ComponentWrapperDirective","componentMapper","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","cmpRef","createComponent","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","element","parentElement","P","reject","fulfilled","rejected","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","DynamicAttributeService","PageComponentModule","PageSlotComponent","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","addComponentClass","addClass","PageSlotModule","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","breakpoint$","resolveSlots","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","layoutSlots","pageTemplateConfig","getSlotConfigForSection","getResponsiveSlotConfig","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","cls","currentClass","removeClass","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","useFactory","APP_INITIALIZER","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","JsonLdScriptFactory","rendererFactory","build","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","JSON","stringify","scriptElement","getElementById","createRenderer","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","sanitizer","writeJsonLd","html","jsonLD","bypassSecurityTrustHtml","DomSanitizer","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","ConsentManagementFormComponent","consentGiven","isAnonymousConsentsEnabled","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","isFeatureEnabled","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","navigateSubscription","isNavigating","val","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","AsmMainUiComponent","asmService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","searchResultsLoading$","getCustomerSearchResultsLoading","customer$","handleCustomerSessionStartRedirection","isCustomerEmulationToken","loginCustomerSupportAgent","password","authorizeCustomerSupporAgent","logoutCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","updateAsmUiState","visible","AsmService","AsmRootComponent","asmUi$","getAsmUiState","queryParamMap","queryParams","showUi","CSAgentLoginFormComponent","submitClicked","csAgentTokenLoading","submitEvent","onSubmit","isNotValid","CustomerSelectionComponent","searchTerm","customerSearchReset","searchResults","getCustomerSearchResults","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","query","pageSize","asm","customeSearch","maxResults","selectCustomerFromList","customer","onDocumentClick","resultList","contains","closeResults","host","(document:click)","AsmConfig","CustomerEmulationComponent","endSession","logout","AssistedServiceModule","AsmComponent","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","first","Error","endWith","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesService","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","children","resetConfig","CmsPageGuard","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","protectedRoutesGuard","getCmsPage","getNextPageContext","getPage","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","SemanticPathService","ProtectedRoutesGuard","cmsRoute","addCmsRoute","ɵ0","CmsRouteModule","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","brand","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tab","select","tabNum","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","featureConfigService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","isLevel","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","onError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","OrderDetailsService","userOrderService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","bufferSize","refCount","OrderDetailHeadlineComponent","orderDetailsService","order$","OrderDetailItemsComponent","getConsignmentProducts","consignment","products","orderEntry","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentStatus","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","moduleComponents","ɵ1","OrderDetailsModule","forChild","ɵ0$1","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","features","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","isLoaded$","getOrderHistoryListLoaded","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","AccountOrderHistoryComponent","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","validator","isPasswordReset","resetPassword","ac","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","createNode","nodeData","root","itemsList","superType","itemSuperType","itemId","processChildren","rootUid","loadNavigationItems","node","child","addLinkToNode","createChildren","itemType","linkName","getLink","categoryCode","transform","childNode","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","relatedTarget","ownerDocument","activeElement","matches","wrapper","querySelector","navBar","removeStyle","offsetLeft","offsetWidth","setStyle","navs","tagName","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","search","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","launchSearchPage","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","ignoreCloseEvent","results$","config$","c","blur","avoidReopen","launchSearchResult","disableClose","HighlightPipe","Pipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","submit","registerGuest","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","source","ProductCarouselComponent","productCodes","ProductCarouselModule","ProductReferencesComponent","current","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","scrollIntoView","behavior","click","h3Elements","h3Element","ProductIntroModule","Grid","List","ProductViewComponent","modeChange","viewMode","toLowerCase","newMode","ViewModes","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_CATEGORY","RELEVANCE_BRAND","searchResults$","searchResult","searchByRouting$","x","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","infiniteScroll","active","setViewMode","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","Map","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","ProductGridItemComponent","ProductListItemComponent","defaultScrollConfig","productLimit","showMoreButton","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","ProductListModule","CMSProductListComponent","SearchResultsListComponent","ProductRefinementComponent","InfiniteScrollModule","INTRO","PRICE","SHARE","SUMMARY","ProductSummaryComponent","outlets","ProductDetailOutlets","ProductSummaryModule","ProductAttributesComponent","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","alias","reviewerName","ProductReviewsModule","ProductReviewsTabComponent","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductTabsModule","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","thumbs","isThumbsEmpty","mainImage$","openImage","isActive","thumbnail","zoom","GALLERY","ProductImagesModule","ScheduleComponent","storeDataService","displayDays","changes","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","viewStore","prepareRouteUrl","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","markerIndex","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","totalResults","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","block","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","onKey","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","store","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","emailConfirmation","emailsMatch","isEmailConfirmInvalid","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","routeState","history","prefillForm","login","authorize","markAsTouched","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","hasPage","ɵ0$2","LogoutModule","RegisterComponent","isNewRegisterFlowEnabled","isAnonymousConsentEnabled","isEnabled","userRegistrationForm","newsletter","isConsentRequired","termsandconditions","requiredTrue","getRegisterUserResultLoading","registerUserProcessInit","getRegisterUserResultSuccess","collectDataFromRegisterForm","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","formData","onRegisterUserSuccess","resetRegisterUserProcessState","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListComponent","wishList$","WishListItemComponent","WishListModule","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","ɵ0$3","ɵ1$1","ProductDetailsPageModule","matcher","ɵ0$4","ɵ1$2","ɵ2","ɵ3","ProductListingPageModule","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","SearchResultsListPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","pages","defaultStorefrontRoutesConfig","home","notFound","protected","forgotPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","termsAndConditions","defaultRoutingConfig","RoutingModule","CoreRoutingModule","StorefrontFoundationModule","AsmModule","StateModule","AuthModule","ConfigInitializerModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","scrollPositionRestoration","anchorScrolling","StoreModule","runtimeChecks","strictStateImmutability","strictStateSerializability","strictActionImmutability","strictActionSerializability","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","withConfigFactory","LANGUAGE","CURRENCY"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  isFeatureLevel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.config, '1.3');\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                consent.consentState == null ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport {\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  anonymousConsentsFeature = ANONYMOUS_CONSENTS_FEATURE;\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(_ => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map(totalWidth => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","export enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else {\n      return null;\n    }\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges, OnDestroy {\n  @ViewChild('itemCounterInput', { static: false })\n  public input: ElementRef;\n  @ViewChild('incrementBtn', { static: false })\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn', { static: false })\n  public decrementBtn: ElementRef;\n\n  @Input()\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  subscription: Subscription;\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.subscription = this.inputValue.valueChanges\n      .pipe(debounceTime(300))\n      .subscribe(value => {\n        if (value) {\n          this.manualChange(Number(value));\n        }\n      });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return incomingValue < this.min || !this.min\n      ? this.min\n      : incomingValue > this.max || !this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    value = value.replace(/[^0-9]+/g, '');\n    this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    return e.key;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OnlyNumberDirective } from './only-number.directive';\n\n@NgModule({\n  declarations: [OnlyNumberDirective],\n  exports: [OnlyNumberDirective],\n})\nexport class OnlyNumberDirectiveModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ItemCounterComponent } from './item-counter.component';\nimport { OnlyNumberDirectiveModule } from '../../directives/only-number/only-number.directive.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    OnlyNumberDirectiveModule,\n  ],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Input() hideOnSinglePage = false;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n\n  showPagination() {\n    return !(this.hideOnSinglePage && this.pagination.totalPages <= 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(_ =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter(loaded => loaded),\n      switchMap(_ => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap(dataLoaded => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: `\n    <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container>\n  `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    ConfigModule.withConfig(defaultQualtricsConfig),\n  ],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter(s => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(el: ElementRef, renderer: Renderer2); // tslint:disable-line\n  /**\n   * @deprecated since version 1.0.2\n   *  Use constructor(el: ElementRef, renderer: Renderer2) instead\n   *\n   *  TODO(issue:#3803) deprecated since 1.0.2\n   */\n  constructor(el: ElementRef);\n  constructor(protected el: ElementRef, protected renderer?: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      // TODO(issue:#3803) deprecated since 1.0.2\n      if (this.renderer) {\n        this.renderer.setAttribute(\n          this.el.nativeElement,\n          'style',\n          `--star-fill:${value || this.initialRate};`\n        );\n      } else {\n        this.el.nativeElement.style.setProperty(\n          '--star-fill',\n          value || this.initialRate\n        );\n      }\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { FormGroup, AbstractControl } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Validates a field of the given form group\n   *\n   * If the field is NOT valid (or invalid), the method returns `true`.\n   *\n   * @param form Form with fields to check\n   * @param formControlName Name of the form field to check\n   * @param submitted Has the form been submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    const control: AbstractControl = form.get(formControlName);\n    return control.invalid && (submitted || (control.touched && control.dirty));\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(EMAIL_PATTERN) ? null : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(PASSWORD_PATTERN) ? null : { InvalidPassword: true };\n  }\n\n  static matchPassword(control: AbstractControl): { NotEqual: boolean } {\n    if (control.get('password').value !== control.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  getProduct(): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) => this.productService.get(productCode))\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n\n  quantity = 0;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n        }\n      })\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  constructor(\n    cartService: CartService,\n    modalService: ModalService,\n    currentProductService: CurrentProductService,\n    cd: ChangeDetectorRef\n  );\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      // force hasStock and quanity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.cartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.cartService.addEntry(this.productCode, this.quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getAddEntryLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Cart,\n  CartService,\n  CartVoucherService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Subscription } from 'rxjs/internal/Subscription';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  submitDisabled$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n\n  private subscription = new Subscription();\n\n  constructor(\n    private cartService: CartService,\n    private authService: AuthService,\n    private cartVoucherService: CartVoucherService,\n    private formBuilder: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = combineLatest([\n      this.cartService.getActive(),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(\n        ([cart, userId]: [Cart, string]) =>\n          (this.cartId =\n            userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code)\n      ),\n      map(([cart]: [Cart, string]) => cart)\n    );\n\n    this.cartIsLoading$ = this.cartService\n      .getLoaded()\n      .pipe(map(loaded => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.form = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    this.submitDisabled$ = combineLatest([\n      this.cartIsLoading$,\n      this.form.valueChanges.pipe(\n        startWith(true),\n        map(() => this.form.valid)\n      ),\n      this.cartVoucherService.getAddVoucherResultLoading(),\n    ]).pipe(\n      map(\n        ([cartIsLoading, btnEnabled, addVoucherIsLoading]) =>\n          cartIsLoading || !btnEnabled || addVoucherIsLoading\n      )\n    );\n\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe(success => {\n          this.onSuccess(success);\n        })\n    );\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.form.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  applyVoucher(): void {\n    this.cartVoucherService.addVoucher(this.form.value.couponCode, this.cartId);\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { CartService, PromotionResult } from '@spartacus/core';\nimport { Item } from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  items: Item[] = [];\n\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(protected cartService: CartService, protected fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.items.forEach(item => {\n      const { code } = item.product;\n      if (!this.form.controls[code]) {\n        this.form.setControl(code, this.createEntryFormGroup(item));\n      } else {\n        const entryForm = this.form.controls[code] as FormGroup;\n        entryForm.controls.quantity.setValue(item.quantity);\n      }\n    });\n  }\n\n  removeEntry(item: Item): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumendEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumendEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumendEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n  @Input()\n  potentialProductPromotions: any[];\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  ngOnInit() {}\n\n  isProductOutOfStock(product) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = this.cartService.getLoaded();\n  }\n\n  getAllPromotionsForCart(cart: Cart): any[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n    potentialPromotions.push(...(cart.potentialProductPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n    appliedPromotions.push(...(cart.appliedProductPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Cart, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.cartService.getActive().pipe(\n      map(cart => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(private cartService: CartService) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([slots$, this.cartService.getActive()]).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter(product => Boolean(product)),\n    tap(product => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter(wishlist => Boolean(wishlist)),\n    map(wishList => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find(entry => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n    I18nModule,\n    IconModule,\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\n\n@NgModule({\n  imports: [NgbModule, CartDetailsModule, CartTotalsModule, CartSharedModule],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          deliveryMode => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          deliveryMode => deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  CartService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private cartService: CartService,\n    private checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.cartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.cartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.cartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find(address => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find(address => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map(data => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { CartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService,\n    checkoutConfigService: CheckoutConfigService,\n    expressCheckoutService: ExpressCheckoutService,\n    cartService: CartService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(router: Router,\n   *  config: CheckoutConfig - @deprecated since 2.x,\n   *  routingConfigService: RoutingConfigService,\n   *  checkoutConfigService: CheckoutConfigService,\n   *  expressCheckoutService: ExpressCheckoutService\n   *  cartService: CartService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService\n  );\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService,\n    protected checkoutConfigService?: CheckoutConfigService,\n    protected expressCheckoutService?: ExpressCheckoutService,\n    protected cartService?: CartService\n  ) {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (this.checkoutConfigService) {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.checkoutConfigService.getFirstCheckoutStepRoute()\n          ).paths[0]\n        )\n      );\n    } else {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.config.checkout.steps[0].routeName\n          ).paths[0]\n        )\n      );\n    }\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.checkoutConfigService &&\n      this.expressCheckoutService &&\n      this.cartService\n    ) {\n      if (\n        this.checkoutConfigService.isExpressCheckout() &&\n        !this.cartService.isGuestCart()\n      ) {\n        return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n          switchMap((expressCheckoutPossible: boolean) => {\n            return expressCheckoutPossible\n              ? of(\n                  this.router.parseUrl(\n                    this.routingConfigService.getRouteConfig(\n                      this.checkoutConfigService.getCheckoutStepRoute(\n                        CheckoutStepType.REVIEW_ORDER\n                      )\n                    ).paths[0]\n                  )\n                )\n              : this.firstStep$;\n          })\n        );\n      }\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address !== undefined &&\n          address.country !== undefined &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n  CartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService,\n    cartService: CartService // tslint:disable-line\n  );\n  /**\n   * @deprecated since 1.x\n   * NOTE: check issue:#1181 for more info\n   *\n   * TODO(issue:#1181) Deprecated since 1.x\n   */\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService\n  );\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected cartService?: CartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.cartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use selectPaymentMethod() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  paymentMethodSelected(paymentDetails: PaymentDetails): void {\n    this.selectPaymentMethod(paymentDetails);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/index';\nimport { CheckoutStepType } from '../../model/index';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * NOTE: check issue:#4121 for more info\n   *\n   * TODO(issue:#4121) Deprecated since 1.1.0\n   */\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService\n  );\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    // TODO(issue:#4121) Deprecated since 1.1.0\n    if (this.checkoutConfigService) {\n      const step = this.checkoutConfigService.getCheckoutStep(stepType);\n\n      return step && step.routeName;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const sortedTitles = titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...sortedTitles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.address.controls['region'].value.isocode) {\n      this.regionsSub = this.regions$.pipe(take(1)).subscribe(regions => {\n        const obj = regions.find(\n          region =>\n            region.isocode === this.address.controls['region'].value.isocode\n        );\n        Object.assign(this.address.value.region, {\n          isocodeShort: obj.isocodeShort,\n        });\n      });\n    }\n\n    if (this.address.dirty) {\n      this.checkoutDeliveryService.verifyAddress(this.address.value);\n    } else {\n      // address form value not changed\n      // ignore duplicate address\n      this.submitAddress.emit(undefined);\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\nimport { CheckoutStepType } from '../..';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use cards$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  cards: Card[] = [];\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  goTo: CheckoutStepType = null;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddress: Address;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getNextCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n    this.activatedRoute\n  );\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getPreviousCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlPrevious = 'cart';\n\n  isGuestCheckout = false;\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddress: Address;\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected ||\n              Object.keys(selected).length === 0 ||\n              !this.selectedAddress)\n          ) {\n            const defaultAddress = addresses.find(\n              address => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.cartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.selectedAddress = address;\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addAddress(address: { newAddress: boolean; address: Address } | any);\n  addAddress(\n    address: Address | { newAddress: boolean; address: Address }\n  ): void {\n    // TODO(issue:#3921) deprecated since 1.3 - Remove temp address\n    const tempAddress: Address = address['address']\n      ? address['address']\n      : address;\n\n    const selectedSub = this.selectedAddress$.subscribe(selected => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    // TODO(issue:#3921) deprecated since 1.3 - Remove this condition\n    if (address['address'] || address['newAddress']) {\n      address['newAddress']\n        ? this.checkoutDeliveryService.createAndSetAddress(tempAddress)\n        : this.selectAddress(tempAddress);\n    } else {\n      // TODO(issue:#3921) deprecated since 1.3 - Use instead of condition\n      this.existingAddresses$.pipe(take(1)).subscribe(addresses => {\n        addresses.includes(tempAddress)\n          ? this.selectAddress(tempAddress)\n          : this.checkoutDeliveryService.createAndSetAddress(tempAddress);\n      });\n    }\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addressSelected(address: Address): void {\n    this.selectAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addNewAddress(address: Address): void {\n    this.addAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Remove.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { AuthService, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private cartService: CartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.cartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService {\n  private templatesRefs = {};\n  private templatesRefsBefore = {};\n  private templatesRefsAfter = {};\n\n  add(\n    outlet: string,\n    template: TemplateRef<any>,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.templatesRefsBefore[outlet] = template;\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.templatesRefs[outlet] = template;\n    }\n    if (position === OutletPosition.AFTER) {\n      this.templatesRefsAfter[outlet] = template;\n    }\n  }\n\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): TemplateRef<any> {\n    let templateRef;\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore[outlet];\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter[outlet];\n        break;\n      default:\n        templateRef = this.templatesRefs[outlet];\n    }\n    return templateRef;\n    // return this.templatesRefs[outlet] ? this.templatesRefs[outlet] : null;\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\nconst layoutModules = [OutletRefModule];\n\n@NgModule({\n  imports: [...layoutModules],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [...layoutModules],\n})\nexport class LayoutModule {}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { OutletPosition } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnInit {\n  @Input() cxOutlet: string;\n\n  private _context: any;\n  @Input()\n  set cxOutletContext(value: any) {\n    this._context = value;\n  }\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit(): void {\n    const nodes = [];\n    nodes.push(...this.renderTemplate(OutletPosition.BEFORE));\n    nodes.push(...this.renderTemplate(OutletPosition.REPLACE, true));\n    nodes.push(...this.renderTemplate(OutletPosition.AFTER));\n  }\n\n  private renderTemplate(position: OutletPosition, replace = false): any[] {\n    const nodes = [];\n    const template = this.outletService.get(this.cxOutlet, position);\n    if (template || replace) {\n      const ref = this.vcr.createEmbeddedView(template || this.templateRef, {\n        $implicit: this._context,\n      });\n      nodes.push(...ref.rootNodes);\n    }\n    return nodes;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  AuthService,\n  BaseSiteService,\n  CartDataService,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: CartService,\n    @Optional() public cartData: CartDataService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: cmsComponentData, // TODO: remove / deprecated since 1.0.x\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-page-slot',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent {\n  @Input() set position(position: string) {\n    this.position$.next(position);\n    // add the position name as a css class so that\n    // layout can be applied to it, using the position based class.\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  /**\n   * observable with components (`ContentSlotComponentData[]`)\n   * for the current slot\n   */\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    ),\n    tap(components => this.addComponentClass(components))\n  );\n\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef\n  ) {}\n\n  // add a class to indicate whether the class is empty or not\n  private addComponentClass(components): void {\n    if (components && components.length > 0) {\n      this.renderer.addClass(this.hostElement.nativeElement, 'has-components');\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // we print warn messages on missing layout configs\n  // only once to not polute the console log\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter(slot => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(page => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = JSON.stringify(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const html = `<script type=\"application/ld+json\">${JSON.stringify(\n        schema\n      )}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(this.builders.map(builder => builder.build())).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  isAnonymousConsentsEnabled = false;\n\n  @Input()\n  consent: AnonymousConsent;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  @Input()\n  isLevel13 = false;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.isAnonymousConsentsEnabled && this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.isAnonymousConsentsEnabled\n      ? this.requiredConsents.includes(templateId)\n      : false;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  isFeatureEnabled,\n  isFeatureLevel,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  isAnonymousConsentsEnabled = isFeatureEnabled(\n    this.anonymousConsentsConfig,\n    ANONYMOUS_CONSENTS_FEATURE\n  );\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.anonymousConsentsConfig, '1.3');\n\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    anonymousConsentsService: AnonymousConsentsService,\n    authService: AuthService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   ```ts\n   constructor(\n     userConsentService: UserConsentService,\n     globalMessageService: GlobalMessageService,\n     anonymousConsentsConfig : AnonymousConsentsConfig,\n     anonymousConsentsService : AnonymousConsentsService,\n     authService: AuthService,\n   ) \n   ```\n   */\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService\n  );\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService,\n    private anonymousConsentsConfig?: AnonymousConsentsConfig,\n    private anonymousConsentsService?: AnonymousConsentsService,\n    private authService?: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (!this.isAnonymousConsentsEnabled) {\n          return templateList;\n        }\n\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map(template => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.isConsentGiven(template)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isConsentGiven(consentTemplate: ConsentTemplate): boolean {\n    return (\n      Boolean(consentTemplate.currentConsent) &&\n      Boolean(consentTemplate.currentConsent.consentGivenDate) &&\n      !Boolean(consentTemplate.currentConsent.consentWithdrawnDate)\n    );\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.isConsentWithdrawn(template)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isConsentWithdrawn(consentTemplate: ConsentTemplate): boolean {\n    if (Boolean(consentTemplate.currentConsent)) {\n      return Boolean(consentTemplate.currentConsent.consentWithdrawnDate);\n    }\n    return true;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    if (!this.isAnonymousConsentsEnabled) {\n      return false;\n    }\n\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/index';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, ConsentManagementModule],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  AsmService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n  searchResultsLoading$: Observable<boolean>;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected userService: UserService,\n    protected asmService: AsmService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.authService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.authService.getCustomerSupportAgentTokenLoading();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.authService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.authService.authorizeCustomerSupporAgent(userId, password);\n  }\n\n  logoutCustomerSupportAgent(): void {\n    this.authService.logoutCustomerSupportAgent();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.authService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe(customerSupportAgentToken =>\n        this.authService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.asmService.updateAsmUiState({ visible: false });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { AsmService, AsmUi } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-asm',\n  templateUrl: './asm-root.component.html',\n})\nexport class AsmRootComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  asmUi$: Observable<AsmUi>;\n\n  constructor(\n    protected asmService: AsmService,\n    protected activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.asmUi$ = this.asmService.getAsmUiState();\n\n    this.subscription.add(\n      this.activatedRoute.queryParamMap.subscribe(queryParams => {\n        if (queryParams.get('asm') === 'true') {\n          this.showUi();\n        }\n      })\n    );\n  }\n\n  private showUi(): void {\n    this.asmService.updateAsmUiState({ visible: true });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, EventEmitter, OnInit, Output, Input } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  form: FormGroup;\n  private submitClicked = false;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submitEvent.emit({\n      userId: this.form.controls.userId.value,\n      password: this.form.controls.password.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList', { static: false }) resultList: ElementRef;\n  @ViewChild('searchTerm', { static: false }) searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      searchTerm: [''],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.form.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe(searchTermValue => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customeSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.form.controls.searchTerm.setValue(this.selectedCustomer.name);\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  RoutingService,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  private subscription = new Subscription();\n\n  constructor(\n    protected authService: AuthService,\n    protected userService: UserService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe(user => (this.customer = user))\n    );\n  }\n\n  endSession() {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmRootComponent } from './asm-root/asm-root.component';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AsmComponent: {\n          component: AsmRootComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmRootComponent,\n    CustomerEmulationComponent,\n  ],\n  exports: [AsmRootComponent],\n  entryComponents: [AsmRootComponent],\n})\nexport class AssistedServiceModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  ProtectedRoutesGuard,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService,\n    protectedRoutesGuard: ProtectedRoutesGuard // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since version 1.2.0\n   * Use constructor with more dependencies and make them all required.\n   *\n   * TODO(issue:4646) deprecated since version 1.2.0\n   */\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService\n  );\n  constructor(\n    // expose as `protected` only services from public API:\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutesGuard?: ProtectedRoutesGuard\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:4646) Expect that `ProtectedRoutesGuard` dependency is required (remove `if` logic)\n     */\n    return this.protectedRoutesGuard\n      ? this.protectedRoutesGuard\n          .canActivate(route)\n          .pipe(\n            switchMap(result =>\n              result ? this.getCmsPage(route, state) : of(result)\n            )\n          )\n      : this.getCmsPage(route, state);\n  }\n\n  private getCmsPage(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.getPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap(notFoundPage => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map(review => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter(rev => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter(rev => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${date.getMonth() +\n        1}-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      startWith(null as Product),\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map(builder => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map(data => data.banners.trim().split(' ')),\n    map(codes => codes.map(code => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/index';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n    PageComponentModule,\n    CarouselModule,\n    MediaModule,\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsService, CMSTabParagraphContainer } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent {\n  activeTabNum = 0;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n              return {\n                ...tab,\n                title: `CMSTabParagraphContainer.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe(error => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order, Consignment, OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    RouterModule.forChild([\n      {\n        path: 'guest/order/:orderCode',\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    SpinnerModule,\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n})\nexport class OrderHistoryComponent implements OnInit, OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  orders$: Observable<OrderHistoryList>;\n  isLoaded$: Observable<boolean>;\n\n  private PAGE_SIZE = 5;\n\n  sortType: string;\n\n  ngOnInit(): void {\n    this.orders$ = this.userOrderService\n      .getOrderHistoryList(this.PAGE_SIZE)\n      .pipe(\n        tap((orders: OrderHistoryList) => {\n          if (orders.pagination) {\n            this.sortType = orders.pagination.sort;\n          }\n        })\n      );\n\n    this.isLoaded$ = this.userOrderService.getOrderHistoryListLoaded();\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { NgModule } from '@angular/core';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { OrderDetailsModule } from './order-details/order-details.module';\n\n@NgModule({\n  imports: [OrderHistoryModule, OrderDetailsModule],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta && meta.breadcrumbs\n          ? meta.breadcrumbs\n          : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(data => !!data),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.getNavigationEntryItems(navigation, true);\n            }\n          }),\n          filter(Boolean),\n          map(items => this.createNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Get all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private getNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ) {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      this.processChildren(nodeData, itemsList);\n    }\n\n    if (root) {\n      const rootUid = nodeData.uid;\n      this.cmsService.loadNavigationItems(rootUid, itemsList);\n    }\n  }\n\n  private processChildren(node, itemsList): void {\n    for (const child of node.children) {\n      this.getNavigationEntryItems(child, false, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for display\n   * @param nodeData\n   * @param items\n   */\n  private createNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    node.title = nodeData.title;\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.addLinkToNode(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = this.createChildren(nodeData, items);\n      node.children = children;\n    }\n\n    return node;\n  }\n\n  private addLinkToNode(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (entry.itemType === 'CMSLinkComponent' && item !== undefined) {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n\n      node.url = this.getLink(item);\n\n      // if \"NEWWINDOW\", target is true\n      node.target = item.target;\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n\n  private createChildren(node, items) {\n    const children = [];\n\n    for (const child of node.children) {\n      const childNode = this.createNode(child, items);\n      children.push(childNode);\n    }\n\n    return children;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      this.openNodes = this.openNodes.filter(n => n !== node);\n      this.renderer.removeClass(node, 'is-open');\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  ANONYMOUS_CONSENTS_FEATURE,\n  CmsNavigationComponent,\n  isFeatureEnabled,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  // in order to preserve the backwards compatibility, this should render only if anonymous consents feature is disabled\n  data$ = this.componentData.data$.pipe(\n    filter(\n      _ =>\n        !isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        )\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService,\n    // tslint:disable-next-line: unified-signatures\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   * \n    ```ts\n      constructor(\n      componentData: CmsComponentData<CmsNavigationComponent>,\n      service: NavigationService,\n      anonymousConsentsConfig: AnonymousConsentsConfig\n    )\n    ```\n   */\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService\n  );\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(_ => Boolean(deliveryAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(_ => Boolean(deliveryMode)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(_ => Boolean(billingAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(_ => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap(order => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    this.userService.registerGuest(\n      this.guid,\n      this.guestRegisterForm.value.password\n    );\n    if (!this.subscription) {\n      this.subscription = this.authService.getUserToken().subscribe(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    I18nModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map(data => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map(data => data.productCodes.trim().split(' ')),\n    map(codes => codes.map(code => this.productService.get(code)))\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map(ref => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('CMSTabParagraphContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_CATEGORY = ':relevance:category:';\n  protected readonly RELEVANCE_BRAND = ':relevance:brand:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(\n    pluck(0),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_CATEGORY + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_BRAND + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe(route => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Subscription, Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\nimport { ViewConfig } from '../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n        this.viewMode$.next(\n          template === 'ProductGridPageTemplate'\n            ? ViewModes.Grid\n            : ViewModes.List\n        );\n      })\n    );\n  }\n\n  viewPage(pageNumber: number): void {\n    this.productListComponentService.viewPage(pageNumber);\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<ViewConfig>defaultScrollConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { CurrentProductService } from '../../current-product.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(p => !!p),\n    switchMap(product => this.reviewService.getByProductCode(product.code)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  isThumbsEmpty: boolean;\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map(product => this.createThumbs(product)),\n    tap(thumbs => {\n      this.isThumbsEmpty = thumbs.length === 0;\n    })\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n    CarouselModule,\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RoutingService, StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      markerIndex => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap', { static: false })\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe(params =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { AuthRedirectService, CartService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  form: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    { validator: this.emailsMatch }\n  );\n\n  sub: Subscription;\n\n  private submitClicked = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cartService: CartService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isEmailConfirmInvalid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('emailConfirmation').touched &&\n          this.form.get('emailConfirmation').dirty))\n    );\n  }\n\n  onSubmit() {\n    this.submitClicked = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const email = this.form.value.email;\n    this.cartService.addEmail(email);\n\n    if (!this.sub) {\n      this.sub = this.cartService.getAssignedUser().subscribe(_ => {\n        if (this.cartService.isGuestCart()) {\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private emailsMatch(abstractControl: AbstractControl): { NotEqual: boolean } {\n    return abstractControl.get('email').value !==\n      abstractControl.get('emailConfirmation').value\n      ? { NotEqual: true }\n      : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService,\n    winRef: WindowRef, // tslint:disable-line,\n    activatedRoute: ActivatedRoute,\n    checkoutConfigService: CheckoutConfigService\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * Use constructor(\n   * auth: AuthService,\n   * globalMessageService: GlobalMessageService,\n   * fb: FormBuilder,\n   * authRedirectService: AuthRedirectService,\n   *  winRef: WindowRef,\n   * activatedRoute: ActivatedRoute,\n   * checkoutConfigService: CheckoutConfigService) instead\n   *\n   * TODO(issue:#4055) Deprecated since 1.1.0\n   */\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService\n  );\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService,\n    private winRef?: WindowRef,\n    private activatedRoute?: ActivatedRoute,\n    private checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n\n    if (\n      this.checkoutConfigService &&\n      this.checkoutConfigService.isGuestCheckout()\n    ) {\n      this.loginAsGuest = this.activatedRoute.snapshot.queryParams['forced'];\n    }\n\n    // TODO(issue:#4055) Deprecated since 1.1.0\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['newUid'] && routeState['newUid'].length) {\n        this.prefillForm('userId', routeState['newUid']);\n      }\n    }\n  }\n\n  login(): void {\n    const { userId, password } = this.form.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private prefillForm(field: string, value: string): void {\n    this.form.patchValue({\n      [field]: value,\n    });\n\n    this.form.get(field).markAsTouched(); // this action will check field validity on load\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap(isUserLoggedIn => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.routing.go({ cxRoute: 'home' });\n          }\n        })\n      );\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthRedirectService,\n  AuthService,\n  ConsentTemplate,\n  FeatureConfigService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles } from '../../../shared/utils/forms/title-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  // TODO(issue:4237) Register flow\n  isNewRegisterFlowEnabled: boolean =\n    this.featureConfig && this.featureConfig.isLevel('1.1');\n\n  isAnonymousConsentEnabled =\n    this.featureConfig &&\n    this.featureConfig.isEnabled(ANONYMOUS_CONSENTS_FEATURE);\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isAnonymousConsentEnabled\n          ? this.isConsentRequired()\n          : false,\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    // tslint:disable-next-line:unified-signatures\n    router: RoutingService,\n    featureConfig: FeatureConfigService,\n    anonymousConsentsService: AnonymousConsentsService,\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   *\n   * Use constructor(\n   * protected auth: AuthService,\n   * protected authRedirectService: AuthRedirectService,\n   * protected userService: UserService,\n   * protected globalMessageService: GlobalMessageService,\n   * protected fb: FormBuilder,\n   * protected router?: RoutingService,\n   * protected featureConfig?: FeatureConfigService,\n   * protected anonymousConsentsService?: AnonymousConsentsService,\n   * protected anonymousConsentsConfig?: AnonymousConsentsConfig) instead\n   *\n   * TODO(issue:4237) Register flow\n   * TODO(issue:4989) Anonymous consents\n   */\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder\n  );\n  constructor(\n    protected auth: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router?: RoutingService,\n    protected featureConfig?: FeatureConfigService,\n    protected anonymousConsentsService?: AnonymousConsentsService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const sortedTitles = titles.sort(sortTitles);\n        return sortedTitles;\n      })\n    );\n\n    // TODO(issue:4237) Register flow\n    if (this.isNewRegisterFlowEnabled) {\n      this.loading$ = this.userService.getRegisterUserResultLoading();\n      this.registerUserProcessInit();\n    } else {\n      if (this.auth && this.authRedirectService) {\n        this.subscription.add(\n          this.userService\n            .getRegisterUserResultSuccess()\n            .subscribe((success: boolean) => {\n              if (success) {\n                const { uid, password } = this.collectDataFromRegisterForm(\n                  this.userRegistrationForm.value\n                );\n                this.auth.authorize(uid, password);\n              }\n            })\n        );\n        this.subscription.add(\n          this.auth.getUserToken().subscribe(data => {\n            if (data && data.access_token) {\n              this.globalMessageService.remove(\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n              this.authRedirectService.redirect();\n            }\n          })\n        );\n      }\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(messages => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some(message => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    if (\n      this.isAnonymousConsentEnabled &&\n      Boolean(this.anonymousConsentsConfig) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent)\n    ) {\n      this.anonymousConsent$ = combineLatest([\n        this.anonymousConsentsService.getConsent(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n        this.anonymousConsentsService.getTemplate(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n      ]).pipe(\n        map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n          return {\n            consent,\n            template: template.description,\n          };\n        })\n      );\n\n      this.subscription.add(\n        this.userRegistrationForm\n          .get('newsletter')\n          .valueChanges.subscribe(_ => {\n            this.toggleAnonymousConsent();\n          })\n      );\n    }\n  }\n\n  submit(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.userRegistrationForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.userRegistrationForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    if (\n      Boolean(this.anonymousConsentsService) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.requiredConsents)\n    ) {\n      return this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (this.router && success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    if (Boolean(this.userRegistrationForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    } else {\n      this.anonymousConsentsService.withdrawConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe(success => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    SpinnerModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import { Component } from '@angular/core';\nimport { AuthService, Cart, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(\n    protected wishListService: WishListService,\n    protected authService: AuthService\n  ) {}\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { WishListService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input() cartEntry: any;\n\n  constructor(protected wishListService: WishListService) {}\n\n  remove(entry: any) {\n    this.wishListService.removeEntry(entry);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule, StarRatingModule } from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n        },\n      },\n    }),\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AssistedServiceModule } from './asm/assisted-service.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AssistedServiceModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    WishListModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  Route,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AsmModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    AsmModule.forRoot(),\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('1.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot(\n      {},\n      {\n        runtimeChecks: {\n          strictStateImmutability: true,\n          strictStateSerializability: true,\n          strictActionImmutability: true,\n          strictActionSerializability: true,\n        },\n      }\n    ),\n    EffectsModule.forRoot([]),\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n"]}