{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","CLOSE","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","EXPAND","COLLAPSE","RESET","CIRCLE","HEART","EMPTY_HEART","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","Injectable","args","providedIn","WindowRef","IconConfig","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","undefined","staticStyleClasses","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","ICON_TYPE","requiredConsents","isLevel13","isFeatureLevel","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","_this","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","forEach","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","tslib_1.__values","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","CardComponent","deleteCard","EventEmitter","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","emit","delete","setDefault","send","edit","Output","CardModule","I18nModule","CarouselService","getItemsPerSlide","itemWidth","resize$","map","clientWidth","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","Math","floor","CarouselComponent","el","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","isDevMode","size$","console","changeDetection","ChangeDetectionStrategy","OnPush","xs","sm","md","lg","xl","DEFAULT_BREAKPOINTS","BREAKPOINT","BreakpointService","getSize","breakpoint","breakpoints","window","fromEvent","debounceTime","startWith","target","event","getBreakpoint","innerWidth","of","windowWidth","getClosest","reverse","br","nativeWindow","LayoutConfig","MediaService","breakpointService","code","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","altText","mediaFormats","reduce","set","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","renderer","async","cartIsLoading","isValueChangeable","update","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","subscription","valueChanges","manualChange","Number","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","setProperty","input","onKeyDown","handlers","ArrowDown","decrement","ArrowUp","increment","preventDefault","stopPropagation","onBlur","focus","onFocus","setFocus","registerOnTouched","fn","registerOnChange","updatedQuantity","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","Renderer2","ViewChild","static","OnlyNumberDirective","hostElement","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","onKeyUp","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","replace","Directive","HostListener","OnlyNumberDirectiveModule","ItemCounterModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","GenericLinkModule","PaginationComponent","hideOnSinglePage","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","showPagination","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","get","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","BehaviorSubject","isQualtricsConfigured","initialize","setup","qualtricsScript","defer","idScript","qualtrics","projectId","load","filter","switchMap","qsi","isDataLoaded","dataLoaded","API","unload","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","cmsComponents","component","entryComponents","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","item","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","decorators","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","CMSSiteContextComponent","useClass","deps","SiteContextModule","StarRatingComponent","change","initialRate","setRate","rating","force","setAttribute","style","saveRate","StarRatingModule","ViewConfigModule","forRoot","ngModule","provideConfig","view","ViewConfig","AutoFocusDirective","ngAfterViewInit","AutoFocusDirectiveModule","FormUtils","isNotValidField","form","formControlName","submitted","control","invalid","touched","dirty","CustomFormValidators","emailDomainValidator","match","InvalidEmail","emailValidator","EMAIL_PATTERN","passwordValidator","PASSWORD_PATTERN","InvalidPassword","matchPassword","NotEqual","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","FeaturesConfigModule","deferLoading","DeferLoadingStrategy","INSTANT","CmsMappingService","platformId","isComponentEnabled","flexType","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","componentType","getRoutesForComponent","getGuardsForComponents","guards","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsConfig","Inject","PLATFORM_ID","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","state","canActivateObservables","guardClass","canActivate","isCanActivate","isObservable","obj","then","Promise","resolve","wrapIntoObservable","first","Error","skipWhile","endWith","CmsI18nService","translation","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationService","TranslationChunkService","PAGE_LAYOUT_HANDLER","InjectionToken","PageLayoutService","cms","warnLogMessages","logSlots","getSlots","section","page$","breakpoint$","pageTemplate","slots","resolveSlots","result","_c","_d","handle","a","getPageFoldSlot","pageTemplateConfig","layoutSlots","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","keys","slot","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","join","cacheKey","warn","CmsService","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","name","styleClass","slots$","pageFoldSlot$","templateName","cls","currentClass","removeClass","addClass","CmsRoutesService","router","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","path","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","children","resetConfig","Router","CmsPageGuard","routingService","cmsService","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","protectedRoutesGuard","getCmsPage","getNextPageContext","getPage","withLatestFrom","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","RoutingService","SemanticPathService","ProtectedRoutesGuard","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","Map","templatesRefsBefore","templatesRefsAfter","outlet","templateOrFactory","position","OutletPosition","store","stacked","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","IntersectionService","isIntersected","element","intersects","Observable","observer","rootMargin","getRootMargin","intersectionObserver","IntersectionObserver","entries","observe","disconnect","flatMap","entry","isIntersecting","layoutConfig","deferredLoading","intersectionMargin","DeferLoaderService","intersectionService","globalLoadStrategy","strategy","shouldLoadInstantly","elementLoadingStrategy","DEFER","OutletDirective","vcr","deferLoaderService","cxOutletDefer","render","getHostElement","renderOutlet","cxOutlet","isArray","tmplOrFactory","ComponentFactory","createComponent","createEmbeddedView","$implicit","cxOutletContext","markForCheck","HTMLElement","parentElement","ViewContainerRef","OutletModule","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","split","script","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","DOCUMENT","CxApiService","auth","cart","cartData","checkout","checkoutDelivery","checkoutPayment","pageMeta","featureConfig","globalMessage","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","ngZone","AuthService","CartService","CartDataService","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","PageMetaService","FeatureConfigService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserConsentService","UserOrderService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","NgZone","ComponentWrapperDirective","componentMapper","dynamicAttributeService","shouldRenderComponent","cxComponentWrapper","launchWebComponent","launchComponent","cmpRef","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","P","reject","fulfilled","rejected","uid","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","DynamicAttributeService","PageComponentModule","PageSlotComponent","isPending","hasComponents","isPageFold","position$","components$","getContentSlot","addSmartEditSlotClass","components","pendingComponentCount","isLoaded","loadState","getComponentDeferOptions","getDeferLoadingStrategy","PageSlotModule","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","useFactory","APP_INITIALIZER","cmsRoute","addCmsRoute","ɵ0","CmsRouteModule","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","title","description","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","JsonLdScriptFactory","rendererFactory","build","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","JSON","stringify","scriptElement","getElementById","createRenderer","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","sanitizer","writeJsonLd","html","jsonLD","bypassSecurityTrustHtml","DomSanitizer","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","brand","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","stock","stockLevelStatus","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","Date","datePublished","getFullYear","getMonth","getDate","headline","reviewRating","toString","CurrentProductService","productService","features","PRODUCT_SCOPE","isLevel","getProduct","getRouterState","params","productCode","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","AsmComponentService","authService","asmAuthService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","go","cxRoute","isCustomerEmulationSessionInProgress","mergeMap","userToken","localStorage","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","password","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","encapsulation","ViewEncapsulation","None","AsmEnablerService","isUiAdded","isEnabled","addUi","isLaunched","isUsedBefore","setItem","getItem","Location","AsmLoaderModule","asmFactory","asmEnablerService","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","seconds","slice","Pipe","CSAgentLoginFormComponent","fb","submitClicked","csAgentTokenLoading","submitEvent","group","Validators","required","onSubmit","controls","isNotValid","FormBuilder","CustomerEmulationComponent","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","query","pageSize","maxResults","selectCustomerFromList","setValue","onDocumentClick","resultList","contains","closeResults","host","(document:click)","AsmService","AsmModule","AsmCoreModule","AddedToCartDialogComponent","cartService","modalIsOpen","quantity","entry$","setControl","createEntryFormGroup","markAsPristine","dismissModal","removeEntry","updateEntry","entryNumber","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","cartEntry$","getEntry","setStockInfo","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","getLoaded","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","isReadOnly","vouchers","sort","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","cartId","OCC_USER_ID_ANONYMOUS","guid","cartIsLoading$","resetAddVoucherProcessingState","couponCode","submitDisabled$","valid","getAddVoucherResultLoading","btnEnabled","addVoucherIsLoading","getAddVoucherResultSuccess","success","onSuccess","reset","applyVoucher","addVoucher","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","potentialProductPromotions","_items","getPotentialProductPromotionsForItem","entryPromotions","promotion","consumedEntries","_e","e_2","_f","consumedEntry","isConsumedByEntry","consumedEntryNumber","orderEntryNumber","CartItemComponent","compact","isProductOutOfStock","updateItem","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","entries$","getEntries","cartLoaded$","getAllPromotionsForCart","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","appliedProductPromotions","CartDetailsModule","CartComponent","CartNotEmptyGuard","isEmpty","totalItems","CartPageLayoutHandler","CartTotalsComponent","CartTotalsModule","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","isUserLoggedIn","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","CartComponentModule","CartModule","FREE","LEAST_EXPENSIVE","MOST_EXPENSIVE","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","steps","routeName","CheckoutStepType","express","defaultDeliveryMode","DeliveryModePreferences","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","leastExpensiveFound","deliveryMode","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","snapshot","stepRoute","getRouteConfig","paths","findIndex","CheckoutConfig","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutService","checkoutDeliveryService","checkoutPaymentService","cartId$","getCheckoutDetailsLoaded$","loadCheckoutDetails","shareReplay","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","selectedCountry$","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","goBack","closeForm","payment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","year","j","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","catch","verifyAddress","paymentDetails","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","getCardIcon","msg","field","cardLabels","img","actions","header","goNext","goPrevious","paymentMethodSelected","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","getOrderDetails","order","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","cards","goTo","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","tempAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","addressSelected","addNewAddress","setAddressSub","selectedAddressSub","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","layoutModules","LayoutModule","ConsentManagementFormComponent","consentGiven","isAnonymousConsentsEnabled","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","isFeatureEnabled","ANONYMOUS_CONSENTS_FEATURE","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","navigateSubscription","val","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tab","select","tabNum","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","featureConfigService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","onError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","OrderDetailsService","userOrderService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","bufferSize","refCount","OrderDetailHeadlineComponent","orderDetailsService","order$","OrderDetailItemsComponent","getConsignmentProducts","consignment","products","orderEntry","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentStatus","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","moduleComponents","ɵ1","OrderDetailsModule","forChild","ɵ0$1","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","isLoaded$","getOrderHistoryListLoaded","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","AccountOrderHistoryComponent","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","validator","queryParams","isPasswordReset","resetPassword","ac","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","sortMapping","byNameAsc","byNameDesc","sortOptions","interests$","getAndLoadProductInterests","interests","count","totalResults","totalCount","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","getLoading","removeLoading","sortLabels","removeInterest","relation","removeProdutInterest","productInterestEntry","sortChange","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","child","loadNavigationItems","node","populateLink","itemType","linkName","getLink","categoryCode","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","relatedTarget","ownerDocument","activeElement","matches","wrapper","querySelector","navBar","removeStyle","offsetLeft","offsetWidth","setStyle","navs","tagName","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","search","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","launchSearchPage","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","ignoreCloseEvent","results$","config$","c","blur","avoidReopen","launchSearchResult","disableClose","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","submit","registerGuest","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","productCodes","ProductCarouselModule","ProductReferencesComponent","current","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","active","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","thumbs","isThumbsEmpty","mainImage$","openImage","isActive","thumbnail","zoom","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","scrollIntoView","behavior","click","h3Elements","h3Element","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_CATEGORY","RELEVANCE_BRAND","searchResults$","searchResult","searchByRouting$","x","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","Grid","List","ProductViewComponent","modeChange","viewMode","toLowerCase","newMode","ViewModes","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","visible","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","ProductGridItemComponent","ProductListItemComponent","ProductListModule","CMSProductListComponent","SearchResultsListComponent","ProductRefinementComponent","InfiniteScrollModule","INTRO","PRICE","SHARE","SUMMARY","ProductSummaryComponent","outlets","ProductDetailOutlets","ProductSummaryModule","ProductAttributesComponent","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","alias","reviewerName","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","changes","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","viewStore","prepareRouteUrl","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","markerIndex","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","block","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","onKey","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","emailConfirmation","emailsMatch","isEmailConfirmInvalid","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","routeState","history","prefillForm","login","authorize","markAsTouched","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","ɵ0$2","LogoutModule","RegisterComponent","isNewRegisterFlowEnabled","isAnonymousConsentEnabled","userRegistrationForm","newsletter","isConsentRequired","termsandconditions","requiredTrue","getRegisterUserResultLoading","registerUserProcessInit","getRegisterUserResultSuccess","collectDataFromRegisterForm","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","formData","onRegisterUserSuccess","resetRegisterUserProcessState","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","ɵ0$3","ɵ1$1","ProductDetailsPageModule","matcher","ɵ0$4","ɵ1$2","ɵ2","ɵ3","ProductListingPageModule","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","SearchResultsListPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","pages","defaultStorefrontRoutesConfig","home","notFound","protected","forgotPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","termsAndConditions","defaultRoutingConfig","RoutingModule","CoreRoutingModule","StorefrontFoundationModule","StateModule","AuthModule","ConfigInitializerModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","scrollPositionRestoration","anchorScrolling","StoreModule","runtimeChecks","strictStateImmutability","strictStateSerializability","strictActionImmutability","strictActionSerializability","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","withConfigFactory","LANGUAGE","CURRENCY"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  isFeatureLevel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.config, '1.3');\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                consent.consentState == null ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(_ => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map(totalWidth => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","import { DeferLoadingStrategy } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else {\n      return null;\n    }\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges, OnDestroy {\n  @ViewChild('itemCounterInput', { static: false })\n  public input: ElementRef;\n  @ViewChild('incrementBtn', { static: false })\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn', { static: false })\n  public decrementBtn: ElementRef;\n\n  @Input()\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  subscription: Subscription;\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.subscription = this.inputValue.valueChanges\n      .pipe(debounceTime(300))\n      .subscribe(value => {\n        if (value) {\n          this.manualChange(Number(value));\n        }\n      });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return incomingValue < this.min || !this.min\n      ? this.min\n      : incomingValue > this.max || !this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    value = value.replace(/[^0-9]+/g, '');\n    this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    return e.key;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OnlyNumberDirective } from './only-number.directive';\n\n@NgModule({\n  declarations: [OnlyNumberDirective],\n  exports: [OnlyNumberDirective],\n})\nexport class OnlyNumberDirectiveModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ItemCounterComponent } from './item-counter.component';\nimport { OnlyNumberDirectiveModule } from '../../directives/only-number/only-number.directive.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    OnlyNumberDirectiveModule,\n  ],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Input() hideOnSinglePage = false;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n\n  showPagination() {\n    return !(this.hideOnSinglePage && this.pagination.totalPages <= 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(_ =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter(loaded => loaded),\n      switchMap(_ => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap(dataLoaded => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: `\n    <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container>\n  `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    ConfigModule.withConfig(defaultQualtricsConfig),\n  ],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter(s => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(el: ElementRef, renderer: Renderer2); // tslint:disable-line\n  /**\n   * @deprecated since version 1.0.2\n   *  Use constructor(el: ElementRef, renderer: Renderer2) instead\n   *\n   *  TODO(issue:#3803) deprecated since 1.0.2\n   */\n  constructor(el: ElementRef);\n  constructor(protected el: ElementRef, protected renderer?: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      // TODO(issue:#3803) deprecated since 1.0.2\n      if (this.renderer) {\n        this.renderer.setAttribute(\n          this.el.nativeElement,\n          'style',\n          `--star-fill:${value || this.initialRate};`\n        );\n      } else {\n        this.el.nativeElement.style.setProperty(\n          '--star-fill',\n          value || this.initialRate\n        );\n      }\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { FormGroup, AbstractControl } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Validates a field of the given form group\n   *\n   * If the field is NOT valid (or invalid), the method returns `true`.\n   *\n   * @param form Form with fields to check\n   * @param formControlName Name of the form field to check\n   * @param submitted Has the form been submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    const control: AbstractControl = form.get(formControlName);\n    return control.invalid && (submitted || (control.touched && control.dirty));\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(EMAIL_PATTERN) ? null : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(PASSWORD_PATTERN) ? null : { InvalidPassword: true };\n  }\n\n  static matchPassword(control: AbstractControl): { NotEqual: boolean } {\n    if (control.get('password').value !== control.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  ConfigModule,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map(breakpoint => {\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter(slot => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(page => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap(templateName =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  ProtectedRoutesGuard,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService,\n    protectedRoutesGuard: ProtectedRoutesGuard // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since version 1.2.0\n   * Use constructor with more dependencies and make them all required.\n   *\n   * TODO(issue:4646) deprecated since version 1.2.0\n   */\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService\n  );\n  constructor(\n    // expose as `protected` only services from public API:\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutesGuard?: ProtectedRoutesGuard\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:4646) Expect that `ProtectedRoutesGuard` dependency is required (remove `if` logic)\n     */\n    return this.protectedRoutesGuard\n      ? this.protectedRoutesGuard\n          .canActivate(route)\n          .pipe(\n            switchMap(result =>\n              result ? this.getCmsPage(route, state) : of(result)\n            )\n          )\n      : this.getCmsPage(route, state);\n  }\n\n  private getCmsPage(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.getPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap(notFoundPage => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, (T)[]>();\n  private templatesRefsBefore = new Map<string, (T)[]>();\n  private templatesRefsAfter = new Map<string, (T)[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  private store(store: Map<string, (T)[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned obervable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first(v => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable(observer => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin };\n      const intersectionObserver = new IntersectionObserver(entries => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options?: IntersectionOptions) {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evalutes whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnInit, OnDestroy {\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>,\n    // tslint:disable-next-line: unified-signatures\n    intersectionService: DeferLoaderService\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(vcr: ViewContainerRef, templateRef: TemplateRef<any>, outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>, intersectionService?: IntersectionService) instead\n   */\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>\n  );\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService?: DeferLoaderService\n  ) {}\n\n  ngOnInit(): void {\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.render();\n    }\n  }\n\n  private deferLoading() {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // allthought the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.render();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private render() {\n    this.renderOutlet(OutletPosition.BEFORE);\n    this.renderOutlet(OutletPosition.REPLACE);\n    this.renderOutlet(OutletPosition.AFTER);\n  }\n\n  private renderOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    templates.forEach(obj => {\n      this.create(obj);\n    });\n  }\n\n  private create(tmplOrFactory: any): void {\n    if (tmplOrFactory instanceof ComponentFactory) {\n      this.vcr.createComponent(tmplOrFactory);\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n    }\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent elements of the given element.\n   *\n   * @param element\n   */\n  private getHostElement(element: Element): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentElement);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  AuthService,\n  BaseSiteService,\n  CartDataService,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n  UserNotificationPreferenceService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: CartService,\n    @Optional() public cartData: CartDataService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: cmsComponentData, // TODO: remove / deprecated since 1.0.x\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DeferLoadingStrategy,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\n\n@Component({\n  selector: 'cx-page-slot',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  // need to have this host binding at the top as it will override the entire class\n  @HostBinding('class') @Input() set position(position: string) {\n    this.position$.next(position);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  @HostBinding('class.cx-pending') isPending = true;\n  @HostBinding('class.has-components') hasComponents = false;\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  private pendingComponentCount: number;\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  components$: Observable<ContentSlotComponentData[]> = this.position$.pipe(\n    switchMap(position =>\n      this.cmsService.getContentSlot(position).pipe(\n        tap(slot => this.addSmartEditSlotClass(slot)),\n        map(slot => (slot && slot.components ? slot.components : [])),\n        distinctUntilChanged(\n          (a, b) =>\n            a.length === b.length &&\n            !a.find((el, index) => el.uid !== b[index].uid)\n        )\n      )\n    )\n  );\n\n  private subscription = new Subscription();\n\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef,\n    // tslint:disable-next-line:unified-signatures\n    config: CmsConfig\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(cmsService: CmsService, dynamicAttributeService: DynamicAttributeService, renderer: Renderer2, hostElement: ElementRef, config?: CmsConfig) instead\n   */\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef\n  );\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef,\n    protected config?: CmsConfig\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.components$.subscribe(components => {\n        this.hasComponents = components && components.length > 0;\n        this.pendingComponentCount = components ? components.length : 0;\n        this.isPending = this.pendingComponentCount > 0;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n   * Is triggered when a component is added to the view.\n   * We use this information to dropthe `is-pending` class from the page slot\n   * when all nested components have been added.\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pendingComponentCount--;\n    }\n    this.isPending = this.pendingComponentCount > 0;\n  }\n\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.getDeferLoadingStrategy(componentType);\n    return { deferLoading };\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether component rendering\n   * should be deferred.\n   */\n  private getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    if (this.config) {\n      return ((this.config as CmsConfig).cmsComponents[componentType] || {})\n        .deferLoading;\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = JSON.stringify(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const html = `<script type=\"application/ld+json\">${JSON.stringify(\n        schema\n      )}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(this.builders.map(builder => builder.build())).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map(review => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter(rev => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter(rev => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${date.getMonth() +\n        1}-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  FeatureConfigService,\n  Product,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService,\n    protected features?: FeatureConfigService\n  ) {}\n\n  protected readonly PRODUCT_SCOPE =\n    this.features && this.features.isLevel('1.4') ? ['details'] : '';\n\n  getProduct(): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) =>\n        this.productService.get(productCode, this.PRODUCT_SCOPE)\n      )\n    );\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      startWith(null as Product),\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map(builder => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe(token => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap(userToken =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe(customerSupportAgentToken =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import { Location } from '@angular/common';\nimport {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injectable,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { OutletPosition, OutletService } from '../../../cms-structure/index';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\nimport { AsmMainUiComponent } from '../asm-main-ui/asm-main-ui.component';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  /** indicates whether the ASM UI has been added already */\n  private isUiAdded = false;\n\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletService: OutletService<ComponentFactory<any>>\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  private isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  private isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  private isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  private addUi(): void {\n    if (this.isUiAdded) {\n      return;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      AsmMainUiComponent\n    );\n    this.outletService.add('cx-storefront', factory, OutletPosition.BEFORE);\n    this.isUiAdded = true;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/index';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe(isNavigating => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(_ => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  form: FormGroup;\n  private submitClicked = false;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submitEvent.emit({\n      userId: this.form.controls.userId.value,\n      password: this.form.controls.password.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe(user => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList', { static: false }) resultList: ElementRef;\n  @ViewChild('searchTerm', { static: false }) searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      searchTerm: [''],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.form.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe(searchTermValue => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.form.controls.searchTerm.setValue(this.selectedCustomer.name);\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsmModule as AsmCoreModule, I18nModule } from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  modalIsOpen = false;\n\n  quantity = 0;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n          if (!this.modalIsOpen) {\n            this.modalIsOpen = true;\n          }\n        }\n      })\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  constructor(\n    cartService: CartService,\n    modalService: ModalService,\n    currentProductService: CurrentProductService,\n    cd: ChangeDetectorRef\n  );\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.cartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.cartService.addEntry(this.productCode, this.quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Cart,\n  CartService,\n  CartVoucherService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Subscription } from 'rxjs/internal/Subscription';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  submitDisabled$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n\n  private subscription = new Subscription();\n\n  constructor(\n    private cartService: CartService,\n    private authService: AuthService,\n    private cartVoucherService: CartVoucherService,\n    private formBuilder: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = combineLatest([\n      this.cartService.getActive(),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(\n        ([cart, userId]: [Cart, string]) =>\n          (this.cartId =\n            userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code)\n      ),\n      map(([cart]: [Cart, string]) => cart)\n    );\n\n    this.cartIsLoading$ = this.cartService\n      .getLoaded()\n      .pipe(map(loaded => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.form = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    this.submitDisabled$ = combineLatest([\n      this.cartIsLoading$,\n      this.form.valueChanges.pipe(\n        startWith(true),\n        map(() => this.form.valid)\n      ),\n      this.cartVoucherService.getAddVoucherResultLoading(),\n    ]).pipe(\n      map(\n        ([cartIsLoading, btnEnabled, addVoucherIsLoading]) =>\n          cartIsLoading || !btnEnabled || addVoucherIsLoading\n      )\n    );\n\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe(success => {\n          this.onSuccess(success);\n        })\n    );\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.form.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  applyVoucher(): void {\n    this.cartVoucherService.addVoucher(this.form.value.couponCode, this.cartId);\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { CartService, PromotionResult } from '@spartacus/core';\nimport { Item } from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  set items(_items) {\n    this._items = _items;\n    this.items.forEach(item => {\n      const { code } = item.product;\n      if (!this.form.controls[code]) {\n        this.form.setControl(code, this.createEntryFormGroup(item));\n      } else {\n        const entryForm = this.form.controls[code] as FormGroup;\n        entryForm.controls.quantity.setValue(item.quantity);\n      }\n    });\n  }\n\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  private _items: Item[] = [];\n\n  get items(): Item[] {\n    return this._items;\n  }\n\n  constructor(protected cartService: CartService, protected fb: FormBuilder) {}\n\n  // TODO remove for 2.0 - left to keep backward compatibility\n  ngOnInit(): void {}\n\n  removeEntry(item: Item): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n  @Input()\n  potentialProductPromotions: any[];\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  ngOnInit() {}\n\n  isProductOutOfStock(product) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = this.cartService.getLoaded();\n  }\n\n  getAllPromotionsForCart(cart: Cart): any[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n    potentialPromotions.push(...(cart.potentialProductPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n    appliedPromotions.push(...(cart.appliedProductPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Cart, CartService, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.cartService.getActive(),\n      this.cartService.getLoaded(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(private cartService: CartService) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([slots$, this.cartService.getActive()]).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter(product => Boolean(product)),\n    tap(product => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter(wishlist => Boolean(wishlist)),\n    map(wishList => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find(entry => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n    I18nModule,\n    IconModule,\n    RouterModule,\n    UrlModule,\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\n\n@NgModule({\n  imports: [NgbModule, CartDetailsModule, CartTotalsModule, CartSharedModule],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          deliveryMode => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          deliveryMode => deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  CartService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private cartService: CartService,\n    private checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.cartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.cartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.cartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find(address => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find(address => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map(data => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { CartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService,\n    checkoutConfigService: CheckoutConfigService,\n    expressCheckoutService: ExpressCheckoutService,\n    cartService: CartService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(router: Router,\n   *  config: CheckoutConfig - @deprecated since 2.x,\n   *  routingConfigService: RoutingConfigService,\n   *  checkoutConfigService: CheckoutConfigService,\n   *  expressCheckoutService: ExpressCheckoutService\n   *  cartService: CartService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService\n  );\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService,\n    protected checkoutConfigService?: CheckoutConfigService,\n    protected expressCheckoutService?: ExpressCheckoutService,\n    protected cartService?: CartService\n  ) {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (this.checkoutConfigService) {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.checkoutConfigService.getFirstCheckoutStepRoute()\n          ).paths[0]\n        )\n      );\n    } else {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.config.checkout.steps[0].routeName\n          ).paths[0]\n        )\n      );\n    }\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.checkoutConfigService &&\n      this.expressCheckoutService &&\n      this.cartService\n    ) {\n      if (\n        this.checkoutConfigService.isExpressCheckout() &&\n        !this.cartService.isGuestCart()\n      ) {\n        return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n          switchMap((expressCheckoutPossible: boolean) => {\n            return expressCheckoutPossible\n              ? of(\n                  this.router.parseUrl(\n                    this.routingConfigService.getRouteConfig(\n                      this.checkoutConfigService.getCheckoutStepRoute(\n                        CheckoutStepType.REVIEW_ORDER\n                      )\n                    ).paths[0]\n                  )\n                )\n              : this.firstStep$;\n          })\n        );\n      }\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address !== undefined &&\n          address.country !== undefined &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n  CartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService,\n    cartService: CartService // tslint:disable-line\n  );\n  /**\n   * @deprecated since 1.x\n   * NOTE: check issue:#1181 for more info\n   *\n   * TODO(issue:#1181) Deprecated since 1.x\n   */\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService\n  );\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected cartService?: CartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.cartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use selectPaymentMethod() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  paymentMethodSelected(paymentDetails: PaymentDetails): void {\n    this.selectPaymentMethod(paymentDetails);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/index';\nimport { CheckoutStepType } from '../../model/index';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * NOTE: check issue:#4121 for more info\n   *\n   * TODO(issue:#4121) Deprecated since 1.1.0\n   */\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService\n  );\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    // TODO(issue:#4121) Deprecated since 1.1.0\n    if (this.checkoutConfigService) {\n      const step = this.checkoutConfigService.getCheckoutStep(stepType);\n\n      return step && step.routeName;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.address.controls['region'].value.isocode) {\n      this.regionsSub = this.regions$.pipe(take(1)).subscribe(regions => {\n        const obj = regions.find(\n          region =>\n            region.isocode === this.address.controls['region'].value.isocode\n        );\n        Object.assign(this.address.value.region, {\n          isocodeShort: obj.isocodeShort,\n        });\n      });\n    }\n\n    if (this.address.dirty) {\n      this.checkoutDeliveryService.verifyAddress(this.address.value);\n    } else {\n      // address form value not changed\n      // ignore duplicate address\n      this.submitAddress.emit(undefined);\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\nimport { CheckoutStepType } from '../..';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use cards$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  cards: Card[] = [];\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  goTo: CheckoutStepType = null;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddress: Address;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getNextCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n    this.activatedRoute\n  );\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getPreviousCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlPrevious = 'cart';\n\n  isGuestCheckout = false;\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddress: Address;\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected ||\n              Object.keys(selected).length === 0 ||\n              !this.selectedAddress)\n          ) {\n            const defaultAddress = addresses.find(\n              address => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.cartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.selectedAddress = address;\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addAddress(address: { newAddress: boolean; address: Address } | any);\n  addAddress(\n    address: Address | { newAddress: boolean; address: Address }\n  ): void {\n    // TODO(issue:#3921) deprecated since 1.3 - Remove temp address\n    const tempAddress: Address = address['address']\n      ? address['address']\n      : address;\n\n    const selectedSub = this.selectedAddress$.subscribe(selected => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    // TODO(issue:#3921) deprecated since 1.3 - Remove this condition\n    if (address['address'] || address['newAddress']) {\n      address['newAddress']\n        ? this.checkoutDeliveryService.createAndSetAddress(tempAddress)\n        : this.selectAddress(tempAddress);\n    } else {\n      // TODO(issue:#3921) deprecated since 1.3 - Use instead of condition\n      this.existingAddresses$.pipe(take(1)).subscribe(addresses => {\n        addresses.includes(tempAddress)\n          ? this.selectAddress(tempAddress)\n          : this.checkoutDeliveryService.createAndSetAddress(tempAddress);\n      });\n    }\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addressSelected(address: Address): void {\n    this.selectAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addNewAddress(address: Address): void {\n    this.addAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Remove.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { AuthService, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private cartService: CartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.cartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\nconst layoutModules = [OutletRefModule];\n\n@NgModule({\n  imports: [...layoutModules],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [...layoutModules],\n})\nexport class LayoutModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  isAnonymousConsentsEnabled = false;\n\n  @Input()\n  consent: AnonymousConsent;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  @Input()\n  isLevel13 = false;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.isAnonymousConsentsEnabled && this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.isAnonymousConsentsEnabled\n      ? this.requiredConsents.includes(templateId)\n      : false;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  isFeatureEnabled,\n  isFeatureLevel,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  isAnonymousConsentsEnabled = isFeatureEnabled(\n    this.anonymousConsentsConfig,\n    ANONYMOUS_CONSENTS_FEATURE\n  );\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.anonymousConsentsConfig, '1.3');\n\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    anonymousConsentsService: AnonymousConsentsService,\n    authService: AuthService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   ```ts\n   constructor(\n     userConsentService: UserConsentService,\n     globalMessageService: GlobalMessageService,\n     anonymousConsentsConfig : AnonymousConsentsConfig,\n     anonymousConsentsService : AnonymousConsentsService,\n     authService: AuthService,\n   ) \n   ```\n   */\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService\n  );\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService,\n    private anonymousConsentsConfig?: AnonymousConsentsConfig,\n    private anonymousConsentsService?: AnonymousConsentsService,\n    private authService?: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (!this.isAnonymousConsentsEnabled) {\n          return templateList;\n        }\n\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map(template => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    if (!this.isAnonymousConsentsEnabled) {\n      return false;\n    }\n\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/index';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/index';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletModule, OutletRefModule } from '../../cms-structure/index';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map(data => data.banners.trim().split(' ')),\n    map(codes => codes.map(code => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/index';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n    PageComponentModule,\n    CarouselModule,\n    MediaModule,\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsService, CMSTabParagraphContainer } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent {\n  activeTabNum = 0;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n              return {\n                ...tab,\n                title: `CMSTabParagraphContainer.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe(error => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order, Consignment, OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    RouterModule.forChild([\n      {\n        path: 'guest/order/:orderCode',\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    SpinnerModule,\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n})\nexport class OrderHistoryComponent implements OnInit, OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  orders$: Observable<OrderHistoryList>;\n  isLoaded$: Observable<boolean>;\n\n  private PAGE_SIZE = 5;\n\n  sortType: string;\n\n  ngOnInit(): void {\n    this.orders$ = this.userOrderService\n      .getOrderHistoryList(this.PAGE_SIZE)\n      .pipe(\n        tap((orders: OrderHistoryList) => {\n          if (orders.pagination) {\n            this.sortType = orders.pagination.sort;\n          }\n        })\n      );\n\n    this.isLoaded$ = this.userOrderService.getOrderHistoryListLoaded();\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { NgModule } from '@angular/core';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { OrderDetailsModule } from './order-details/order-details.module';\n\n@NgModule({\n  imports: [OrderHistoryModule, OrderDetailsModule],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap(preferences => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach(p => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [\n    CommonModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          interests =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map(interest => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map(result => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, 'details');\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  UrlModule,\n  AuthGuard,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta && meta.breadcrumbs\n          ? meta.breadcrumbs\n          : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(data => !!data),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            }\n          }),\n          filter(Boolean),\n          map(items => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach(child =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map(child => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      this.openNodes = this.openNodes.filter(n => n !== node);\n      this.renderer.removeClass(node, 'is-open');\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  ANONYMOUS_CONSENTS_FEATURE,\n  CmsNavigationComponent,\n  isFeatureEnabled,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  // in order to preserve the backwards compatibility, this should render only if anonymous consents feature is disabled\n  data$ = this.componentData.data$.pipe(\n    filter(\n      _ =>\n        !isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        )\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService,\n    // tslint:disable-next-line: unified-signatures\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   * \n    ```ts\n      constructor(\n      componentData: CmsComponentData<CmsNavigationComponent>,\n      service: NavigationService,\n      anonymousConsentsConfig: AnonymousConsentsConfig\n    )\n    ```\n   */\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService\n  );\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(_ => Boolean(deliveryAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(_ => Boolean(deliveryMode)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(_ => Boolean(billingAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(_ => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap(order => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    this.userService.registerGuest(\n      this.guid,\n      this.guestRegisterForm.value.password\n    );\n    if (!this.subscription) {\n      this.subscription = this.authService.getUserToken().subscribe(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    I18nModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  FeatureConfigService,\n  Product,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE =\n    this.features && this.features.isLevel('1.4') ? 'list' : '';\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map(data => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map(data => data.productCodes.trim().split(' ')),\n    map(codes =>\n      codes.map(code => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService,\n    protected features?: FeatureConfigService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map(ref => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  isThumbsEmpty: boolean;\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map(product => this.createThumbs(product)),\n    tap(thumbs => {\n      this.isThumbsEmpty = thumbs.length === 0;\n    })\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n    CarouselModule,\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('CMSTabParagraphContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_CATEGORY = ':relevance:category:';\n  protected readonly RELEVANCE_BRAND = ':relevance:brand:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(\n    pluck(0),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_CATEGORY + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_BRAND + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe(route => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Subscription, Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\nimport { ViewConfig } from '../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n        this.viewMode$.next(\n          template === 'ProductGridPageTemplate'\n            ? ViewModes.Grid\n            : ViewModes.List\n        );\n      })\n    );\n  }\n\n  viewPage(pageNumber: number): void {\n    this.productListComponentService.viewPage(pageNumber);\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<ViewConfig>defaultScrollConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { CurrentProductService } from '../../current-product.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(p => !!p),\n    map(p => p.code),\n    distinctUntilChanged(),\n    switchMap(productCode => this.reviewService.getByProductCode(productCode)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe(success => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(interests => !!interests.results && interests.results.length === 1)\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap(prefs => (this.enabledPrefs = prefs)),\n        map(prefs => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe(error => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe(success => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe(text =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    I18nModule,\n    SpinnerModule,\n    UrlModule,\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RoutingService, StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      markerIndex => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap', { static: false })\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe(params =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { AuthRedirectService, CartService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  form: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    { validator: this.emailsMatch }\n  );\n\n  sub: Subscription;\n\n  private submitClicked = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cartService: CartService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isEmailConfirmInvalid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('emailConfirmation').touched &&\n          this.form.get('emailConfirmation').dirty))\n    );\n  }\n\n  onSubmit() {\n    this.submitClicked = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const email = this.form.value.email;\n    this.cartService.addEmail(email);\n\n    if (!this.sub) {\n      this.sub = this.cartService.getAssignedUser().subscribe(_ => {\n        if (this.cartService.isGuestCart()) {\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private emailsMatch(abstractControl: AbstractControl): { NotEqual: boolean } {\n    return abstractControl.get('email').value !==\n      abstractControl.get('emailConfirmation').value\n      ? { NotEqual: true }\n      : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService,\n    winRef: WindowRef, // tslint:disable-line,\n    activatedRoute: ActivatedRoute,\n    checkoutConfigService: CheckoutConfigService\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * Use constructor(\n   * auth: AuthService,\n   * globalMessageService: GlobalMessageService,\n   * fb: FormBuilder,\n   * authRedirectService: AuthRedirectService,\n   *  winRef: WindowRef,\n   * activatedRoute: ActivatedRoute,\n   * checkoutConfigService: CheckoutConfigService) instead\n   *\n   * TODO(issue:#4055) Deprecated since 1.1.0\n   */\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService\n  );\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService,\n    private winRef?: WindowRef,\n    private activatedRoute?: ActivatedRoute,\n    private checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n\n    if (\n      this.checkoutConfigService &&\n      this.checkoutConfigService.isGuestCheckout()\n    ) {\n      this.loginAsGuest = this.activatedRoute.snapshot.queryParams['forced'];\n    }\n\n    // TODO(issue:#4055) Deprecated since 1.1.0\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['newUid'] && routeState['newUid'].length) {\n        this.prefillForm('userId', routeState['newUid']);\n      }\n    }\n  }\n\n  login(): void {\n    const { userId, password } = this.form.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private prefillForm(field: string, value: string): void {\n    this.form.patchValue({\n      [field]: value,\n    });\n\n    this.form.get(field).markAsTouched(); // this action will check field validity on load\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap(isUserLoggedIn => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n  ProtectedRoutesService,\n  FeatureConfigService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  /**\n   * @deprecated since 1.4\n   * Check #5666 for more info\n   *\n   * TODO(issue:5666) Deprecated since 1.4\n   */\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes?: ProtectedRoutesService,\n    protected featureConfig?: FeatureConfigService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  protected redirect(): void {\n    // TODO(issue:5666) Deprecated since 1.4\n    const cxRoute: string =\n      this.featureConfig.isLevel('1.4') &&\n      this.protectedRoutes &&\n      this.protectedRoutes.shouldProtect\n        ? 'login'\n        : 'home';\n\n    this.routing.go({ cxRoute });\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthRedirectService,\n  AuthService,\n  ConsentTemplate,\n  FeatureConfigService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles } from '../../../shared/utils/forms/title-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  // TODO(issue:4237) Register flow\n  isNewRegisterFlowEnabled: boolean =\n    this.featureConfig && this.featureConfig.isLevel('1.1');\n\n  isAnonymousConsentEnabled =\n    this.featureConfig &&\n    this.featureConfig.isEnabled(ANONYMOUS_CONSENTS_FEATURE);\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isAnonymousConsentEnabled\n          ? this.isConsentRequired()\n          : false,\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    // tslint:disable-next-line:unified-signatures\n    router: RoutingService,\n    featureConfig: FeatureConfigService,\n    anonymousConsentsService: AnonymousConsentsService,\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   *\n   * Use constructor(\n   * protected auth: AuthService,\n   * protected authRedirectService: AuthRedirectService,\n   * protected userService: UserService,\n   * protected globalMessageService: GlobalMessageService,\n   * protected fb: FormBuilder,\n   * protected router?: RoutingService,\n   * protected featureConfig?: FeatureConfigService,\n   * protected anonymousConsentsService?: AnonymousConsentsService,\n   * protected anonymousConsentsConfig?: AnonymousConsentsConfig) instead\n   *\n   * TODO(issue:4237) Register flow\n   * TODO(issue:4989) Anonymous consents\n   */\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder\n  );\n  constructor(\n    protected auth: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router?: RoutingService,\n    protected featureConfig?: FeatureConfigService,\n    protected anonymousConsentsService?: AnonymousConsentsService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    // TODO(issue:4237) Register flow\n    if (this.isNewRegisterFlowEnabled) {\n      this.loading$ = this.userService.getRegisterUserResultLoading();\n      this.registerUserProcessInit();\n    } else {\n      if (this.auth && this.authRedirectService) {\n        this.subscription.add(\n          this.userService\n            .getRegisterUserResultSuccess()\n            .subscribe((success: boolean) => {\n              if (success) {\n                const { uid, password } = this.collectDataFromRegisterForm(\n                  this.userRegistrationForm.value\n                );\n                this.auth.authorize(uid, password);\n              }\n            })\n        );\n        this.subscription.add(\n          this.auth.getUserToken().subscribe(data => {\n            if (data && data.access_token) {\n              this.globalMessageService.remove(\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n              this.authRedirectService.redirect();\n            }\n          })\n        );\n      }\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(messages => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some(message => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    if (\n      this.isAnonymousConsentEnabled &&\n      Boolean(this.anonymousConsentsConfig) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent)\n    ) {\n      this.anonymousConsent$ = combineLatest([\n        this.anonymousConsentsService.getConsent(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n        this.anonymousConsentsService.getTemplate(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n      ]).pipe(\n        map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n          return {\n            consent,\n            template: template.description,\n          };\n        })\n      );\n\n      this.subscription.add(\n        this.userRegistrationForm\n          .get('newsletter')\n          .valueChanges.subscribe(_ => {\n            this.toggleAnonymousConsent();\n          })\n      );\n    }\n  }\n\n  submit(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.userRegistrationForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.userRegistrationForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    if (\n      Boolean(this.anonymousConsentsService) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.requiredConsents)\n    ) {\n      return this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (this.router && success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    if (Boolean(this.userRegistrationForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    } else {\n      this.anonymousConsentsService.withdrawConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe(success => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    SpinnerModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  Route,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      md: {\n        pageFold: 'UpSelling',\n      },\n      xs: {\n        pageFold: 'Summary',\n      },\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('1.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot(\n      {},\n      {\n        runtimeChecks: {\n          strictStateImmutability: true,\n          strictStateSerializability: true,\n          strictActionImmutability: true,\n          strictActionSerializability: true,\n        },\n      }\n    ),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n"]}