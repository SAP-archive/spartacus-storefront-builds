{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/visible/visible-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/block/block-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.model.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/select-focus.util.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/keyboard-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.module.ts","ng://@spartacus/storefront/layout/launch-dialog/config/launch-config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/launch-dialog/config/default-launch-config.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-dialog.service.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.component.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/inline-render-strategy.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-renderer.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/outlet-render-strategy.service.ts","ng://@spartacus/storefront/layout/launch-dialog/services/routing-render-strategy.service.ts","ng://@spartacus/storefront/layout/launch-dialog/launch-dialog.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/recipes/config/optional-layouts/plp-accessibility-layout-config.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","ICON_TYPE","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","ar","error","__spread","concat","IconResourceType","SkipLinkScrollPosition","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","resources","type","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getStyleClasses","iconType","resourceType","config","find","res","types","includes","svgResource","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","IconConfig","DomSanitizer","Injectable","providedIn","IconComponent","iconLoader","elementRef","renderer","setIcon","addStyleClasses","_this","addClass","host","styleClasses","forEach","cls","removeClass","split","nativeElement","ElementRef","Renderer2","Input","Component","selector","template","IconModule","NgModule","declarations","imports","CommonModule","providers","provideDefaultConfig","provide","useExisting","Config","exports","ModalRef","_super","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","requiredConsents","isLevel13","isFeatureLevel","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","cmsComponents","component","deferLoading","DeferLoadingStrategy","INSTANT","entryComponents","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","console","warn","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","componentType","Promise","resolve","path","script","setAttribute","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","CmsConfig","Inject","args","DOCUMENT","PLATFORM_ID","CxApiService","auth","cart","checkout","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","translation","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","selectiveCartService","ngZone","AuthService","Optional","ActiveCartService","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","CmsService","PageMetaService","FeatureConfigService","GlobalMessageService","TranslationService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","RoutingService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserConsentService","UserOrderService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","SelectiveCartService","NgZone","ComponentWrapperDirective","vcr","componentMapper","injector","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","cmpRef","createComponent","undefined","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","get","element","parentElement","P","reject","fulfilled","rejected","result","then","uid","data$","getComponentData","configProviders","Injector","CmsComponentData","useValue","parent","addDynamicAttributes","properties","destroy","remove","ViewContainerRef","DynamicAttributeService","Directive","PageComponentModule","AsmComponentService","authService","asmAuthService","routingService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","go","cxRoute","isCustomerEmulationSessionInProgress","mergeMap","userToken","of","unload","localStorage","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","globalMessageService","disabled","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","switchMap","access_token","handleCustomerSessionStartRedirection","GlobalMessageType","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","password","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","HostBinding","encapsulation","ViewEncapsulation","None","BaseFocusService","BaseFocusDirective","service","defaultConfig","setDefaultConfiguration","requiredTabindex","tabindex","requiresExplicitTabIndex","indexOf","tagName","toLowerCase","hasAttribute","VisibleFocusDirective","disableMouseFocus","mouseFocus","handleMousedown","shouldFocusVisible","handleKeydown","HostListener","BlockFocusDirective","block","PersistFocusService","focus","Map","group","set","clear","delete","getPersistenceGroup","getAttribute","PersistFocusDirective","handleFocus","event","preventDefault","stopPropagation","attr","ngAfterViewInit","isPersisted","preventScroll","SelectFocusUtility","focusableSelectors","focusableSelectorSuffix","query","from","querySelectorAll","findFirstFocusable","autofocus","el","isHidden","findFocusable","locked","invisible","suffix","map","join","filter","offsetParent","EscapeFocusService","selectFocusUtil","shouldFocus","focusOnEscape","handleEscape","focusOnDoubleEscape","EscapeFocusDirective","esc","EventEmitter","emit","Output","AutoFocusService","hasPersistedFocus","getPersisted","focussed","AutoFocusDirective","shouldAutofocus","firstFocusable","TabFocusService","moveTab","increment","tab","findNextScrollable","findNext","active","getActiveChild","virtualSlideCount","Math","round","scrollWidth","clientWidth","nextVirtualSlide","offsetLeft","getChildren","childs","activeIndex","findIndex","persisted","children","index","isActive","child","activeElement","TabFocusDirective","handleNextTab","handlePreviousTab","TrapFocusService","hasFocusableChildren","moveFocus","focusable","getTrapStart","trap","getTrapEnd","TrapFocusDirective","handleTrapDown","handleTrapUp","LockFocusService","LockFocusDirective","lock","unlock","handleEnter","shouldLock","unlockFocus","handleClick","isLocked","lockFocus","addTabindexToChildren","shouldUnlockAfterAutofocus","setTimeout","toString","KeyboardFocusService","FocusDirective","directives","KeyboardFocusModule","DIALOG_TYPE","LAUNCH_CALLER","SkipLinkService","keyboardFocusService","skipLinks$","BehaviorSubject","getSkipLinks","found","skipLinks","skipLink","existing","splice","getSkipLinkIndexInArray","i18nKey","position","scrollToTarget","HTMLElement","hasTabindex","removeAttribute","previous","this_1","SkipLinkConfig","SkipLinkComponent","skipLinkService","changeDetection","ChangeDetectionStrategy","OnPush","DEFAULT_LAUNCH_CONFIG","launch","ASM","outlet","SKIP_LINKS","LaunchRenderStrategy","renderedCallers","shouldRender","caller","some","multi","_config","LaunchDialogService","renderStrategies","launchConfig","findConfiguration","getStrategy","render","strategy","match","LaunchConfig","AsmEnablerService","launchDialogService","load","isEnabled","addUi","isLaunched","isUsedBefore","setItem","params","getItem","Location","AsmLoaderModule","APP_INITIALIZER","useFactory","asmFactory","deps","asmEnablerService","BREAKPOINT","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","markForCheck","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","floor","seconds","slice","Pipe","name","CSAgentLoginFormComponent","fb","csAgentTokenLoading","submitEvent","csAgentLoginForm","Validators","required","onSubmit","valid","markAllAsTouched","FormBuilder","CustomerEmulationComponent","subscription","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","customerSelectionForm","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","controls","valueChanges","debounceTime","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","pageSize","maxResults","selectCustomerFromList","setValue","onDocumentClick","resultList","contains","closeResults","AsmService","ViewChild","(document:click)","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","CarouselComponent","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","isDevMode","size$","PaginationItemType","PaginationNavigationPosition","LayoutConfig","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","window","getBreakpoint","innerWidth","getSize","breakpoint","breakpoints","xl","isDown","breakpoint$","br","isUp","isEqual","windowWidth","getClosest","nativeWindow","MediaService","breakpointService","code","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","getHighestAvailableFormat","mediaFormat_1","mediaFormats","altText","reduce","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","ItemCounterComponent","min","allowZero","readonly","input","control","markAsDirty","decrement","getControl","_control$","startWith","getValidCount","emitEvent","max","ItemCounterModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","test","GenericLinkModule","defaultPaginationConfig","pagination","addStart","addEnd","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","number","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","BEFORE","AFTER","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","minStart","maxStart","PaginationConfig","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","item","isInactive","getQueryParams","queryParams","snapshot","queryParam","defaultPage","pageChange","page","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","FormsModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","isQualtricsConfigured","initialize","setup","fromEvent","qualtricsScript","defer","idScript","qualtrics","projectId","qsi","isDataLoaded","dataLoaded","API","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data","nativeName","symbol","isocode","ContextServiceMap","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","StarRatingComponent","change","initialRate","setRate","rating","force","saveRate","setRateOnEvent","StarRatingModule","FormErrorsComponent","_control","errors$","statusChanges","errors","entries","invalid","dirty","touched","FormErrorsModule","ViewConfigModule","forRoot","ngModule","ViewConfigModule_1","view","ViewConfig","OrderDetailsService","userOrderService","orderCode$","getRouterState","routingData","state","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","_c","e_2","_d","consumedEntry","isConsumedByEntry","entry","consumedEntryNumber","orderEntryNumber","entryNumber","CustomFormValidators","emailValidator","email","EMAIL_PATTERN","cxInvalidEmail","passwordValidator","PASSWORD_PATTERN","cxInvalidPassword","starRatingEmpty","cxStarRatingEmpty","passwordsMustMatch","passwordConfirmation","formGroup","controlsMustMatch","emailsMustMatch","emailConfirmation","firstControlName","secondControlName","errorName","firstControl","secondControl","setErrors","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","DeliveryModePreferences","AsmModule","AsmCoreModule","CurrentProductService","productService","DEFAULT_PRODUCT_SCOPE","ProductScope","DETAILS","getProduct","scopes","productCode","x","AddedToCartDialogComponent","cartService","promotionService","quantity","modalIsOpen","form","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","addToCartForm","cartEntry$","getEntry","setStockInfo","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","isStable","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","sort","a","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","isLevel","getCustomerCoupons","customerCoupons","cartId","OCC_USER_ID_ANONYMOUS","guid","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponForm","couponCode","getAddVoucherResultSuccess","success","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","addVoucher","applyCustomerCoupon","blur","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","isSaveForLaterEnabled","every","consignmentEntry","orderEntry","updateable","removeEntry","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","cartLoaded$","getLoaded","isUserLoggedIn","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","getCart","slots","selectiveCart","slot","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","features","CartComponentModule","CartModule","CheckoutStepType","CheckoutConfig","OutletPosition","defaultCheckoutConfig","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","paths","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","skipWhile","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","keys","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","router","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","guards","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","withLatestFrom","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","selectedCountry$","goBack","closeForm","paymentForm","cardType","accountHolderName","cardNumber","expiryMonth","expiryYear","cvn","billingAddressForm","firstName","lastName","line1","line2","town","region","isocodeShort","country","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","regions$","getRegions","regions","regionControl","year","Date","getFullYear","j","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","catch","verifyAddress","countrySelected","regionSelected","paymentDetails","billingAddress","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","payment","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","msg","field","cardLabels","title","img","actions","header","goNext","goPrevious","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","checkoutSubmitForm","termsAndConditions","requiredTrue","submitForm","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","addressForm","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","obj","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","templateOrFactory","REPLACE","store","stacked","templateRef","removeValueOrAll","newValue","has","val","SkipLinkModule","ConfigModule","withConfig","skipLinkFactory","outletService","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","InlineRenderStrategy","inline","OutletRefDirective","tpl","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","IntersectionService","isIntersected","intersects","first","Observable","observer","rootMargin","getRootMargin","intersectionObserver","IntersectionObserver","observe","disconnect","flatMap","isIntersecting","layoutConfig","deferredLoading","intersectionMargin","DeferLoaderService","intersectionService","globalLoadStrategy","shouldLoadInstantly","elementLoadingStrategy","DEFER","OutletRendererService","outletRefs","register","cxOutlet","OutletDirective","deferLoaderService","outletRendererService","renderedTemplate","cxOutletDefer","build","changes","hostElement","getHostElement","buildOutlet","isArray","tmplOrFactory","ComponentFactory","createEmbeddedView","$implicit","cxOutletContext","OutletModule","OutletRenderStrategy","RoutingRenderStrategy","_caller","LaunchDialogModule","LaunchDialogModule_1","provideConfig","LayoutModule","PageSlotComponent","cdRef","isPending","hasComponents","isPageFold","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","pendingComponentCount","isLoaded","loadState","getComponentDeferOptions","getDeferLoadingStrategy","PageSlotModule","PageLayoutService","handlers","warnLogMessages","logSlots","getSlots","page$","resolveSlots","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","pageFoldSlot$","templateName","currentClass","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","JsonLdScriptFactory","rendererFactory","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","createRenderer","JSON","stringify","_key","SecurityContext","HTML","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","ConsentManagementFormComponent","consentGiven","isAnonymousConsentsEnabled","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","isFeatureEnabled","ANONYMOUS_CONSENTS_FEATURE","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","keyboardFocusConfig","navigateSubscription","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","Error","endWith","shouldForceRefreshPage","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesService","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","resetConfig","CmsPageGuard","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","protectedRoutesGuard","getCmsPage","getNextPageContext","getPage","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","SemanticPathService","ProtectedRoutesGuard","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","notFound","login","protected","forgotPassword","resetPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","orders","orderDetails","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","couponClaim","defaultRoutingConfig","RoutingModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","AmendOrderType","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","distinctUntilKeyChanged","select","tabNum","routeState","history","getTitleParams","tabComps","comp","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","forgotPasswordForm","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","AmendOrderActionsModule","ValidateQuantity","q","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","activeTab","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","paymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","resetPasswordForm","repassword","isPasswordReset","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","updateEmailForm","confirmEmail","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitted","cancelled","updatePasswordForm","oldPassword","newPassword","newPasswordConfirm","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","updateProfileForm","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","getLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","observeOn","asyncScheduler","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","node","populateLink","itemType","linkName","getLink","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","parentNode","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","matches","wrapper","querySelector","navBar","removeStyle","offsetWidth","setStyle","navs","childNodes","isTabbable","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","classList","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","replace","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","scrollIntoView","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","ProductDetailOutlets","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","ProductFacetNavigationComponent","collapsedFacets","showAllPerFacetMap","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","visible","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","toggleFacet","getVisibleFacetValues","values","topValueCount","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","property","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductRefinementComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","viewStore","prepareRouteUrl","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","checkoutLoginForm","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","prefilledEmail","loginForm","_e","loginUser","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","registerForm","newsletter","isConsentRequired","termsandconditions","getRegisterUserResultLoading","registerUserProcessInit","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","registerUser","collectDataFromRegisterForm","formData","onRegisterUserSuccess","resetRegisterUserProcessState","getRegisterUserResultSuccess","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","StorefrontFoundationModule","StateModule","AuthModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n}\n\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","export abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        (res) =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      (res) =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      (res) =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        (res) => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach((cls) =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach((cls) => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(fontawesomeIconConfig),\n    { provide: IconConfig, useExisting: Config },\n  ],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  isFeatureLevel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.config, '1.3');\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(() => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, FeaturesConfigModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise((resolve) => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  BaseSiteService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  SelectiveCartService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: ActiveCartService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    @Optional() public selectiveCartService: SelectiveCartService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe((token) => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap((userToken) =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap((token) => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((customerSupportAgentToken) =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class BaseFocusService {}\n","import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseFocusConfig } from '../keyboard-focus.model';\nimport { BaseFocusService } from './base-focus.service';\n\n/**\n * Abstract directive that provides a common interface for all focus directives:\n * - Block Focus\n * - Persist Focus\n * - Escape Focus\n * - Auto Focus\n * - Tab Focus\n * - Trap Focus\n * - Lock Focus\n */\n@Directive()\nexport abstract class BaseFocusDirective implements OnInit {\n  /**\n   * Optional configuration for the focus directive drives the behaviour of the keyboard\n   * focus directive.\n   */\n  protected config: BaseFocusConfig;\n\n  /**\n   * A default config can be provided for each directive if a specific focus directive\n   * is used directly. i.e. `<div cxAutoFocus></div>`\n   */\n  protected defaultConfig: BaseFocusConfig = {};\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected service: BaseFocusService\n  ) {}\n\n  ngOnInit() {\n    this.setDefaultConfiguration();\n    this.requiredTabindex = -1;\n  }\n\n  /**\n   * Override the (input) config if it undefined or an empty string, with the\n   * `defaultConfig`. The `defaultConfig` might be specified for each directive\n   * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\n   * specific (inherited) defaultConfig will be used.\n   */\n  protected setDefaultConfiguration(): void {\n    if ((!this.config || this.config === '') && this.defaultConfig) {\n      this.config = this.defaultConfig;\n    }\n  }\n\n  /**\n   * Helper method to return the host element for the directive\n   * given by the `elementRef`.\n   */\n  protected get host(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /**\n   * Force a tabindex on the host element if it is _requried_ to make the element\n   * focusable. If the element is focusable by nature or by a given tabindex, the\n   * `tabindex` is not applied.\n   *\n   * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\n   */\n  protected set requiredTabindex(tabindex: number) {\n    if (this.requiresExplicitTabIndex) {\n      this.tabindex = tabindex;\n    }\n  }\n\n  /**\n   * Returns true if the host element does not have a tabindex defined\n   * and it also doesn't get focus by browsers nature (i.e. button or\n   * active link).\n   */\n  protected get requiresExplicitTabIndex(): boolean {\n    return (\n      this.tabindex === undefined &&\n      ['button', 'input', 'select', 'textarea'].indexOf(\n        this.host.tagName.toLowerCase()\n      ) === -1 &&\n      !(\n        this.host.tagName === 'A' &&\n        (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))\n      )\n    );\n  }\n}\n","import { Directive, HostBinding, HostListener } from '@angular/core';\nimport { BaseFocusDirective } from '../base/base-focus.directive';\nimport { VisibleFocusConfig } from '../keyboard-focus.model';\n\n/**\n * Directive implementation that adds a CSS class to the host element\n * when the moused is used to focus an element. As soon as the keyboard\n * is used, the class is removed.\n */\n@Directive() // selector: '[cxVisibleFocus]'\nexport class VisibleFocusDirective extends BaseFocusDirective {\n  protected defaultConfig: VisibleFocusConfig = { disableMouseFocus: true };\n\n  // @Input('cxVisibleFocus')\n  protected config: VisibleFocusConfig;\n\n  /** controls a polyfill class for the lacking focus-visible feature */\n  @HostBinding('class.mouse-focus') mouseFocus = false;\n\n  @HostListener('mousedown') handleMousedown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = true;\n    }\n  }\n\n  @HostListener('keydown') handleKeydown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = false;\n    }\n  }\n\n  protected get shouldFocusVisible(): boolean {\n    return this.config?.disableMouseFocus;\n  }\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { BlockFocusConfig } from '../keyboard-focus.model';\nimport { VisibleFocusDirective } from '../visible/visible-focus.directive';\n\n@Directive()\n// { selector: '[cxBlockFocus]' }\nexport class BlockFocusDirective extends VisibleFocusDirective\n  implements OnInit {\n  protected defaultConfig: BlockFocusConfig = { block: true };\n\n  // @Input('cxBlockFocus')\n  protected config: BlockFocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: BaseFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.config.block) {\n      this.tabindex = -1;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { FOCUS_GROUP_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\n\nconst GLOBAL_GROUP = '_g_';\n\n/**\n * Shared service to persist the focus for an element or a group\n * of elements. The persisted element focus can be used to persist\n * the focus for a DOM tree, so that the focus remains after a repaint\n * or reoccurs when a DOM tree is \"unlocked\".\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersistFocusService extends BaseFocusService {\n  // this is going to fail as we have sub services. They will al have their own map.\n  // We must bring this to a singlton map.\n  protected focus = new Map<string, string>();\n\n  get(group?: string): string {\n    return this.focus.get(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Persist the keyboard focus state for the given key. The focus is stored globally\n   * or for the given group.\n   */\n  set(key: string, group?: string) {\n    if (key) {\n      this.focus.set(group || GLOBAL_GROUP, key);\n    }\n  }\n\n  /**\n   * Clears the persisted keyboard focus state globally or for the given group.\n   */\n  clear(group?: string) {\n    this.focus.delete(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Returns the group for the host element based on the configured group or\n   * by the `data-cx-focus-group` attribute stored on the host.\n   */\n  getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string {\n    return config?.group ? config.group : host.getAttribute(FOCUS_GROUP_ATTR);\n  }\n}\n","/** The element attribute used to store the focus state */\nexport const FOCUS_ATTR = 'data-cx-focus';\n/** The element attribute used to store the focus group state */\nexport const FOCUS_GROUP_ATTR = 'data-cx-focus-group';\n\nexport const enum MOVE_FOCUS {\n  NEXT = 1,\n  PREV = -1,\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseFocusConfig {}\n\nexport interface VisibleFocusConfig {\n  /**\n   * When set to true, the mouse-focus class is added to the host element,\n   * indicating that the element focus was not caused by the keyboard.\n   */\n  disableMouseFocus?: boolean;\n}\n\nexport interface BlockFocusConfig extends VisibleFocusConfig {\n  block?: boolean;\n}\n\nexport interface PersistFocusConfig extends BlockFocusConfig {\n  /**\n   * A key to maintain the focus of an element in case the component is\n   * recreated (which often is the case when an `*ngIf` or `*ngFor` is used).\n   */\n  key?: string;\n\n  /**\n   * Optional group identifier that can be used to persist the focus. This allows\n   * to have separate persisted focus available when the DOM is partially rebuild.\n   */\n  group?: string;\n}\n\nexport interface EscapeFocusConfig extends PersistFocusConfig {\n  focusOnEscape?: boolean;\n  /**\n   * Force an autofocus in case of double-escape\n   */\n  focusOnDoubleEscape?: boolean;\n}\n\nexport interface AutoFocusConfig extends EscapeFocusConfig {\n  /**\n   * Autofocus is enabled by default, and will try to focus an _autofocus_ element.\n   * In case the focus is explicitly set to `true`, the first accessible element\n   * is focussed in case there is no _autofocus_ element found.\n   * If the focus is set to false, autofocus will be disabled completely.\n   *\n   * If a string value is given, the autofocus will be restored based on the persisted\n   * focus group, which is driven by `PersistFocusConfig.key` and `PersistFocusConfig.group`.\n   *\n   * Defaults to `true`.\n   */\n  autofocus?: boolean | string;\n\n  // whenever the target autofocus element is selected by the `skipFocus` selector,\n  // autofocus is ignored.\n  skipFocus?: string;\n}\n\nexport interface TabFocusConfig extends AutoFocusConfig {\n  tab?: boolean | 'scroll' | string;\n}\n\n/**\n * The keyboard navigation (tab, shift-tab and up down keys) is _trapped_\n * for the nested focusable elements. This means that the focus can not\n * \"leave\" the elements. If the last element is focused, the keyboard will\n * navigate to the first element and visa versa.\n */\nexport interface TrapFocusConfig extends TabFocusConfig {\n  /** traps the focus */\n  trap?: boolean | 'start' | 'end';\n}\n\nexport interface LockFocusConfig extends TrapFocusConfig {\n  /**\n   * Indicates that the nested DOM is locked for keyboarding (`TAB`).\n   */\n  lock?: boolean;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface FocusConfig extends LockFocusConfig {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { BlockFocusDirective } from '../block/block-focus.directive';\nimport { FOCUS_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from './persist-focus.service';\n\n/**\n * Directive that provides persistence of the focused state. This is useful\n * when a group of focusable elements got refocused or even recreated. That\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\n *\n * The focus state is based on a configured _key_, which can be passed in the\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\n *\n * ```html\n * <button cxPersistFocus=\"myKey\"></button>\n * <button cxFocus=\"myKey\"></button>\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\n * ```\n *\n * The focus state can be part of a focus _group_, so that the state is shared\n * and remember for the given group. In order to detect the persistence for a\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\n *\n * ```html\n * <button data-cx-focus=\"myKey\"></button>\n * ```\n *\n * Other keyboard focus directives can read the key to understand whether the element\n * should retrieve focus.\n *\n */\n@Directive() // selector: '[cxPersistFocus]',\nexport class PersistFocusDirective extends BlockFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: PersistFocusConfig = {};\n\n  /**\n   * The persistence key can be passed directly or through the `FocusConfig.key`.\n   * While this could be considered a global key, the likeliness of conflicts\n   * is very small since the key is cleared when the focus is changed.\n   */\n  // @Input('cxPersistFocus')\n  protected config: PersistFocusConfig = {};\n\n  /**\n   * The persistance key is maintained in an element attribute for other\n   * implementations. This is needed to ensure that we can resolve the focus\n   * state in case of a repaint.\n   */\n  @HostBinding(`attr.${FOCUS_ATTR}`) attr: string;\n\n  @HostListener('focus', ['$event'])\n  handleFocus(event?: KeyboardEvent) {\n    this.service.set(this.key, this.group);\n\n    event?.preventDefault();\n    event?.stopPropagation();\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: PersistFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.attr = this.key ? this.key : undefined;\n  }\n\n  protected setDefaultConfiguration() {\n    if (typeof this.config === 'string' && this.config !== '') {\n      this.config = { key: this.config };\n    }\n    super.setDefaultConfiguration();\n  }\n\n  /**\n   * Focus the element explicitly if it was focused before.\n   */\n  ngAfterViewInit() {\n    if (this.isPersisted) {\n      this.host.focus({ preventScroll: true });\n    }\n  }\n\n  protected get isPersisted(): boolean {\n    return !!this.key && this.service.get(this.group) === this.key;\n  }\n\n  /**\n   * Returns the key for the host element, which is used to persist the\n   * focus state. This is useful in cases where the DOM is rebuild.\n   */\n  protected get key(): string {\n    return (this.config as PersistFocusConfig)?.key;\n  }\n\n  /**\n   * returns the persistence group (if any) for the focusable elements.\n   */\n  protected get group(): string {\n    return this.service.getPersistenceGroup(\n      this.host,\n      this.config as PersistFocusConfig\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectFocusUtility {\n  /**\n   * Query selectors used to query focusable child elements of the host element.\n   * The selectors are supplemented with `:not([disabled])` and `:not([hidden])`.\n   */\n  protected focusableSelectors: string[] = [\n    'a[href]',\n    'button',\n    '[tabindex]',\n    'input',\n    'select',\n    'textarea',\n  ];\n\n  // like to leave out the following as we don't use it, and make this list exensible.\n  //   `[contentEditable=true]`, // very unlikely to suport as we're not a business tool\n  //   `iframe`, // we really don't like iframes...\n  //   `area[href]`, // very debatable!\n\n  protected focusableSelectorSuffix = ':not([disabled]):not([hidden])';\n\n  query(host: HTMLElement, selector: string): HTMLElement[] {\n    if (!selector || selector === '') {\n      return [];\n    }\n    return Array.from(\n      host.querySelectorAll(selector) as NodeListOf<HTMLElement>\n    );\n  }\n\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    const selector =\n      typeof config?.autofocus === 'string' ? config.autofocus : '[autofocus]';\n    // fallback to first focusable\n    return (\n      this.query(host, selector).find((el) => !this.isHidden(el)) ||\n      this.findFocusable(host).find((el) => Boolean(el))\n    );\n  }\n\n  /**\n   * returns all focusable child elements of the host element. The element selectors\n   * are build from the `focusableSelectors`.\n   *\n   * @param host the `HTMLElement` used to query focusable elements\n   * @param locked indicates whether inactive (`tabindex=\"-1\"`) focusable elements should be returned\n   * @param invisible indicates whether hidden focusable elements should be returned\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    let suffix = this.focusableSelectorSuffix;\n    if (!locked) {\n      suffix += `:not([tabindex='-1'])`;\n    }\n    const selector = this.focusableSelectors\n      .map((s) => (s += suffix))\n      .join(',');\n    return this.query(host, selector).filter((el) =>\n      !invisible ? !this.isHidden(el) : Boolean(el)\n    );\n  }\n\n  /**\n   * Indicates whether the element is hidden by CSS. There are various CSS rules and\n   * HTML structures which can lead to an hidden or invisible element. An `offsetParent`\n   * of null indicates that the element or any of it's decendants is hidden (`display:none`).\n   *\n   * Oother techniques use the visibility (`visibility: hidden`), opacity (`opacity`) or\n   * phyisical location on the element itself or any of it's anchestor elements. Those\n   * technique require to work with the _computed styles_, which will cause a performance\n   * downgrade. We don't do this in the standard implementaton.\n   */\n  protected isHidden(el: HTMLElement): boolean {\n    return el.offsetParent === null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from '../persist/persist-focus.service';\nimport { SelectFocusUtility } from '../services/select-focus.util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EscapeFocusService extends PersistFocusService {\n  constructor(protected selectFocusUtil: SelectFocusUtility) {\n    super();\n  }\n\n  shouldFocus(config: EscapeFocusConfig): boolean {\n    return !!config?.focusOnEscape;\n  }\n\n  handleEscape(\n    host: HTMLElement,\n    config: EscapeFocusConfig,\n    event: KeyboardEvent\n  ): void {\n    if (this.shouldFocus(config)) {\n      if (host !== event.target) {\n        host.focus({ preventScroll: true });\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        if (config?.focusOnDoubleEscape) {\n          this.selectFocusUtil\n            .findFirstFocusable(host, { autofocus: true })\n            ?.focus();\n        }\n      }\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusDirective } from '../persist/persist-focus.directive';\nimport { EscapeFocusService } from './escape-focus.service';\n\n/**\n * Directive to focus the host element whenever the `escape` key is captured.\n * UiEvents bubble up by nature, which is why the `cxEscGroup` can be used\n * on a tree of elements. Each time the escape key is used, the focus will\n * move up in the DOM tree.\n *\n */\n@Directive() // selector: '[cxEscFocus]',\nexport class EscapeFocusDirective extends PersistFocusDirective\n  implements OnInit {\n  protected defaultConfig: EscapeFocusConfig = { focusOnEscape: true };\n\n  // @Input('cxEscFocus')\n  protected config: EscapeFocusConfig;\n\n  @Output() esc = new EventEmitter<boolean>();\n\n  /**\n   * Handles the escape key event.\n   * @param event the native keyboard event which contains the escape keydown event\n   */\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    if (this.service.shouldFocus(this.config)) {\n      this.service.handleEscape(this.host, this.config, event);\n    }\n    this.esc.emit(this.service.shouldFocus(this.config));\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: EscapeFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    if (this.service.shouldFocus(this.config)) {\n      this.requiredTabindex = -1;\n    }\n    super.ngOnInit();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusService } from '../escape/escape-focus.service';\nimport {\n  AutoFocusConfig,\n  FOCUS_ATTR,\n  PersistFocusConfig,\n} from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AutoFocusService extends EscapeFocusService {\n  /**\n   * Returns the first focusable child element of the host element.\n   */\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    if (config?.autofocus === ':host') {\n      return host;\n    } else if (this.hasPersistedFocus(host, config)) {\n      return this.getPersisted(host, this.getPersistenceGroup(host, config));\n    } else {\n      return this.selectFocusUtil.findFirstFocusable(host, config) || host;\n    }\n  }\n\n  /**\n   * Indicates whether any of the focusabe child elements is focused.\n   */\n  hasPersistedFocus(host: HTMLElement, config: PersistFocusConfig): boolean {\n    return !!this.getPersisted(host, this.getPersistenceGroup(host, config));\n  }\n\n  /**\n   * Returns the element that has a persisted focus state.\n   *\n   * @param host the `HTMLElement` used to query for focusable children\n   * @param group the optional group for the persistent state, to separate different focus\n   *   groups and remain the persistance\n   */\n  protected getPersisted(host: HTMLElement, group?: string): HTMLElement {\n    if (!this.get(group)) {\n      return;\n    }\n    const focussed = Array.from(\n      host.querySelectorAll(\n        `[${FOCUS_ATTR}='${this.get(group)}']`\n      ) as NodeListOf<HTMLElement>\n    );\n    return focussed.length > 0 ? focussed[0] : null;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\nimport { AutoFocusService } from './auto-focus.service';\n\n/**\n * Directive that focus the first nested _focusable_ element based on state and configuration:\n *\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\n * 4. first focusable element\n * 5. the host element, in case the configured CSS selector is `:host`.\n *\n * Example configurations:\n *\n * `<div cxAutoFocus>[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\n *\n */\n@Directive() // selector: '[cxAutoFocus]'\nexport class AutoFocusDirective extends EscapeFocusDirective\n  implements AfterViewInit {\n  /** The AutoFocusDirective will be using autofocus by default  */\n  protected defaultConfig: AutoFocusConfig = { autofocus: true };\n\n  // @Input('cxAutoFocus')\n  protected config: AutoFocusConfig;\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: AutoFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Focus the element explicitly if it was focussed before.\n   */\n  ngAfterViewInit(): void {\n    if (this.shouldAutofocus) {\n      this.handleFocus();\n    }\n    if (!this.shouldAutofocus || this.hasPersistedFocus) {\n      super.ngAfterViewInit();\n    }\n  }\n\n  /**\n   * Mimic the focus without setting the actual focus on the host. The first\n   * focusable child element will be focussed.\n   */\n  handleFocus(event?: KeyboardEvent) {\n    if (this.shouldAutofocus) {\n      if (!event?.target || event.target === this.host) {\n        this.firstFocusable?.focus();\n      } else {\n        (event.target as HTMLElement).focus();\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  /**\n   * Helper function to get the first focusable child element\n   */\n  protected get hasPersistedFocus() {\n    return this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Helper function to indicate whether we should use autofocus for the\n   * child elements.\n   */\n  protected get shouldAutofocus(): boolean {\n    return !!this.config?.autofocus;\n  }\n\n  /**\n   * Helper function to get the first focusable child element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get firstFocusable(): HTMLElement {\n    return this.service.findFirstFocusable(this.host, this.config);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusService } from '../autofocus/auto-focus.service';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TabFocusService extends AutoFocusService {\n  /**\n   * Moves to the next (or previous) tab.\n   */\n  moveTab(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS,\n    event: KeyboardEvent\n  ): void {\n    if (config?.tab) {\n      const next =\n        config.tab === 'scroll'\n          ? this.findNextScrollable(host, config, increment)\n          : this.findNext(host, config, increment);\n\n      next?.focus();\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * builds out virtual slides out of the full scrollable area, to allow\n   * for maximum flexibility for the underlying layout without using hardcoded\n   * slide sizes.\n   */\n  protected findNextScrollable(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const active = this.getActiveChild(host, config);\n\n    if (!active) {\n      return;\n    }\n    // slide count\n    const virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);\n\n    // find current virtual slide\n    const currentVirtualSlide = Math.round(\n      active.offsetLeft / (host.scrollWidth / virtualSlideCount)\n    );\n\n    let nextVirtualSlide = currentVirtualSlide + increment;\n    if (\n      increment === MOVE_FOCUS.NEXT &&\n      nextVirtualSlide >= virtualSlideCount\n    ) {\n      nextVirtualSlide = 0;\n    }\n    if (increment === MOVE_FOCUS.PREV && nextVirtualSlide < 0) {\n      nextVirtualSlide = virtualSlideCount - 1;\n    }\n\n    const firstItemOnNextSlide = this.getChildren(host, config)?.find(\n      (tab) =>\n        tab.offsetLeft >=\n        (host.scrollWidth / virtualSlideCount) * nextVirtualSlide\n    );\n\n    return firstItemOnNextSlide;\n  }\n\n  protected findNext(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const childs = this.getChildren(host, config);\n    let activeIndex = childs?.findIndex(\n      (c) => c === this.getActiveChild(host, config)\n    );\n\n    if (!activeIndex || activeIndex === -1) {\n      activeIndex = 0;\n    }\n    activeIndex += increment;\n\n    if (increment === MOVE_FOCUS.NEXT && activeIndex >= childs?.length) {\n      activeIndex = childs.length - 1;\n    }\n    if (increment === MOVE_FOCUS.PREV && activeIndex < 0) {\n      activeIndex = 0;\n    }\n    return childs ? childs[activeIndex] : undefined;\n  }\n\n  /**\n   * Returns the active focusable child element. If there's no active\n   * focusable child element, the first focusable child is returned.\n   */\n  protected getActiveChild(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement {\n    const persisted = this.getPersisted(host, config?.group);\n    if (persisted) {\n      return persisted;\n    }\n    const children = this.getChildren(host, config);\n    let index = children.findIndex((tab) => this.isActive(tab));\n    if (!index || index === -1) {\n      index = 0;\n    }\n    return children[index];\n  }\n\n  protected getChildren(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement[] {\n    if (typeof config.tab === 'string' && config.tab !== 'scroll') {\n      return this.selectFocusUtil.query(host, config.tab);\n    } else {\n      return this.findFocusable(host, true);\n    }\n  }\n\n  /**\n   * Returns all focusable child elements of the host element.\n   *\n   * @param host The host element is used to query child focusable elements.\n   * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.\n   * @param invisible Indicates if invisible child elements should be returned, defaults to false.\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    return this.selectFocusUtil.findFocusable(host, locked, invisible);\n  }\n\n  protected isActive(el: HTMLElement): boolean {\n    const child = document.activeElement;\n    const selector = child.tagName;\n\n    return (\n      el === child ||\n      !!Array.from(el.querySelectorAll(selector)).find((e) => e === child)\n    );\n  }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { AutoFocusDirective } from '../autofocus/auto-focus.directive';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from './tab-focus.service';\n\n/**\n * Directive to move the focus of (\"locked\") child elements. This is useful\n * for a nested list of tabs, carousel slides or any group of elements that\n * requires horizontal navigation.\n */\n@Directive() // selector: '[cxTabFocus]'\nexport class TabFocusDirective extends AutoFocusDirective {\n  /** `tab` defaults to true if the directive `cxTabFocus` is used. */\n  protected defaultConfig: TabFocusConfig = { tab: true };\n\n  // @Input('cxTabFocus')\n  protected config: TabFocusConfig = {};\n\n  @HostListener('keydown.arrowRight', ['$event'])\n  handleNextTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.NEXT, event);\n    }\n  }\n\n  @HostListener('keydown.arrowLeft', ['$event'])\n  handlePreviousTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.PREV, event);\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TabFocusService\n  ) {\n    super(elementRef, service);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from '../tab/tab-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrapFocusService extends TabFocusService {\n  /**\n   * Indicates whether any of the child elements of the host are focusable.\n   *\n   * @param host `HTMLElement` that is used to query the focusable elements.\n   */\n  hasFocusableChildren(host: HTMLElement): boolean {\n    return this.findFocusable(host).length > 0;\n  }\n\n  /**\n   * Focus the next or previous element of all available focusable elements.\n   * The focus is _trapped_ in case there's no next or previous available element.\n   * The focus will automatically move the start or end of the list.\n   */\n  moveFocus(\n    host: HTMLElement,\n    config: TrapFocusConfig,\n    increment: MOVE_FOCUS,\n    event: UIEvent\n  ): void {\n    const focusable: HTMLElement[] = this.findFocusable(host);\n\n    let index = focusable.findIndex((v) => v === event.target) + increment;\n\n    const shouldMoveFocus =\n      (index >= 0 && index < focusable.length) ||\n      (index < 0 && this.getTrapStart(config.trap)) ||\n      (index >= focusable.length && this.getTrapEnd(config.trap));\n\n    if (shouldMoveFocus) {\n      if (index >= focusable.length) {\n        index = 0;\n      }\n      if (index < 0) {\n        index = focusable.length - 1;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const el = focusable[index];\n\n      el.focus();\n    }\n  }\n\n  protected getTrapStart(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'start';\n  }\n\n  protected getTrapEnd(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'end';\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\nimport { TrapFocusService } from './trap-focus.service';\n\n/**\n * Directive that keeps the focus inside the focussable child elements,\n * also known as a _focus trap_.\n */\n@Directive() // selector: '[cxTrapFocus]'\nexport class TrapFocusDirective extends TabFocusDirective implements OnInit {\n  protected defaultConfig: TrapFocusConfig = { trap: true };\n\n  // @Input('cxTrapFocus')\n  protected config: TrapFocusConfig = {};\n\n  @HostListener('keydown.arrowdown', ['$event'])\n  @HostListener('keydown.tab', ['$event'])\n  handleTrapDown = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.NEXT);\n    }\n  };\n\n  @HostListener('keydown.arrowup', ['$event'])\n  @HostListener('keydown.shift.tab', ['$event'])\n  handleTrapUp = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.PREV);\n    }\n  };\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TrapFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Moves the focus of the element reference up or down, depending on the increment.\n   * The focus of the element is trapped to avoid it from going out of the group.\n   *\n   * @param event UIEvent that is used to get the target element. The event is blocked\n   *   from standard execution and further bubbling.\n   * @param increment indicates whether the next or previous is focussed.\n   */\n  protected moveFocus(event: UIEvent, increment: number) {\n    if (this.service.hasFocusableChildren(this.host)) {\n      this.service.moveFocus(\n        this.host,\n        this.config,\n        increment,\n        event as UIEvent\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TrapFocusService } from '../trap/trap-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LockFocusService extends TrapFocusService {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { FOCUS_GROUP_ATTR, LockFocusConfig } from '../keyboard-focus.model';\nimport { TrapFocusDirective } from '../trap/trap-focus.directive';\nimport { LockFocusService } from './lock-focus.service';\n\n/**\n * Focusable elements exclude hidden elements by default, but this contradicts with\n * unlocking (hidden) elements.\n */\nconst UNLOCK_HIDDEN_ELEMENTS = true;\n/**\n * Directive that adds persistence for focussed element in case\n * the elements are being rebuild. This happens often when change\n * detection kicks in because of new data set from the backend.\n */\n@Directive() // selector: '[cxLockFocus]'\nexport class LockFocusDirective extends TrapFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: LockFocusConfig = { lock: true };\n\n  // @Input('cxLockFocus')\n  protected config: LockFocusConfig = {};\n\n  /**\n   * Indicates that the host is configured to use locking. This is available as a\n   * CSS class `focus-lock`.\n   */\n  @HostBinding('class.focus-lock') shouldLock: boolean;\n  /**\n   * Indicates that the host is locked. This is available as a CSS class `is-locked`.\n   */\n  @HostBinding('class.is-locked')\n  isLocked: boolean;\n\n  /**\n   * Emits an event when the host is unlocked.\n   */\n  @Output() unlock = new EventEmitter<boolean>();\n\n  /**\n   * When the user selects enter or space, the focusable childs are\n   * unlocked, which means that the tabindex is set to 0.\n   */\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  handleEnter(event: KeyboardEvent) {\n    if (this.shouldLock && this.host === (event.target as HTMLElement)) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * In case any of the children elements is touched by the mouse,\n   * we unlock the group to not break the mouse-experience.\n   */\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    if (this.shouldLock && this.isLocked) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: LockFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service);\n  }\n\n  protected lockFocus() {\n    this.addTabindexToChildren(-1);\n  }\n\n  protected unlockFocus(event?: UIEvent) {\n    this.unlock.emit(true);\n    this.addTabindexToChildren(0);\n    // we focus the host if the event was triggered from a child\n    if (event?.target === this.host) {\n      super.handleFocus(event as KeyboardEvent);\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.shouldLock = this.config?.lock;\n\n    if (this.shouldLock) {\n      this.tabindex = 0;\n\n      // Locked elements will be set to `autofocus` by default if it's not\n      // been configured. This will ensure that autofocus kicks in upon unlock.\n      if (!this.config.hasOwnProperty('autofocus')) {\n        this.config.autofocus = true;\n      }\n      // Locked elements will be set to `focusOnEscape` by default if it's not\n      // been configured. This will ensure that  the host gets locked again when\n      // `escape` is pressed.\n      if (!this.config.hasOwnProperty('focusOnEscape')) {\n        this.config.focusOnEscape = !(this.config?.focusOnEscape === false);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.shouldLock) {\n      /**\n       * If the component hosts a group of focusable children elmenents,\n       * we persist the group key to the children, so that they can taken this\n       * into account when they persist their focus state.\n       */\n      if (!!this.group) {\n        this.service.findFocusable(this.host).forEach((el) =>\n          // we must do this in after view init as\n          this.renderer.setAttribute(el, FOCUS_GROUP_ATTR, this.group)\n        );\n      }\n\n      if (this.shouldAutofocus) {\n        this.handleFocus();\n      }\n    }\n    super.ngAfterViewInit();\n  }\n\n  handleFocus(event?: KeyboardEvent): void {\n    if (this.shouldLock) {\n      if (this.shouldUnlockAfterAutofocus(event)) {\n        // Delay unlocking in case the host is using `ChangeDetectionStrategy.Default`\n        setTimeout(() => this.unlockFocus(event));\n      } else {\n        setTimeout(() => this.lockFocus());\n        event?.stopPropagation();\n        return;\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  handleEscape(event: KeyboardEvent): void {\n    if (this.shouldLock) {\n      this.service.clear(this.config.group);\n    }\n    super.handleEscape(event);\n  }\n\n  /**\n   * When the handleFocus is called without an actual event, it's coming from Autofocus.\n   * In this case we unlock the focusable children in case there's a focusable child that\n   * was unlocked before.\n   *\n   * We keep this private to not polute the API.\n   */\n  private shouldUnlockAfterAutofocus(event?: KeyboardEvent) {\n    return !event && this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Add the tabindex attribute to the focusable children elements\n   */\n  protected addTabindexToChildren(i = 0): void {\n    if (this.shouldLock) {\n      this.isLocked = i === -1;\n      if (!(this.hasFocusableChildren && i === 0) || i === 0) {\n        this.focusable.forEach((el) =>\n          this.renderer.setAttribute(el, 'tabindex', i.toString())\n        );\n      }\n    }\n  }\n\n  /**\n   * Utility method, returns all focusable children for the host element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get hasFocusableChildren(): boolean {\n    return this.service.hasFocusableChildren(this.host);\n  }\n\n  /**\n   * Returns the focusable children of the host element. If the host element\n   * is configured to be locked, the query is restricted to child elements\n   * with a tabindex !== `-1`.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get focusable(): HTMLElement[] {\n    return this.service.findFocusable(\n      this.host,\n      this.shouldLock,\n      UNLOCK_HIDDEN_ELEMENTS\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { LockFocusService } from '../lock/lock-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeyboardFocusService extends LockFocusService {}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { FocusConfig } from './keyboard-focus.model';\nimport { LockFocusDirective } from './lock/lock-focus.directive';\nimport { KeyboardFocusService } from './services/keyboard-focus.service';\n\n@Directive({\n  selector: '[cxFocus]',\n})\nexport class FocusDirective extends LockFocusDirective {\n  protected defaultConfig: FocusConfig = {};\n  // tslint:disable-next-line: no-input-rename\n  @Input('cxFocus') protected config: FocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: KeyboardFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service, renderer);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusDirective } from './focus.directive';\n\nconst directives = [\n  // PersistFocusDirective,\n  // VisibleFocusDirective,\n  // BlockFocusDirective,\n  // AutoFocusDirective,\n  // EscapeFocusDirective,\n  // LockFocusDirective,\n  // TrapFocusDirective,\n  // TabFocusDirective,\n  FocusDirective,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...directives],\n  exports: [...directives],\n})\nexport class KeyboardFocusModule {}\n","import { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\n\nexport abstract class LaunchConfig {\n  launch?: {\n    [key: string]: LaunchOptions;\n  };\n}\n\nexport type LaunchOptions =\n  | LaunchOutletDialog\n  | LaunchInlineDialog\n  | LaunchRoute;\n\n/**\n * Parent type for configurations that render components\n */\nexport interface LaunchDialog {\n  component: any;\n  /**\n   * Can the element be rendered multiple times\n   */\n  multi?: boolean;\n  /**\n   * Optional elements for other configurations\n   */\n  options?: {\n    /**\n     * Dialog type is used to apply CSS classes\n     */\n    dialogType?: DIALOG_TYPE;\n  };\n}\n\n/**\n * Configuration type to render a component in an outlet\n */\nexport interface LaunchOutletDialog extends LaunchDialog {\n  /**\n   * The outlet to render the element in\n   */\n  outlet: string;\n  /**\n   * Default: OutletPosition.BEFORE\n   */\n  position?: OutletPosition;\n}\n\n/**\n * Configuration type to render a component inline (next to the trigger)\n */\nexport interface LaunchInlineDialog extends LaunchDialog {\n  inline: boolean;\n}\n\n/**\n * Configuration type to render as link\n */\nexport interface LaunchRoute {\n  /**\n   * The route for the url\n   */\n  cxRoute: string;\n  /**\n   * The parameters for the route\n   */\n  params?: { [param: string]: any };\n}\n\n/**\n * Types of dialog openings supported\n */\nexport enum DIALOG_TYPE {\n  POPOVER = 'POPOVER',\n  DIALOG = 'DIALOG',\n  SIDEBAR_START = 'SIDEBAR_START',\n  SIDEBAR_END = 'SIDEBAR_END',\n}\n\n/**\n * List of available callers\n */\nexport enum LAUNCH_CALLER {\n  ASM = 'ASM',\n  SKIP_LINKS = 'SKIP_LINKS',\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { KeyboardFocusService } from '../../keyboard-focus';\nimport { SkipLink, SkipLinkConfig } from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(\n    protected config: SkipLinkConfig,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter((skipLink) => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(skipLink: SkipLink): void {\n    const target =\n      skipLink.target instanceof HTMLElement\n        ? skipLink.target\n        : (skipLink.target as Element).parentElement;\n\n    // focus first focusable element in the\n    const firstFocusable =\n      this.keyboardFocusService.findFirstFocusable(target) || target;\n\n    // we force a tabindex if not available, to ensure we can focus into the element\n    const hasTabindex = firstFocusable.hasAttribute('tabindex');\n    if (!hasTabindex) {\n      firstFocusable.setAttribute('tabindex', '-1');\n    }\n\n    firstFocusable.focus();\n\n    // drop the tmp tabindex\n    if (!hasTabindex) {\n      firstFocusable.removeAttribute('tabindex');\n    }\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      (skipLink) => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          (skipLink) => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService.getSkipLinks();\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink): void {\n    this.skipLinkService.scrollToTarget(skipLink);\n  }\n}\n","import { AsmMainUiComponent } from '../../../cms-components/asm/asm-main-ui/asm-main-ui.component';\nimport { SkipLinkComponent } from '../../a11y/skip-link/component/skip-link.component';\nimport { LaunchConfig } from './launch-config';\n\nexport const DEFAULT_LAUNCH_CONFIG: LaunchConfig = {\n  launch: {\n    ASM: {\n      outlet: 'cx-storefront',\n      component: AsmMainUiComponent,\n    },\n    SKIP_LINKS: {\n      outlet: 'cx-storefront',\n      component: SkipLinkComponent,\n    },\n  },\n};\n","import { ViewContainerRef } from '@angular/core';\nimport { LaunchDialog, LaunchOptions, LAUNCH_CALLER } from '../config';\n\nexport abstract class LaunchRenderStrategy {\n  // List of called references; only used for rendered elements\n  protected renderedCallers: Array<{\n    caller: LAUNCH_CALLER;\n    element?: any;\n  }> = [];\n\n  /**\n   * Render method to implement based on the strategy\n   *\n   * @param config Launch configuration\n   */\n  abstract render(\n    config: LaunchOptions,\n    caller: LAUNCH_CALLER,\n    vcr?: ViewContainerRef\n  ): void;\n\n  /**\n   * Determines if the strategy is the right one for the provided configuration\n   *\n   * @param config\n   */\n  abstract match(config: LaunchOptions): boolean;\n\n  /**\n   * Determines if element should render\n   *\n   * @param caller\n   * @param config\n   */\n  protected shouldRender(caller: LAUNCH_CALLER, config: LaunchDialog): boolean {\n    return this.renderedCallers.some((el) => el.caller === caller)\n      ? !!config.multi\n      : true;\n  }\n\n  /**\n   * Method to call when rendered element is destroyed\n   * The element will be removed from the list of rendered elements\n   *\n   * @param caller\n   * @param _config optional parameters used in children strategies\n   */\n  public remove(caller: LAUNCH_CALLER, _config?: LaunchOptions): void {\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller === caller\n    );\n  }\n}\n","import { Inject, Injectable, ViewContainerRef } from '@angular/core';\nimport {\n  LaunchConfig,\n  LaunchOptions,\n  LAUNCH_CALLER,\n} from '../config/launch-config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class LaunchDialogService {\n  // Keep a list of rendered elements\n  protected renderedCallers: LAUNCH_CALLER[] = [];\n\n  constructor(\n    @Inject(LaunchRenderStrategy)\n    protected renderStrategies: LaunchRenderStrategy[],\n    protected launchConfig: LaunchConfig\n  ) {\n    this.renderStrategies = this.renderStrategies || [];\n  }\n\n  /**\n   * Render the element based on the strategy from the launch configuration\n   *\n   * @param caller LAUNCH_CALLER\n   * @param vcr View Container Ref of the container for inline rendering\n   */\n  launch(caller: LAUNCH_CALLER, vcr?: ViewContainerRef): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.render(config, caller, vcr);\n    }\n  }\n\n  /**\n   * Util method to remove element from rendered elements list\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  clear(caller: LAUNCH_CALLER): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.remove(caller, config);\n    }\n  }\n\n  /**\n   * Returns the configuration for the caller\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  protected findConfiguration(caller: LAUNCH_CALLER): LaunchOptions {\n    return this.launchConfig?.launch[caller];\n  }\n\n  /**\n   * Returns the render strategy based on the configuration\n   *\n   * @param config Configuration for launch\n   */\n  protected getStrategy(config: LaunchOptions): LaunchRenderStrategy {\n    return this.renderStrategies.find((strategy) => strategy.match(config));\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { LAUNCH_CALLER } from '../../../layout/launch-dialog/config/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected launchDialogService: LaunchDialogService\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  protected isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  protected isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  protected addUi(): void {\n    this.launchDialogService.launch(LAUNCH_CALLER.ASM);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","import { DeferLoadingStrategy } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe((isNavigating) => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(() => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  csAgentLoginForm: FormGroup;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.csAgentLoginForm = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.csAgentLoginForm.valid) {\n      this.submitEvent.emit({\n        userId: this.csAgentLoginForm.get('userId').value,\n        password: this.csAgentLoginForm.get('password').value,\n      });\n    } else {\n      this.csAgentLoginForm.markAllAsTouched();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe((user) => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:no-host-metadata-property\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  customerSelectionForm: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.customerSelectionForm = this.fb.group({\n      searchTerm: ['', Validators.required],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.customerSelectionForm.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe((searchTermValue) => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.customerSelectionForm.controls.searchTerm.setValue(\n      this.selectedCustomer.name\n    );\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (this.customerSelectionForm.valid && Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    } else {\n      this.customerSelectionForm.markAllAsTouched();\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { CardComponent } from './card.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map((totalWidth) => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return this.winRef.resize$.pipe(\n      map((event) => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\n   * configuration. If no configuration is available for the given breakpoint, the\n   * method will return the default values:\n   * - xs: 567\n   * - sm: 768\n   * - md: 992\n   * - lg: 1200\n   */\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints?.hasOwnProperty(breakpoint)\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  /**\n   * Returns all available breakpoints for the system.\n   */\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  /**\n   * Indicates whether the current screen size is smaller than the maximum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n   */\n  isDown(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(0, this.breakpoints.indexOf(breakpoint) + 1)\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size is larger than the minimum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n   */\n  isUp(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(this.breakpoints.indexOf(breakpoint))\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size fits to the given breakpoint\n   */\n  isEqual(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(map((br) => br === breakpoint));\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth > this.getSize(BREAKPOINT.lg)\n      ? BREAKPOINT.xl\n      : this.breakpoints.find((br) => windowWidth <= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else if (media && media[this.getHighestAvailableFormat(media)]) {\n      return this.getImageUrl(media[this.getHighestAvailableFormat(media)].url);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * returns highest resolution format name from media formats\n   */\n  private getHighestAvailableFormat(media): string {\n    if (media) {\n      let mediaFormat: MediaFormats;\n\n      this.mediaFormats.forEach((format) => {\n        if (\n          !mediaFormat ||\n          (mediaFormat.threshold < format.threshold && media[format.code])\n        ) {\n          mediaFormat = format;\n        }\n      });\n\n      return mediaFormat.code;\n    }\n\n    return null;\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functinality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive inteteger or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Inidicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  private _control$: Observable<FormControl>;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Returns an observable with the control. The value changes of the\n   * control are intercepted in order to suppress invalid values.\n   */\n  getControl(): Observable<FormControl> {\n    if (!this._control$) {\n      this._control$ = this.control.valueChanges.pipe(\n        startWith(this.control.value),\n        tap((value) =>\n          this.control.setValue(this.getValidCount(value), { emitEvent: false })\n        ),\n        map(() => this.control)\n      );\n    }\n    return this._control$;\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\n\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig, PaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultPaginationConfig),\n    { provide: PaginationConfig, useExisting: Config },\n  ],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(() =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter((loaded) => loaded),\n      switchMap(() => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap((dataLoaded) => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: ` <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container> `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap((items) =>\n        this.getContext(context).pipe(\n          switchMap((ctx) => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map((ctx) => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe((service) => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter((s) => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map((data) => data.context),\n        map((ctx) => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  // tslint:disable-next-line:no-output-native\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(protected el: ElementRef, protected renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'style',\n        `--star-fill:${value || this.initialRate};`\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  HostBinding,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { startWith, map } from 'rxjs/operators';\n\n/**\n * This component renders form errors.\n */\n@Component({\n  selector: 'cx-form-errors',\n  templateUrl: './form-errors.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormErrorsComponent {\n  _control: FormControl;\n  errors$: Observable<string[]>;\n\n  @Input()\n  set control(control: FormControl) {\n    this._control = control;\n\n    this.errors$ = control?.statusChanges.pipe(\n      startWith({}),\n      map(() => control.errors || {}),\n      map((errors) =>\n        Object.entries(errors)\n          .filter((error) => error[1])\n          .map((error) => error[0])\n      )\n    );\n  }\n\n  get control(): FormControl {\n    return this._control;\n  }\n\n  @HostBinding('class.control-invalid') get invalid() {\n    return this.control.invalid;\n  }\n  @HostBinding('class.control-dirty') get dirty() {\n    return this.control.dirty;\n  }\n  @HostBinding('class.control-touched') get touched() {\n    return this.control.touched;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormErrorsComponent } from './form-errors.component';\nimport { I18nModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [FormErrorsComponent],\n  exports: [FormErrorsComponent],\n})\nexport class FormErrorsModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map((routingData) => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap((orderCode) => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map((cart) => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map((cart) =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { AbstractControl, ValidationErrors, FormGroup } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  /**\n   * Checks control's value with predefined email regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidEmail' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return !email.length || email.match(EMAIL_PATTERN)\n      ? null\n      : { cxInvalidEmail: true };\n  }\n\n  /**\n   * Checks control's value with predefined password regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidPassword' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n\n    return !password.length || password.match(PASSWORD_PATTERN)\n      ? null\n      : { cxInvalidPassword: true };\n  }\n\n  /**\n   * Checks if control's value is between 1 and 5\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxStarRatingEmpty' validator error\n   * @memberof CustomFormValidators\n   */\n  static starRatingEmpty(control: AbstractControl): ValidationErrors | null {\n    const rating = control.value as number;\n\n    return rating >= 1 && rating <= 5 ? null : { cxStarRatingEmpty: true };\n  }\n\n  /**\n   * Checks if two password controls match\n   *\n   * NOTE: Use it as a form validator and pass password control names as parameters\n   *\n   * @static\n   * @param {string} password First password control name\n   * @param {string} passwordConfirmation Second password control name\n   * @returns Uses 'cxPasswordsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordsMustMatch(\n    password: string,\n    passwordConfirmation: string\n  ): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        password,\n        passwordConfirmation,\n        'cxPasswordsMustMatch'\n      );\n\n    return validator;\n  }\n\n  /**\n   * Checks if two email controls match\n   *\n   * NOTE: Use it as a form validator and pass email control names as parameters\n   *\n   * @static\n   * @param {string} email First email control name\n   * @param {string} emailConfirmation Second email control name\n   * @returns Uses 'cxEmailsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailsMustMatch(email: string, emailConfirmation: string): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        email,\n        emailConfirmation,\n        'cxEmailsMustMatch'\n      );\n\n    return validator;\n  }\n}\n\n/**\n * Generic function for validators, which checks if two passed controls match.\n *\n * @param formGroup\n * @param firstControlName First control to check\n * @param secondControlName Second control to check\n * @param errorName Error which will be returned by validator\n */\nexport function controlsMustMatch(\n  formGroup: FormGroup,\n  firstControlName: string,\n  secondControlName: string,\n  errorName: string\n): void {\n  const firstControl = formGroup.controls[firstControlName];\n  const secondControl = formGroup.controls[secondControlName];\n\n  if (secondControl.errors && !secondControl.errors[errorName]) {\n    return;\n  }\n\n  secondControl.setErrors(\n    firstControl.value !== secondControl.value ? { [errorName]: true } : null\n  );\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsmModule as AsmCoreModule, I18nModule } from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\nimport { FormErrorsModule } from '../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n    FormErrorsModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE = ProductScope.DETAILS;\n\n  /**\n   * Will emit current product or null, if there is no current product (i.e. we are not on PDP)\n   *\n   * @param scopes\n   */\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product | null> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.state.params['productCode']),\n      switchMap((productCode: string) => {\n        return productCode\n          ? this.productService.get(\n              productCode,\n              scopes || this.DEFAULT_PRODUCT_SCOPE\n            )\n          : of(null);\n      }),\n      filter((x) => x !== undefined),\n      distinctUntilChanged()\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  ActiveCartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter((e) => !!e),\n        map((entry) => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap((valueChange) => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe((entry) => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.isStable();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\nimport { FeaturesConfigModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, FeaturesConfigModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  FeatureConfigService,\n  OCC_USER_ID_ANONYMOUS,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  couponForm: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected cartVoucherService: CartVoucherService,\n    protected formBuilder: FormBuilder,\n    protected customerCouponService: CustomerCouponService,\n    protected featureConfig: FeatureConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n    if (this.featureConfig && this.featureConfig.isLevel('1.5')) {\n      this.cart$ = combineLatest([\n        this.activeCartService.getActive(),\n        this.authService.getOccUserId(),\n        this.customerCouponService.getCustomerCoupons(\n          this.MAX_CUSTOMER_COUPON_PAGE\n        ),\n      ]).pipe(\n        tap(\n          ([cart, userId, customerCoupons]: [\n            Cart,\n            string,\n            CustomerCouponSearchResult\n          ]) => {\n            this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code;\n            this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n          }\n        ),\n        map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n    else {\n      this.cart$ = combineLatest([\n        this.activeCartService.getActive(),\n        this.authService.getOccUserId(),\n      ]).pipe(\n        tap(\n          ([cart, userId]: [Cart, string]) =>\n            (this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code)\n        ),\n        map(([cart]: [Cart, string]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n\n    this.cartIsLoading$ = this.activeCartService\n      .isStable()\n      .pipe(map((loaded) => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.couponForm = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe((success) => {\n          this.onSuccess(success);\n        })\n    );\n\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe((error) => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.couponForm.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach((appliedVoucher) => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          (coupon) => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (this.couponForm.valid) {\n      this.cartVoucherService.addVoucher(\n        this.couponForm.value.couponCode,\n        this.cartId\n      );\n    } else {\n      this.couponForm.markAllAsTouched();\n    }\n  }\n\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    FeaturesConfigModule,\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  ConsignmentEntry,\n  FeatureConfigService,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every((item) => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map((consignmentEntry) => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach((item) => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.activeCartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map((value) => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport {\n  FeatureConfigService,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    promotionService: PromotionService,\n    // tslint:disable-next-line:unified-signatures\n    featureConfig: FeatureConfigService\n  );\n  /**\n   * @deprecated Since 1.5\n   * Add featureConfig for save for later.\n   * Remove issue: #5958\n   */\n  constructor(promotionService: PromotionService);\n\n  constructor(\n    protected promotionService: PromotionService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  FeatureConfigService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private featureConfig: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n\n    if (this.isSaveForLaterEnabled()) {\n      this.cartLoaded$ = combineLatest([\n        this.activeCartService.isStable(),\n        this.selectiveCartService.getLoaded(),\n        this.authService.isUserLoggedIn(),\n      ]).pipe(\n        tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n        map(([cartLoaded, sflLoaded, loggedIn]) =>\n          loggedIn ? cartLoaded && sflLoaded : cartLoaded\n        )\n      );\n    }\n    //TODO remove for #5958\n    else {\n      this.cartLoaded$ = this.activeCartService.isStable();\n    }\n    //TODO  remove for #5958 end\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958 end\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.getCart(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart]) => {\n          if (cart.totalItems) {\n            return slots.filter((slot) => slot !== 'EmptyCartMiddleContent');\n          } else if (selectiveCart.totalItems) {\n            return slots.filter(\n              (slot) =>\n                slot !== 'EmptyCartMiddleContent' &&\n                slot !== 'CenterRightContentSlot'\n            );\n          } else {\n            return slots.filter(\n              (slot) =>\n                slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map((cart) => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter((cart) => !!cart.totalPrice),\n    map((cart) => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter((product) => Boolean(product)),\n    tap((product) => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter((wishlist) => Boolean(wishlist)),\n    map((wishList) => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find((entry) => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CmsParagraphComponent,\n  CmsService,\n  OrderEntry,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map((cart) => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SaveForLaterComponent } from './save-for-later.component';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n      features: {\n        saveForLater: '1.5',\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          (deliveryMode) => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          (deliveryMode) =>\n            deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map((cartData) => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter((cartId) => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap((cartId) => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile((loaded) => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find((address) => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find((address) => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map((data) => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutConfigService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n    { provide: CheckoutConfig, useExisting: Config },\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.activeCartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n    { provide: CheckoutConfig, useExisting: Config },\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  LoaderState,\n  UserPaymentService,\n  Region,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription, BehaviorSubject } from 'rxjs';\nimport { map, tap, switchMap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: string[] = [];\n  years: number[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<LoaderState<void>>;\n  sameAsShippingAddress = true;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  paymentForm: FormGroup = this.fb.group({\n    cardType: this.fb.group({\n      code: [null, Validators.required],\n    }),\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    expiryMonth: [null, Validators.required],\n    expiryYear: [null, Validators.required],\n    cvn: ['', Validators.required],\n    defaultPayment: [false],\n  });\n\n  billingAddressForm: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected modalService: ModalService,\n    protected userAddressService: UserAddressService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap((countries) => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap((cardTypes) => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.billingAddressForm.get(\n          'region.isocodeShort'\n        );\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n\n    for (let i = 0; i < 10; i++) {\n      this.years.push(year + i);\n    }\n\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push(`0${j}`);\n      } else {\n        this.months.push(j.toString());\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.paymentForm.value.defaultPayment = !this.paymentForm.value\n      .defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.paymentForm.get('cardType.code').setValue(card.code);\n  }\n\n  monthSelected(month: string): void {\n    this.paymentForm.get('expiryMonth').setValue(month);\n  }\n\n  yearSelected(year: number): void {\n    this.paymentForm.get('expiryYear').setValue(year);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address?.country &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddressForm.value);\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddressForm.get('country.isocode').setValue(country.isocode);\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddressForm\n      .get('region.isocodeShort')\n      .setValue(region.isocodeShort);\n  }\n\n  next(): void {\n    if (this.paymentForm.valid) {\n      if (this.sameAsShippingAddress) {\n        this.setPaymentDetails.emit({\n          paymentDetails: this.paymentForm.value,\n          billingAddress: null,\n        });\n      } else {\n        if (this.billingAddressForm.valid) {\n          this.setPaymentDetails.emit({\n            paymentDetails: this.paymentForm.value,\n            billingAddress: this.billingAddressForm.value,\n          });\n        } else {\n          this.billingAddressForm.markAllAsTouched();\n        }\n      }\n    } else {\n      this.paymentForm.markAllAsTouched();\n\n      if (!this.sameAsShippingAddress) {\n        this.billingAddressForm.markAllAsTouched();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { PaymentFormComponent } from './payment-form.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(\n          (paymentInfo) => paymentInfo && !!Object.keys(paymentInfo).length\n        )\n      )\n      .subscribe((paymentInfo) => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach((key) => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\nimport { FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  placeOrderSubscription: Subscription;\n\n  checkoutSubmitForm = this.fb.group({\n    termsAndConditions: [false, Validators.requiredTrue],\n  });\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected routingService: RoutingService,\n    protected fb: FormBuilder\n  ) {}\n\n  submitForm(): void {\n    if (this.checkoutSubmitForm.valid) {\n      this.checkoutService.placeOrder();\n    } else {\n      this.checkoutSubmitForm.markAllAsTouched();\n    }\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter((order) => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\nimport { FormErrorsModule } from '../../../../shared/index';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  ActiveCartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutConfigService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  addressForm: FormGroup = this.fb.group({\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n    defaultAddress: [false],\n  });\n\n  constructor(\n    protected fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    protected modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap((countries) => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.addressForm.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.addressForm.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some((error) => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.addressForm.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.addressForm['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.addressForm['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.addressForm['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.addressForm['controls'].defaultAddress.setValue(\n      this.addressForm.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.addressForm.valid) {\n      if (this.addressForm.get('region').value.isocode) {\n        this.regionsSub = this.regions$.pipe(take(1)).subscribe((regions) => {\n          const obj = regions.find(\n            (region) =>\n              region.isocode ===\n              this.addressForm.controls['region'].value.isocode\n          );\n          Object.assign(this.addressForm.value.region, {\n            isocodeShort: obj.isocodeShort,\n          });\n        });\n      }\n\n      if (this.addressForm.dirty) {\n        this.checkoutDeliveryService.verifyAddress(this.addressForm.value);\n      } else {\n        // address form value not changed\n        // ignore duplicate address\n        this.submitAddress.emit(undefined);\n      }\n    } else {\n      this.addressForm.markAllAsTouched();\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.addressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then((address) => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.addressForm.value.titleCode,\n                phone: this.addressForm.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.addressForm.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n  isGuestCheckout = false;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected || Object.keys(selected).length === 0)\n          ) {\n            const defaultAddress = addresses.find(\n              (address) => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map((address) => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  addAddress(address: Address): void {\n    const selectedSub = this.selectedAddress$.subscribe((selected) => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    this.existingAddresses$.pipe(take(1)).subscribe((addresses) => {\n      addresses.includes(address)\n        ? this.selectAddress(address)\n        : this.checkoutDeliveryService.createAndSetAddress(address);\n    });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { SkipLinkConfig } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'cx-header',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'cx-main',\n      i18nKey: 'skipLink.labels.main',\n    },\n    { key: 'cx-footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, T[]>();\n  private templatesRefsBefore = new Map<string, T[]>();\n  private templatesRefsAfter = new Map<string, T[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  remove(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    value?: T\n  ): void {\n    switch (position) {\n      case OutletPosition.BEFORE:\n        this.removeValueOrAll(this.templatesRefsBefore, outlet, value);\n        break;\n      case OutletPosition.AFTER:\n        this.removeValueOrAll(this.templatesRefsAfter, outlet, value);\n        break;\n      default:\n        this.removeValueOrAll(this.templatesRefs, outlet, value);\n    }\n  }\n\n  private store(store: Map<string, T[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n\n  protected removeValueOrAll(\n    store: Map<string, T[]>,\n    outlet: string,\n    value?: T\n  ): void {\n    if (!value && store.has(outlet)) {\n      store.delete(outlet);\n    } else if (value && store.has(outlet)) {\n      let existing = store.get(outlet);\n      existing = existing.filter((val) => val === value);\n      store.set(outlet, existing);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport {\n  Config,\n  ConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkConfig } from './config/skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n    KeyboardFocusModule,\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    { provide: SkipLinkConfig, useExisting: Config },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter((event) => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import {\n  ComponentFactoryResolver,\n  Injectable,\n  isDevMode,\n  ViewContainerRef,\n} from '@angular/core';\nimport { LaunchInlineDialog, LAUNCH_CALLER } from '../config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class InlineRenderStrategy extends LaunchRenderStrategy {\n  constructor(protected componentFactoryResolver: ComponentFactoryResolver) {\n    super();\n  }\n\n  /**\n   * Renders the component from the configuration in the view container ref\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchInlineDialog,\n    caller: LAUNCH_CALLER,\n    vcr: ViewContainerRef\n  ) {\n    // Only render if a ViewContainerRef is provided\n    if (vcr && this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      vcr.createComponent(template);\n      this.renderedCallers.push({ caller, element: vcr.element });\n    } else if (isDevMode()) {\n      if (!vcr) {\n        console.warn(`No view container ref provided for ${caller}`);\n      } else {\n        console.warn(\n          `Element for ${caller} already rendered. To allow multi rendering add property multi: true.`\n        );\n      }\n    }\n  }\n\n  match(config: LaunchInlineDialog) {\n    return Boolean(config.inline);\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned obervable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first((v) => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable((observer) => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin };\n      const intersectionObserver = new IntersectionObserver((entries) => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options?: IntersectionOptions) {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evalutes whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OutletDirective } from './outlet.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletRendererService {\n  private outletRefs = new Map<string, OutletDirective>();\n\n  render(outlet: string): void {\n    if (this.outletRefs.size !== 0) {\n      this.outletRefs.get(outlet).render();\n    }\n  }\n\n  register(cxOutlet: string, context: OutletDirective): void {\n    this.outletRefs.set(cxOutlet, context);\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletRendererService } from './outlet-renderer.service';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  private renderedTemplate = [];\n\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>,\n    // tslint:disable-next-line: unified-signatures\n    intersectionService: DeferLoaderService\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(vcr: ViewContainerRef, templateRef: TemplateRef<any>, outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>, intersectionService?: IntersectionService) instead\n   */\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>\n  );\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService?: DeferLoaderService,\n    private outletRendererService?: OutletRendererService\n  ) {}\n\n  public render(): void {\n    this.vcr.clear();\n    this.renderedTemplate = [];\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n    this.outletRendererService.register(this.cxOutlet, this);\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.build();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.render();\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.build();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private build() {\n    this.buildOutlet(OutletPosition.BEFORE);\n    this.buildOutlet(OutletPosition.REPLACE);\n    this.buildOutlet(OutletPosition.AFTER);\n  }\n\n  private buildOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    templates = templates?.filter((el) => !this.renderedTemplate.includes(el));\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    templates.forEach((obj) => {\n      this.create(obj);\n    });\n  }\n\n  private create(tmplOrFactory: any): void {\n    if (tmplOrFactory instanceof ComponentFactory) {\n      this.vcr.createComponent(tmplOrFactory);\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n    }\n    this.renderedTemplate.push(tmplOrFactory);\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent elements of the given element.\n   *\n   * @param element\n   */\n  private getHostElement(element: Element): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentElement);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injectable,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';\nimport { LaunchOutletDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class OutletRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    protected outletService: OutletService<ComponentFactory<any>>,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletRendererService: OutletRendererService\n  ) {\n    super();\n  }\n\n  /**\n   * Renders the element in the configured outlet\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchOutletDialog,\n    caller: LAUNCH_CALLER,\n    vcr?: ViewContainerRef\n  ) {\n    if (this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      this.outletService.add(\n        config.outlet,\n        template,\n        config.position ? config.position : OutletPosition.BEFORE\n      );\n      this.outletRendererService.render(config.outlet);\n\n      const element = vcr?.element;\n      this.renderedCallers.push({ caller, element });\n    }\n  }\n\n  match(config: LaunchOutletDialog) {\n    return Boolean(config.outlet);\n  }\n\n  remove(caller: LAUNCH_CALLER, config: LaunchOutletDialog): void {\n    const template = this.componentFactoryResolver.resolveComponentFactory(\n      config.component\n    );\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller === caller\n    );\n\n    this.outletService.remove(\n      config.outlet,\n      config.position ? config.position : OutletPosition.BEFORE,\n      template\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { LaunchRoute, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingRenderStrategy extends LaunchRenderStrategy {\n  constructor(protected routingService: RoutingService) {\n    super();\n  }\n  /**\n   * Navigates to the route configured for the caller\n   */\n  render(config: LaunchRoute, _caller: LAUNCH_CALLER) {\n    this.routingService.go(config);\n  }\n\n  match(config: LaunchRoute) {\n    return Boolean(config.cxRoute);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideConfig } from '@spartacus/core';\nimport { DEFAULT_LAUNCH_CONFIG } from './config/default-launch-config';\nimport { LaunchConfig } from './config/launch-config';\nimport {\n  InlineRenderStrategy,\n  LaunchRenderStrategy,\n  OutletRenderStrategy,\n  RoutingRenderStrategy,\n} from './services/index';\n\n@NgModule({\n  providers: [\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: OutletRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: InlineRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: RoutingRenderStrategy,\n      multi: true,\n    },\n  ],\n})\nexport class LaunchDialogModule {\n  static forRoot(): ModuleWithProviders<LaunchDialogModule> {\n    return {\n      ngModule: LaunchDialogModule,\n      providers: [\n        provideConfig(DEFAULT_LAUNCH_CONFIG),\n        { provide: LaunchConfig, useExisting: Config },\n      ],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\nimport { LaunchDialogModule } from './launch-dialog/index';\n\n@NgModule({\n  imports: [OutletRefModule, LaunchDialogModule.forRoot()],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DeferLoadingStrategy,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\n\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position is used to find the CMS page slot (and optional outlet)\n   * that is rendered in the PageSlotComponent. Furthermore, the position\n   * is added as a CSS class name to the host element.\n   */\n  @Input()\n  set position(position: string) {\n    this.position$.next(position);\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  @HostBinding('class.cx-pending') isPending = true;\n  @HostBinding('class.has-components') hasComponents = false;\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  private pendingComponentCount: number;\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   *\n   * @deprecated we'll stop supporting this property in 2.0 as\n   * it is not used separately.\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap((position) => this.cmsService.getContentSlot(position)),\n    tap((slot) => this.addSmartEditSlotClass(slot))\n  );\n\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map((slot) => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    )\n  );\n\n  private subscription = new Subscription();\n\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef,\n    // tslint:disable-next-line:unified-signatures\n    config: CmsConfig\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(cmsService: CmsService, dynamicAttributeService: DynamicAttributeService, renderer: Renderer2, hostElement: ElementRef, config?: CmsConfig) instead\n   */\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef\n  );\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef,\n    protected config?: CmsConfig,\n    protected cdRef?: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.components$.subscribe((components) => {\n        this.hasComponents = components && components.length > 0;\n        this.pendingComponentCount = components ? components.length : 0;\n        this.isPending = this.pendingComponentCount > 0;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n   * Is triggered when a component is added to the view.\n   * We use this information to dropthe `is-pending` class from the page slot\n   * when all nested components have been added.\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pendingComponentCount--;\n    }\n    this.isPending = this.pendingComponentCount > 0;\n    this.cdRef?.markForCheck();\n  }\n\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.getDeferLoadingStrategy(componentType);\n    return { deferLoading };\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether component rendering\n   * should be deferred.\n   */\n  private getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    if (this.config) {\n      return ((this.config as CmsConfig).cmsComponents[componentType] || {})\n        .deferLoading;\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter((slot) => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter((page) => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter((page) => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap((section) => (section ? of(section) : this.templateName$)),\n    tap((name) => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap((section) => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap((templateName) =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        (event) => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe((lang) => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(\n      this.builders.map((builder) => builder.build())\n    ).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  isAnonymousConsentsEnabled = false;\n\n  @Input()\n  consent: AnonymousConsent;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  @Input()\n  isLevel13 = false;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.isAnonymousConsentsEnabled && this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.isAnonymousConsentsEnabled\n      ? this.requiredConsents.includes(templateId)\n      : false;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  isFeatureEnabled,\n  isFeatureLevel,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  isAnonymousConsentsEnabled = isFeatureEnabled(\n    this.anonymousConsentsConfig,\n    ANONYMOUS_CONSENTS_FEATURE\n  );\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.anonymousConsentsConfig, '1.3');\n\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    anonymousConsentsService: AnonymousConsentsService,\n    authService: AuthService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   ```ts\n   constructor(\n     userConsentService: UserConsentService,\n     globalMessageService: GlobalMessageService,\n     anonymousConsentsConfig : AnonymousConsentsConfig,\n     anonymousConsentsService : AnonymousConsentsService,\n     authService: AuthService,\n   ) \n   ```\n   */\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService\n  );\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService,\n    private anonymousConsentsConfig?: AnonymousConsentsConfig,\n    private anonymousConsentsService?: AnonymousConsentsService,\n    private authService?: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (!this.isAnonymousConsentsEnabled) {\n          return templateList;\n        }\n\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map((template) => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe((success) => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap((withdrawalSuccess) => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe((withdrawalSuccess) =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    if (!this.isAnonymousConsentsEnabled) {\n      return false;\n    }\n\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  FocusConfig,\n  KeyboardFocusService,\n} from '../a11y/keyboard-focus/index';\nimport { SkipLinkComponent } from '../a11y/skip-link/index';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  // required by esc focus\n  @HostBinding('tabindex') tabindex = '0';\n\n  @ViewChild(SkipLinkComponent) child: SkipLinkComponent;\n\n  private keyboardFocusConfig: FocusConfig = {\n    focusOnEscape: true,\n    focusOnDoubleEscape: true,\n  };\n\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    this.keyboardFocusService.handleEscape(\n      this.elementRef.nativeElement,\n      this.keyboardFocusConfig,\n      event\n    );\n  }\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe((val) => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { KeyboardFocusModule } from '../a11y/keyboard-focus/keyboard-focus.module';\nimport { SkipLinkModule } from '../a11y/skip-link/skip-link.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n\n    SkipLinkModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach((guard) =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach((key) =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  Config,\n  isFeatureEnabled,\n} from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map((guardClass) => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n\n  shouldForceRefreshPage(): boolean {\n    const config = this.injector.get(Config);\n    return !isFeatureEnabled(config, 'cmsPageLoadOnce');\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  ProtectedRoutesGuard,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService,\n    protectedRoutesGuard: ProtectedRoutesGuard // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since version 1.2.0\n   * Use constructor with more dependencies and make them all required.\n   *\n   * TODO(issue:4646) deprecated since version 1.2.0\n   */\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService\n  );\n  constructor(\n    // expose as `protected` only services from public API:\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutesGuard?: ProtectedRoutesGuard\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:4646) Expect that `ProtectedRoutesGuard` dependency is required (remove `if` logic)\n     */\n    return this.protectedRoutesGuard\n      ? this.protectedRoutesGuard\n          .canActivate(route)\n          .pipe(\n            switchMap((result) =>\n              result ? this.getCmsPage(route, state) : of(result)\n            )\n          )\n      : this.getCmsPage(route, state);\n  }\n\n  private getCmsPage(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap((pageContext) =>\n        this.cmsService\n          .getPage(pageContext, this.cmsGuards.shouldForceRefreshPage())\n          .pipe(first(), withLatestFrom(of(pageContext)))\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap((componentTypes) =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap((notFoundPage) => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap((notFoundIndex) => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap((notFoundIndex) =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter((index) => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map((review) => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter((rev) => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter((rev) => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${\n        date.getMonth() + 1\n      }-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map((builder) => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map((data) => data.banners.trim().split(' ')),\n    map((codes) => codes.map((code) => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  map,\n  switchMap,\n} from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    // tslint:disable-next-line:unified-signatures\n    winRef: WindowRef\n  );\n  /**\n   * @deprecated since 1.4\n   *\n   * TODO(issue:#5813) Deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService,\n    private winRef?: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilKeyChanged('components'),\n    switchMap((data) =>\n      combineLatest(\n        data.components.split(' ').map((component) =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map((tab) => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['activeTab']) {\n        this.activeTabNum = routeState['activeTab'];\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach((comp) => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n    AddressBookComponentService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe((error) => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotPasswordForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.forgotPasswordForm = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    if (this.forgotPasswordForm.valid) {\n      this.userService.requestForgotPasswordEmail(\n        this.forgotPasswordForm.value.userEmail\n      );\n      this.routingService.go({ cxRoute: 'login' });\n    } else {\n      this.forgotPasswordForm.markAllAsTouched();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() isValid: string;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantity(control: FormControl) {\n  let q = 0;\n  Object.keys(control.value).forEach((key) => (q += control.value[key]));\n\n  return q > 0 ? null : { required: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap((form) => {\n        return this.getEntries().pipe(\n          map((entries) =>\n            entries.filter(\n              (entry) => this.getFormControl(form, entry).value > 0\n            )\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap((order) => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup({}, { validators: [ValidateQuantity] });\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach((entry) => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    if (this.isConfirmation) {\n      control.disable();\n    }\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach((entry) =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => Boolean(order)),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first((r) => !!r))\n      .subscribe((returnRequest) => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter((consignment) =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            (consignment) => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach((element) => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map((order) => order.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap((returnRequest) => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      (success) => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map((returnRequests) => returnRequests.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap((paymentDetails) => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find((paymentDetail) => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n\n  resetPasswordForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'repassword'\n      ),\n    }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe((state) => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe((reset) => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  resetPassword() {\n    if (this.resetPasswordForm.valid) {\n      const password = this.resetPasswordForm.get('password').value;\n      this.userService.resetPassword(this.token, password);\n    } else {\n      this.resetPasswordForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  updateEmailForm: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n    }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit(): void {\n    if (this.updateEmailForm.valid) {\n      const newUid = this.updateEmailForm.get('confirmEmail').value;\n      const password = this.updateEmailForm.get('password').value;\n\n      this.saveEmail.emit({ newUid, password });\n    } else {\n      this.updateEmailForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  updatePasswordForm: FormGroup;\n\n  @Output()\n  submitted = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.updatePasswordForm = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      {\n        validators: CustomFormValidators.passwordsMustMatch(\n          'newPassword',\n          'newPasswordConfirm'\n        ),\n      }\n    );\n  }\n\n  onSubmit(): void {\n    if (this.updatePasswordForm.valid) {\n      this.submitted.emit({\n        oldPassword: this.updatePasswordForm.value.oldPassword,\n        newPassword: this.updatePasswordForm.value.newPassword,\n      });\n    } else {\n      this.updatePasswordForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submitted = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  updateProfileForm = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.updateProfileForm.patchValue(this.user);\n    }\n  }\n\n  onSubmit(): void {\n    if (this.updateProfileForm.valid) {\n      this.submitted.emit({\n        userUpdates: { ...this.updateProfileForm.value },\n      });\n    } else {\n      this.updateProfileForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  PaginationModel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          (coupons) =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe((k) => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe((success) => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap((preferences) => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach((p) => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          (interests) =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map((interest) => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map((result) => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { asyncScheduler, combineLatest, Observable } from 'rxjs';\nimport { filter, map, observeOn } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home').pipe(observeOn(asyncScheduler)),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter((data) => !!data),\n      switchMap((data) => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap((items) => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                (key) => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                (it) => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map((items) => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach((entry) => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach((child) =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map((child) => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter((event) => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  handleFocus(event: UIEvent): void {\n    const node = <HTMLElement>this.renderer.parentNode(event.target);\n    if (node.tagName === 'NAV') {\n      this.renderer.removeClass(node, 'is-open');\n      this.clear();\n    }\n  }\n\n  toggleOpen(event: UIEvent): void {\n    event.preventDefault();\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter((n) => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map((n) => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter((node) => node.tagName === 'NAV')\n      .forEach((nav) => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n\n  isTabbable(node: any) {\n    return this.flyout && node.children && node.children.length;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  ANONYMOUS_CONSENTS_FEATURE,\n  CmsNavigationComponent,\n  isFeatureEnabled,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d.styleClass)\n  );\n\n  // in order to preserve the backwards compatibility, this should render only if anonymous consents feature is disabled\n  data$ = this.componentData.data$.pipe(\n    filter(\n      () =>\n        !isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        )\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService,\n    // tslint:disable-next-line: unified-signatures\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   *\n    ```ts\n      constructor(\n      componentData: CmsComponentData<CmsNavigationComponent>,\n      service: NavigationService,\n      anonymousConsentsConfig: AnonymousConsentsConfig\n    )\n    ```\n   */\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService\n  );\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap((results) =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map((res) => res.map((suggestion) => suggestion.value)),\n        switchMap((suggestions) => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map((match) => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap((productResult) => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap((c) => (this.config = c)),\n    switchMap((config) => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map((c) => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(() => Boolean(deliveryAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(() => Boolean(deliveryMode)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(() => Boolean(billingAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(() => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap((order) => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    if (this.guestRegisterForm.valid) {\n      this.userService.registerGuest(\n        this.guid,\n        this.guestRegisterForm.value.password\n      );\n      if (!this.subscription) {\n        this.subscription = this.authService\n          .getUserToken()\n          .subscribe((token) => {\n            if (token.access_token) {\n              this.routingService.go({ cxRoute: 'home' });\n            }\n          });\n      }\n    } else {\n      this.guestRegisterForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map((orderDetails) => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\nimport { FormErrorsModule } from '../../shared/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map((product) => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map((ref) =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE = ProductScope.LIST;\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map((data) => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map((data) => data.productCodes.trim().split(' ')),\n    map((codes) =>\n      codes.map((code) => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map((d) => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map((ref) => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map((p: Product) => this.createThumbs(p))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          (t) =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map((c) => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe((reviewsTabLabel) => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter((searchResult) => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach((key) => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe((route) => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(take(1))\n        .subscribe((template) => {\n          this.viewMode$.next(\n            template === 'ProductGridPageTemplate'\n              ? ViewModes.Grid\n              : ViewModes.List\n          );\n        })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe((params) => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap((searchResult) => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach((el) => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map((searchResult) => {\n        return searchResult.facets\n          ? searchResult.facets.filter((facet) => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet: Facet): Facet[] {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : facet.topValueCount\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter((product) => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap((product) => {\n        product.baseOptions.forEach((option) => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find((item) => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach((variant) => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          (item) => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter((variant) => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\nimport { CustomFormValidators } from '../../../../shared/index';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter((p) => !!p),\n    map((p) => p.code),\n    distinctUntilChanged(),\n    switchMap((productCode) =>\n      this.reviewService.getByProductCode(productCode)\n    ),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating: number): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.reviewForm.markAllAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [null, CustomFormValidators.starRatingEmpty],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductReviewsComponent } from './product-reviews.component';\nimport { StarRatingModule, FormErrorsModule } from '../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe((success) => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(\n          (interests) => !!interests.results && interests.results.length === 1\n        )\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap((prefs) => (this.enabledPrefs = prefs)),\n        map((prefs) => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe((error) => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe((success) => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe((text) =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { ActivatedRoute } from '@angular/router';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService, RoutingService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(\n    protected storeDataService: StoreDataService,\n    protected route: ActivatedRoute,\n    protected routingService: RoutingService\n  ) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      (markerIndex) => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe((params) =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  checkoutLoginForm: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch(\n        'email',\n        'emailConfirmation'\n      ),\n    }\n  );\n  sub: Subscription;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  onSubmit() {\n    if (this.checkoutLoginForm.valid) {\n      const email = this.checkoutLoginForm.get('email').value;\n      this.activeCartService.addEmail(email);\n\n      if (!this.sub) {\n        this.sub = this.activeCartService.getAssignedUser().subscribe(() => {\n          if (this.activeCartService.isGuestCart()) {\n            this.authRedirectService.redirect();\n          }\n        });\n      }\n    } else {\n      this.checkoutLoginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\nimport { CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  loginForm: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    protected auth: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected winRef: WindowRef,\n    protected activatedRoute: ActivatedRoute,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    const routeState = this.winRef.nativeWindow?.history?.state;\n    const prefilledEmail = routeState?.['newUid'];\n\n    this.loginForm = this.fb.group({\n      userId: [\n        prefilledEmail?.length ? prefilledEmail : '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n      password: ['', Validators.required],\n    });\n\n    if (this.checkoutConfigService.isGuestCheckout()) {\n      this.loginAsGuest = this.activatedRoute?.snapshot?.queryParams?.[\n        'forced'\n      ];\n    }\n  }\n\n  submitForm(): void {\n    if (this.loginForm.valid) {\n      this.loginUser();\n    } else {\n      this.loginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  protected loginUser(): void {\n    const { userId, password } = this.loginForm.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe((data) => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap((isUserLoggedIn) => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n  ProtectedRoutesService,\n  FeatureConfigService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  /**\n   * @deprecated since 1.4\n   * Check #5666 for more info\n   *\n   * TODO(issue:5666) Deprecated since 1.4\n   */\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes?: ProtectedRoutesService,\n    protected featureConfig?: FeatureConfigService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap((hasPage) => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  protected redirect(): void {\n    // TODO(issue:5666) Deprecated since 1.4\n    const cxRoute: string =\n      this.featureConfig.isLevel('1.4') &&\n      this.protectedRoutes &&\n      this.protectedRoutes.shouldProtect\n        ? 'login'\n        : 'home';\n\n    this.routing.go({ cxRoute });\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles, CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  registerForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    this.loading$ = this.userService.getRegisterUserResultLoading();\n    this.registerUserProcessInit();\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some((message) => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const { registerConsent } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n        return {\n          consent,\n          template: template ? template.description : '',\n        };\n      })\n    );\n\n    this.subscription.add(\n      this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submitForm(): void {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.registerForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const {\n      requiredConsents,\n      registerConsent,\n    } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    const { registerConsent } = this.anonymousConsentsConfig.anonymousConsents;\n\n    if (Boolean(this.registerForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(registerConsent);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(registerConsent);\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe((success) => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule, FormErrorsModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n  MyCouponsModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      lg: {\n        slots: [\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n    },\n    navigation: {\n      lg: { slots: [] },\n      slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      lg: {\n        pageFold: 'UpSelling',\n      },\n\n      pageFold: 'Summary',\n\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2cLayoutConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","/**\n * @deprecated since 2.0.0\n * NOTE: delete this file altogether, move below slots to the main default layout config\n */\n\nimport { LayoutConfig } from '../../../layout/config/layout-config';\n\nexport const PLPAccessibilityLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n  },\n};\n"]}