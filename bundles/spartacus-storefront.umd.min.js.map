{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/layout/launch-dialog/config/launch-config.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/inline-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-dialog.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-renderer.service.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/outlet-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/routing-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/launch-dialog.module.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-launch-dialog.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/visible/visible-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/block/block-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.model.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/select-focus.util.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/keyboard-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.module.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents-dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/default-anonymous-consent-layout.config.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents-dialog/anonymous-consents-dialog.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.component.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/media/media.config.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-structure/services/cms-components.service.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cms-injector.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/component-handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/component-handler.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/default-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/web-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/lazy-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/default-asm-layout.config.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes-impl.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page-guard.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/product-facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/default-media.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","DIALOG_TYPE","LAUNCH_CALLER","BREAKPOINT","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","OutletPosition","LayoutConfig","Injectable","providedIn","useExisting","Config","LaunchRenderStrategy","document","rendererFactory","renderedCallers","dialogClasses","popoverClasses","sidebarEndClasses","sidebarStartClasses","renderer","createRenderer","shouldRender","caller","config","Boolean","component","some","el","multi","applyClasses","dialogType","classes","DIALOG","addClass","body","POPOVER","SIDEBAR_END","SIDEBAR_START","classes_1","classes_1_1","newClass","location","nativeElement","remove","filter","_a","removeClass","getPriority","Inject","DOCUMENT","InlineRenderStrategy","componentFactoryResolver","_this","_super","render","vcr","template","resolveComponentFactory","createComponent","element","of","isDevMode","console","warn","hasMatch","inline","args","RendererFactory2","ComponentFactoryResolver","LaunchDialogService","renderStrategies","layoutConfig","_dialogClose","BehaviorSubject","undefined","launch","findConfiguration","getStrategy","clear","asObservable","closeDialog","reason","resolveApplicable","ICON_TYPE","OutletService","templatesRefs","Map","templatesRefsBefore","templatesRefsAfter","add","outlet","templateOrFactory","position","REPLACE","BEFORE","store","AFTER","get","stacked","templateRef","removeValueOrAll","newValue","set","has","delete","existing","val","OutletRefDirective","tpl","outletService","ngOnInit","cxOutletRef","cxOutletPos","TemplateRef","Input","Directive","selector","OutletRefModule","NgModule","imports","CommonModule","declarations","exports","OutletRendererService","outletRefs","size","register","cxOutlet","context","getOutletRef","pipe","map","IntersectionService","isIntersected","options","intersects","first","v","Observable","observer","intersectOptions","rootMargin","getRootMargin","threshold","intersectionObserver","IntersectionObserver","entries","observe","disconnect","flatMap","entry","isIntersecting","distinctUntilChanged","deferredLoading","intersectionMargin","DeferLoaderService","platformId","intersectionService","globalLoadStrategy","strategy","DeferLoadingStrategy","INSTANT","load","shouldLoadInstantly","deferLoading","elementLoadingStrategy","isPlatformServer","DEFER","type","PLATFORM_ID","OutletDirective","deferLoaderService","outletRendererService","renderedTemplate","renderedComponents","loaded","EventEmitter","subscription","Subscription","unsubscribe","cxOutletDefer","build","ngOnChanges","changes","emit","hostElement","getHostElement","subscribe","buildOutlet","templates","includes","isArray","components","forEach","obj","tmplOrFactory","ComponentFactory","view","createEmbeddedView","$implicit","cxOutletContext","markForCheck","HTMLElement","parentNode","ngOnDestroy","ViewContainerRef","Output","OutletModule","providers","OutletRenderStrategy","template_1","outletDirective","reverse","find","componentType","tap","RoutingRenderStrategy","routingService","_caller","go","cxRoute","RoutingService","LaunchDialogModule","forRoot","ngModule","LaunchDialogModule_1","provide","AnonymousConsentLaunchDialogService","launchDialogService","openDialog","openElement","ANONYMOUS_CONSENT","combineLatest","dialogClose","close","comp","focus","destroy","BaseFocusService","BaseFocusDirective","elementRef","service","defaultConfig","setDefaultConfiguration","requiredTabindex","tabindex","requiresExplicitTabIndex","indexOf","host","tagName","toLowerCase","hasAttribute","ElementRef","HostBinding","VisibleFocusDirective","disableMouseFocus","mouseFocus","handleMousedown","shouldFocusVisible","handleKeydown","HostListener","BlockFocusDirective","block","PersistFocusService","group","getPersistenceGroup","getAttribute","PersistFocusDirective","handleFocus","event","preventDefault","stopPropagation","attr","ngAfterViewInit","isPersisted","preventScroll","SelectFocusUtility","focusableSelectors","focusableSelectorSuffix","query","from","querySelectorAll","findFirstFocusable","autofocus","isHidden","findFocusable","locked","invisible","suffix","join","offsetParent","EscapeFocusService","selectFocusUtil","shouldFocus","focusOnEscape","handleEscape","focusOnDoubleEscape","EscapeFocusDirective","esc","AutoFocusService","hasPersistedFocus","getPersisted","focussed","AutoFocusDirective","shouldAutofocus","firstFocusable","TabFocusService","moveTab","increment","tab","findNextScrollable","findNext","active","getActiveChild","virtualSlideCount","Math","round","scrollWidth","clientWidth","nextVirtualSlide","offsetLeft","getChildren","childs","activeIndex","findIndex","persisted","children","index","isActive","child","activeElement","TabFocusDirective","handleNextTab","handlePreviousTab","TrapFocusService","hasFocusableChildren","moveFocus","focusable","getTrapStart","trap","getTrapEnd","TrapFocusDirective","handleTrapDown","handleTrapUp","LockFocusService","LockFocusDirective","lock","unlock","handleEnter","shouldLock","unlockFocus","handleClick","isLocked","lockFocus","addTabindexToChildren","_b","setAttribute","shouldUnlockAfterAutofocus","setTimeout","toString","Renderer2","KeyboardFocusService","FocusDirective","directives","KeyboardFocusModule","AnonymousConsentManagementBannerComponent","anonymousConsentsService","anonymousConsentLaunchDialogService","subscriptions","bannerVisible$","isBannerVisible","viewDetails","hideBanner","dialog","allowAll","giveAllConsents","toggleBannerDismissed","AnonymousConsentsService","Component","IconResourceType","IconConfig","PaginationItemType","PaginationNavigationPosition","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","FILTER","resources","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getStyleClasses","iconType","resourceType","res","types","svgResource","addLinkResource","resource","findResource","head","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","DomSanitizer","IconComponent","iconLoader","setIcon","addStyleClasses","styleClasses","cls","split","IconModule","provideDefaultConfig","AnonymousConsentDialogComponent","role","modal","showLegalDescription","iconTypes","requiredConsents","focusConfig","anonymousConsents","showLegalDescriptionInDialog","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","rejectAll","take","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","AnonymousConsentsConfig","defaultAnonymousConsentLayoutConfig","AnonymousConsentOpenDialogComponent","ViewChild","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","provideConfig","cmsComponents","entryComponents","SpinnerComponent","SpinnerModule","ConsentManagementFormComponent","consentGiven","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","globalMessageService","anonymousConsentsConfig","authService","allConsentsLoading","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","isUserLoggedIn","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","withLatestFrom","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","success","onConsentGivenSuccess","resetWithdrawConsentProcessState","skipWhile","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","code","GlobalMessageType","MSG_TYPE_CONFIRMATION","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","loading","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","UserConsentService","GlobalMessageService","AuthService","ConsentManagementModule","FormsModule","ReactiveFormsModule","guards","AuthGuard","AnonymousConsentsDialogModule","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","floor","CarouselComponent","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","changeDetection","ChangeDetectionStrategy","OnPush","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","window","getBreakpoint","innerWidth","getSize","breakpoint","breakpoints","xl","isDown","breakpoint$","br","slice","isUp","isEqual","windowWidth","getClosest","nativeWindow","MediaService","breakpointService","getMedia","mediaContainer","format","alt","mainMedia","resolveMedia","src","resolveAbsoluteUrl","altText","srcset","resolveSrcSet","_sortedFormats","keys","mediaFormats","sort","a","width","_reversedFormats","sortedFormats","media","resolveFormat","resolveBestFormat","reversedFormats","reduce","startsWith","getBaseUrl","backend","baseUrl","occ","MediaComponent","mediaService","isInitialized","isLoading","isMissing","container","handleMissing","loadHandler","errorHandler","MediaModule","MediaModule_1","CarouselModule","RouterModule","UrlModule","FormErrorsComponent","_control","control","errors$","statusChanges","startWith","errors","invalid","dirty","touched","FormErrorsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","test","GenericLinkModule","ItemCounterComponent","min","step","allowZero","readonly","input","setValue","markAsDirty","decrement","getControl","_control$","valueChanges","getValidCount","emitEvent","max","ItemCounterModule","defaultPaginationConfig","pagination","addStart","addEnd","PaginationConfig","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","_","number","label","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","minStart","maxStart","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","item","isInactive","getQueryParams","queryParams","snapshot","queryParam","defaultPage","pageChange","page","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","MediaConfig","ModalRef","NgbModalRef","ModalService","ngbModalService","modals","open","content","activeModal","getActiveModal","dismissActiveModal","dismiss","pop","closeActiveModal","NgbModal","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsConfig","QualtricsLoaderService","qualtricsLoaded$","isQualtricsConfigured","initialize","setup","fromEvent","qualtricsScript","defer","idScript","qualtrics","projectId","switchMap","qsi","isDataLoaded","dataLoaded","API","unload","run","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","deps","StarRatingComponent","disabled","change","initialRate","setRate","rating","force","saveRate","setRateOnEvent","StarRatingModule","ViewConfig","ViewConfigModule","ViewConfigModule_1","OrderDetailsService","userOrderService","orderCode$","getRouterState","routingData","state","params","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","UserOrderService","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","cart","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","_c","e_2","_d","consumedEntry","isConsumedByEntry","consumedEntryNumber","orderEntryNumber","entryNumber","CheckoutService","ActiveCartService","CustomFormValidators","emailValidator","email","match","EMAIL_PATTERN","cxInvalidEmail","passwordValidator","password","PASSWORD_PATTERN","cxInvalidPassword","starRatingEmpty","cxStarRatingEmpty","passwordsMustMatch","passwordConfirmation","formGroup","controlsMustMatch","emailsMustMatch","emailConfirmation","firstControlName","secondControlName","errorName","firstControl","controls","secondControl","setErrors","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","CmsComponentsService","missingComponents","determineMappings","componentTypes","getMapping","componentConfig","disableSSR","getDeferLoadingStrategy","getChildRoutes","routes","componentTypes_1","componentTypes_1_1","childRoutes","getGuards","Set","componentTypes_2","componentTypes_2_1","guard","getI18nKeys","i18nKeys","componentTypes_3","componentTypes_3_1","CmsConfig","CmsInjectorService","cmsComponentsService","getCmsData","uid","parentInjector","CmsService","getComponentData","getInjector","configProviders","useValue","parent","ComponentHandler","ComponentHandlerService","handlers","invalidMappings","resolve","componentMapping","handler","getLauncher","viewContainerRef","elementInjector","launcher","ComponentWrapperDirective","dynamicAttributeService","componentHandler","cmsInjector","cxComponentWrapper","flexType","launchComponent","launcherResource","componentRef","cmpRef","addDynamicAttributes","DynamicAttributeService","DefaultComponentHandler","subscriber","factory","getComponentFactory","CxApiService","auth","checkout","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","translation","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","selectiveCartService","ngZone","CheckoutDeliveryService","CheckoutPaymentService","PageMetaService","FeatureConfigService","TranslationService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","SelectiveCartService","NgZone","WebComponentHandler","platform","loadedWebComponents","webElement","disposeFunc","initWebComponent","then","elementName","cmsComponentData","cxApi","parentElement","Promise","path","script","isPlatformBrowser","onload","chainedOnload_1","LazyComponentHandler","defaultHandler","isNotClass","signature","substr","replace","PageComponentModule","AsmEnablerService","isEnabled","addUi","isLaunched","isUsedBefore","localStorage","setItem","getItem","ASM","Location","AsmLoaderModule","APP_INITIALIZER","useFactory","asmFactory","asmEnablerService","CheckoutStepType","DeliveryModePreferences","AsmComponentService","asmAuthService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","isCustomerEmulationSessionInProgress","mergeMap","userToken","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","encapsulation","ViewEncapsulation","None","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","seconds","Pipe","name","CSAgentLoginFormComponent","fb","csAgentTokenLoading","submitEvent","csAgentLoginForm","Validators","required","onSubmit","valid","markAllAsTouched","FormBuilder","CustomerEmulationComponent","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","customerSelectionForm","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","debounceTime","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","pageSize","maxResults","selectCustomerFromList","onDocumentClick","resultList","contains","closeResults","AsmService","(document:click)","defaultAsmLayoutConfig","AsmModule","AsmCoreModule","CurrentProductService","productService","DEFAULT_PRODUCT_SCOPE","ProductScope","DETAILS","getProduct","scopes","productCode","x","AddedToCartDialogComponent","modalService","cartService","promotionService","quantity","modalIsOpen","form","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","addToCartForm","cartEntry$","getEntry","setStockInfo","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","centered","componentInstance","cart$","loaded$","isStable","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","getActiveCartId","getCustomerCoupons","activeCardId","customerCoupons","cartId","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponForm","couponCode","getAddVoucherResultSuccess","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","addVoucher","applyCustomerCoupon","blur","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","every","consignmentEntry","orderEntry","updateable","removeEntry","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","selectiveCartEnabled","cartLoaded$","getLoaded","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","getCart","getLoading","slots","selectiveCart","loadingCart","exclude","arr","arg","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","cmsService","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","CartComponentModule","CartModule","SkipLinkScrollPosition","CheckoutConfig","defaultCheckoutConfig","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","paths","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","OCC_USER_ID_ANONYMOUS","guid","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","router","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","closeModal","PaymentFormComponent","months","years","sameAsShippingAddress","selectedCountry$","goBack","closeForm","paymentForm","cardType","accountHolderName","cardNumber","expiryMonth","expiryYear","cvn","billingAddressForm","firstName","lastName","line1","line2","town","region","isocodeShort","country","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","showSameAsShippingAddressCheckbox$","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","regions$","getRegions","regions","regionControl","year","Date","getFullYear","j","toggleDefaultPaymentMethod","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","catch","verifyAddress","countrySelected","paymentDetails","billingAddress","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","shouldRedirect","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","selectedMethod$","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","cards$","methods","method","translate","month","payment","expiryTranslation","paymentMethods","selectedMethod","textUseThisPayment","textDefaultPaymentMethod","textSelected","defaultPaymentMethod","paymentMethod","createCard","textExpires","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","field","cardLabels","selected","title","img","actions","header","goNext","goPrevious","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","checkoutSubmitForm","termsAndConditions","requiredTrue","submitForm","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","setAsDefaultField","showCancelBtn","submitAddress","backToAddress","addressForm","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","subject","addressData","patchValue","regionSelected","toggleDefaultAddress","regionsSub","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","getAddressesLoading","existingAddresses$","selectedAddress$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","card","getCardContent","addAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","SkipLinkConfig","SkipLinkService","keyboardFocusService","skipLinks$","getSkipLinks","found","skipLinks","skipLink","splice","getSkipLinkIndexInArray","i18nKey","scrollToTarget","hasTabindex","removeAttribute","previous","this_1","SkipLinkComponent","skipLinkService","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","SkipLinkModule","ConfigModule","withConfig","skipLinkFactory","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","LayoutModule","PageSlotComponent","isPageFold","isPending","hasComponents","position$","slot$","getContentSlot","isDistinct","components$","slot","pendingComponentCount","class","lastPosition","pending","addSmartEditSlotClass","isLoaded","loadState","getComponentDeferOptions","old","slotData","PageSlotModule","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","resolveSlots","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","pageFoldSlot$","templateName","currentClass","PageLayoutModule","PWAModuleConfig","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","init","addEventListener","deferredEvent","enableAddToHomeScreen","disableAddToHomeScreen","firePrompt","prompt","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","JsonLdScriptFactory","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","JSON","stringify","_key","SecurityContext","HTML","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","StorefrontComponent","isExpanded$","keyboardFocusConfig","navigateSubscription","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","CmsGuardsService","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","Error","endWith","CmsI18nService","translationChunk","loadForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesImplService","cmsRouteExists","isCmsDrivenRoute","routePath","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","resetConfig","CmsRoutesService","CmsPageGuardService","semanticPathService","cmsRoutes","cmsI18n","cmsGuards","canActivatePage","pageData","getPageComponentTypes","canActivateNotFoundPage","notFoundCmsPageContext","getPage","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","SemanticPathService","CmsPageGuard","protectedRoutesGuard","routingConfig","getNextPageContext","shouldReload","getLoadStrategy","guardName","ProtectedRoutesGuard","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","notFound","login","protected","forgotPassword","resetPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","orders","orderDetails","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","couponClaim","defaultRoutingConfig","RoutingModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","AmendOrderType","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","y","typeCode","select","tabNum","history","activeTab","getTitleParams","tabComps","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","forgotPasswordForm","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","continue","amendOrderForm","forwardRoute","AmendOrderActionsModule","ValidateQuantityToCancel","values","cxNoSelectedItemToCancel","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","features","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","resetPasswordForm","repassword","isPasswordReset","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","updateEmailForm","confirmEmail","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitted","cancelled","updatePasswordForm","oldPassword","newPassword","newPasswordConfirm","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","updateProfileForm","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","observeOn","asyncScheduler","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","node","populateLink","itemType","linkName","getLink","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getTotalDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","matches","wrapper","querySelector","closest","removeStyle","offsetWidth","setStyle","navs","childNodes","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","classList","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","scrollIntoView","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","FacetGroupCollapsedState","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","model","setConditions","ProductDetailOutlets","ProductFacetService","routeState$","searchResult$","filterForPage","mapResults","facetList$","facets","activeFacets","CATEGORY_PAGE","currentQuery","filterBreadcrumbs","breadcrumb","hasBreadcrumb","facetCode","facetValueCode","FacetService","productFacetService","facetState","facetList","facet","getState","getStateSnapshot","toggledState","toggled","COLLAPSED","EXPANDED","maxVisible","topVisible","updateState","increaseVisibleValues","decreaseVisibleValues","topValueCount","hasState","property","getLinkParams","HttpUrlEncodingCodec","decodeValue","ActiveFacetsComponent","facetService","closeIcon","removeQuery","getFocusKey","facetValueName","Default","ActiveFacetsModule","FacetListComponent","closeList","dialogFocusConfig","_isDialog","expandFacetGroup","isCollapsed","FacetComponent","expandIcon","collapseIcon","_facet","isMultiSelect","multiSelect","state$","toggleGroup","keyboardFocus","openLink","FacetModule","FacetListModule","ProductFacetNavigationComponent","CLOSE_DELAY","open$","isOpen$","asapScheduler","hasTrigger","delayWhen","launched","isActive$","trigger","ProductFacetNavigationModule","ProductRefinementComponent","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","q","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","OccConfig","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","radius","parseParameters","googleMaps","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderConfig","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","checkoutLoginForm","addEmail","sub","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","routeState","prefilledEmail","loginForm","_e","loginUser","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","registerForm","newsletter","isConsentRequired","termsandconditions","getRegisterUserResultLoading","registerUserProcessInit","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","registerUser","collectDataFromRegisterForm","titleSelected","formData","onRegisterUserSuccess","resetRegisterUserProcessState","getRegisterUserResultSuccess","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","mediaConfig","mobile","tablet","desktop","widescreen","cartIcon","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","StorefrontFoundationModule","StateModule","AuthModule","AnonymousConsentsModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory"],"mappings":";;;;;;;;;;;;;;oFAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAG5E,ICmCKK,EAUAC,ECtEAC,EFyBDC,EAAW,WAQlB,OAPAA,EAAWf,OAAOgB,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIf,KADTc,EAAIG,UAAUF,GACOnB,OAAOU,UAAUL,eAAekB,KAAKL,EAAGd,KAAIa,EAAEb,GAAKc,EAAEd,IAE9E,OAAOa,IAEKO,MAAMhB,KAAMa,YAezB,SAASI,EAAWC,EAAYC,EAAQC,EAAKC,GAChD,IAA2H/B,EAAvHgC,EAAIT,UAAUC,OAAQS,EAAID,EAAI,EAAIH,EAAkB,OAATE,EAAgBA,EAAO7B,OAAOgC,yBAAyBL,EAAQC,GAAOC,EACrH,GAAuB,iBAAZI,SAAoD,mBAArBA,QAAQC,SAAyBH,EAAIE,QAAQC,SAASR,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAIV,EAAIO,EAAWJ,OAAS,EAAGH,GAAK,EAAGA,KAASrB,EAAI4B,EAAWP,MAAIY,GAAKD,EAAI,EAAIhC,EAAEiC,GAAKD,EAAI,EAAIhC,EAAE6B,EAAQC,EAAKG,GAAKjC,EAAE6B,EAAQC,KAASG,GAChJ,OAAOD,EAAI,GAAKC,GAAK/B,OAAOmC,eAAeR,EAAQC,EAAKG,GAAIA,EAGzD,SAASK,EAAQC,EAAYC,GAChC,OAAO,SAAUX,EAAQC,GAAOU,EAAUX,EAAQC,EAAKS,IAgDpD,SAASE,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWxB,EAAI,EAChE,OAAIsB,EAAUA,EAAElB,KAAKiB,GACd,CACHI,KAAM,WAEF,OADIJ,GAAKrB,GAAKqB,EAAElB,SAAQkB,OAAI,GACrB,CAAEK,MAAOL,GAAKA,EAAErB,KAAM2B,MAAON,KAKzC,SAASO,EAAOP,EAAGpB,GACtB,IAAIqB,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBT,EAAYiB,EAA3B7B,EAAIsB,EAAElB,KAAKiB,GAAOS,EAAK,GAC3B,IACI,WAAc,IAAN7B,GAAgBA,KAAM,MAAQW,EAAIZ,EAAEyB,QAAQE,MAAMG,EAAGC,KAAKnB,EAAEc,OAExE,MAAOM,GAASH,EAAI,CAAEG,MAAOA,GACjC,QACQ,IACQpB,IAAMA,EAAEe,OAASL,EAAItB,EAAU,SAAIsB,EAAElB,KAAKJ,GAE1D,QAAkB,GAAI6B,EAAG,MAAMA,EAAEG,OAE7B,OAAOF,EAGJ,SAASG,IACZ,IAAK,IAAIH,EAAK,GAAI9B,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3C8B,EAAKA,EAAGI,OAAON,EAAO1B,UAAUF,KACpC,OAAO8B,GC3ECrC,EAAAA,EAAAA,cAAAA,EAAAA,YAAW,KACrB,QAAA,UACAA,EAAA,OAAA,SACAA,EAAA,cAAA,gBACAA,EAAA,YAAA,eAMUC,EAAAA,EAAAA,gBAAAA,EAAAA,cAAa,KACvB,IAAA,MACAA,EAAA,WAAA,aACAA,EAAA,kBAAA,qBCzEUC,EAAAA,EAAAA,aAAAA,EAAAA,WAAU,KACpB,GAAA,KACAA,EAAA,GAAA,KACAA,EAAA,GAAA,KACAA,EAAA,GAAA,KACAA,EAAA,GAAA,KA8CF,ICvDYwC,EDuDZC,EAAA,WAAA,SAAAA,4HAAsBA,EAAY9B,EAAA,CAJjC+B,EAAAA,WAAW,CACVC,WAAY,OACZC,YAAaC,EAAAA,UAEOJ,GAAtB,gBEXE,SAAAK,EAC8BC,EAClBC,GADkBtD,KAAAqD,SAAAA,EAClBrD,KAAAsD,gBAAAA,EA3BFtD,KAAAuD,gBAIL,GAKKvD,KAAAwD,cAAgB,CAAC,UAAW,OAAQ,QAAS,QAI7CxD,KAAAyD,eAAiB,GAIjBzD,KAAA0D,kBAAoB,GAIpB1D,KAAA2D,oBAAsB,GAQ9B3D,KAAK4D,SAAWN,EAAgBO,eAAe,KAAM,MAuFzD,OA5DYT,EAAAlD,UAAA4D,aAAV,SACEC,EACAC,GAEA,OACEC,QAAQD,EAAOE,cACdlE,KAAKuD,gBAAgBY,MAAK,SAACC,GAAO,OAAAA,EAAGL,SAAWA,QAC3CC,EAAOK,QAKPjB,EAAAlD,UAAAoE,aAAV,SACEJ,EACAK,WAEIC,EAAU,GAGd,OAAQD,GACN,KAAKnE,EAAAA,YAAYqE,OACfD,EAAUxE,KAAKwD,cACfxD,KAAK4D,SAASc,SAAS1E,KAAKqD,SAASsB,KAAM,cAC3C,MACF,KAAKvE,EAAAA,YAAYwE,QACfJ,EAAUxE,KAAKyD,eACf,MACF,KAAKrD,EAAAA,YAAYyE,YACfL,EAAUxE,KAAK0D,kBACf,MACF,KAAKtD,EAAAA,YAAY0E,cACfN,EAAUxE,KAAK2D,wBAInB,IAAuB,IAAAoB,EAAAhD,EAAAyC,GAAOQ,EAAAD,EAAA3C,QAAA4C,EAAA1C,KAAA0C,EAAAD,EAAA3C,OAAE,CAA3B,IAAM6C,EAAQD,EAAA3C,MACjBrC,KAAK4D,SAASc,SAASR,EAAUgB,SAASC,cAAeF,uGAWtD7B,EAAAlD,UAAAkF,OAAP,SAAcrB,EAAgCC,SAC5ChE,KAAKuD,gBAAkBvD,KAAKuD,gBAAgB8B,QAC1C,SAACjB,GAAO,OAAAA,EAAGL,SAAWA,MAGI,QAAxBuB,EAACtB,SAAuB,IAAAsB,OAAA,EAAAA,EAAEf,cAAenE,EAAAA,YAAYqE,QACvDzE,KAAK4D,SAAS2B,YAAYvF,KAAKqD,SAASsB,KAAM,eAIlDvB,EAAAlD,UAAAsF,YAAA,WACE,OAAA,IApHkBpC,EAAoBnC,EAAA,CA4BrCW,EAAA,EAAA6D,EAAAA,OAAOC,EAAAA,YA5BUtC,oBCDpB,SAAAuC,EAC8BtC,EAClBC,EACAsC,GAHZ,IAAAC,EAKEC,EAAA/E,KAAAf,KAAMqD,EAAUC,IAAgBtD,YAJJ6F,EAAAxC,SAAAA,EAClBwC,EAAAvC,gBAAAA,EACAuC,EAAAD,yBAAAA,WAJ4B9F,EAAA6F,EAAAG,GAgBxCH,EAAAzF,UAAA6F,OAAA,SACE/B,EACAD,EACAiC,GAGA,GAAIA,GAAOhG,KAAK8D,aAAaC,EAAQC,GAAS,CAC5C,IAAMiC,EAAWjG,KAAK4F,yBAAyBM,wBAC7ClC,EAAOE,WAGHA,EAAY8B,EAAIG,gBAAgBF,GAQtC,OANIjC,MAAAA,OAAM,EAANA,EAAQO,aACVvE,KAAKsE,aAAaJ,EAAWF,MAAAA,OAAM,EAANA,EAAQO,YAGvCvE,KAAKuD,gBAAgBb,KAAK,CAAEqB,OAAMA,EAAEqC,QAASJ,EAAII,QAASlC,UAASA,IAE5DmC,EAAAA,GAAGnC,GACDoC,EAAAA,cACJN,EAGHO,QAAQC,KACN,eAAezC,EAAM,yEAHvBwC,QAAQC,KAAK,sCAAsCzC,KASzD4B,EAAAzF,UAAAuG,SAAA,SAASzC,GACP,OAAOC,QAAQD,EAAO0C,2EA9CrBjB,EAAAA,OAAMkB,KAAA,CAACjB,EAAAA,mBACmBkB,EAAAA,wBACSC,EAAAA,iOAJ3BlB,EAAoB1E,EAAA,CADhC+B,EAAAA,WAAW,CAAEC,WAAY,SAGrBrB,EAAA,EAAA6D,EAAAA,OAAOC,EAAAA,YAFCC,IAA6BvC,gBCExC,SAAA0D,EAEYC,EACAC,GADAhH,KAAA+G,iBAAAA,EACA/G,KAAAgH,aAAAA,EALJhH,KAAAiH,aAAe,IAAIC,EAAAA,qBAAwBC,GAOjDnH,KAAK+G,iBAAmB/G,KAAK+G,kBAAoB,UASnDD,EAAA5G,UAAAkH,OAAA,SACErD,EACAiC,GAEA,IAAMhC,EAAShE,KAAKqH,kBAAkBtD,GACtC,GAAIC,EAAQ,CACV,IAAMJ,EAAW5D,KAAKsH,YAAYtD,GAGlC,GAAIJ,EAEF,OADA5D,KAAKiH,aAAa7E,UAAK+E,GAChBvD,EAASmC,OAAO/B,EAAQD,EAAQiC,QAEhCM,EAAAA,aACTC,QAAQC,KAAK,wCAA0CzC,IAS3D+C,EAAA5G,UAAAqH,MAAA,SAAMxD,GACJ,IAAMC,EAAShE,KAAKqH,kBAAkBtD,GAChCH,EAAW5D,KAAKsH,YAAYtD,GAG9BJ,GACFA,EAASwB,OAAOrB,EAAQC,IAI5BxE,OAAAmC,eAAImF,EAAA5G,UAAA,cAAW,KAAf,WACE,OAAOF,KAAKiH,aAAaO,gDAG3BV,EAAA5G,UAAAuH,YAAA,SAAYC,GACV1H,KAAKiH,aAAa7E,KAAKsF,IAQfZ,EAAA5G,UAAAmH,kBAAV,SAA4BtD,SAC1B,GAAqB,QAArBuB,EAAItF,KAAKgH,oBAAY,IAAA1B,OAAA,EAAAA,EAAE8B,OACrB,OAAOpH,KAAKgH,aAAaI,OAAOrD,IAU1B+C,EAAA5G,UAAAoH,YAAV,SAAsBtD,GACpB,OAAO2D,EAAAA,kBAAkB3H,KAAK+G,iBAAkB,CAAC/C,sEAxEhDyB,EAAAA,OAAMkB,KAAA,CAACvD,YAEgBL,sIANf+D,EAAmB7F,EAAA,CAD/B+B,EAAAA,WAAW,CAAEC,WAAY,SAKrBrB,EAAA,EAAA6D,EAAAA,OAAOrC,KAJC0D,OHdDhE,EAAAA,EAAAA,iBAAAA,EAAAA,eAAc,KACxB,QAAA,UACAA,EAAA,OAAA,SACAA,EAAA,MAAA,QAGF,IIHY8E,eCGZ,SAAAC,IACU7H,KAAA8H,cAAgB,IAAIC,IACpB/H,KAAAgI,oBAAsB,IAAID,IAC1B/H,KAAAiI,mBAAqB,IAAIF,WAyBjCF,EAAA3H,UAAAgI,IAAA,SACEC,EACAC,EACAC,QAAA,IAAAA,IAAAA,EAA2BvF,EAAAA,eAAewF,SAEtCD,IAAavF,EAAAA,eAAeyF,QAC9BvI,KAAKwI,MAAMxI,KAAKgI,oBAAqBG,EAAQC,GAE3CC,IAAavF,EAAAA,eAAewF,SAC9BtI,KAAKwI,MAAMxI,KAAK8H,cAAeK,EAAQC,GAErCC,IAAavF,EAAAA,eAAe2F,OAC9BzI,KAAKwI,MAAMxI,KAAKiI,mBAAoBE,EAAQC,IAahDP,EAAA3H,UAAAwI,IAAA,SACEP,EACAE,EACAM,GAEA,IAAIC,EACJ,YAJA,IAAAP,IAAAA,EAA2BvF,EAAAA,eAAewF,cAC1C,IAAAK,IAAAA,GLxDiC,GK2DzBN,GACN,KAAKvF,EAAAA,eAAeyF,OAClBK,EAAc5I,KAAKgI,oBAAoBU,IAAIP,GAC3C,MACF,KAAKrF,EAAAA,eAAe2F,MAClBG,EAAc5I,KAAKiI,mBAAmBS,IAAIP,GAC1C,MACF,QACES,EAAc5I,KAAK8H,cAAcY,IAAIP,GAEzC,OAAIS,IAAgBD,EACXC,EAAY,GAEdA,GAGTf,EAAA3H,UAAAkF,OAAA,SACE+C,EACAE,EACAhG,GAEA,YAHA,IAAAgG,IAAAA,EAA2BvF,EAAAA,eAAewF,SAGlCD,GACN,KAAKvF,EAAAA,eAAeyF,OAClBvI,KAAK6I,iBAAiB7I,KAAKgI,oBAAqBG,EAAQ9F,GACxD,MACF,KAAKS,EAAAA,eAAe2F,MAClBzI,KAAK6I,iBAAiB7I,KAAKiI,mBAAoBE,EAAQ9F,GACvD,MACF,QACErC,KAAK6I,iBAAiB7I,KAAK8H,cAAeK,EAAQ9F,KAIhDwF,EAAA3H,UAAAsI,MAAR,SAAcA,EAAyBL,EAAgB9F,GACrD,IACMyG,GADWN,EAAME,IAAIP,IAAW,IACPtF,OAAO,CAACR,IACvCmG,EAAMO,IAAIZ,EAAQW,IAGVjB,EAAA3H,UAAA2I,iBAAV,SACEL,EACAL,EACA9F,GAEA,IAAKA,GAASmG,EAAMQ,IAAIb,GACtBK,EAAMS,OAAOd,QACR,GAAI9F,GAASmG,EAAMQ,IAAIb,GAAS,CACrC,IAAIe,EAAWV,EAAME,IAAIP,GACzBe,EAAWA,EAAS7D,QAAO,SAAC8D,GAAQ,OAAAA,IAAQ9G,KAC5CmG,EAAMO,IAAIZ,EAAQe,mGA5GXrB,EAAa5G,EAAA,CAHzB+B,EAAAA,WAAW,CACVC,WAAY,UAED4E,mBCQX,SAAAuB,EACUC,EACAC,GADAtJ,KAAAqJ,IAAAA,EACArJ,KAAAsJ,cAAAA,EAMZ,OAHEF,EAAAlJ,UAAAqJ,SAAA,WACEvJ,KAAKsJ,cAAcpB,IAAIlI,KAAKwJ,YAAaxJ,KAAKqJ,IAAKrJ,KAAKyJ,uDAL3CC,EAAAA,mBACU7B,KANzB5G,EAAA,CADC0I,EAAAA,2CAGD1I,EAAA,CADC0I,EAAAA,2CAHUP,EAAkBnI,EAAA,CAH9B2I,EAAAA,UAAU,CACTC,SAAU,mBAECT,mBCEb,SAAAU,KAA8B,OAAjBA,EAAe7I,EAAA,CAL3B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,cACVC,aAAc,CAACd,GACfe,QAAS,CAACf,MAECU,mBCFb,SAAAM,IACUpK,KAAAqK,WAAa,IAAInD,EAAAA,gBAAgB,IAAIa,YAO7CqC,EAAAlK,UAAA6F,OAAA,SAAOoC,GAC8B,IAA/BnI,KAAKqK,WAAWhI,MAAMiI,MACxBtK,KAAKqK,WAAWhI,MAAMqG,IAAIP,GAAQpC,UAUtCqE,EAAAlK,UAAAqK,SAAA,SAASC,EAAkBC,GACzBzK,KAAKqK,WAAWjI,KAAKpC,KAAKqK,WAAWhI,MAAM0G,IAAIyB,EAAUC,KAM3DL,EAAAlK,UAAAwK,aAAA,SAAavC,GACX,OAAOnI,KAAKqK,WAAW7C,eAAemD,KACpCC,EAAAA,KAAI,SAACzB,GAAQ,OAAAA,EAAIT,IAAIP,MACrB9C,EAAAA,QAAO,SAAC8D,GAAQ,OAAAlF,QAAQkF,sGA9BjBiB,EAAqBnJ,EAAA,CAHjC+B,EAAAA,WAAW,CACVC,WAAY,UAEDmH,MCMbS,EAAA,WACE,SAAAA,EAAsB7G,GAAAhE,KAAAgE,OAAAA,SAUtB6G,EAAA3K,UAAA4K,cAAA,SACE1E,EACA2E,GAEA,OAAO/K,KAAKgL,WAAW5E,EAAS2E,GAASJ,KAAKM,EAAAA,OAAM,SAACC,GAAM,OAAM,IAANA,OAWrDL,EAAA3K,UAAA8K,WAAR,SACE5E,EACA2E,GAFF,IAAAlF,EAAA7F,KAoBE,YAlBA,IAAA+K,IAAAA,EAAA,IAEwB,IAAII,EAAAA,YAAW,SAACC,GACtC,IACMC,EAAmB,CAAEC,WADRzF,EAAK0F,cAAcR,GACCS,UAAWT,EAAQS,WACpDC,EAAuB,IAAIC,sBAAqB,SAACC,GACrDP,EAAShJ,KAAKuJ,KACbN,GAEH,OADAI,EAAqBG,QAAQxF,GACtB,WACLqF,EAAqBI,iBAEtBlB,KACDmB,EAAAA,SAAQ,SAACH,GAAyC,OAAAA,KAClDf,EAAAA,KAAI,SAACmB,GAAqC,OAAAA,EAAMC,kBAChDC,EAAAA,yBAMIpB,EAAA3K,UAAAqL,cAAR,SAAsBR,GACpB,QADoB,IAAAA,IAAAA,EAAA,IAChBA,EAAQO,WACV,OAAOP,EAAQO,WAEjB,IAAMtE,EAAehH,KAAKgE,OAC1B,OACEgD,EAAakF,iBACblF,EAAakF,gBAAgBC,mBAEtBnF,EAAakF,gBAAgBC,wBAJtC,4CArD4BpJ,qHADnB8H,EAAmB5J,EAAA,CAH/B+B,EAAAA,WAAW,CACVC,WAAY,UAED4H,GAAb,GCCAuB,EAAA,WAGE,SAAAA,EAC+BC,EACnBrI,EACAsI,GAFmBtM,KAAAqM,WAAAA,EACnBrM,KAAAgE,OAAAA,EACAhE,KAAAsM,oBAAAA,EAEVtM,KAAKuM,mBAAqBvI,EAAOkI,gBAC7BlI,EAAOkI,gBAAgBM,SACvBC,EAAAA,qBAAqBC,eAa3BN,EAAAlM,UAAAyM,KAAA,SACEvG,EACA2E,GAEA,OAAI/K,KAAK4M,qBAAqB7B,GAAW,IAAI8B,cACpCxG,EAAAA,IAAG,GAEHrG,KAAKsM,oBAAoBxB,cAAc1E,EAAS2E,IAInDqB,EAAAlM,UAAA0M,oBAAR,SACEE,GAEA,OACEC,EAAAA,iBAAiB/M,KAAKqM,aACtBS,IAA2BL,EAAAA,qBAAqBC,SAC/CI,IAA2BL,EAAAA,qBAAqBO,OAC/ChN,KAAKuM,qBAAuBE,EAAAA,qBAAqBC,kDArCZlN,OAAM0B,WAAA,CAAA,CAAA+L,KAA9CxH,EAAAA,OAAMkB,KAAA,CAACuG,EAAAA,sBACUnK,SACa8H,mKANtBuB,EAAkBnL,EAAA,CAH9B+B,EAAAA,WAAW,CACVC,WAAY,SAMTrB,EAAA,EAAA6D,EAAAA,OAAOyH,EAAAA,eAJCd,GAAb,gBC6BE,SAAAe,EACUnH,EACA4C,EACAU,EAGA8D,EACAC,GANArN,KAAAgG,IAAAA,EACAhG,KAAA4I,YAAAA,EACA5I,KAAAsJ,cAAAA,EAGAtJ,KAAAoN,mBAAAA,EACApN,KAAAqN,sBAAAA,EA1BFrN,KAAAsN,iBAAmB,GACpBtN,KAAAuN,mBAAqB,IAAIxF,IActB/H,KAAAwN,OAAgC,IAAIC,EAAAA,cAAsB,GAEpEzN,KAAA0N,aAAe,IAAIC,EAAAA,aA0HrB,OA9GSR,EAAAjN,UAAA6F,OAAP,WACE/F,KAAKgG,IAAIuB,QACTvH,KAAKsN,iBAAmB,GACxBtN,KAAKuN,mBAAmBhG,QACxBvH,KAAK0N,aAAaE,cAClB5N,KAAK0N,aAAe,IAAIC,EAAAA,aAEpB3N,KAAK6N,cACP7N,KAAK6M,eAEL7M,KAAK8N,SAITX,EAAAjN,UAAA6N,YAAA,SAAYC,GACNA,EAAQxD,WACVxK,KAAK+F,SACL/F,KAAKqN,sBAAsB9C,SAASvK,KAAKwK,SAAUxK,QAI/CmN,EAAAjN,UAAA2M,aAAR,WAAA,IAAAhH,EAAA7F,KACEA,KAAKwN,OAAOS,MAAK,GACjB,IAAMC,EAAclO,KAAKmO,eAAenO,KAAKgG,IAAII,QAAQjB,eAIzDnF,KAAK0N,aAAaxF,IAChBlI,KAAKoN,mBACFT,KAAKuB,EAAalO,KAAK6N,eACvBO,WAAU,WACTvI,EAAKiI,QACLjI,EAAK2H,OAAOS,MAAK,QAKjBd,EAAAjN,UAAA4N,MAAR,WACE9N,KAAKqO,YAAYvL,EAAAA,eAAeyF,QAChCvI,KAAKqO,YAAYvL,EAAAA,eAAewF,SAChCtI,KAAKqO,YAAYvL,EAAAA,eAAe2F,QAG1B0E,EAAAjN,UAAAmO,YAAR,SAAoBhG,GAApB,IAAAxC,EAAA7F,KACMsO,EACFtO,KAAKsJ,cAAcZ,IAAI1I,KAAKwK,SAAUnC,GX5FT,IW+F/BiG,EAAYA,MAAAA,OAAS,EAATA,EAAWjJ,QAAO,SAACjB,GAAO,OAACyB,EAAKyH,iBAAiBiB,SAASnK,QAEpDiE,IAAavF,EAAAA,eAAewF,UAC5CgG,EAAY,CAACtO,KAAK4I,cAKfjJ,MAAM6O,QAAQF,KACjBA,EAAY,CAACA,IAGf,IAAMG,EAAa,GACnBH,EAAUI,SAAQ,SAACC,GACjB,IAAMzK,EAAY2B,EAAK1F,OAAOwO,GAC9BF,EAAW/L,KAAKwB,MAGlBlE,KAAKuN,mBAAmBxE,IAAIV,EAAUoG,IAGhCtB,EAAAjN,UAAAC,OAAR,SAAeyO,GAGb,GAFA5O,KAAKsN,iBAAiB5K,KAAKkM,GAEvBA,aAAyBC,EAAAA,iBAE3B,OADkB7O,KAAKgG,IAAIG,gBAAgByI,GAEtC,GAAIA,aAAyBlF,EAAAA,YAAa,CAC/C,IAAMoF,EAAO9O,KAAKgG,IAAI+I,mBACFH,EAClB,CACEI,UAAWhP,KAAKiP,kBAOpB,OADAH,EAAKI,eACEJ,IAcH3B,EAAAjN,UAAAiO,eAAR,SAAuB/H,GACrB,OAAIA,aAAmB+I,YACd/I,EAEFpG,KAAKmO,eAAe/H,EAAQgJ,aAGrCjC,EAAAjN,UAAAmP,YAAA,WACErP,KAAK0N,aAAaE,wDArHL0B,EAAAA,wBACQ5F,EAAAA,mBACE7B,SAGKuE,SACGhC,KApBxBnJ,EAAA,CAAR0I,EAAAA,wCAEQ1I,EAAA,CAAR0I,EAAAA,+CAKQ1I,EAAA,CAAR0I,EAAAA,6CAES1I,EAAA,CAATsO,EAAAA,uCAhBUpC,EAAelM,EAAA,CAH3B2I,EAAAA,UAAU,CACTC,SAAU,gBAECsD,mBCbb,SAAAqC,KAA2B,OAAdA,EAAYvO,EAAA,CANxB8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,cACVC,aAAc,CAACiD,GACfsC,UAAW,CAAC5H,GACZsC,QAAS,CAACgD,MAECqC,oBCUX,SAAAE,EAC8BrM,EAClBC,EACAgG,EACA1D,EACAyH,GALZ,IAAAxH,EAOEC,EAAA/E,KAAAf,KAAMqD,EAAUC,IAAgBtD,YANJ6F,EAAAxC,SAAAA,EAClBwC,EAAAvC,gBAAAA,EACAuC,EAAAyD,cAAAA,EACAzD,EAAAD,yBAAAA,EACAC,EAAAwH,sBAAAA,WAN4BvN,EAAA4P,EAAA5J,GAkBxC4J,EAAAxP,UAAA6F,OAAA,SACE/B,EACAD,GAFF,IAAA8B,EAAA7F,KAIE,GAAIA,KAAK8D,aAAaC,EAAQC,GAAS,CACrC,IAAM2L,EAAW3P,KAAK4F,yBAAyBM,wBAC7ClC,EAAOE,WAUT,OARAlE,KAAKsJ,cAAcpB,IACjBlE,EAAOmE,OACPwH,EACA3L,EAAOqE,SAAWrE,EAAOqE,SAAWvF,EAAAA,eAAeyF,QAErDvI,KAAKqN,sBAAsBtH,OAAO/B,EAAOmE,QACzCnI,KAAKuD,gBAAgBb,KAAK,CAAEqB,OAAMA,IAE3B/D,KAAKqN,sBAAsB3C,aAAa1G,EAAOmE,QAAQwC,KAC5DC,EAAAA,KAAI,SAACgF,GAKH,OAJmBA,EAAgBrC,mBAAmB7E,IACpD1E,EAAOqE,SAAWrE,EAAOqE,SAAWvF,EAAAA,eAAeyF,QAIlDsH,UACAC,MACC,SAAC5L,GAAc,OAAAA,EAAU6L,gBAAkBJ,EAASI,oBAG1DC,EAAAA,KAAI,SAAC9L,IACCF,MAAAA,OAAM,EAANA,EAAQO,aACVsB,EAAKvB,aAAaJ,EAAWF,MAAAA,OAAM,EAANA,EAAQO,kBAO/CmL,EAAAxP,UAAAuG,SAAA,SAASzC,GACP,OAAOC,QAAQD,EAAOmE,SAGxBuH,EAAAxP,UAAAkF,OAAA,SAAOrB,EAAgCC,GACrC,IAAMiC,EAAWjG,KAAK4F,yBAAyBM,wBAC7ClC,EAAOE,WAGTlE,KAAKsJ,cAAclE,OACjBpB,EAAOmE,OACPnE,EAAOqE,SAAWrE,EAAOqE,SAAWvF,EAAAA,eAAeyF,OACnDtC,GAGFH,EAAA5F,UAAMkF,OAAMrE,KAAAf,KAAC+D,EAAQC,sEApEpByB,EAAAA,OAAMkB,KAAA,CAACjB,EAAAA,mBACmBkB,EAAAA,wBACFiB,SACWhB,EAAAA,gCACHuD,4OANxBsF,EAAoBzO,EAAA,CADhC+B,EAAAA,WAAW,CAAEC,WAAY,SAGrBrB,EAAA,EAAA6D,EAAAA,OAAOC,EAAAA,YAFCgK,IAA6BtM,iBCZxC,SAAA6M,EAC8B5M,EAClBC,EACA4M,GAHZ,IAAArK,EAKEC,EAAA/E,KAAAf,KAAMqD,EAAUC,IAAgBtD,YAJJ6F,EAAAxC,SAAAA,EAClBwC,EAAAvC,gBAAAA,EACAuC,EAAAqK,eAAAA,WAJ6BpQ,EAAAmQ,EAAAnK,GAWzCmK,EAAA/P,UAAA6F,OAAA,SAAO/B,EAAqBmM,GAC1BnQ,KAAKkQ,eAAeE,GAAGpM,IAGzBiM,EAAA/P,UAAAuG,SAAA,SAASzC,GACP,OAAOC,QAAQD,EAAOqM,4EAdrB5K,EAAAA,OAAMkB,KAAA,CAACjB,EAAAA,mBACmBkB,EAAAA,wBACD0J,EAAAA,6MAJjBL,EAAqBhP,EAAA,CADjC+B,EAAAA,WAAW,CAAEC,WAAY,SAGrBrB,EAAA,EAAA6D,EAAAA,OAAOC,EAAAA,YAFCuK,IAA8B7M,gBCsB3C,SAAAmN,WAOA,SAPaA,EACJA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUC,EACVjB,UAAW,CAAC,CAAEkB,QAAS5N,EAAcG,YAAaC,EAAAA,WAJ3CoN,EAAkBG,EAAAzP,EAAA,CAnB9B8I,EAAAA,SAAS,CACR0F,UAAW,CACT,CACEkB,QAASvN,EACTF,YAAawM,EACbrL,OAAO,GAET,CACEsM,QAASvN,EACTF,YAAayC,EACbtB,OAAO,GAET,CACEsM,QAASvN,EACTF,YAAa+M,EACb5L,OAAO,OAIAkM,mBCnBX,SAAAK,EAAsBC,GAAA7Q,KAAA6Q,oBAAAA,SAEtBD,EAAA1Q,UAAA4Q,WAAA,SACEC,EACA/K,GAFF,IAAAH,EAAA7F,KAIQkE,EAAYlE,KAAK6Q,oBAAoBzJ,OACzC/G,EAAAA,cAAc2Q,kBACdhL,GAGF,GAAI9B,EACF,OAAO+M,EAAAA,cAAc,CACnB/M,EACAlE,KAAK6Q,oBAAoBK,cACxBvG,KACDtF,EAAAA,QAAO,SAACC,OAAG6L,EAAH5O,EAAA+C,EAAA,GAAG,GAAW,OAAA6L,QAAmBhK,IAAVgK,KAC/BnB,EAAAA,KAAI,SAAC1K,OAAC8L,EAAD7O,EAAA+C,EAAA,GAAC,GACJyL,MAAAA,GAAAA,EAAa5L,cAAckM,QAC3BxL,EAAKgL,oBAAoBtJ,MAAMlH,EAAAA,cAAc2Q,mBAC7CI,EAAKE,aAEP1G,EAAAA,KAAI,SAACtF,GAAW,OAAX/C,EAAA+C,EAAA,GAAC,iDAtB+BwB,qHADhC8J,EAAmC3P,EAAA,CAD/C+B,EAAAA,WAAW,CAAEC,WAAY,UACb2N,mBCJb,SAAAW,0GAAsBA,EAAgBtQ,EAAA,CAHrC+B,EAAAA,WAAW,CACVC,WAAY,UAEQsO,MCgBtBC,EAAA,WAeE,SAAAA,EACYC,EACAC,GADA1R,KAAAyR,WAAAA,EACAzR,KAAA0R,QAAAA,EANF1R,KAAA2R,cAAiC,GAgE7C,OAvDEH,EAAAtR,UAAAqJ,SAAA,WACEvJ,KAAK4R,0BACL5R,KAAK6R,kBAAoB,GASjBL,EAAAtR,UAAA0R,wBAAV,WACQ5R,KAAKgE,QAA0B,KAAhBhE,KAAKgE,SAAkBhE,KAAK2R,gBAC/C3R,KAAKgE,OAAShE,KAAK2R,gBAQvBnS,OAAAmC,eAAc6P,EAAAtR,UAAA,OAAI,KAAlB,WACE,OAAOF,KAAKyR,WAAWtM,+CAUzB3F,OAAAmC,eAAc6P,EAAAtR,UAAA,mBAAgB,KAA9B,SAA+B4R,GACzB9R,KAAK+R,2BACP/R,KAAK8R,SAAWA,oCASpBtS,OAAAmC,eAAc6P,EAAAtR,UAAA,2BAAwB,KAAtC,WACE,YACoBiH,IAAlBnH,KAAK8R,WAGE,IAFP,CAAC,SAAU,QAAS,SAAU,YAAYE,QACxChS,KAAKiS,KAAKC,QAAQC,kBAGI,MAAtBnS,KAAKiS,KAAKC,UACTlS,KAAKiS,KAAKG,aAAa,SAAWpS,KAAKiS,KAAKG,aAAa,0FAvDxCC,EAAAA,kBACHd,KAJkBtQ,EAAA,CAAtC0I,EAAAA,QAAS2I,EAAAA,YAAY,iDAbFd,EAAkBvQ,EAAA,CADvC2I,EAAAA,aACqB4H,GAAtB,GCXAe,EAAA,SAAAzM,GAAA,SAAAyM,IAAA,IAAA1M,EAAA,OAAAC,GAAAA,EAAA9E,MAAAhB,KAAAa,YAAAb,YACY6F,EAAA8L,cAAoC,CAAEa,mBAAmB,GAMjC3M,EAAA4M,YAAa,IAiBjD,OAxB2C3S,EAAAyS,EAAAzM,GASdyM,EAAArS,UAAAwS,gBAAA,WACrB1S,KAAK2S,qBACP3S,KAAKyS,YAAa,IAIGF,EAAArS,UAAA0S,cAAA,WACnB5S,KAAK2S,qBACP3S,KAAKyS,YAAa,IAItBjT,OAAAmC,eAAc4Q,EAAArS,UAAA,qBAAkB,KAAhC,iBACE,OAAkB,QAAlBoF,EAAOtF,KAAKgE,cAAM,IAAAsB,OAAA,EAAAA,EAAEkN,mDAfYvR,EAAA,CAAjCqR,EAAAA,YAAY,uDAEcrR,EAAA,CAA1B4R,EAAAA,aAAa,kDAMW5R,EAAA,CAAxB4R,EAAAA,aAAa,8CAfHN,EAAqBtR,EAAA,CADjC2I,EAAAA,aACY2I,GAAb,CAA2Cf,iBCIzC,SAAAsB,EACYrB,EACAC,GAFZ,IAAA7L,EAIEC,EAAA/E,KAAAf,KAAMyR,EAAYC,IAAQ1R,YAHhB6F,EAAA4L,WAAAA,EACA5L,EAAA6L,QAAAA,EAPF7L,EAAA8L,cAAkC,CAAEoB,OAAO,GAG3ClN,EAAA7B,OAA2B,KAevC,OApByClE,EAAAgT,EAAAhN,GAcvCgN,EAAA5S,UAAAqJ,SAAA,WACEzD,EAAA5F,UAAMqJ,SAAQxI,KAAAf,MACVA,KAAKgE,OAAO+O,QACd/S,KAAK8R,UAAY,6CATGO,EAAAA,kBACHd,KATVuB,EAAmB7R,EAAA,CAF/B2I,EAAAA,aAEYkJ,IAA4BP,GCQzCS,EAAA,SAAAlN,GAAA,SAAAkN,IAAA,IAAAnN,EAAA,OAAAC,GAAAA,EAAA9E,MAAAhB,KAAAa,YAAAb,YAGY6F,EAAAwL,MAAQ,IAAItJ,aAHiBjI,EAAAkT,EAAAlN,GAKvCkN,EAAA9S,UAAAwI,IAAA,SAAIuK,GACF,OAAOjT,KAAKqR,MAAM3I,IAAIuK,GAjBL,QAwBnBD,EAAA9S,UAAA6I,IAAA,SAAI3H,EAAa6R,GACX7R,GACFpB,KAAKqR,MAAMtI,IAAIkK,GA1BA,MA0BuB7R,IAO1C4R,EAAA9S,UAAAqH,MAAA,SAAM0L,GACJjT,KAAKqR,MAAMpI,OAAOgK,GAlCD,QAyCnBD,EAAA9S,UAAAgT,oBAAA,SAAoBjB,EAAmBjO,GACrC,OAAOA,MAAAA,OAAM,EAANA,EAAQiP,OAAQjP,EAAOiP,MAAQhB,EAAKkB,aC3Cf,sHDYnBH,EAAmB/R,EAAA,CAH/B+B,EAAAA,WAAW,CACVC,WAAY,UAED+P,GAAb,CAAyCzB,GEwBzC6B,EAAA,SAAAtN,GA2BE,SAAAsN,EACY3B,EACAC,GAFZ,IAAA7L,EAIEC,EAAA/E,KAAAf,KAAMyR,EAAYC,IAAQ1R,YAHhB6F,EAAA4L,WAAAA,EACA5L,EAAA6L,QAAAA,EA3BF7L,EAAA8L,cAAoC,GAQpC9L,EAAA7B,OAA6B,KAkEzC,OA5E2ClE,EAAAsT,EAAAtN,GAoBzCsN,EAAAlT,UAAAmT,YAAA,SAAYC,GACVtT,KAAK0R,QAAQ3I,IAAI/I,KAAKoB,IAAKpB,KAAKiT,OAEhCK,MAAAA,GAAAA,EAAOC,iBACPD,MAAAA,GAAAA,EAAOE,mBAUTJ,EAAAlT,UAAAqJ,SAAA,WACEzD,EAAA5F,UAAMqJ,SAAQxI,KAAAf,MACdA,KAAKyT,KAAOzT,KAAKoB,IAAMpB,KAAKoB,SAAM+F,GAG1BiM,EAAAlT,UAAA0R,wBAAV,WAC6B,iBAAhB5R,KAAKgE,QAAuC,KAAhBhE,KAAKgE,SAC1ChE,KAAKgE,OAAS,CAAE5C,IAAKpB,KAAKgE,SAE5B8B,EAAA5F,UAAM0R,wBAAuB7Q,KAAAf,OAM/BoT,EAAAlT,UAAAwT,gBAAA,WACM1T,KAAK2T,aACP3T,KAAKiS,KAAKZ,MAAM,CAAEuC,eAAe,KAIrCpU,OAAAmC,eAAcyR,EAAAlT,UAAA,cAAW,KAAzB,WACE,QAASF,KAAKoB,KAAOpB,KAAK0R,QAAQhJ,IAAI1I,KAAKiT,SAAWjT,KAAKoB,qCAO7D5B,OAAAmC,eAAcyR,EAAAlT,UAAA,MAAG,KAAjB,iBACE,OAA0C,QAA1CoF,EAAQtF,KAAKgE,cAA6B,IAAAsB,OAAA,EAAAA,EAAElE,qCAM9C5B,OAAAmC,eAAcyR,EAAAlT,UAAA,QAAK,KAAnB,WACE,OAAOF,KAAK0R,QAAQwB,oBAClBlT,KAAKiS,KACLjS,KAAKgE,kFA7CeqO,EAAAA,kBACHW,KAZc/R,EAAA,CAAlCqR,EAAAA,YAAY,kDAGbrR,EAAA,CADC4R,EAAAA,aAAa,QAAS,CAAC,4CAnBbO,EAAqBnS,EAAA,CADjC2I,EAAAA,aACYwJ,GAAb,CAA2CN,gBCjC3C,SAAAe,IAKY7T,KAAA8T,mBAA+B,CACvC,UACA,SACA,aACA,QACA,SACA,YAQQ9T,KAAA+T,wBAA0B,wCAEpCF,EAAA3T,UAAA8T,MAAA,SAAM/B,EAAmBpI,GACvB,OAAKA,GAAyB,KAAbA,EAGVlK,MAAMsU,KACXhC,EAAKiC,iBAAiBrK,IAHf,IAOXgK,EAAA3T,UAAAiU,mBAAA,SACElC,EACAjO,GAFF,IAAA6B,EAAA7F,UAEE,IAAAgE,IAAAA,EAAA,CAA4BoQ,WAAW,IAEvC,IAAMvK,EACyB,iBAAtB7F,MAAAA,OAAM,EAANA,EAAQoQ,WAAyBpQ,EAAOoQ,UAAY,cAE7D,OACEpU,KAAKgU,MAAM/B,EAAMpI,GAAUiG,MAAK,SAAC1L,GAAO,OAACyB,EAAKwO,SAASjQ,OACvDpE,KAAKsU,cAAcrC,GAAMnC,MAAK,SAAC1L,GAAO,OAAAH,QAAQG,OAYlDyP,EAAA3T,UAAAoU,cAAA,SACErC,EACAsC,EACAC,GAHF,IAAA3O,EAAA7F,UAEE,IAAAuU,IAAAA,GAAA,QACA,IAAAC,IAAAA,GAAA,GAEA,IAAIC,EAASzU,KAAK+T,wBACbQ,IACHE,GAAU,yBAEZ,IAAM5K,EAAW7J,KAAK8T,mBACnBlJ,KAAI,SAAClK,GAAM,OAACA,EAAK+T,KACjBC,KAAK,KACR,OAAO1U,KAAKgU,MAAM/B,EAAMpI,GAAUxE,QAAO,SAACjB,GACxC,OAACoQ,EAAiCvQ,QAAQG,IAA5ByB,EAAKwO,SAASjQ,OActByP,EAAA3T,UAAAmU,SAAV,SAAmBjQ,GACjB,OAA2B,OAApBA,EAAGuQ,4GA/EDd,EAAkB5S,EAAA,CAH9B+B,EAAAA,WAAW,CACVC,WAAY,UAED4Q,oBCGX,SAAAe,EAAsBC,GAAtB,IAAAhP,EACEC,EAAA/E,KAAAf,OAAOA,YADa6F,EAAAgP,gBAAAA,WADgB/U,EAAA8U,EAAA9O,GAKtC8O,EAAA1U,UAAA4U,YAAA,SAAY9Q,GACV,SAASA,MAAAA,OAAM,EAANA,EAAQ+Q,gBAGnBH,EAAA1U,UAAA8U,aAAA,SACE/C,EACAjO,EACAsP,SAEItT,KAAK8U,YAAY9Q,KACfiO,IAASqB,EAAMnS,QACjB8Q,EAAKZ,MAAM,CAAEuC,eAAe,IAC5BN,EAAMC,iBACND,EAAME,oBAEFxP,MAAAA,OAAM,EAANA,EAAQiR,uBAEsC,QADhD3P,EAAAtF,KAAK6U,gBACFV,mBAAmBlC,EAAM,CAAEmC,WAAW,WAAO,IAAA9O,GAAAA,EAC5C+L,oDAtB2BwC,qHAD5Be,EAAkB3T,EAAA,CAH9B+B,EAAAA,WAAW,CACVC,WAAY,UAED2R,IAA2B5B,GCYxCkC,EAAA,SAAApP,GAqBE,SAAAoP,EACYzD,EACAC,GAFZ,IAAA7L,EAIEC,EAAA/E,KAAAf,KAAMyR,EAAYC,IAAQ1R,YAHhB6F,EAAA4L,WAAAA,EACA5L,EAAA6L,QAAAA,EArBF7L,EAAA8L,cAAmC,CAAEoD,eAAe,GAKpDlP,EAAAsP,IAAM,IAAI1H,EAAAA,eA2BtB,OAlC0C3N,EAAAoV,EAAApP,GAcxCoP,EAAAhV,UAAA8U,aAAA,SAAa1B,GACPtT,KAAK0R,QAAQoD,YAAY9U,KAAKgE,SAChChE,KAAK0R,QAAQsD,aAAahV,KAAKiS,KAAMjS,KAAKgE,OAAQsP,GAEpDtT,KAAKmV,IAAIlH,KAAKjO,KAAK0R,QAAQoD,YAAY9U,KAAKgE,UAU9CkR,EAAAhV,UAAAqJ,SAAA,WACMvJ,KAAK0R,QAAQoD,YAAY9U,KAAKgE,UAChChE,KAAK6R,kBAAoB,GAE3B/L,EAAA5F,UAAMqJ,SAAQxI,KAAAf,gDAVQqS,EAAAA,kBACHuC,KAhBX3T,EAAA,CAATsO,EAAAA,oCAODtO,EAAA,CADC4R,EAAAA,aAAa,iBAAkB,CAAC,6CAbtBqC,EAAoBjU,EAAA,CADhC2I,EAAAA,aACYsL,GAAb,CAA0C9B,kBCT1C,SAAAgC,0DAAsCtV,EAAAsV,EAAAtP,GAIpCsP,EAAAlV,UAAAiU,mBAAA,SACElC,EACAjO,GAEA,YAFA,IAAAA,IAAAA,EAAA,CAA4BoQ,WAAW,IAEb,WAAtBpQ,MAAAA,OAAM,EAANA,EAAQoQ,WACHnC,EACEjS,KAAKqV,kBAAkBpD,EAAMjO,GAC/BhE,KAAKsV,aAAarD,EAAMjS,KAAKkT,oBAAoBjB,EAAMjO,IAEvDhE,KAAK6U,gBAAgBV,mBAAmBlC,EAAMjO,IAAWiO,GAOpEmD,EAAAlV,UAAAmV,kBAAA,SAAkBpD,EAAmBjO,GACnC,QAAShE,KAAKsV,aAAarD,EAAMjS,KAAKkT,oBAAoBjB,EAAMjO,KAUxDoR,EAAAlV,UAAAoV,aAAV,SAAuBrD,EAAmBgB,GACxC,GAAKjT,KAAK0I,IAAIuK,GAAd,CAGA,IAAMsC,EAAW5V,MAAMsU,KACrBhC,EAAKiC,iBACH,mBAAmBlU,KAAK0I,IAAIuK,GAAM,OAGtC,OAAOsC,EAASzU,OAAS,EAAIyU,EAAS,GAAK,uHAxClCH,EAAgBnU,EAAA,CAH5B+B,EAAAA,WAAW,CACVC,WAAY,UAEDmS,IAAyBR,GCetCY,GAAA,SAAA1P,GAQE,SAAA0P,EACY/D,EACAC,GAFZ,IAAA7L,EAIEC,EAAA/E,KAAAf,KAAMyR,EAAYC,IAAQ1R,YAHhB6F,EAAA4L,WAAAA,EACA5L,EAAA6L,QAAAA,EAPF7L,EAAA8L,cAAiC,CAAEyC,WAAW,KA8D1D,OAjEwCtU,EAAA0V,EAAA1P,GAkBtC0P,EAAAtV,UAAAwT,gBAAA,WACM1T,KAAKyV,iBACPzV,KAAKqT,cAEFrT,KAAKyV,kBAAmBzV,KAAKqV,mBAChCvP,EAAA5F,UAAMwT,gBAAe3S,KAAAf,OAQzBwV,EAAAtV,UAAAmT,YAAA,SAAYC,SACNtT,KAAKyV,mBACFnC,MAAAA,OAAK,EAALA,EAAOnS,SAAUmS,EAAMnS,SAAWnB,KAAKiS,KAGzCqB,EAAMnS,OAAuBkQ,QAFX,QAAnB/L,EAAAtF,KAAK0V,sBAAc,IAAApQ,GAAAA,EAAE+L,SAKzBvL,EAAA5F,UAAMmT,YAAWtS,KAAAf,KAACsT,IAMpB9T,OAAAmC,eAAc6T,EAAAtV,UAAA,oBAAiB,KAA/B,WACE,OAAOF,KAAK0R,QAAQ2D,kBAAkBrV,KAAKiS,KAAMjS,KAAKgE,yCAOxDxE,OAAAmC,eAAc6T,EAAAtV,UAAA,kBAAe,KAA7B,iBACE,SAAoB,QAAZoF,EAACtF,KAAKgE,cAAM,IAAAsB,OAAA,EAAAA,EAAE8O,4CAQxB5U,OAAAmC,eAAY6T,EAAAtV,UAAA,iBAAc,KAA1B,WACE,OAAOF,KAAK0R,QAAQyC,mBAAmBnU,KAAKiS,KAAMjS,KAAKgE,kFAtDjCqO,EAAAA,kBACH+C,MAVVI,EAAkBvU,EAAA,CAD9B2I,EAAAA,aACY4L,GAAb,CAAwCN,kBCnBxC,SAAAS,0DAAqC7V,EAAA6V,EAAA7P,GAInC6P,EAAAzV,UAAA0V,QAAA,SACE3D,EACAjO,EACA6R,EACAvC,GAEA,GAAItP,MAAAA,OAAM,EAANA,EAAQ8R,IAAK,CACf,IAAM1T,EACW,WAAf4B,EAAO8R,IACH9V,KAAK+V,mBAAmB9D,EAAMjO,EAAQ6R,GACtC7V,KAAKgW,SAAS/D,EAAMjO,EAAQ6R,GAElCzT,MAAAA,GAAAA,EAAMiP,QAENiC,EAAMC,iBACND,EAAME,oBASAmC,EAAAzV,UAAA6V,mBAAV,SACE9D,EACAjO,EACA6R,SAEMI,EAASjW,KAAKkW,eAAejE,EAAMjO,GAEzC,GAAKiS,EAAL,CAIA,IAAME,EAAoBC,KAAKC,MAAMpE,EAAKqE,YAAcrE,EAAKsE,aAOzDC,EAJwBJ,KAAKC,MAC/BJ,EAAOQ,YAAcxE,EAAKqE,YAAcH,IAGGN,EAiB7C,OAfW,IAATA,GACAW,GAAoBL,IAEpBK,EAAmB,IAER,IAATX,GAAiCW,EAAmB,IACtDA,EAAmBL,EAAoB,GAGkB,QAAjC7Q,EAAGtF,KAAK0W,YAAYzE,EAAMjO,UAAO,IAAAsB,OAAA,EAAAA,EAAEwK,MAC3D,SAACgG,GACC,OAAAA,EAAIW,YACHxE,EAAKqE,YAAcH,EAAqBK,OAMrCb,EAAAzV,UAAA8V,SAAV,SACE/D,EACAjO,EACA6R,GAHF,IAAAhQ,EAAA7F,KAKQ2W,EAAS3W,KAAK0W,YAAYzE,EAAMjO,GAClC4S,EAAcD,MAAAA,OAAM,EAANA,EAAQE,WACxB,SAACvV,GAAM,OAAAA,IAAMuE,EAAKqQ,eAAejE,EAAMjO,MAczC,OAXK4S,IAAgC,IAAjBA,IAClBA,EAAc,GAEhBA,GAAef,EAEF,IAATA,GAAiCe,IAAeD,MAAAA,OAAM,EAANA,EAAQ7V,UAC1D8V,EAAcD,EAAO7V,OAAS,IAEnB,IAAT+U,GAAiCe,EAAc,IACjDA,EAAc,GAETD,EAASA,EAAOC,QAAezP,GAO9BwO,EAAAzV,UAAAgW,eAAV,SACEjE,EACAjO,GAFF,IAAA6B,EAAA7F,KAIQ8W,EAAY9W,KAAKsV,aAAarD,EAAMjO,MAAAA,OAAM,EAANA,EAAQiP,OAClD,GAAI6D,EACF,OAAOA,EAET,IAAMC,EAAW/W,KAAK0W,YAAYzE,EAAMjO,GACpCgT,EAAQD,EAASF,WAAU,SAACf,GAAQ,OAAAjQ,EAAKoR,SAASnB,MAItD,OAHKkB,IAAoB,IAAXA,IACZA,EAAQ,GAEHD,EAASC,IAGRrB,EAAAzV,UAAAwW,YAAV,SACEzE,EACAjO,GAEA,MAA0B,iBAAfA,EAAO8R,KAAmC,WAAf9R,EAAO8R,IACpC9V,KAAK6U,gBAAgBb,MAAM/B,EAAMjO,EAAO8R,KAExC9V,KAAKsU,cAAcrC,GAAM,IAWpC0D,EAAAzV,UAAAoU,cAAA,SACErC,EACAsC,EACAC,GAEA,YAHA,IAAAD,IAAAA,GAAA,QACA,IAAAC,IAAAA,GAAA,GAEOxU,KAAK6U,gBAAgBP,cAAcrC,EAAMsC,EAAQC,IAGhDmB,EAAAzV,UAAA+W,SAAV,SAAmB7S,GACjB,IAAM8S,EAAQ7T,SAAS8T,cACjBtN,EAAWqN,EAAMhF,QAEvB,OACE9N,IAAO8S,KACLvX,MAAMsU,KAAK7P,EAAG8P,iBAAiBrK,IAAWiG,MAAK,SAACtN,GAAM,OAAAA,IAAM0U,sHA9IvDvB,EAAe1U,EAAA,CAH3B+B,EAAAA,WAAW,CACVC,WAAY,UAED0S,IAAwBP,ICIrCgC,GAAA,SAAAtR,GAqBE,SAAAsR,EACY3F,EACAC,GAFZ,IAAA7L,EAIEC,EAAA/E,KAAAf,KAAMyR,EAAYC,IAAQ1R,YAHhB6F,EAAA4L,WAAAA,EACA5L,EAAA6L,QAAAA,EArBF7L,EAAA8L,cAAgC,CAAEmE,KAAK,GAGvCjQ,EAAA7B,OAAyB,KAsBrC,OA3BuClE,EAAAsX,EAAAtR,GAQrCsR,EAAAlX,UAAAmX,cAAA,SAAc/D,UACG,QAAfhO,EAAItF,KAAKgE,cAAM,IAAAsB,OAAA,EAAAA,EAAEwQ,MACf9V,KAAK0R,QAAQkE,QAAQ5V,KAAKiS,KAAMjS,KAAKgE,OAAM,EAAmBsP,IAKlE8D,EAAAlX,UAAAoX,kBAAA,SAAkBhE,UACD,QAAfhO,EAAItF,KAAKgE,cAAM,IAAAsB,OAAA,EAAAA,EAAEwQ,MACf9V,KAAK0R,QAAQkE,QAAQ5V,KAAKiS,KAAMjS,KAAKgE,QAAM,EAAmBsP,6CAK1CjB,EAAAA,kBACHsD,MAfrB1U,EAAA,CADC4R,EAAAA,aAAa,qBAAsB,CAAC,8CAQrC5R,EAAA,CADC4R,EAAAA,aAAa,oBAAqB,CAAC,kDAdzBuE,EAAiBnW,EAAA,CAD7B2I,EAAAA,aACYwN,GAAb,CAAuC5B,mBCJvC,SAAA+B,0DAAsCzX,EAAAyX,EAAAzR,GAMpCyR,EAAArX,UAAAsX,qBAAA,SAAqBvF,GACnB,OAAOjS,KAAKsU,cAAcrC,GAAMnR,OAAS,GAQ3CyW,EAAArX,UAAAuX,UAAA,SACExF,EACAjO,EACA6R,EACAvC,GAEA,IAAMoE,EAA2B1X,KAAKsU,cAAcrC,GAEhD+E,EAAQU,EAAUb,WAAU,SAAC3L,GAAM,OAAAA,IAAMoI,EAAMnS,UAAU0U,GAG1DmB,GAAS,GAAKA,EAAQU,EAAU5W,QAChCkW,EAAQ,GAAKhX,KAAK2X,aAAa3T,EAAO4T,OACtCZ,GAASU,EAAU5W,QAAUd,KAAK6X,WAAW7T,EAAO4T,SAGjDZ,GAASU,EAAU5W,SACrBkW,EAAQ,GAENA,EAAQ,IACVA,EAAQU,EAAU5W,OAAS,GAG7BwS,EAAMC,iBACND,EAAME,kBAEKkE,EAAUV,GAElB3F,UAIGkG,EAAArX,UAAAyX,aAAV,SAAuBC,GACrB,OAAgB,IAATA,GAA0B,UAATA,GAGhBL,EAAArX,UAAA2X,WAAV,SAAqBD,GACnB,OAAgB,IAATA,GAA0B,QAATA,mHApDfL,EAAgBtW,EAAA,CAH5B+B,EAAAA,WAAW,CACVC,WAAY,UAEDsU,IAAyB5B,ICGtCmC,GAAA,SAAAhS,GAsBE,SAAAgS,EACYrG,EACAC,GAFZ,IAAA7L,EAIEC,EAAA/E,KAAAf,KAAMyR,EAAYC,IAAQ1R,YAHhB6F,EAAA4L,WAAAA,EACA5L,EAAA6L,QAAAA,EAvBF7L,EAAA8L,cAAiC,CAAEiG,MAAM,GAGzC/R,EAAA7B,OAA0B,GAIpC6B,EAAAkS,eAAiB,SAACzE,GACVzN,EAAK7B,OAAO4T,MAChB/R,EAAK4R,UAAUnE,EAAK,IAMxBzN,EAAAmS,aAAe,SAAC1E,GACRzN,EAAK7B,OAAO4T,MAChB/R,EAAK4R,UAAUnE,GAAK,MA6B1B,OA/CwCxT,EAAAgY,EAAAhS,GAqC5BgS,EAAA5X,UAAAuX,UAAV,SAAoBnE,EAAgBuC,GAC9B7V,KAAK0R,QAAQ8F,qBAAqBxX,KAAKiS,OACzCjS,KAAK0R,QAAQ+F,UACXzX,KAAKiS,KACLjS,KAAKgE,OACL6R,EACAvC,6CApBkBjB,EAAAA,kBACHkF,MAhBrBtW,EAAA,CAFC4R,EAAAA,aAAa,oBAAqB,CAAC,WACnCA,EAAAA,aAAa,cAAe,CAAC,iDAS9B5R,EAAA,CAFC4R,EAAAA,aAAa,kBAAmB,CAAC,WACjCA,EAAAA,aAAa,oBAAqB,CAAC,+CAfzBiF,EAAkB7W,EAAA,CAD9B2I,EAAAA,aACYkO,GAAb,CAAwCV,mBCJxC,SAAAa,0DAAsCnY,EAAAmY,EAAAnS,mHAAzBmS,EAAgBhX,EAAA,CAH5B+B,EAAAA,WAAW,CACVC,WAAY,UAEDgV,IAAyBV,ICoBtCW,GAAA,SAAApS,GAgDE,SAAAoS,EACYzG,EACAC,EACA9N,GAHZ,IAAAiC,EAKEC,EAAA/E,KAAAf,KAAMyR,EAAYC,IAAQ1R,YAJhB6F,EAAA4L,WAAAA,EACA5L,EAAA6L,QAAAA,EACA7L,EAAAjC,SAAAA,EAjDFiC,EAAA8L,cAAiC,CAAEwG,MAAM,GAGzCtS,EAAA7B,OAA0B,GAgB1B6B,EAAAuS,OAAS,IAAI3K,EAAAA,eAgKzB,OArLwC3N,EAAAoY,EAAApS,GA6BtCoS,EAAAhY,UAAAmY,YAAA,SAAY/E,GACNtT,KAAKsY,YAActY,KAAKiS,OAAUqB,EAAMnS,SAC1CnB,KAAKuY,YAAYjF,GACjBA,EAAME,oBASV0E,EAAAhY,UAAAsY,YAAA,SAAYlF,GACNtT,KAAKsY,YAActY,KAAKyY,WAC1BzY,KAAKuY,YAAYjF,GACjBA,EAAME,oBAYA0E,EAAAhY,UAAAwY,UAAV,WACE1Y,KAAK2Y,uBAAuB,IAGpBT,EAAAhY,UAAAqY,YAAV,SAAsBjF,GACpBtT,KAAKoY,OAAOnK,MAAK,GACjBjO,KAAK2Y,sBAAsB,IAEvBrF,MAAAA,OAAK,EAALA,EAAOnS,UAAWnB,KAAKiS,MACzBnM,EAAA5F,UAAMmT,YAAWtS,KAAAf,KAACsT,IAItB4E,EAAAhY,UAAAqJ,SAAA,mBACEzD,EAAA5F,UAAMqJ,SAAQxI,KAAAf,MAEdA,KAAKsY,WAAwB,QAAdhT,EAAGtF,KAAKgE,cAAM,IAAAsB,OAAA,EAAAA,EAAE6S,KAE3BnY,KAAKsY,aACPtY,KAAK8R,SAAW,EAIX9R,KAAKgE,OAAOnE,eAAe,eAC9BG,KAAKgE,OAAOoQ,WAAY,GAKrBpU,KAAKgE,OAAOnE,eAAe,mBAC9BG,KAAKgE,OAAO+Q,iBAAiD,KAApB,QAAX6D,EAAA5Y,KAAKgE,cAAM,IAAA4U,OAAA,EAAAA,EAAE7D,mBAKjDmD,EAAAhY,UAAAwT,gBAAA,WAAA,IAAA7N,EAAA7F,KACMA,KAAKsY,aAMDtY,KAAKiT,OACTjT,KAAK0R,QAAQ4C,cAActU,KAAKiS,MAAMvD,SAAQ,SAACtK,GAE7C,OAAAyB,EAAKjC,SAASiV,aAAazU,EZ5HL,sBY4H2ByB,EAAKoN,UAItDjT,KAAKyV,iBACPzV,KAAKqT,eAGTvN,EAAA5F,UAAMwT,gBAAe3S,KAAAf,OAGvBkY,EAAAhY,UAAAmT,YAAA,SAAYC,GAAZ,IAAAzN,EAAA7F,KACE,GAAIA,KAAKsY,WAAY,CACnB,IAAItY,KAAK8Y,2BAA2BxF,GAMlC,OAFAyF,YAAW,WAAM,OAAAlT,EAAK6S,oBACtBpF,MAAAA,GAAAA,EAAOE,mBAHPuF,YAAW,WAAM,OAAAlT,EAAK0S,YAAYjF,MAOtCxN,EAAA5F,UAAMmT,YAAWtS,KAAAf,KAACsT,IAGpB4E,EAAAhY,UAAA8U,aAAA,SAAa1B,GACPtT,KAAKsY,YACPtY,KAAK0R,QAAQnK,MAAMvH,KAAKgE,OAAOiP,OAEjCnN,EAAA5F,UAAM8U,aAAYjU,KAAAf,KAACsT,IAUb4E,EAAAhY,UAAA4Y,2BAAR,SAAmCxF,GACjC,OAAQA,GAAStT,KAAK0R,QAAQ2D,kBAAkBrV,KAAKiS,KAAMjS,KAAKgE,SAMxDkU,EAAAhY,UAAAyY,sBAAV,SAAgChY,GAAhC,IAAAkF,EAAA7F,UAAgC,IAAAW,IAAAA,EAAA,GAC1BX,KAAKsY,aACPtY,KAAKyY,UAAkB,IAAP9X,EACVX,KAAKwX,sBAA8B,IAAN7W,GAAkB,IAANA,GAC7CX,KAAK0X,UAAUhJ,SAAQ,SAACtK,GACtB,OAAAyB,EAAKjC,SAASiV,aAAazU,EAAI,WAAYzD,EAAEqY,iBAWrDxZ,OAAAmC,eAAYuW,EAAAhY,UAAA,uBAAoB,KAAhC,WACE,OAAOF,KAAK0R,QAAQ8F,qBAAqBxX,KAAKiS,uCAUhDzS,OAAAmC,eAAYuW,EAAAhY,UAAA,YAAS,KAArB,WACE,OAAOF,KAAK0R,QAAQ4C,cAClBtU,KAAKiS,KACLjS,KAAKsY,YAxLoB,6EAwDLjG,EAAAA,kBACH4F,UACCgB,EAAAA,aAxCWhY,EAAA,CAAhCqR,EAAAA,YAAY,sDAKmBrR,EAAA,CAA/BqR,EAAAA,YAAY,mDAKHrR,EAAA,CAATsO,EAAAA,uCAQDtO,EAAA,CAFC4R,EAAAA,aAAa,gBAAiB,CAAC,WAC/BA,EAAAA,aAAa,gBAAiB,CAAC,4CAahC5R,EAAA,CADC4R,EAAAA,aAAa,QAAS,CAAC,4CAxCbqF,EAAkBjX,EAAA,CAD9B2I,EAAAA,aACYsO,GAAb,CAAwCJ,mBCpBxC,SAAAoB,0DAA0CpZ,EAAAoZ,EAAApT,mHAA7BoT,EAAoBjY,EAAA,CAHhC+B,EAAAA,WAAW,CACVC,WAAY,UAEDiW,IAA6BjB,mBCOxC,SAAAkB,EACY1H,EACAC,EACA9N,GAHZ,IAAAiC,EAKEC,EAAA/E,KAAAf,KAAMyR,EAAYC,EAAS9N,IAAS5D,YAJ1B6F,EAAA4L,WAAAA,EACA5L,EAAA6L,QAAAA,EACA7L,EAAAjC,SAAAA,EAPFiC,EAAA8L,cAA6B,GAEX9L,EAAA7B,OAAsB,KASpD,OAZoClE,EAAAqZ,EAAArT,4CAMVuM,EAAAA,kBACH6G,UACCD,EAAAA,aALJhY,EAAA,CAAjB0I,EAAAA,MAAM,yCAHIwP,EAAclY,EAAA,CAH1B2I,EAAAA,UAAU,CACTC,SAAU,eAECsP,IAAuBjB,ICJ9BkB,GAAa,CASjBD,IAQFE,GAAA,WAAA,SAAAA,KAAkC,OAArBA,EAAmBpY,EAAA,CAL/B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,cACVC,aAAYtH,EAAMwW,IAClBjP,QAAOvH,EAAMwW,OAEFC,GAAb,iBCJE,SAAAC,EACYC,EACAC,EACAxT,GAFAhG,KAAAuZ,yBAAAA,EACAvZ,KAAAwZ,oCAAAA,EACAxZ,KAAAgG,IAAAA,EATJhG,KAAAyZ,cAAgB,IAAI9L,EAAAA,aAE5B3N,KAAA0Z,eAEI1Z,KAAKuZ,yBAAyBI,kBAmCpC,OA3BEL,EAAApZ,UAAA0Z,YAAA,WACE5Z,KAAK6Z,aACL,IAAMC,EAAS9Z,KAAKwZ,oCAAoC1I,WACtD,KACA9Q,KAAKgG,KAEH8T,GACF9Z,KAAKyZ,cAAcvR,IAAI4R,EAAO1L,cAIlCkL,EAAApZ,UAAA6Z,SAAA,WAAA,IAAAlU,EAAA7F,KACEA,KAAKyZ,cAAcvR,IACjBlI,KAAKuZ,yBACFS,kBACArP,KAAKqF,EAAAA,KAAI,WAAM,OAAAnK,EAAKgU,iBACpBzL,cAIPkL,EAAApZ,UAAA2Z,WAAA,WACE7Z,KAAKuZ,yBAAyBU,uBAAsB,IAGtDX,EAAApZ,UAAAmP,YAAA,WACErP,KAAKyZ,cAAc7L,wDA9BiBsM,EAAAA,gCACWtJ,SAChCtB,EAAAA,oBAVNgK,EAAyCrY,EAAA,CAJrDkZ,EAAAA,UAAU,CACTtQ,SAAU,yCACV5D,SAAA,8/BAEWqT,OlCPD1R,EAAAA,EAAAA,YAAAA,EAAAA,UAAS,KACnB,KAAA,OACAA,EAAA,OAAA,SACAA,EAAA,KAAA,OACAA,EAAA,KAAA,OACAA,EAAA,KAAA,OACAA,EAAA,KAAA,OACAA,EAAA,WAAA,aACAA,EAAA,WAAA,aACAA,EAAA,YAAA,cACAA,EAAA,MAAA,QACAA,EAAA,MAAA,QACAA,EAAA,QAAA,UACAA,EAAA,QAAA,UACAA,EAAA,KAAA,OACAA,EAAA,YAAA,cACAA,EAAA,KAAA,OACAA,EAAA,YAAA,cACAA,EAAA,YAAA,cACAA,EAAA,OAAA,SACAA,EAAA,SAAA,WACAA,EAAA,MAAA,QACAA,EAAA,OAAA,SACAA,EAAA,MAAA,QACAA,EAAA,YAAA,cACAA,EAAA,OAAA,SAOF,IAuCYwS,GAvCZC,GAAA,WAAA,SAAAA,4HAAsBA,EAAUpZ,EAAA,CAJ/B+B,EAAAA,WAAW,CACVC,WAAY,OACZC,YAAaC,EAAAA,UAEOkX,GAAtB,IAuCYD,GAAAA,EAAAA,mBAAAA,EAAAA,iBAAgB,KAK1B,IAAA,MAKAA,GAAA,KAAA,OAKAA,GAAA,KAAA,cmC1EUE,GA4EAC,GCzFCC,GAAoC,CAC/CC,KAAM,CACJC,QAAS,CACPC,OAAQ,gBACRC,KAAM,uBACNC,KAAM,qBACNC,KAAM,cACNC,KAAM,kBACNC,KAAM,cACNC,WAAY,oBACZC,YAAa,qBACbC,WAAY,oBACZC,MAAO,4BACPC,QAAS,8BACTC,QAAS,sBACTC,MAAO,eACPC,KAAM,iBACNC,YAAa,uBACbC,KAAM,iBACNC,YAAa,wBACbC,YAAa,qBACbC,SAAU,eACVC,OAAQ,cACRC,MAAO,sBACPC,OAAQ,gBACRC,MAAO,eACPC,YAAa,eACbC,OAAQ,iBAEVC,UAAW,CACT,CACEnP,KAAMmN,EAAAA,iBAAiBiC,KACvBC,IAAK,4EClBX,SAAAC,EACYC,EACAC,EACAC,GAFA1c,KAAAwc,OAAAA,EACAxc,KAAAyc,WAAAA,EACAzc,KAAA0c,UAAAA,EAJJ1c,KAAA2c,gBAAkB,UAU1BJ,EAAArc,UAAA0c,QAAA,SAAQ3P,GACN,OAAIjN,KAAK6c,eAAe5P,EAAMmN,EAAAA,iBAAiB0C,KACtC9c,KAAK0c,UAAUK,wBACpB,yBAAyB/c,KAAKgd,WAAW/P,GAAK,kBAG9CjN,KAAK6c,eAAe5P,EAAMmN,EAAAA,iBAAiB6C,MACtCjd,KAAK0c,UAAUK,wBAAwB/c,KAAKkd,UAAUjQ,SAD/D,GASFsP,EAAArc,UAAAid,gBAAA,SAAgBC,GACd,OAAOpd,KAAKkd,UAAUE,IAAa,IAO7Bb,EAAArc,UAAA2c,eAAR,SACEO,EACAC,GAEA,OACErd,KAAKgE,OAAOoY,aACVpc,KAAKgE,OAAOoY,UAAUtM,MACtB,SAACwN,GACC,OAAAA,EAAIC,OAASD,EAAIrQ,OAASoQ,GAAgBC,EAAIC,MAAMhP,SAAS6O,OAW7Db,EAAArc,UAAA8c,WAAR,SAAmBI,GACjB,IAAMI,EAAcxd,KAAKgE,OAAOoY,UAAUtM,MACxC,SAACwN,GACC,OAAAA,EAAIrQ,OAASmN,EAAAA,iBAAiB0C,KAC9BQ,EAAIC,OACJD,EAAIC,MAAMhP,SAAS6O,MAEvB,GAAII,EACF,OAAOA,EAAYlB,IACZkB,EAAYlB,IAAG,IAAItc,KAAKkd,UAAUE,GACrC,IAAIpd,KAAKkd,UAAUE,IAY3Bb,EAAArc,UAAAud,gBAAA,SAAgBL,GACd,IAAMM,EAA+B1d,KAAK2d,aACxCP,EACAhD,EAAAA,iBAAiBiC,MAEnB,GACEqB,GACAA,EAASpB,MACRtc,KAAK2c,gBAAgBpO,SAASmP,EAASpB,KACxC,CACAtc,KAAK2c,gBAAgBja,KAAKgb,EAASpB,KACnC,IAAMsB,EAAO5d,KAAKwc,OAAOnZ,SAASwa,qBAAqB,QAAQ,GACzDC,EAAO9d,KAAKwc,OAAOnZ,SAAS0a,cAAc,QAChDD,EAAKE,IAAM,aACXF,EAAK7Q,KAAO,WACZ6Q,EAAKG,KAAOP,EAASpB,IACrBsB,EAAKM,YAAYJ,KAIbvB,EAAArc,UAAAyd,aAAR,SACEP,EACAC,GAEA,GAAKrd,KAAKgE,OAAOoY,UAAjB,CAIA,IAAIsB,EAAW1d,KAAKgE,OAAOoY,UAAUtM,MACnC,SAACwN,GACC,OAAAA,EAAIrQ,OAASoQ,GAAgBC,EAAIC,OAASD,EAAIC,MAAMhP,SAAS6O,MAQjE,OALKM,IACHA,EAAW1d,KAAKgE,OAAOoY,UAAUtM,MAC/B,SAACwN,GAAQ,OAACA,EAAIrQ,OAASoQ,IAAiBC,EAAIC,OAAUD,EAAIC,QAAU,OAGjEG,IAGTnB,EAAArc,UAAAgd,UAAA,SAAUE,GACR,GAAIpd,KAAKgE,QAAUhE,KAAKgE,OAAO0W,SAAW1a,KAAKgE,OAAO0W,QAAQ0C,GAC5D,OAAOpd,KAAKgE,OAAO0W,QAAQ0C,IAI/B5d,OAAAmC,eAAY4a,EAAArc,UAAA,SAAM,KAAlB,WACE,OAAOF,KAAKyc,WAAWhC,+EAxHL0D,EAAAA,iBACI9D,UACD+D,EAAAA,0LALZ7B,EAAiBtb,EAAA,CAH7B+B,EAAAA,WAAW,CACVC,WAAY,UAEDsZ,MCeb8B,GAAA,WA4BE,SAAAA,EACYC,EACA7M,EACA7N,GAFA5D,KAAAse,WAAAA,EACAte,KAAAyR,WAAAA,EACAzR,KAAA4D,SAAAA,EAoCd,OA9DWpE,OAAAmC,eAAI0c,EAAAne,UAAA,SAAM,KAAV,SAAW+M,GAClBjN,KAAKue,QAAQtR,oCAONzN,OAAAmC,eAAI0c,EAAAne,UAAA,OAAI,KAAR,SAAS+M,GAChBjN,KAAKue,QAAQtR,oCAoBLoR,EAAAne,UAAAqe,QAAV,SAAkBtR,GACXA,GAAyB,KAATA,IAGrBjN,KAAKya,KAAOza,KAAKse,WAAW1B,QAAQ3P,GACpCjN,KAAKwe,gBAAgBvR,GACrBjN,KAAKse,WAAWb,gBAAgBxQ,KAMxBoR,EAAAne,UAAAse,gBAAV,SAA0BvR,GAA1B,IAAApH,EAAA7F,KACEA,KAAK4D,SAASc,SAAS1E,KAAKiS,KAAM,WAE9BjS,KAAKye,cACPze,KAAKye,aAAa/P,SAAQ,SAACgQ,GACzB,OAAA7Y,EAAKjC,SAAS2B,YAAYM,EAAKoM,KAAMyM,MAIzC1e,KAAKye,aAAeze,KAAKse,WAAWnB,gBAAgBlQ,GAAM0R,MAAM,KAEhE3e,KAAKye,aAAa/P,SAAQ,SAACgQ,GACb,KAARA,GACF7Y,EAAKjC,SAASc,SAASmB,EAAKoM,KAAMyM,OAKxClf,OAAAmC,eAAc0c,EAAAne,UAAA,OAAI,KAAlB,WACE,OAAOF,KAAKyR,WAAWtM,wFApCDoX,UACAlK,EAAAA,kBACF4G,EAAAA,aA1BbhY,EAAA,CAAR0I,EAAAA,oCAQQ1I,EAAA,CAAR0I,EAAAA,kCAbU0U,EAAapd,EAAA,CAJzBkZ,EAAAA,UAAU,CACTtQ,SAAU,mBACV5D,SAAA,2DAEWoY,GAAb,iBCjBA,SAAAO,KAAyB,OAAZA,EAAU3d,EAAA,CANtB8I,EAAAA,SAAS,CACRG,aAAc,CAACmU,IACfrU,QAAS,CAACC,EAAAA,cACVwF,UAAW,CAACoP,EAAAA,qBAAqBrE,KACjCrQ,QAAS,CAACkU,OAECO,oBCyCX,SAAAE,EACY9a,EACAuV,EACAnV,EACAyM,GAHA7Q,KAAAgE,OAAAA,EACAhE,KAAAuZ,yBAAAA,EACAvZ,KAAAoE,GAAAA,EACApE,KAAA6Q,oBAAAA,EAhCc7Q,KAAA+e,KAAO,SACD/e,KAAAgf,OAAQ,EAEhChf,KAAAyZ,cAAgB,IAAI9L,EAAAA,aAE5B3N,KAAAif,sBAAuB,EACvBjf,KAAAkf,UAAYtX,EAAAA,UACZ5H,KAAAmf,iBAA6B,GAM7Bnf,KAAAof,YAA2B,CACzBxH,MAAM,EACN7E,OAAO,EACPqB,UAAW,yBACXW,eAAe,GAiBX9Q,QAAQjE,KAAKgE,OAAOqb,qBACtBrf,KAAKif,qBAAuBjf,KAAKgE,OAAOqb,kBAAkBC,6BACtDrb,QAAQjE,KAAKgE,OAAOqb,kBAAkBF,oBACxCnf,KAAKmf,iBAAmBnf,KAAKgE,OAAOqb,kBAAkBF,mBAuG9D,OAvHEL,EAAA5e,UAAAsY,YAAA,SAAYlF,GAELA,EAAMnS,OAAe+Q,UAAYlS,KAAKoE,GAAGe,cAAc+M,SAC1DlS,KAAKmR,MAAM,gBAkBf2N,EAAA5e,UAAAqJ,SAAA,WACEvJ,KAAKuf,WAAavf,KAAKuZ,yBAAyBiG,eAChDxf,KAAKyf,UAAYzf,KAAKuZ,yBAAyBmG,cAC/C1f,KAAK2f,SAAW3f,KAAKuZ,yBAAyBqG,2BAGhDd,EAAA5e,UAAAiR,MAAA,SAAMzJ,GACJ1H,KAAK6Q,oBAAoBpJ,YAAYC,IAGvCoX,EAAA5e,UAAA2f,UAAA,WAAA,IAAAha,EAAA7F,KACEA,KAAKyZ,cAAcvR,IACjB+I,EAAAA,cAAc,CAACjR,KAAKuf,WAAYvf,KAAKyf,YAClC9U,KACCmV,EAAAA,KAAK,GACL7T,EAAAA,uBACA+D,EAAAA,KAAI,SAAC1K,OAAAsT,EAAArW,EAAA+C,EAAA,GAACgJ,EAAAsK,EAAA,GAAWmH,EAAAnH,EAAA,GACf,OAAAtK,EAAUI,SAAQ,SAACzI,GACjB,IAAM+Z,EAAUna,EAAKoa,wBAAwBha,EAAU8Z,GACvD,GAAIla,EAAK0T,yBAAyB2G,eAAeF,GAAU,CACzD,GAAIna,EAAKsa,kBAAkBla,GACzB,OAGFJ,EAAK0T,yBAAyB6G,gBAAgBna,EAASoa,YAK9DjS,aAELpO,KAAKmR,MAAM,cAGb2N,EAAA5e,UAAA6Z,SAAA,WAAA,IAAAlU,EAAA7F,KACEA,KAAKyZ,cAAcvR,IACjB+I,EAAAA,cAAc,CAACjR,KAAKuf,WAAYvf,KAAKyf,YAClC9U,KACCmV,EAAAA,KAAK,GACL7T,EAAAA,uBACA+D,EAAAA,KAAI,SAAC1K,OAAAsT,EAAArW,EAAA+C,EAAA,GAACgJ,EAAAsK,EAAA,GAAWmH,EAAAnH,EAAA,GACf,OAAAtK,EAAUI,SAAQ,SAACzI,GACjB,IAAM+Z,EAAUna,EAAKoa,wBAAwBha,EAAU8Z,GACvD,GACGC,GAAmC,MAAxBA,EAAQM,cACpBza,EAAK0T,yBAAyBgH,mBAAmBP,GACjD,CACA,GAAIna,EAAKsa,kBAAkBla,GACzB,OAGFJ,EAAK0T,yBAAyBiH,YAAYva,EAASoa,YAK1DjS,aAELpO,KAAKmR,MAAM,aAGL2N,EAAA5e,UAAAigB,kBAAR,SAA0Bla,GACxB,OACEhC,QAAQjE,KAAKgE,OAAOqb,oBACpBpb,QAAQjE,KAAKgE,OAAOqb,kBAAkBF,mBACtCnf,KAAKgE,OAAOqb,kBAAkBF,iBAAiB5Q,SAAStI,EAASoa,KAIrEvB,EAAA5e,UAAAugB,gBAAA,SAAgBnb,OACdob,EAAApb,EAAAob,MACAza,EAAAX,EAAAW,SAKIya,EACF1gB,KAAKuZ,yBAAyBiH,YAAYva,EAASoa,IAEnDrgB,KAAKuZ,yBAAyB6G,gBAAgBna,EAASoa,KAI3DvB,EAAA5e,UAAA+f,wBAAA,SACEha,EACA8Z,gBAAA,IAAAA,IAAAA,EAAA,QAEA,IAAsB,IAAAY,EAAA5e,EAAAge,GAAQa,EAAAD,EAAAve,QAAAwe,EAAAte,KAAAse,EAAAD,EAAAve,OAAE,CAA3B,IAAM4d,EAAOY,EAAAve,MAChB,GAAI4D,EAASoa,KAAOL,EAAQa,aAC1B,OAAOb,oGAGX,OAAO,MAGTlB,EAAA5e,UAAAmP,YAAA,WACErP,KAAKyZ,cAAc7L,wDA7GDkT,EAAAA,+BACkB5G,EAAAA,gCACtB7H,EAAAA,kBACiBvL,KAhCP7F,EAAA,CAAzBqR,EAAAA,YAAY,yCACmBrR,EAAA,CAA/BqR,EAAAA,YAAY,gDAoBbrR,EAAA,CADC4R,EAAAA,aAAa,QAAS,CAAC,4CArBbiM,EAA+B7d,EAAA,CAJ3CkZ,EAAAA,UAAU,CACTtQ,SAAU,8BACV5D,SAAA,olEAEW6Y,MCpBAiC,GAAoD,CAC/D3Z,OAAQ,CACN4J,kBAAmB,CACjBtK,QAAQ,EACRxC,UAAW4a,GACXva,WAAYnE,EAAAA,YAAYqE,wBCO5B,SAAAuc,EACYhb,EACAwT,GADAxZ,KAAAgG,IAAAA,EACAhG,KAAAwZ,oCAAAA,EAYd,OATEwH,EAAA9gB,UAAA4Q,WAAA,WACE,IAAMgJ,EAAS9Z,KAAKwZ,oCAAoC1I,WACtD9Q,KAAK+Q,YACL/Q,KAAKgG,KAEH8T,GACFA,EAAOnP,KAAKmV,EAAAA,KAAK,IAAI1R,sDAVRkB,EAAAA,wBACgCsB,KAJ9B3P,EAAA,CAAlBggB,EAAAA,UAAU,2CADAD,EAAmC/f,EAAA,CAJ/CkZ,EAAAA,UAAU,CACTtQ,SAAU,mCACV5D,SAAA,sIAEW+a,oBCoCb,SAAAE,KAAqD,OAAxCA,EAAsCjgB,EAAA,CAlClD8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAkX,EAAAA,WACAC,EAAAA,qBACA/H,IAEF5J,UAAW,CACT4R,EAAAA,cAAcN,IACdlC,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbhI,0CAA2C,CACzCpV,UAAWoV,GACXzM,aAAcJ,EAAAA,qBAAqBC,SAErCsU,oCAAqC,CACnC9c,UAAW8c,QAKnB9W,aAAc,CACZoP,GACA0H,IAEF7W,QAAS,CACPmP,GACA0H,IAEFO,gBAAiB,CACfjI,GACA0H,OAGSE,MCzCbM,GAAA,WACE,SAAAA,KACF,OAFaA,EAAgBvgB,EAAA,CAJ5BkZ,EAAAA,UAAU,CACTtQ,SAAU,aACV5D,SAAA,mHAEWub,GAAb,iBCGA,SAAAC,KAA4B,OAAfA,EAAaxgB,EAAA,CALzB8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAckX,EAAAA,YACxBjX,aAAc,CAACsX,IACfrX,QAAS,CAACqX,OAECC,oBCkBX,SAAAC,IAjBA1hB,KAAA2hB,cAAe,EAMf3hB,KAAAmf,iBAA6B,GAM7Bnf,KAAA4hB,eAAiB,IAAInU,EAAAA,aAmCvB,OA5BEiU,EAAAxhB,UAAAqJ,SAAA,WACMvJ,KAAKggB,QACPhgB,KAAK2hB,aAAe1d,QAClBjE,KAAKggB,QAAQM,eAAiBuB,EAAAA,yBAAyBC,OAGrD9hB,KAAK+hB,iBAAmB/hB,KAAK+hB,gBAAgBC,iBAC3ChiB,KAAK+hB,gBAAgBC,eAAeC,qBACtCjiB,KAAK2hB,cAAe,EACX3hB,KAAK+hB,gBAAgBC,eAAeE,mBAC7CliB,KAAK2hB,cAAe,KAM5BD,EAAAxhB,UAAAugB,gBAAA,WACEzgB,KAAK2hB,cAAgB3hB,KAAK2hB,aAE1B3hB,KAAK4hB,eAAe3T,KAAK,CACvByS,MAAO1gB,KAAK2hB,aACZ1b,SAAUjG,KAAK+hB,mBAInBL,EAAAxhB,UAAAiiB,WAAA,SAAWC,GACT,OAAOpiB,KAAKmf,iBAAiB5Q,SAAS6T,IA1CxCnhB,EAAA,CADC0I,EAAAA,+CAID1I,EAAA,CADC0I,EAAAA,gDAID1I,EAAA,CADC0I,EAAAA,uCAID1I,EAAA,CADCsO,EAAAA,+CAZUmS,EAA8BzgB,EAAA,CAJ1CkZ,EAAAA,UAAU,CACTtQ,SAAU,6BACV5D,SAAA,0cAEWyb,oBC6BX,SAAAW,EACYC,EACAC,EACAC,EACAjJ,EACAkJ,GAJAziB,KAAAsiB,mBAAAA,EACAtiB,KAAAuiB,qBAAAA,EACAviB,KAAAwiB,wBAAAA,EACAxiB,KAAAuZ,yBAAAA,EACAvZ,KAAAyiB,YAAAA,EAbJziB,KAAAyZ,cAAgB,IAAI9L,EAAAA,aACpB3N,KAAA0iB,mBAAqB,IAAIxb,EAAAA,iBAAyB,GAK1DlH,KAAAmf,iBAA6B,GAsS/B,OA5REkD,EAAAniB,UAAAqJ,SAAA,WACEvJ,KAAK2f,SAAW1O,EAAAA,cAAc,CAC5BjR,KAAKsiB,mBAAmBK,2BACxB3iB,KAAKsiB,mBAAmBM,8BACxB5iB,KAAKsiB,mBAAmBO,kCACxB7iB,KAAKyiB,YAAYK,iBACjB9iB,KAAK0iB,qBACJ/X,KACDC,EAAAA,KACE,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GACCyd,EAAAnK,EAAA,GACAoK,EAAApK,EAAA,GACAqK,EAAArK,EAAA,GACAkK,EAAAlK,EAAA,GACA8J,EAAA9J,EAAA,GAEA,OAAAmK,GACAC,GACAC,IACCH,GACDJ,MAGN1iB,KAAKkjB,kBACLljB,KAAKmjB,kBACLnjB,KAAKojB,uBAGCf,EAAAniB,UAAAgjB,gBAAR,WAAA,IAAArd,EAAA7F,KACEA,KAAKqjB,cAAgBrjB,KAAKsiB,mBAAmB5C,cAAc/U,KACzD2Y,EAAAA,eACEtjB,KAAKuZ,yBAAyBiG,eAC9Bxf,KAAKyiB,YAAYK,kBAEnBzd,EAAAA,QACE,SAACC,OAAAsT,EAAArW,EAAA+C,EAAA,GAACsT,EAAA,GAAeA,EAAA,GAAyC,OAApBA,EAAA,MAExC5I,EAAAA,KAAI,SAAC1K,OAAAsT,EAAArW,EAAA+C,EAAA,GAACie,EAAA3K,EAAA,GAAcA,EAAA,GACb/S,EAAK2d,eAAeD,IACvB1d,EAAKyc,mBAAmBmB,kBAG5B7Y,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAACie,EAAA3K,EAAA,GAAc8K,EAAA9K,EAAA,GAClB,OAAI3U,QAAQ4B,EAAK2c,wBAAwBnD,qBAErCpb,QACE4B,EAAK2c,wBAAwBnD,kBAAkBF,oBAGjDtZ,EAAKsZ,iBAAmBtZ,EAAK2c,wBAAwBnD,kBAAkBF,kBAGvElb,QACE4B,EAAK2c,wBAAwBnD,kBAC1BsE,wBAGE9d,EAAK+d,sBAAsBL,EAAcG,GAI7CH,OAKLlB,EAAAniB,UAAA0jB,sBAAR,SACEL,EACAG,QAAA,IAAAA,IAAAA,EAAA,IAEA,IAAIG,EAA4B,GAEhC,OACG7jB,KAAKwiB,wBAAwBnD,kBAAkBsE,sBAC7CG,uBAUH7f,QACEjE,KAAKwiB,wBAAwBnD,kBAAkBsE,sBAC5CI,eAEL/jB,KAAKwiB,wBAAwBnD,kBAAkBsE,sBAC5CI,aAAajjB,OAAS,IAEzB+iB,EAAkB7jB,KAAKwiB,wBAAwBnD,kBAC5CsE,sBAAsBI,cAGpB/jB,KAAKsiB,mBAAmB0B,uBAC7BT,EACAM,KArBAA,EAAkBH,EAAmB9Y,KAAI,SAAC3E,GAAa,OAAAA,EAASoa,MACzDrgB,KAAKsiB,mBAAmB0B,uBAC7BT,EACAM,KAsBExB,EAAAniB,UAAAijB,gBAAR,WAAA,IAAAtd,EAAA7F,KACEA,KAAKsiB,mBAAmB2B,+BACxBjkB,KAAKyZ,cAAcvR,IACjBlI,KAAKsiB,mBACF4B,8BACA9V,WAAU,SAAC+V,GAAY,OAAAte,EAAKue,sBAAsBD,QAIjD9B,EAAAniB,UAAAkjB,oBAAR,WAAA,IAAAvd,EAAA7F,KACEA,KAAKsiB,mBAAmB+B,mCACxBrkB,KAAKyZ,cAAcvR,IACjBlI,KAAKsiB,mBACFO,kCACAlY,KACC2Z,EAAAA,UAAUrgB,SACVqf,EAAAA,eACEtjB,KAAKsiB,mBAAmBiC,mCAE1B3Z,EAAAA,KAAI,SAACtF,GAA0B,OAA1B/C,EAAA+C,EAAA,GAAG,MACR0K,EAAAA,KAAI,SAACwU,GACCA,GACF3e,EAAKyc,mBAAmBmB,mBAI7BrV,WAAU,SAACoW,GACV,OAAA3e,EAAK4e,0BAA0BD,QAK/BnC,EAAAniB,UAAAsjB,eAAR,SAAuBD,GACrB,OAAOtf,QAAQsf,IAAiBA,EAAaziB,OAAS,GAGxDuhB,EAAAniB,UAAAugB,gBAAA,SAAgBnb,OACdob,EAAApb,EAAAob,MACAza,EAAAX,EAAAW,SAKIya,EACF1gB,KAAKsiB,mBAAmB9B,YAAYva,EAASoa,GAAIpa,EAASye,SAE1D1kB,KAAKsiB,mBAAmBlC,gBAAgBna,EAAS+b,eAAe2C,OAI5DtC,EAAAniB,UAAAkkB,sBAAR,SAA8BD,GACxBA,IACFnkB,KAAKsiB,mBAAmB2B,+BACxBjkB,KAAKuiB,qBAAqBra,IACxB,CAAE9G,IAAK,+CACPwjB,EAAAA,kBAAkBC,yBAKhBxC,EAAAniB,UAAAukB,0BAAR,SAAkCN,GAC5BA,IACFnkB,KAAKsiB,mBAAmB+B,mCACxBrkB,KAAKuiB,qBAAqBra,IACxB,CAAE9G,IAAK,mDACPwjB,EAAAA,kBAAkBC,yBAKxBxC,EAAAniB,UAAA2f,UAAA,SAAUvR,GAAV,IAAAzI,EAAA7F,UAAU,IAAAsO,IAAAA,EAAA,IACR,IAAMwW,EAAwC,GAC9CxW,EAAUI,SAAQ,SAACzI,GACjB,GAAIJ,EAAKyc,mBAAmBpC,eAAeja,EAAS+b,gBAAiB,CACnE,GAAInc,EAAKsa,kBAAkBla,GACzB,OAEF6e,EAAmBpiB,KAAKuD,OAI5BjG,KAAK0iB,mBAAmBtgB,MAAK,GAE7BpC,KAAKyZ,cAAcvR,IACjBlI,KAAK+kB,sBAAsBD,GACxBna,KAAKqF,EAAAA,KAAI,SAACgV,GAAiB,OAAAnf,EAAK6c,mBAAmBtgB,MAAK,OACxDgM,cAICiU,EAAAniB,UAAA6kB,sBAAR,SACED,GADF,IAAAjf,EAAA7F,KAuBE,YAtBA,IAAA8kB,IAAAA,EAAA,IAEiBjiB,EAAAA,OACf7C,KAAKsiB,mBAAmBO,mCACxBlY,KACAsB,EAAAA,uBACA5G,EAAAA,QAAO,SAAC4f,GAAY,OAACA,MAECta,KAAKua,EAAAA,MAAK,SAACC,EAAKC,GAAW,OAAAD,EAAM,KAAI,IACpCxa,KACvBqF,EAAAA,KAAI,SAACrP,GACCA,EAAImkB,EAAmBhkB,QACzB+E,EAAKyc,mBAAmBlC,gBACtB0E,EAAmBnkB,GAAGqhB,eAAe2C,UAKTha,KAClCtF,EAAAA,QAAO,SAACggB,GAAgB,OAAAA,IAAgBP,EAAmBhkB,YAM/DuhB,EAAAniB,UAAA6Z,SAAA,SAASzL,GAAT,IAAAzI,EAAA7F,UAAS,IAAAsO,IAAAA,EAAA,IACP,IAAMgX,EAAoC,GAC1ChX,EAAUI,SAAQ,SAACzI,GACjB,GAAIJ,EAAKyc,mBAAmB/B,mBAAmBta,EAAS+b,gBAAiB,CACvE,GAAInc,EAAKsa,kBAAkBla,GACzB,OAGFqf,EAAe5iB,KAAKuD,OAIxBjG,KAAK0iB,mBAAmBtgB,MAAK,GAE7BpC,KAAKyZ,cAAcvR,IACjBlI,KAAKulB,gBAAgBD,GAClB3a,KAAKqF,EAAAA,KAAI,SAACgV,GAAiB,OAAAnf,EAAK6c,mBAAmBtgB,MAAK,OACxDgM,cAICiU,EAAAniB,UAAAqlB,gBAAR,SACED,GADF,IAAAzf,EAAA7F,KAwBE,YAvBA,IAAAslB,IAAAA,EAAA,IAEiBziB,EAAAA,OACf7C,KAAKsiB,mBAAmBM,+BACxBjY,KACAsB,EAAAA,uBACA5G,EAAAA,QAAO,SAAC4f,GAAY,OAACA,MAECta,KAAKua,EAAAA,MAAK,SAACC,EAAKC,GAAW,OAAAD,EAAM,KAAI,IACjCxa,KAC1BqF,EAAAA,KAAI,SAACrP,GACCA,EAAI2kB,EAAexkB,QACrB+E,EAAKyc,mBAAmB9B,YACtB8E,EAAe3kB,GAAG0f,GAClBiF,EAAe3kB,GAAG+jB,aAKa/Z,KACrCtF,EAAAA,QAAO,SAACggB,GAAgB,OAAAA,IAAgBC,EAAexkB,YAMnDuhB,EAAAniB,UAAAigB,kBAAR,SAA0Bla,GACxB,OACEhC,QAAQjE,KAAKwiB,wBAAwBnD,oBACrCpb,QACEjE,KAAKwiB,wBAAwBnD,kBAAkBF,mBAEjDnf,KAAKwiB,wBAAwBnD,kBAAkBF,iBAAiB5Q,SAC9DtI,EAASoa,KAKfgC,EAAAniB,UAAAmP,YAAA,WACErP,KAAKyZ,cAAc7L,cACnB5N,KAAK0iB,mBAAmB9U,cAExB5N,KAAKsiB,mBAAmB2B,+BACxBjkB,KAAKsiB,mBAAmB+B,6EAjSMmB,EAAAA,0BACEC,EAAAA,4BACG3E,EAAAA,+BACC5G,EAAAA,gCACbwL,EAAAA,eAddrD,EAA0BphB,EAAA,CAJtCkZ,EAAAA,UAAU,CACTtQ,SAAU,wBACV5D,SAAA,wuCAEWoc,oBCMb,SAAAsD,KAAsC,OAAzBA,EAAuB1kB,EAAA,CAvBnC8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACA2b,EAAAA,YACAC,EAAAA,oBACApE,GACAN,EAAAA,WACAvC,IAEFnP,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbe,2BAA4B,CAC1Bne,UAAWme,GACXyD,OAAQ,CAACC,EAAAA,gBAKjB7b,aAAc,CAACmY,GAA4BX,IAC3CvX,QAAS,CAACkY,GAA4BX,IACtCH,gBAAiB,CAACc,OAEPsD,oBCfb,SAAAK,KAA4C,OAA/BA,EAA6B/kB,EAAA,CAbzC8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAkX,EAAAA,WACAvC,GACA6C,GACAkE,GACAtM,IAEFnP,aAAc,CAAC4U,IACfyC,gBAAiB,CAACzC,IAClB3U,QAAS,CAAC2U,OAECkH,oBC6DX,SAAAC,IAvDAjmB,KAAAkf,UAAYtX,EAAAA,UAGZ5H,KAAAkmB,WAAmC,IAAIzY,EAAAA,aAEvCzN,KAAAmmB,eAAuC,IAAI1Y,EAAAA,aAE3CzN,KAAAomB,SAAiC,IAAI3Y,EAAAA,aAErCzN,KAAAqmB,SAAiC,IAAI5Y,EAAAA,aAErCzN,KAAAsmB,WAAmC,IAAI7Y,EAAAA,aAGvCzN,KAAAumB,QAAS,EAGTvmB,KAAAwmB,UAAW,EAGXxmB,KAAAymB,WAAY,EAKZzmB,KAAA0mB,gBAAiB,EAiCnB,OA7BET,EAAA/lB,UAAAymB,YAAA,WACE3mB,KAAKwmB,UAAW,GAGlBP,EAAA/lB,UAAA0mB,WAAA,WACE5mB,KAAKwmB,UAAW,EAChBxmB,KAAKsmB,WAAWrY,KAAK,IAGvBgY,EAAA/lB,UAAA+I,OAAA,WACEjJ,KAAKkmB,WAAWjY,KAAK,IAGvBgY,EAAA/lB,UAAA2mB,WAAA,WACE7mB,KAAKymB,WAAY,EACjBzmB,KAAKmmB,eAAelY,KAAK,IAG3BgY,EAAA/lB,UAAA4mB,KAAA,WACE9mB,KAAKomB,SAASnY,KAAK,IAGrBgY,EAAA/lB,UAAA6mB,KAAA,WACE/mB,KAAKqmB,SAASpY,KAAK,IAKrBgY,EAAA/lB,UAAAqJ,SAAA,aAtDAtI,EAAA,CADCsO,EAAAA,2CAGDtO,EAAA,CADCsO,EAAAA,+CAGDtO,EAAA,CADCsO,EAAAA,yCAGDtO,EAAA,CADCsO,EAAAA,yCAGDtO,EAAA,CADCsO,EAAAA,2CAIDtO,EAAA,CADC0I,EAAAA,sCAID1I,EAAA,CADC0I,EAAAA,wCAID1I,EAAA,CADC0I,EAAAA,yCAID1I,EAAA,CADC0I,EAAAA,uCAGD1I,EAAA,CADC0I,EAAAA,8CAzBUsc,EAAahlB,EAAA,CAJzBkZ,EAAAA,UAAU,CACTtQ,SAAU,UACV5D,SAAA,yoGAEWggB,oBChBb,SAAAe,KAAyB,OAAZA,EAAU/lB,EAAA,CALtB8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAckX,EAAAA,WAAYvC,IACpC1U,aAAc,CAAC+b,IACf9b,QAAS,CAAC8b,OAECe,oBCFX,SAAAC,EAAoBzK,GAAAxc,KAAAwc,OAAAA,SAapByK,EAAA/mB,UAAAgnB,iBAAA,SACE/hB,EACAgiB,GAFF,IAAAthB,EAAA7F,KAIE,OAAOA,KAAKwc,OAAO4K,QAAQzc,KACzBC,EAAAA,KAAI,WAAM,OAACzF,EAA8BoR,eACzC3L,EAAAA,KAAI,SAACyc,GAAe,OAAAxhB,EAAKyhB,eAAeD,EAAYF,QAWhDF,EAAA/mB,UAAAonB,eAAR,SAAuBC,EAAwBJ,GAC7C,IAAIK,EAAkB,EAClBL,EAAUM,SAAS,QAErBD,EAAkBD,EADNJ,EAAUO,UAAU,EAAGP,EAAUrmB,OAAS,IAIpDqmB,EAAUM,SAAS,OAErBD,EACED,GAAkBA,GAFPJ,EAAUO,UAAU,EAAGP,EAAUrmB,OAAS,GAEK,OAG9D,OAAOsV,KAAKuR,MAAMH,IAAoB,4CA3CZrJ,EAAAA,uIADjB8I,EAAehmB,EAAA,CAH3B+B,EAAAA,WAAW,CACVC,WAAY,UAEDgkB,MC0BbW,GAAA,WA6CE,SAAAA,EAAsBxjB,EAA0BsN,GAA1B1R,KAAAoE,GAAAA,EAA0BpE,KAAA0R,QAAAA,EAdvC1R,KAAAmnB,UAAY,QAKZnnB,KAAA6nB,gBAAiB,EAEjB7nB,KAAA8nB,cAAgBlgB,EAAAA,UAAUoU,OAC1Bhc,KAAA+nB,aAAengB,EAAAA,UAAUuT,WACzBnb,KAAAgoB,SAAWpgB,EAAAA,UAAUsT,YAkBhC,OA9CE1b,OAAAmC,eAAIimB,EAAA1nB,UAAA,WAAQ,KAAZ,SAAa+nB,GACXjoB,KAAKkoB,MAAQD,EAEbjoB,KAAKmoB,YAAc,mCAgCrBP,EAAA1nB,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACOA,KAAKiG,WAAYK,EAAAA,YAMtBtG,KAAKooB,MAAQpoB,KAAK0R,QACfwV,iBAAiBlnB,KAAKoE,GAAGe,cAAenF,KAAKmnB,WAC7Cxc,KAAKqF,EAAAA,KAAI,WAAM,OAACnK,EAAKsiB,YAAc,MAPpC5hB,QAAQ5D,MACN,+HALoB0P,EAAAA,kBAA+B4U,MAzChDhmB,EAAA,CAAR0I,EAAAA,qCAQD1I,EAAA,CADC0I,EAAAA,MAAM,uCAWE1I,EAAA,CAAR0I,EAAAA,wCASQ1I,EAAA,CAAR0I,EAAAA,yCAKQ1I,EAAA,CAAR0I,EAAAA,8CAEQ1I,EAAA,CAAR0I,EAAAA,6CACQ1I,EAAA,CAAR0I,EAAAA,4CACQ1I,EAAA,CAAR0I,EAAAA,wCAxCUie,EAAiB3mB,EAAA,CAL7BkZ,EAAAA,UAAU,CACTtQ,SAAU,cACV5D,SAAA,8rDACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BX,GAAb,GC5BMY,KAAmBljB,GAAA,IACtBhF,EAAAA,WAAWmoB,IAAK,IACjBnjB,GAAChF,EAAAA,WAAWooB,IAAK,IACjBpjB,GAAChF,EAAAA,WAAWqoB,IAAK,IACjBrjB,GAAChF,EAAAA,WAAWsoB,IAAK,SAMnBC,GAAA,WACE,SAAAA,EAAoBrM,EAA2BxY,GAA3BhE,KAAAwc,OAAAA,EAA2Bxc,KAAAgE,OAAAA,SAE/CxE,OAAAmC,eAAIknB,EAAA3oB,UAAA,cAAW,KAAf,WAAA,IAAA2F,EAAA7F,KACE,OAAKA,KAAK8oB,OAGH9oB,KAAKwc,OAAO4K,QAAQzc,KACzBC,EAAAA,KAAI,SAAC0I,GAAU,OAAAzN,EAAKkjB,cAAuBzV,EAAMnS,OAAQ6nB,eACzD/c,EAAAA,wBAJO5F,EAAAA,GAAG/F,EAAAA,WAAWmoB,qCAiBzBI,EAAA3oB,UAAA+oB,QAAA,SAAQC,SACN,OAA8B,QAAvB5jB,EAAAtF,KAAKgE,OAAOmlB,mBAAW,IAAA7jB,OAAA,EAAAA,EAAEzF,eAAeqpB,IAC3ClpB,KAAKgE,OAAOmlB,YAAYD,GACxBV,GAAoBU,IAM1B1pB,OAAAmC,eAAIknB,EAAA3oB,UAAA,cAAW,KAAf,WACE,MAAO,CACLI,EAAAA,WAAWmoB,GACXnoB,EAAAA,WAAWooB,GACXpoB,EAAAA,WAAWqoB,GACXroB,EAAAA,WAAWsoB,GACXtoB,EAAAA,WAAW8oB,qCAWfP,EAAA3oB,UAAAmpB,OAAA,SAAOH,GAAP,IAAArjB,EAAA7F,KACE,OAAOA,KAAKspB,YAAY3e,KACtBC,EAAAA,KAAI,SAAC2e,GACH,OAAA1jB,EAAKsjB,YACFK,MAAM,EAAG3jB,EAAKsjB,YAAYnX,QAAQkX,GAAc,GAChD3a,SAASgb,QAYlBV,EAAA3oB,UAAAupB,KAAA,SAAKP,GAAL,IAAArjB,EAAA7F,KACE,OAAOA,KAAKspB,YAAY3e,KACtBC,EAAAA,KAAI,SAAC2e,GACH,OAAA1jB,EAAKsjB,YACFK,MAAM3jB,EAAKsjB,YAAYnX,QAAQkX,IAC/B3a,SAASgb,QAQlBV,EAAA3oB,UAAAwpB,QAAA,SAAQR,GACN,OAAOlpB,KAAKspB,YAAY3e,KAAKC,EAAAA,KAAI,SAAC2e,GAAO,OAAAA,IAAOL,OAGxCL,EAAA3oB,UAAA6oB,cAAV,SAAwBY,GACtB,IAAMT,EAAalpB,KAAK4pB,WAAWD,GACnC,OAAOrpB,EAAAA,WAAW4oB,GAAc5oB,EAAAA,WAAWsoB,KAGnCC,EAAA3oB,UAAA0pB,WAAV,SAAqBD,GAArB,IAAA9jB,EAAA7F,KAKE,OAJK2pB,IACHA,EAAc3pB,KAAK8oB,OAAOE,YAGrBW,EAAc3pB,KAAKipB,QAAQ3oB,EAAAA,WAAWsoB,IACzCtoB,EAAAA,WAAW8oB,GACXppB,KAAKmpB,YAAYrZ,MAAK,SAACyZ,GAAO,OAAAI,GAAe9jB,EAAKojB,QAAQM,OAGhE/pB,OAAAmC,eAAIknB,EAAA3oB,UAAA,SAAM,KAAV,WACE,OAAOF,KAAKwc,OAAOqN,uFAjGO1L,EAAAA,iBAA2Bpb,gJAD5C8lB,EAAiB5nB,EAAA,CAH7B+B,EAAAA,WAAW,CACVC,WAAY,UAED4lB,GAAb,GCMAiB,GAAA,WAQE,SAAAA,EAC4B9lB,EAMhB+lB,GANgB/pB,KAAAgE,OAAAA,EAMhBhE,KAAA+pB,kBAAAA,SAOZD,EAAA5pB,UAAA8pB,SAAA,SACEC,EACAC,EACAC,GAEA,GAAKF,EAAL,CAIA,IAAMG,EAAmBH,EAAe3N,IACpC2N,EACAjqB,KAAKqqB,aAAaJ,EAAkCC,GAExD,MAAO,CACLI,IAAKtqB,KAAKuqB,mBAAmBH,MAAAA,OAAS,EAATA,EAAW9N,KACxC6N,IAAKA,IAAOC,MAAAA,OAAS,EAATA,EAAWI,SACvBC,OAAQzqB,KAAK0qB,cAAcT,MAS/BzqB,OAAAmC,eAAcmoB,EAAA5pB,UAAA,gBAAa,KAA3B,WAAA,IAAA2F,EAAA7F,KAWE,OAVKA,KAAK2qB,iBACR3qB,KAAK2qB,eAAiBnrB,OAAOorB,KAC1B5qB,KAAKgE,OAAuB6mB,cAE5BjgB,KAAI,SAACxJ,GAAQ,MAAA,CACZujB,KAAMvjB,EACNkJ,KAAOzE,EAAK7B,OAAuB6mB,aAAazpB,OAEjD0pB,MAAK,SAACC,EAAGxrB,GAAM,OAACwrB,EAAEzgB,KAAK0gB,MAAQzrB,EAAE+K,KAAK0gB,MAAQ,GAAK,MAEjDhrB,KAAK2qB,gDAMdnrB,OAAAmC,eAAcmoB,EAAA5pB,UAAA,kBAAe,KAA7B,WAIE,OAHKF,KAAKirB,mBACRjrB,KAAKirB,iBAAmBjrB,KAAKkrB,cAAc1B,QAAQ3Z,WAE9C7P,KAAKirB,kDAMJnB,EAAA5pB,UAAAmqB,aAAV,SAAuBc,EAAuBjB,GAC5C,OAAOiB,EAAMnrB,KAAKorB,cAAcD,EAAOjB,KAQ/BJ,EAAA5pB,UAAAkrB,cAAV,SACEnB,EACAC,GAEA,OAAIA,GAAUD,EAAeC,GACpBA,EAGPlqB,KAAKqrB,kBAAkBpB,IAAmBzqB,OAAOorB,KAAKX,GAAgB,IAOhEH,EAAA5pB,UAAAmrB,kBAAV,SAA4BF,SAC1B,OAEC,QAFD7lB,EAAOtF,KAAKsrB,gBAAgBxb,MAAK,SAACoa,GAChC,OAAAiB,EAAMtrB,eAAeqqB,EAAOvF,gBAC7B,IAAArf,OAAA,EAAAA,EAAEqf,MAOKmF,EAAA5pB,UAAAwqB,cAAV,SAAwBS,GAAxB,IAAAtlB,EAAA7F,KACE,GAAKmrB,EAAL,CAIA,IAAMV,EAASzqB,KAAKkrB,cAAcK,QAAO,SAACxiB,EAAKmhB,GAS7C,OARMiB,EAAMjB,EAAOvF,QACb5b,IACFA,GAAO,MAETA,GAAUlD,EAAK0kB,mBAAmBY,EAAMjB,EAAOvF,MAAMrI,KAAI,IACvD4N,EAAO5f,KAAK0gB,MAAK,KAGdjiB,IACN,IAEH,MAAkB,KAAX0hB,OAAgBtjB,EAAYsjB,IAO3BX,EAAA5pB,UAAAqqB,mBAAV,SAA6BjO,GAC3B,OAAKA,EAGEA,EAAIkP,WAAW,QAAUlP,EAAMtc,KAAKyrB,aAAenP,EAFjD,MAaDwN,EAAA5pB,UAAAurB,WAAV,WACE,OACGzrB,KAAKgE,OAAqB0nB,QAAQP,MAAMQ,SACxC3rB,KAAKgE,OAAqB0nB,QAAQE,IAAID,SACvC,sEA9IDlmB,EAAAA,OAAMkB,KAAA,CAACxD,EAAAA,iBAMqB0lB,+IAfpBiB,EAAY7oB,EAAA,CAHxB+B,EAAAA,WAAW,CACVC,WAAY,SAWTrB,EAAA,EAAA6D,EAAAA,OAAOtC,EAAAA,UATC2mB,GAAb,iBC8CE,SAAA+B,EAAsBC,GAAA9rB,KAAA8rB,aAAAA,EA5BZ9rB,KAAAwN,OAAgC,IAAIC,EAAAA,aAYTzN,KAAA+rB,eAAgB,EAOpB/rB,KAAAgsB,WAAY,EAOZhsB,KAAAisB,WAAY,EA8C/C,OA1CEJ,EAAA3rB,UAAA6N,YAAA,WACE/N,KAAKG,UAMG0rB,EAAA3rB,UAAAC,OAAV,iBACEH,KAAKmrB,MAAQnrB,KAAK8rB,aAAa9B,SAC7BhqB,KAAKksB,UACLlsB,KAAKkqB,OACLlqB,KAAKmqB,MAEQ,QAAX7kB,EAACtF,KAAKmrB,aAAK,IAAA7lB,OAAA,EAAAA,EAAEglB,MACftqB,KAAKmsB,iBAOTN,EAAA3rB,UAAAksB,YAAA,WACEpsB,KAAKgsB,WAAY,EACjBhsB,KAAK+rB,eAAgB,EACrB/rB,KAAKisB,WAAY,EACjBjsB,KAAKwN,OAAOS,MAAK,IAOnB4d,EAAA3rB,UAAAmsB,aAAA,WACErsB,KAAKmsB,iBAGGN,EAAA3rB,UAAAisB,cAAV,WACEnsB,KAAKgsB,WAAY,EACjBhsB,KAAK+rB,eAAgB,EACrB/rB,KAAKisB,WAAY,EACjBjsB,KAAKwN,OAAOS,MAAK,6CA1CiB6b,MA5C3B7oB,EAAA,CAAR0I,EAAAA,yCAKQ1I,EAAA,CAAR0I,EAAAA,sCAMQ1I,EAAA,CAAR0I,EAAAA,mCAKS1I,EAAA,CAATsO,EAAAA,uCAYoCtO,EAAA,CAApCqR,EAAAA,YAAY,6DAOoBrR,EAAA,CAAhCqR,EAAAA,YAAY,qDAOoBrR,EAAA,CAAhCqR,EAAAA,YAAY,qDAjDFuZ,EAAc5qB,EAAA,CAL1BkZ,EAAAA,UAAU,CACTtQ,SAAU,WACV5D,SAAA,6KACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BsD,oBCRb,SAAAS,WAMA,SANaA,EACJA,EAAA9b,QAAP,WACE,MAAO,CACLC,SAAU8b,IAHHD,EAAWC,EAAAtrB,EAAA,CALvB8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,cACVC,aAAc,CAAC2hB,IACf1hB,QAAS,CAAC0hB,OAECS,oBCIb,SAAAE,KAA6B,OAAhBA,EAAcvrB,EAAA,CAL1B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcwiB,EAAAA,aAAc7N,GAAY0N,GAAaI,EAAAA,WAC/DxiB,aAAc,CAAC0d,IACfzd,QAAS,CAACyd,OAEC4E,MCKbG,GAAA,WAAA,SAAAA,KAgCA,OA3BEntB,OAAAmC,eAAIgrB,EAAAzsB,UAAA,UAAO,KAcX,WACE,OAAOF,KAAK4sB,cAfd,SAAYC,GACV7sB,KAAK4sB,SAAWC,EAEhB7sB,KAAK8sB,QAAUD,MAAAA,OAAO,EAAPA,EAASE,cAAcpiB,KACpCqiB,EAAAA,UAAU,IACVpiB,EAAAA,KAAI,WAAM,OAAAiiB,EAAQI,QAAU,MAC5BriB,EAAAA,KAAI,SAACqiB,GACH,OAAAztB,OAAOmM,QAAQshB,GACZ5nB,QAAO,SAAC1C,GAAU,OAAAA,EAAM,MACxBiI,KAAI,SAACjI,GAAU,OAAAA,EAAM,2CASQnD,OAAAmC,eAAIgrB,EAAAzsB,UAAA,UAAO,KAAX,WACpC,OAAOF,KAAK6sB,QAAQK,yCAEc1tB,OAAAmC,eAAIgrB,EAAAzsB,UAAA,QAAK,KAAT,WAClC,OAAOF,KAAK6sB,QAAQM,uCAEgB3tB,OAAAmC,eAAIgrB,EAAAzsB,UAAA,UAAO,KAAX,WACpC,OAAOF,KAAK6sB,QAAQO,yCAzBtBnsB,EAAA,CADC0I,EAAAA,qCAmBqC1I,EAAA,CAArCqR,EAAAA,YAAY,sDAGuBrR,EAAA,CAAnCqR,EAAAA,YAAY,kDAGyBrR,EAAA,CAArCqR,EAAAA,YAAY,sDA7BFqa,EAAmB1rB,EAAA,CAL/BkZ,EAAAA,UAAU,CACTtQ,SAAU,iBACV5D,SAAA,2GACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BoE,GAAb,iBCRA,SAAAU,KAA+B,OAAlBA,EAAgBpsB,EAAA,CAL5B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAckX,EAAAA,YACxBjX,aAAc,CAACyiB,IACfxiB,QAAS,CAACwiB,OAECU,MCDbC,GAAA,WAAA,SAAAA,IACmBttB,KAAAutB,cAAwB,gBA2B3C,OAlBE/tB,OAAAmC,eAAI2rB,EAAAptB,UAAA,MAAG,KAAP,WACE,MAAuB,WAAhBF,KAAKmB,OAAsB,WAAa,sCAGjD3B,OAAAmC,eAAI2rB,EAAAptB,UAAA,YAAS,KAAb,WACE,MAAwB,iBAAbF,KAAKsc,IACP,CAACtc,KAAKwtB,eAAextB,KAAKsc,MAE5Btc,KAAKsc,qCAGdgR,EAAAptB,UAAAutB,cAAA,WACE,MAA2B,iBAAbztB,KAAKsc,KAAoBtc,KAAKutB,cAAcG,KAAK1tB,KAAKsc,MAG9DgR,EAAAptB,UAAAstB,eAAR,SAAuBlR,GACrB,OAAOA,EAAIkP,WAAW,KAAOxrB,KAAKsc,IAAM,IAAMtc,KAAKsc,KAvB5Crb,EAAA,CAAR0I,EAAAA,mCACQ1I,EAAA,CAAR0I,EAAAA,sCACQ1I,EAAA,CAAR0I,EAAAA,qCACQ1I,EAAA,CAAR0I,EAAAA,kCACQ1I,EAAA,CAAR0I,EAAAA,qCACQ1I,EAAA,CAAR0I,EAAAA,qCARU2jB,EAAoBrsB,EAAA,CAJhCkZ,EAAAA,UAAU,CACTtQ,SAAU,kBACV5D,SAAA,8wBAEWqnB,GAAb,iBCCA,SAAAK,KAAgC,OAAnBA,EAAiB1sB,EAAA,CAL7B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcwiB,EAAAA,cACxBviB,aAAc,CAACojB,IACfnjB,QAAS,CAACmjB,OAECK,MCebC,GAAA,WAAA,SAAAA,IAWW5tB,KAAA6tB,IAAM,EAYN7tB,KAAA8tB,KAAO,EAOP9tB,KAAA+tB,WAAY,EAUmB/tB,KAAAguB,UAAW,EAqDrD,OAjDyBJ,EAAA1tB,UAAAsY,YAAA,WACrBxY,KAAKiuB,MAAM9oB,cAAckM,SAG3Buc,EAAA1tB,UAAA2V,UAAA,WAGE7V,KAAK6sB,QAAQqB,SAASluB,KAAK6sB,QAAQxqB,MAAQrC,KAAK8tB,MAChD9tB,KAAK6sB,QAAQsB,eAGfP,EAAA1tB,UAAAkuB,UAAA,WACEpuB,KAAK6sB,QAAQqB,SAASluB,KAAK6sB,QAAQxqB,MAAQrC,KAAK8tB,MAChD9tB,KAAK6sB,QAAQsB,eAOfP,EAAA1tB,UAAAmuB,WAAA,WAAA,IAAAxoB,EAAA7F,KAUE,OATKA,KAAKsuB,YACRtuB,KAAKsuB,UAAYtuB,KAAK6sB,QAAQ0B,aAAa5jB,KACzCqiB,EAAAA,UAAUhtB,KAAK6sB,QAAQxqB,OACvB2N,EAAAA,KAAI,SAAC3N,GACH,OAAAwD,EAAKgnB,QAAQqB,SAASroB,EAAK2oB,cAAcnsB,GAAQ,CAAEosB,WAAW,OAEhE7jB,EAAAA,KAAI,WAAM,OAAA/E,EAAKgnB,aAGZ7sB,KAAKsuB,WAUNV,EAAA1tB,UAAAsuB,cAAR,SAAsBnsB,GAOpB,OANIA,EAAQrC,KAAK6tB,MAAmB,IAAVxrB,IAAerC,KAAK+tB,aAC5C1rB,EAAQrC,KAAK6tB,KAEX7tB,KAAK0uB,KAAOrsB,EAAQrC,KAAK0uB,MAC3BrsB,EAAQrC,KAAK0uB,KAERrsB,GAtFApB,EAAA,CAAR0I,EAAAA,uCAMQ1I,EAAA,CAAR0I,EAAAA,mCAKQ1I,EAAA,CAAR0I,EAAAA,mCAOQ1I,EAAA,CAAR0I,EAAAA,oCAOQ1I,EAAA,CAAR0I,EAAAA,yCAUuC1I,EAAA,CAAvCqR,EAAAA,YAAY,kBAAmB3I,EAAAA,wCAEd1I,EAAA,CAAjBggB,EAAAA,UAAU,oCAEYhgB,EAAA,CAAtB4R,EAAAA,aAAa,0CA5CH+a,EAAoB3sB,EAAA,CARhCkZ,EAAAA,UAAU,CACTtQ,SAAU,kBACV5D,SAAA,ibAMW2nB,GAAb,iBCfA,SAAAe,KAAgC,OAAnBA,EAAiB1tB,EAAA,CAL7B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAc4b,EAAAA,qBACxB3b,aAAc,CAAC0jB,IACfzjB,QAAS,CAACyjB,OAECe,MCRAC,GAA4C,CACvDC,WAAY,CACVC,UAAU,EACVC,QAAQ,kBCGZ,SAAAC,4HAAsBA,EAAgB/tB,EAAA,CAJrC+B,EAAAA,WAAW,CACVC,WAAY,OACZC,YAAaC,EAAAA,UAEO6rB,O/BOV1U,GAAAA,EAAAA,qBAAAA,EAAAA,mBAAkB,KAC5B,IAAA,MACAA,GAAA,MAAA,QACAA,GAAA,KAAA,OACAA,GAAA,SAAA,WACAA,GAAA,KAAA,OACAA,GAAA,MAAA,QACAA,GAAA,IAAA,MACAA,GAAA,KAAA,QAoEUC,GAAAA,EAAAA,+BAAAA,EAAAA,6BAA4B,KACtC,MAAA,QACAA,GAAA,OAAA,SACAA,GAAA,MAAA,QgCrFF,OCTY0U,GDSNC,GAAiD,CACrDC,WAAY,EACZC,UAAW,MACXC,WAAY,IACZC,cAAe,IACfC,UAAW,IACXC,SAAU,KA8BZC,GAAA,WACE,SAAAA,EAAsBC,GAAA1vB,KAAA0vB,iBAAAA,SAYtBD,EAAAvvB,UAAAyvB,SAAA,SAASC,EAAmBC,GAC1B,IAAMC,EAA0B,GAChC,OAAIF,EAAY,EACPE,GAET9vB,KAAK+vB,SAASD,EAAOF,EAAWC,GAChC7vB,KAAKgwB,QAAQF,EAAOF,GACpB5vB,KAAKiwB,aAAaH,EAAOF,GACzB5vB,KAAKkwB,cAAcJ,EAAOF,EAAWC,GAE9BC,IAWCL,EAAAvvB,UAAA6vB,SAAV,SACED,EACAF,EACAC,GAEA,IAAMM,EAAQnwB,KAAKowB,gBAAgBR,EAAWC,GACxCnB,EAAMtY,KAAKyX,IAAI7tB,KAAKgE,OAAOmrB,WAAYS,GAE7CjwB,MAAMsU,KAAKtU,MAAM+uB,IAAMhgB,SAAQ,SAAC2hB,EAAG1vB,GACjCmvB,EAAMptB,KAAK,CACT4tB,OAAQ3vB,EAAIwvB,EACZI,MAAOC,OAAO7vB,EAAIwvB,EAAQ,GAC1BljB,KAAMqN,EAAAA,mBAAmBmW,WAarBhB,EAAAvvB,UAAA8vB,QAAV,SAAkBF,EAAyBF,GAA3C,IAAA/pB,EAAA7F,KACE,GAAKA,KAAKgE,OAAOgsB,QAAjB,CA+DAF,EAAMY,QAAO1vB,MAAb8uB,EAAKltB,EA3De,WAClB,IAAM+tB,EAAkBb,EAAM,GAAGQ,OAC3BM,EAAY/qB,EAAK7B,OAAO6sB,SAAW,EAAI,EAC7C,GAAIF,EAAkBC,EAAW,CAC/B,IAAME,GACHjrB,EAAK7B,OAAO+sB,+BACbJ,IAAoBC,EAAY,EAC5BI,EACJnrB,EAAK7B,OAAO6sB,UACZhrB,EAAK7B,OAAO+sB,+BACE,IAAdH,EACI3jB,EAAO6jB,EACTxW,EAAAA,mBAAmB2W,IACnBD,EACA1W,EAAAA,mBAAmB4W,MACnB5W,EAAAA,mBAAmBmW,KACvB,MAAO,CACLjxB,OAAOgB,OACL,CACE+vB,MAAOO,EAAQjrB,EAAK7B,OAAOorB,UAAYoB,OAAOI,EAAY,GAC1D3jB,KAAIA,GAEN6jB,EAAQ,KAAO,CAAER,OAAQM,KAGxB,MAAO,GAkCCO,KACjBrB,EAAMptB,KAAI1B,MAAV8uB,EAAKltB,EAhCc,WACjB,IAAMwuB,EAAiBtB,EAAMA,EAAMhvB,OAAS,GAAGwvB,OAAS,EAClDe,EAAOzB,GAAa/pB,EAAK7B,OAAOstB,QAAU,EAAI,GACpD,GAAIF,GAAkBC,EAAM,CAC1B,IAAML,EACJnrB,EAAK7B,OAAOstB,SACZzrB,EAAK7B,OAAO+sB,+BACZK,IAAmBC,EACfP,EACJM,EACAxB,GACG/pB,EAAK7B,OAAO+sB,8BAAgC,EAAI,IAChDlrB,EAAK7B,OAAOstB,QAAU,EAAI,GAEzBrkB,EAAO6jB,EACTxW,EAAAA,mBAAmB2W,IACnBD,EACA1W,EAAAA,mBAAmBiX,KACnBjX,EAAAA,mBAAmBmW,KACvB,MAAO,CACLjxB,OAAOgB,OACL,CACE+vB,MAAOO,EAAQjrB,EAAK7B,OAAOorB,UAAYoB,OAAOY,EAAiB,GAC/DnkB,KAAIA,GAEN6jB,EAAQ,KAAO,CAAER,OAAQc,KAGxB,MAAO,GAIFI,OAUN/B,EAAAvvB,UAAA+vB,aAAV,SAAuBH,EAAyBF,GAC1C5vB,KAAKgE,OAAO6sB,UAAgC,IAApBf,EAAM,GAAGQ,QACnCR,EAAMY,QAAQ,CACZJ,OAAQ,EACRC,MAAO,IACPtjB,KAAMqN,EAAAA,mBAAmB4W,QAI3BlxB,KAAKgE,OAAOstB,SACZxB,EAAMA,EAAMhvB,OAAS,GAAGwvB,SAAWV,EAAY,GAE/CE,EAAMptB,KAAK,CACT4tB,OAAQV,EAAY,EACpBW,MAAOC,OAAOZ,GACd3iB,KAAMqN,EAAAA,mBAAmBiX,QAoBrB9B,EAAAvvB,UAAAgwB,cAAV,SACEJ,EACAF,EACAC,GAEA,IAAM4B,EAASzxB,KAAK0xB,eAAe7B,GAC7B8B,EAAQ3xB,KAAK4xB,SAAShC,EAAWC,GACjCgC,EAAM7xB,KAAKgE,OAAO8tB,mBACnBD,GAAOA,IAAQtX,EAAAA,6BAA6BwX,OAI3CF,IAAQtX,EAAAA,6BAA6BhS,QACvCunB,EAAMY,QAAO1vB,MAAb8uB,EAAKltB,EAAY6uB,EAAWE,IAE1BE,IAAQtX,EAAAA,6BAA6B9R,OACvCqnB,EAAMptB,KAAI1B,MAAV8uB,EAAKltB,EAAS6uB,EAAWE,MAP3B7B,EAAMY,QAAO1vB,MAAb8uB,EAAKltB,EAAY6uB,IACjB3B,EAAMptB,KAAI1B,MAAV8uB,EAAKltB,EAAS+uB,MAcVlC,EAAAvvB,UAAAwxB,eAAR,SAAuB7B,GAAvB,IAAAhqB,EAAA7F,KACQgyB,EAAO,GAEb,GAAIhyB,KAAKgE,OAAO8qB,SAAU,CAUxBkD,EAAKtvB,KARIlD,OAAOgB,OACZ,CACE+vB,MAAO1qB,EAAK7B,OAAOqrB,WACnBpiB,KAAMqN,EAAAA,mBAAmB2X,OAE3BpC,EAAU,EAAI,CAAES,OAAQ,GAAM,OAKpC,GAAItwB,KAAKgE,OAAOkuB,YAAa,CAU3BF,EAAKtvB,KARIlD,OAAOgB,OACZ,CACE+vB,MAAO1qB,EAAK7B,OAAOsrB,cACnBriB,KAAMqN,EAAAA,mBAAmB6X,UAE3BtC,EAAU,EAAI,CAAES,OAAQT,EAAU,GAAM,OAK9C,OAAOmC,GAMDvC,EAAAvvB,UAAA0xB,SAAR,SAAiBhC,EAAmBC,GAApC,IAAAhqB,EAAA7F,KACQgyB,EAAO,GAEb,GAAIhyB,KAAKgE,OAAOouB,QAAS,CAUvBJ,EAAKtvB,KARIlD,OAAOgB,OACZ,CACE+vB,MAAO1qB,EAAK7B,OAAOurB,UACnBtiB,KAAMqN,EAAAA,mBAAmB+X,MAE3BxC,EAAUD,EAAY,EAAI,CAAEU,OAAQT,EAAU,GAAM,OAK1D,GAAI7vB,KAAKgE,OAAO+qB,OAAQ,CAUtBiD,EAAKtvB,KARIlD,OAAOgB,OACZ,CACE+vB,MAAO1qB,EAAK7B,OAAOwrB,SACnBviB,KAAMqN,EAAAA,mBAAmBgY,KAE3BzC,EAAUD,EAAY,EAAI,CAAEU,OAAQV,EAAY,GAAM,OAM5D,OAAOoC,GAUDvC,EAAAvvB,UAAAkwB,gBAAR,SAAwBR,EAAmBC,GACzC,IAAM0C,EAAQvyB,KAAKgE,OAAOmrB,WAAa,EAEjCqD,EAAQpc,KAAKC,MAAMkc,EAAQ,GAG3BE,EAAWrc,KAAKsY,IAAI,EAAGmB,EAAU2C,GAEjCE,EAAWtc,KAAKsY,IAAI,EAAGkB,EAAY2C,EAAQ,GAGjD,OAAOnc,KAAKyX,IAAI6E,EAAUD,IAG5BjzB,OAAAmC,eAAY8tB,EAAAvvB,UAAA,SAAM,KAAlB,WACE,OAAOV,OAAOgB,OACZ0uB,GACAlvB,KAAK0vB,iBAAiBb,sFAxRcG,uHAD7BS,EAAiBxuB,EAAA,CAH7B+B,EAAAA,WAAW,CACVC,WAAY,UAEDwsB,GAAb,GEvBAkD,GAAA,WA0BE,SAAAA,EACUC,EACAC,GADA7yB,KAAA4yB,kBAAAA,EACA5yB,KAAA6yB,eAAAA,EANA7yB,KAAA8yB,cAAsC,IAAIrlB,EAAAA,aAEpDzN,KAAA8vB,MAA0B,GAkE5B,OA5EEtwB,OAAAmC,eAAIgxB,EAAAzyB,UAAA,aAAU,KAAd,WACE,OAAOF,KAAK+yB,iBAEL,SAAe1wB,GACtBrC,KAAK+yB,YAAc1wB,EACnBrC,KAAK+F,OAAO1D,oCAYNswB,EAAAzyB,UAAA6F,OAAR,SAAe8oB,GACb7uB,KAAK8vB,MAAQ9vB,KAAK4yB,kBAAkBjD,SAClCd,EAAWmE,WACXnE,EAAWoE,cAUfN,EAAAzyB,UAAAgzB,UAAA,SAAUC,GACR,OACEA,EAAKlmB,OAASqN,EAAAA,mBAAmBmW,MACjC0C,EAAK7C,SAAWtwB,KAAK6uB,WAAWoE,aAapCN,EAAAzyB,UAAAkzB,WAAA,SAAWD,GACT,OACGA,EAAKtzB,eAAe,WACrBszB,EAAK7C,SAAWtwB,KAAK6uB,WAAWoE,aAIpCN,EAAAzyB,UAAAmzB,eAAA,SAAeF,GACb,IAAMG,EAAc9zB,OAAOgB,OACzB,GACAR,KAAK6yB,eAAeU,SAASD,aAc/B,OAXEtzB,KAAKwzB,YACLL,EAAK7C,OAAStwB,KAAK6uB,WAAWmE,aAC7BhzB,KAAKkzB,UAAUC,KAEhBG,EAAYtzB,KAAKwzB,YAAcL,EAAK7C,QAIlCgD,EAAYtzB,KAAKwzB,cAAgBxzB,KAAKyzB,oBACjCH,EAAYtzB,KAAKwzB,YAEnBF,GAGTX,EAAAzyB,UAAAwzB,WAAA,SAAWC,GACT3zB,KAAK8yB,cAAc7kB,KAAK0lB,EAAKrD,kDA7DFb,UACHmE,EAAAA,kBA1BjB3yB,EAAA,CAAR0I,EAAAA,yCAGQ1I,EAAA,CAAR0I,EAAAA,0CAMQ1I,EAAA,CAAR0I,EAAAA,2CAMQ1I,EAAA,CAAR0I,EAAAA,wCAKS1I,EAAA,CAATsO,EAAAA,8CAtBUojB,EAAmB1xB,EAAA,CAL/BkZ,EAAAA,UAAU,CACTtQ,SAAU,gBACV5D,SAAA,iTACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BoK,GAAb,iBCTA,SAAAkB,KAA+B,OAAlBA,EAAgB5yB,EAAA,CAN5B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcwiB,EAAAA,cACxBhd,UAAW,CAACoP,EAAAA,qBAAqB+P,KACjC1kB,aAAc,CAACyoB,IACfxoB,QAAS,CAACwoB,OAECkB,oBCcX,SAAAC,IACE9zB,KAAK+zB,cAAgB,IAAItmB,EAAAA,aAM7B,OAHEqmB,EAAA5zB,UAAA8zB,SAAA,SAASC,GACPj0B,KAAK+zB,cAAc9lB,KAAKgmB,IAhB1BhzB,EAAA,CADC0I,EAAAA,2CAGD1I,EAAA,CADC0I,EAAAA,8CAGD1I,EAAA,CADC0I,EAAAA,2CAGD1I,EAAA,CADC0I,EAAAA,0CAID1I,EAAA,CADCsO,EAAAA,8CAVUukB,EAAgB7yB,EAAA,CAL5BkZ,EAAAA,UAAU,CACTtQ,SAAU,aACV5D,SAAA,8UACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BuL,oBCFb,SAAAI,KAAmC,OAAtBA,EAAoBjzB,EAAA,CALhC8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAckqB,EAAAA,eAAgBvO,EAAAA,YAAaiO,IACrD3pB,aAAc,CAAC4pB,IACf3pB,QAAS,CAAC2pB,GAAkBnB,OAEjBuB,MCAbE,GAAA,WAAA,SAAAA,4HAAsBA,EAAWnzB,EAAA,CAJhC+B,EAAAA,WAAW,CACVC,WAAY,OACZC,YAAaC,EAAAA,UAEOixB,GAAtB,GCLAC,GAAA,SAAAvuB,GAAA,SAAAuuB,mDAA2C,OAAbv0B,EAAAu0B,EAAAvuB,GAAauuB,EAA3C,CAA8BC,EAAAA,aCI9BC,GAAA,WAEE,SAAAA,EAAoBC,GAAAx0B,KAAAw0B,gBAAAA,EADZx0B,KAAAy0B,OAAqB,UAG7BF,EAAAr0B,UAAAw0B,KAAA,SAAKC,EAAc5pB,GACjB,IAAI6pB,EAKJ,OAHAA,EAAc50B,KAAKw0B,gBAAgBE,KAAKC,EAAS5pB,GACjD/K,KAAKy0B,OAAO/xB,KAAKkyB,GAEVA,GAGTL,EAAAr0B,UAAA20B,eAAA,WACE,IAAM7V,EAAQhf,KAAKy0B,OAAOz0B,KAAKy0B,OAAO3zB,OAAS,GAC/C,OAAOke,GAAgB,MAGzBuV,EAAAr0B,UAAA40B,mBAAA,SAAmBptB,GACjB,IAAMsX,EAAkBhf,KAAK60B,iBAEzB7V,IACFA,EAAM+V,QAAQrtB,GACd1H,KAAKy0B,OAAOO,QAIhBT,EAAAr0B,UAAA+0B,iBAAA,SAAiBvtB,GACf,IAAMsX,EAAkBhf,KAAK60B,iBAEzB7V,IACFA,EAAM7N,MAAMzJ,GACZ1H,KAAKy0B,OAAOO,iDA9BqBE,EAAAA,qIAF1BX,EAAYtzB,EAAA,CAHxB+B,EAAAA,WAAW,CACVC,WAAY,UAEDsxB,GAAb,iBCQE,SAAAY,EAAsB5S,GAAAviB,KAAAuiB,qBAAAA,EALtBviB,KAAAkf,UAAYtX,EAAAA,UAGZ5H,KAAAo1B,YAAwCxQ,EAAAA,kBAW1C,OAPEuQ,EAAAj1B,UAAAqJ,SAAA,WACEvJ,KAAKq1B,UAAYr1B,KAAKuiB,qBAAqB7Z,OAG7CysB,EAAAj1B,UAAAqH,MAAA,SAAM0F,EAAyB+J,GAC7BhX,KAAKuiB,qBAAqBnd,OAAO6H,EAAM+J,6CAPGyO,EAAAA,wBANjC0P,EAAsBl0B,EAAA,CAJlCkZ,EAAAA,UAAU,CACTtQ,SAAU,oBACV5D,SAAA,26DAEWkvB,oBCDb,SAAAG,KAA2C,OAA9BA,EAA4Br0B,EAAA,CALxC8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcsrB,EAAAA,iBAAkB3W,GAAYuC,EAAAA,YACtDjX,aAAc,CAACirB,IACfhrB,QAAS,CAACgrB,OAECG,oBCLb,SAAAE,4HAAsBA,EAAev0B,EAAA,CAJpC+B,EAAAA,WAAW,CACVC,WAAY,OACZC,YAAaC,EAAAA,UAEOqyB,oBCKpB,SAAAC,EAAoBjZ,EAA2BxY,GAA3BhE,KAAAwc,OAAAA,EAA2Bxc,KAAAgE,OAAAA,EAFvChE,KAAA01B,iBAAmB,IAAIxuB,EAAAA,iBAAyB,GAIpDjD,QAAQjE,KAAKwc,OAAOqN,eACpB5lB,QAAQjE,KAAKwc,OAAOnZ,WACpBrD,KAAK21B,0BAEL31B,KAAK41B,aACL51B,KAAK61B,gBAIDJ,EAAAv1B,UAAA01B,WAAR,WAAA,IAAA/vB,EAAA7F,KACE81B,EAAAA,UAAU91B,KAAKwc,OAAOqN,aAAc,iBAAiBzb,WAAU,WAC7D,OAAAvI,EAAK6vB,iBAAiBtzB,MAAK,OAIvBqzB,EAAAv1B,UAAA21B,MAAR,WACE,IAAME,EAAkB/1B,KAAKwc,OAAOnZ,SAAS0a,cAAc,UAC3DgY,EAAgB9oB,KAAO,kBACvB8oB,EAAgBC,OAAQ,EACxBD,EAAgBzL,IAAM,iCAEtB,IAAM2L,EAAWj2B,KAAKwc,OAAOnZ,SAAS0a,cAAc,OACpDkY,EAAS5V,GAAKrgB,KAAKgE,OAAOkyB,UAAUC,UAEpCn2B,KAAKwc,OAAOnZ,SACTwa,qBAAqB,QAAQ,GAC7BK,YAAY6X,GAEf/1B,KAAKwc,OAAOnZ,SAASwa,qBAAqB,QAAQ,GAAGK,YAAY+X,IAG3DR,EAAAv1B,UAAAy1B,sBAAR,WACE,OACE1xB,QAAQjE,KAAKgE,OAAOkyB,YAAcjyB,QAAQjE,KAAKgE,OAAOkyB,UAAUC,YAIpEV,EAAAv1B,UAAAyM,KAAA,WAAA,IAAA9G,EAAA7F,KACE,OAAOA,KAAK01B,iBAAiB/qB,KAC3BtF,EAAAA,QAAO,SAACmI,GAAW,OAAAA,KACnB4oB,EAAAA,WAAU,WACR,IAAMC,EAAMxwB,EAAK2W,OAAOqN,aAAkB,IAC1C,OAAOhkB,EAAKywB,eAAe3rB,KACzBsB,EAAAA,uBACA+D,EAAAA,KAAI,SAACumB,GACCA,IACFF,EAAIG,IAAIC,SACRJ,EAAIG,IAAI7pB,OAAOrK,KAAK+zB,EAAIG,IAAIE,iBAa9BjB,EAAAv1B,UAAAo2B,aAAV,WACE,OAAOjwB,EAAAA,IAAG,6CA/DgB8X,EAAAA,iBAA2BqX,kJAH5CC,EAAsBx0B,EAAA,CAHlC+B,EAAAA,WAAW,CACVC,WAAY,UAEDwyB,oBCCX,SAAAkB,EAAoBC,GAAA52B,KAAA42B,gBAAAA,EAFpB52B,KAAA62B,kBAAoB72B,KAAK42B,gBAAgBjqB,OAG3C,gDADuC8oB,MAH1BkB,EAAkB11B,EAAA,CAJ9BkZ,EAAAA,UAAU,CACTtQ,SAAU,eACV5D,SAAU,uEAEC0wB,MCLAG,GAA0C,CACrDZ,UAAW,kBCmBb,SAAAa,KAA8B,OAAjBA,EAAe91B,EAAA,CAf3B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcsrB,EAAAA,kBACxBrrB,aAAc,CAACysB,IACfpV,gBAAiB,CAACoV,IAClBlnB,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbqV,mBAAoB,CAClBzyB,UAAWyyB,OAIjB9X,EAAAA,qBAAqBiY,QAGZC,oBCZb,SAAAC,KAAwC,OAA3BA,EAAyB/1B,EAAA,CARrCkZ,EAAAA,UAAU,CACTtQ,SAAU,gCACV5D,SAAU,mKAIVoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9ByO,SCPb,aCUMC,KAAMC,GAAA,IACTC,EAAAA,qBAAsB,WACvB7xB,GAAC8xB,EAAAA,qBAAsB,eAIzBC,GAAA,WACE,SAAAA,EAEYC,EACFC,EACEC,GAFAx3B,KAAAs3B,cAAAA,EACFt3B,KAAAu3B,kBAAAA,EACEv3B,KAAAw3B,SAAAA,EA2Fd,OAxFEH,EAAAn3B,UAAAu3B,SAAA,SAAShtB,GAAT,IAAA5E,EAAA7F,KACE,OAAOA,KAAK03B,WAAWjtB,GAASE,KAC9ByrB,EAAAA,WAAU,SAAC1kB,GAA8B,OAAAA,EAAQimB,YACjDvB,EAAAA,WAAU,SAAClO,GACT,OAAAriB,EAAK+xB,WAAWntB,GAASE,KACvByrB,EAAAA,WAAU,SAACyB,WACHC,EAAY,OAClB,IAAmB,IAAAC,EAAAh2B,EAAAmmB,GAAK8P,EAAAD,EAAA31B,QAAA41B,EAAA11B,KAAA01B,EAAAD,EAAA31B,OAAE,CAArB,IAAM+wB,EAAI6E,EAAA31B,MACby1B,EAAUp1B,KAAInC,EAAAA,EAAA,GACT4yB,GAAI,CACP5C,MAAO1qB,EAAKoyB,eAAe9E,EAAM0E,wGAGrC,OAAOxxB,EAAAA,GAAGyxB,YAOpBT,EAAAn3B,UAAAg4B,cAAA,SAAcztB,GACZ,OAAOzK,KAAK03B,WAAWjtB,GAASE,KAC9ByrB,EAAAA,WAAU,SAAC1kB,GAA8B,OAAAA,EAAQymB,iBAIrDd,EAAAn3B,UAAAk4B,SAAA,SAAS3tB,GACP,OAAOzK,KAAK43B,WAAWntB,GAASE,KAC9BC,EAAAA,KAAI,SAACitB,GACH,OAAOZ,GAAOY,QAKpBR,EAAAn3B,UAAAm4B,UAAA,SAAUh2B,EAAeoI,GACvBzK,KAAK03B,WAAWjtB,GACbE,KAAKmV,EAAAA,KAAK,IACV1R,WAAU,SAACsD,GACVA,EAAQ2mB,UAAUh2B,OAIdg1B,EAAAn3B,UAAAw3B,WAAV,SACEjtB,GADF,IAAA5E,EAAA7F,KAGE,OAAOA,KAAK43B,WAAWntB,GAASE,KAC9BC,EAAAA,KAAI,SAACitB,GAAgB,OAACA,EAAMhyB,EAAKyyB,mBAAmBT,QAAO1wB,KAC3D9B,EAAAA,QAAO,SAAC3E,GAAM,QAAEA,OAIV22B,EAAAn3B,UAAA03B,WAAV,SAAqBntB,GACnB,OAAIA,EACKpE,EAAAA,GAAGoE,GACDzK,KAAKs3B,cACPt3B,KAAKs3B,cAAciB,MAAM5tB,KAC9BC,EAAAA,KAAI,SAAC4tB,GAAI,OAAKA,MAAAA,OAAI,EAAJA,EAAM/tB,WACpBG,EAAAA,KAAI,SAACitB,GACH,OAAQA,GACN,IAAK,WACH,OAAOV,EAAAA,oBACT,IAAK,WACH,OAAOC,EAAAA,oBACT,QACE,OAAOS,YAVV,GAiBCR,EAAAn3B,UAAAo4B,mBAAV,SAA6B7tB,GAC3B,OAAOzK,KAAKw3B,SAAS9uB,IACnB1I,KAAKu3B,kBAAkB9sB,GACvB,OAIM4sB,EAAAn3B,UAAA+3B,eAAV,SAAyB9E,EAAW1oB,GAClC,OAAQA,GACN,KAAK0sB,EAAAA,oBACH,OAAOhE,EAAKsF,WACd,KAAKrB,EAAAA,oBACH,OAAOjE,EAAKuF,OAAS,IAAMvF,EAAKwF,QAClC,QACE,OAAOxF,EAAKwF,mDA1FSC,GAAgB13B,WAAA,CAAA,CAAA+L,KADxC4rB,EAAAA,kBAE0BC,EAAAA,yBACPC,EAAAA,YALX1B,EAA2Bp2B,EAAA,CADvC+B,EAAAA,aAGIpB,EAAA,EAAAi3B,EAAAA,aAFQxB,GAAb,iBCEE,SAAA2B,EAAoBC,GAAAj5B,KAAAi5B,iBAAAA,EAPpBj5B,KAAAkf,UAAYtX,EAAAA,UAwBd,OAfEpI,OAAAmC,eAAIq3B,EAAA94B,UAAA,SAAM,KAAV,WACE,OAAOF,KAAKi5B,iBAAiBxB,SAASz3B,KAAKyK,0CAG7CjL,OAAAmC,eAAIq3B,EAAA94B,UAAA,cAAW,KAAf,WACE,OAAOF,KAAKi5B,iBAAiBf,cAAcl4B,KAAKyK,0CAGlDjL,OAAAmC,eAAIq3B,EAAA94B,UAAA,SAAM,KAAV,SAAWmC,GACTrC,KAAKi5B,iBAAiBZ,UAAUh2B,EAAOrC,KAAKyK,0CAG9CjL,OAAAmC,eAAIq3B,EAAA94B,UAAA,SAAM,KAAV,WACE,OAAOF,KAAKi5B,iBAAiBb,SAASp4B,KAAKyK,mFAfP4sB,MAF7Bp2B,EAAA,CAAR0I,EAAAA,uCAPUqvB,EAA4B/3B,EAAA,CALxCkZ,EAAAA,UAAU,CACTtQ,SAAU,2BACV5D,SAAA,kbACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9ByQ,oBC6Bb,SAAAE,KAAwC,OAA3BA,EAAyBj4B,EAAA,CA1BrC8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcwiB,EAAAA,aAAc0M,EAAAA,kBAAmBva,IACzDnP,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb8X,wBAAyB,CACvBl1B,UAAW80B,GACXvpB,UAAW,CACT,CACEkB,QAAS0mB,GACTgC,SAAUhC,GACViC,KAAM,CAACV,GAAkBE,EAAAA,kBAAmBC,EAAAA,aAIlD/B,0BAA2B,CACzB9yB,UAAW8yB,OAIjBK,IAEFntB,aAAc,CAAC8uB,GAA8BhC,IAC7CzV,gBAAiB,CAACyX,GAA8BhC,IAChD7sB,QAAS,CAAC6uB,GAA8BhC,OAE7BkC,OnBzCDjK,GAAAA,EAAAA,kBAAAA,EAAAA,gBAAe,KACzB,SAAA,WACAA,GAAA,SAAA,6BoBsCA,SAAAsK,EAAsBn1B,EAA0BR,GAA1B5D,KAAAoE,GAAAA,EAA0BpE,KAAA4D,SAAAA,EAjBT5D,KAAAw5B,UAAW,EAWxCx5B,KAAAy5B,OAAS,IAAIhsB,EAAAA,aAEfzN,KAAA05B,YAAc,EAEtB15B,KAAAkf,UAAYtX,EAAAA,UAiCd,OA7BE2xB,EAAAr5B,UAAAqJ,SAAA,WACEvJ,KAAK25B,QAAQ35B,KAAK45B,QAAQ,IAG5BL,EAAAr5B,UAAAy5B,QAAA,SAAQt3B,EAAew3B,GAChB75B,KAAKw5B,WAAYK,GACpB75B,KAAK4D,SAASiV,aACZ7Y,KAAKoE,GAAGe,cACR,QACA,gBAAe9C,GAASrC,KAAK05B,aAAW,MAK9CH,EAAAr5B,UAAA45B,SAAA,SAASF,GACH55B,KAAKw5B,WAGTx5B,KAAK05B,YAAcE,EACnB55B,KAAK25B,QAAQC,GACb55B,KAAKy5B,OAAOxrB,KAAK2rB,KAGnBL,EAAAr5B,UAAA65B,eAAA,SAAezmB,EAAYsmB,GACN,UAAftmB,EAAMqR,OACRrR,EAAMC,iBACNvT,KAAK25B,QAAQC,8CA5BSvnB,EAAAA,kBAAgC4G,EAAAA,aAjBnBhY,EAAA,CAAtC0I,EAAAA,QAAS2I,EAAAA,YAAY,iDAKbrR,EAAA,CAAR0I,EAAAA,sCAMS1I,EAAA,CAATsO,EAAAA,uCAhBUgqB,EAAmBt4B,EAAA,CAL/BkZ,EAAAA,UAAU,CACTtQ,SAAU,iBACV5D,SAAA,4QACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BgR,oBCRb,SAAAS,KAA+B,OAAlBA,EAAgB/4B,EAAA,CAL5B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAc2U,IACxB1U,aAAc,CAACqvB,IACfpvB,QAAS,CAACovB,OAECS,oBCHb,SAAAC,4HAAsBA,EAAUh5B,EAAA,CAJ/B+B,EAAAA,WAAW,CACVC,WAAY,OACZC,YAAaC,EAAAA,UAEO82B,oBCHtB,SAAAC,WAWA,SAXaA,EACJA,EAAA1pB,QAAP,WACE,MAAO,CACLC,SAAU0pB,EACV1qB,UAAW,CACToP,EAAAA,qBAAqB,CACnB/P,KAAM,QANHorB,EAAgBC,EAAAl5B,EAAA,CAD5B8I,EAAAA,SAAS,KACGmwB,oBCQX,SAAAE,EACUC,EACAnqB,GAFV,IAAArK,EAAA7F,KACUA,KAAAq6B,iBAAAA,EACAr6B,KAAAkQ,eAAAA,EAERlQ,KAAKs6B,WAAat6B,KAAKkQ,eACpBqqB,iBACA5vB,KAAKC,EAAAA,KAAI,SAAC4vB,GAAgB,OAAAA,EAAYC,MAAMC,OAAOC,cAEtD36B,KAAK46B,WAAa56B,KAAKs6B,WAAW3vB,KAChCqF,EAAAA,KAAI,SAAC2qB,GACCA,EACF90B,EAAKw0B,iBAAiBQ,iBAAiBF,GAEvC90B,EAAKw0B,iBAAiBS,uBAG1BC,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,YAI3Cb,EAAAl6B,UAAAg7B,gBAAA,WAAA,IAAAr1B,EAAA7F,KACE,OAAOA,KAAK46B,WAAWjwB,KACrByrB,EAAAA,WAAU,WAAM,OAAAvwB,EAAKw0B,iBAAiBa,gEArBdC,EAAAA,wBACF7qB,EAAAA,mLANf8pB,EAAmBn5B,EAAA,CAH/B+B,EAAAA,WAAW,CACVC,WAAY,UAEDm3B,oBCUX,SAAAgB,EACYC,EACAC,EACAC,GAFAv7B,KAAAq7B,oBAAAA,EACAr7B,KAAAs7B,gBAAAA,EACAt7B,KAAAu7B,kBAAAA,SAGZH,EAAAl7B,UAAAs7B,mBAAA,SACEC,GAEA,OAAQA,GACN,KAAKC,EAAAA,kBAAkBC,WACrB,OAAO37B,KAAK47B,6BACd,KAAKF,EAAAA,kBAAkBG,SACrB,OAAO77B,KAAK87B,iCACd,KAAKJ,EAAAA,kBAAkBK,MACrB,OAAO/7B,KAAKg8B,8BACd,QACE,OAAO31B,EAAAA,GAAG,MAIhB+0B,EAAAl7B,UAAA07B,2BAAA,WAAA,IAAA/1B,EAAA7F,KACE,OAAOA,KAAKu7B,kBACTpD,YACAxtB,KAAKC,EAAAA,KAAI,SAACqxB,GAAS,OAAAp2B,EAAKq2B,iCAAiCD,QAGtDb,EAAAl7B,UAAAg8B,iCAAR,SAAyCD,GACvC,IAAME,EAAsB,GAC5BA,EAAoBz5B,KAAI1B,MAAxBm7B,EAAmBv5B,EAAUq5B,EAAKG,0BAA4B,KAE9D,IAAMC,EAAoB,GAG1B,OAFAA,EAAkB35B,KAAI1B,MAAtBq7B,EAAiBz5B,EAAUq5B,EAAKK,wBAA0B,KAE1D15B,EAAWu5B,EAAwBE,IAGrCjB,EAAAl7B,UAAA47B,+BAAA,WAAA,IAAAj2B,EAAA7F,KACE,OAAOA,KAAKs7B,gBACTJ,kBACAvwB,KAAKC,EAAAA,KAAI,SAAC2xB,GAAU,OAAA12B,EAAK22B,kCAAkCD,QAGhEnB,EAAAl7B,UAAA87B,4BAAA,WAAA,IAAAn2B,EAAA7F,KACE,OAAOA,KAAKq7B,oBACTH,kBACAvwB,KAAKC,EAAAA,KAAI,SAAC2xB,GAAU,OAAA12B,EAAK22B,kCAAkCD,QAGxDnB,EAAAl7B,UAAAs8B,kCAAR,SAA0CD,GACxC,IAAMD,EAAyB,GAG/B,OAFAA,EAAuB55B,KAAI1B,MAA3Bs7B,EAAsB15B,EAAU25B,EAAMD,wBAA0B,KAEzDA,GAGTlB,EAAAl7B,UAAAu8B,4BAAA,SACEtJ,EACAsI,GAFF,IAAA51B,EAAA7F,KAIE,OAAQy7B,GACN,KAAKC,EAAAA,kBAAkBC,WACrB,OAAO37B,KAAKu7B,kBACTpD,YACAxtB,KACCC,EAAAA,KAAI,SAACqxB,GACH,OAAAp2B,EAAK62B,oBACHvJ,EACA8I,EAAKU,0BAA4B,QAI3C,KAAKjB,EAAAA,kBAAkBG,SACrB,OAAO77B,KAAKs7B,gBACTJ,kBACAvwB,KACCC,EAAAA,KAAI,SAAC2xB,GACH,OAAA12B,EAAK62B,oBACHvJ,EACAoJ,EAAMI,0BAA4B,QAI5C,KAAKjB,EAAAA,kBAAkBK,MACrB,OAAO/7B,KAAKq7B,oBACTH,kBACAvwB,KACCC,EAAAA,KAAI,SAAC2xB,GACH,OAAA12B,EAAK62B,oBACHvJ,EACAoJ,EAAMI,0BAA4B,UAOxCvB,EAAAl7B,UAAAw8B,oBAAR,SACEvJ,EACAyJ,eAEMC,EAAqC,GAC3C,GAAID,GAAcA,EAAW97B,OAAS,MACpC,IAAwB,IAAAg8B,EAAA/6B,EAAA66B,GAAUG,EAAAD,EAAA16B,QAAA26B,EAAAz6B,KAAAy6B,EAAAD,EAAA16B,OAAE,CAA/B,IAAM46B,EAASD,EAAA16B,MAClB,GACE26B,EAAUC,aACVD,EAAUE,iBACVF,EAAUE,gBAAgBp8B,OAAS,MAEnC,IAA4B,IAAAq8B,GAAAC,OAAA,EAAAr7B,EAAAi7B,EAAUE,kBAAeG,EAAAF,EAAA/6B,QAAAi7B,EAAA/6B,KAAA+6B,EAAAF,EAAA/6B,OAAE,CAAlD,IAAMk7B,EAAaD,EAAAh7B,MAClBrC,KAAKu9B,kBAAkBD,EAAenK,IACxC0J,EAAgBn6B,KAAKs6B,wMAM/B,OAAOH,GAGDzB,EAAAl7B,UAAAq9B,kBAAR,SAA0BD,EAAoBvxB,WACtCyxB,EAAsBF,EAAcG,iBAC1C,GAAI1xB,EAAMJ,SAAWI,EAAMJ,QAAQ7K,OAAS,EAAG,KAC7C,IAAuB,IAAA8X,EAAA7W,EAAAgK,EAAMJ,SAAOwxB,EAAAvkB,EAAAxW,QAAA+6B,EAAA76B,KAAA66B,EAAAvkB,EAAAxW,OAAE,CACpC,GADiB+6B,EAAA96B,MACJq7B,cAAgBF,EAC3B,OAAO,oGAGX,OAAO,EAEP,OAAOA,IAAwBzxB,EAAM2xB,sDAjIRtD,UACJuD,EAAAA,uBACEC,EAAAA,0MAJpBxC,EAAgBn6B,EAAA,CAH5B+B,EAAAA,WAAW,CACVC,WAAY,UAEDm4B,oBCdb,SAAAyC,KAqGA,OA1FSA,EAAAC,eAAP,SAAsBjR,GACpB,IAAMkR,EAAQlR,EAAQxqB,MAEtB,OAAQ07B,EAAMj9B,QAAUi9B,EAAMC,MAAMC,EAAAA,eAChC,KACA,CAAEC,gBAAgB,IAajBL,EAAAM,kBAAP,SAAyBtR,GACvB,IAAMuR,EAAWvR,EAAQxqB,MAEzB,OAAQ+7B,EAASt9B,QAAUs9B,EAASJ,MAAMK,EAAAA,kBACtC,KACA,CAAEC,mBAAmB,IAapBT,EAAAU,gBAAP,SAAuB1R,GACrB,IAAM+M,EAAS/M,EAAQxqB,MAEvB,OAAOu3B,GAAU,GAAKA,GAAU,EAAI,KAAO,CAAE4E,mBAAmB,IAc3DX,EAAAY,mBAAP,SACEL,EACAM,GAUA,OARkB,SAACC,GACjB,OAAAC,GACED,EACAP,EACAM,EACA,0BAiBCb,EAAAgB,gBAAP,SAAuBd,EAAee,GASpC,OARkB,SAACH,GACjB,OAAAC,GACED,EACAZ,EACAe,EACA,uBAKRjB,KAUA,SAAgBe,GACdD,EACAI,EACAC,EACAC,SAEMC,EAAeP,EAAUQ,SAASJ,GAClCK,EAAgBT,EAAUQ,SAASH,GAErCI,EAAcnS,SAAWmS,EAAcnS,OAAOgS,IAIlDG,EAAcC,UACZH,EAAa78B,QAAU+8B,EAAc/8B,QAAKiD,EAAA,IAAM25B,IAAY,EAAI35B,GAAK,UC9H5Dg6B,GAAc,CACzBC,GAAI,EACJC,IAAK,EACLC,KAAM,EACNC,GAAI,EACJC,GAAI,EACJC,IAAK,GAGP,SAAgBC,GAAWC,EAAeC,GACxC,OAAKT,GAAYQ,EAAOnb,OAAU2a,GAAYS,EAAOpb,MAG5C2a,GAAYQ,EAAOnb,MAAQ2a,GAAYS,EAAOpb,MAF9C,oBCGT,SAAAqb,EACYh8B,EACqBqI,GADrBrM,KAAAgE,OAAAA,EACqBhE,KAAAqM,WAAAA,EAJzBrM,KAAAigC,kBAA8B,UAetCD,EAAA9/B,UAAAggC,kBAAA,SAAkBC,GAChB,OAAO95B,EAAAA,GAAG85B,IAaZH,EAAA9/B,UAAAkgC,WAAA,SAAWrwB,SACHswB,EAA2C,QAA5B/6B,EAAGtF,KAAKgE,OAAOsd,qBAAa,IAAAhc,OAAA,EAAAA,EAAGyK,GAYpD,OAVKswB,GACErgC,KAAKigC,kBAAkB1xB,SAASwB,KACnC/P,KAAKigC,kBAAkBv9B,KAAKqN,GAC5BxJ,QAAQC,KACN,iEAAiEuJ,EAAa,OAC9E,uEAKCswB,GAOTL,EAAA9/B,UAAA4D,aAAA,SAAaiM,SAEX,QADchD,EAAAA,iBAAiB/M,KAAKqM,cACY,QAAlC/G,EAAItF,KAAKogC,WAAWrwB,UAAc,IAAAzK,OAAA,EAAAA,EAAEg7B,cAMpDN,EAAA9/B,UAAAqgC,wBAAA,SAAwBxwB,WACtB,OAAgD,QAAhD6I,EAAgC,QAAhCtT,EAAOtF,KAAKgE,OAAOsd,qBAAa,IAAAhc,OAAA,EAAAA,EAAGyK,UAAa,IAAA6I,OAAA,EAAAA,EAAG/L,cAMrDmzB,EAAA9/B,UAAAsgC,eAAA,SAAeL,eACPM,EAAS,OACf,IAA4B,IAAAC,EAAA3+B,EAAAo+B,GAAcQ,EAAAD,EAAAt+B,QAAAu+B,EAAAr+B,KAAAq+B,EAAAD,EAAAt+B,OAAE,CAAvC,IAAM2N,EAAa4wB,EAAAt+B,MAClBrC,KAAK8D,aAAaiM,IACpB0wB,EAAO/9B,KAAI1B,MAAXy/B,EAAM79B,EAAqD,QAArDu6B,EAAwC,QAAxCvkB,EAAU5Y,KAAKogC,WAAWrwB,UAAc,IAAA6I,OAAA,EAAAA,EAAEgoB,mBAAW,IAAAzD,EAAAA,EAAI,uGAGnE,OAAOsD,GAMTT,EAAA9/B,UAAA2gC,UAAA,SAAUV,eACFra,EAAS,IAAIgb,QACnB,IAA4B,IAAAC,EAAAh/B,EAAAo+B,GAAca,EAAAD,EAAA3+B,QAAA4+B,EAAA1+B,KAAA0+B,EAAAD,EAAA3+B,OAAE,CAAvC,IAAM2N,EAAaixB,EAAA3+B,MACgB,QAAtC86B,EAA8B,QAA9BvkB,EAAA5Y,KAAKogC,WAAWrwB,UAAc,IAAA6I,OAAA,EAAAA,EAAEkN,cAAM,IAAAqX,GAAAA,EAAEzuB,SAAQ,SAACuyB,GAC/C,OAAAnb,EAAO5d,IAAI+4B,wGAGf,OAAOthC,MAAMsU,KAAK6R,IAMpBka,EAAA9/B,UAAAghC,YAAA,SAAYf,eACJgB,EAAW,IAAIL,QACrB,IAA4B,IAAAM,EAAAr/B,EAAAo+B,GAAckB,EAAAD,EAAAh/B,QAAAi/B,EAAA/+B,KAAA++B,EAAAD,EAAAh/B,OAAE,CAAvC,IAAM2N,EAAasxB,EAAAh/B,MAClBrC,KAAK8D,aAAaiM,KACoB,QAAxCotB,EAA8B,QAA9BvkB,EAAA5Y,KAAKogC,WAAWrwB,UAAc,IAAA6I,OAAA,EAAAA,EAAEuoB,gBAAQ,IAAAhE,GAAAA,EAAEzuB,SAAQ,SAACtN,GACjD,OAAA+/B,EAASj5B,IAAI9G,yGAInB,OAAOzB,MAAMsU,KAAKktB,6CAhGAG,EAAAA,iBACyB9hC,OAAM0B,WAAA,CAAA,CAAA+L,KAAhDxH,EAAAA,OAAMkB,KAAA,CAACuG,EAAAA,yKALC8yB,EAAoB/+B,EAAA,CAHhC+B,EAAAA,WAAW,CACVC,WAAY,SAOTrB,EAAA,EAAA6D,EAAAA,OAAOyH,EAAAA,eALC8yB,MCCbuB,GAAA,WACE,SAAAA,EACYC,EACAhK,GADAx3B,KAAAwhC,qBAAAA,EACAxhC,KAAAw3B,SAAAA,SAGJ+J,EAAArhC,UAAAuhC,WAAR,SACEC,EACAC,GAEA,MAAO,CACLD,IAAKA,EACLnJ,OAAQoJ,MAAAA,EAAAA,EAAkB3hC,KAAKw3B,UAC5B9uB,IAAIk5B,EAAAA,YACJC,iBAAoBH,KAIpBH,EAAArhC,UAAA4hC,YAAP,SACE70B,EACAy0B,EACAC,WAEMI,EACiD,QADlCnpB,EACuB,QADvBtT,EACnBtF,KAAKwhC,qBAAqBpB,WAAWnzB,UAAK,IAAA3H,OAAA,EAAAA,EAAEmK,iBAAS,IAAAmJ,EAAAA,EAAI,GAC3D,OAAOmgB,EAAAA,SAAS54B,OAAO,CACrBsP,UAAS7M,EAAA,CACP,CACE+N,QAASioB,GACToJ,SAAUhiC,KAAKyhC,WAAWC,KAEzBK,GAELE,OAAQN,MAAAA,EAAAA,EAAkB3hC,KAAKw3B,qDA/BDwI,UACZjH,EAAAA,uJAHXwI,EAAkBtgC,EAAA,CAH9B+B,EAAAA,WAAW,CACVC,WAAY,UAEDs+B,GAAb,GCDAW,GAAA,aCOAC,GAAA,WACE,SAAAA,EAGYC,GAAApiC,KAAAoiC,SAAAA,EAGFpiC,KAAAqiC,gBAAkB,IAAIvB,WAOtBqB,EAAAjiC,UAAAoiC,QAAV,SAAkBC,GAChB,IAAMC,EAAU76B,EAAAA,kBAAkB3H,KAAKoiC,SAAU,CAACG,IAYlD,OAVIj8B,EAAAA,cAAgBk8B,IACbxiC,KAAKqiC,gBAAgBr5B,IAAIu5B,KAC5BviC,KAAKqiC,gBAAgBn6B,IAAIq6B,GACzBh8B,QAAQC,KACN,gDACA+7B,KAKCC,GAUTL,EAAAjiC,UAAAuiC,YAAA,SACEF,EACAG,EACAC,SAEA,OAAqC,QAArCr9B,EAAOtF,KAAKsiC,QAAQC,UAAiB,IAAAj9B,OAAA,EAAAA,EAAEs9B,SACrCL,EACAG,EACAC,qEA3CD9J,EAAAA,UAAQ,CAAA5rB,KACRxH,EAAAA,OAAMkB,KAAA,CAACu7B,4HAHCC,EAAuBlhC,EAAA,CAHnC+B,EAAAA,WAAW,CACVC,WAAY,SAITrB,EAAA,EAAAi3B,EAAAA,YACAj3B,EAAA,EAAA6D,EAAAA,OAAOy8B,MAHCC,GAAb,GCMAU,GAAA,WAcE,SAAAA,EACY78B,EACAw7B,EACAhK,EACAsL,EACAl/B,EACAm/B,EACAC,GANAhjC,KAAAgG,IAAAA,EACAhG,KAAAwhC,qBAAAA,EACAxhC,KAAAw3B,SAAAA,EACAx3B,KAAA8iC,wBAAAA,EACA9iC,KAAA4D,SAAAA,EACA5D,KAAA+iC,iBAAAA,EACA/iC,KAAAgjC,YAAAA,EAuDd,OApDEH,EAAA3iC,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAKwhC,qBACFtB,kBAAkB,CAAClgC,KAAKijC,mBAAmBC,WAC3C90B,WAAU,WAEPvI,EAAK27B,qBAAqB19B,aACxB+B,EAAKo9B,mBAAmBC,WAG1Br9B,EAAKs9B,sBAKLN,EAAA3iC,UAAAijC,gBAAR,WAAA,MAAAt9B,EAAA7F,KACQuiC,EAAmBviC,KAAKwhC,qBAAqBpB,WACjDpgC,KAAKijC,mBAAmBC,UAGrBX,IAILviC,KAAKojC,iBASF,QATkB99B,EAAGtF,KAAK+iC,iBAC1BN,YACCF,EACAviC,KAAKgG,IACLhG,KAAKgjC,YAAYlB,YACf9hC,KAAKijC,mBAAmBC,SACxBljC,KAAKijC,mBAAmBvB,IACxB1hC,KAAKw3B,kBAER,IAAAlyB,OAAA,EAAAA,EACC8I,WAAU,SAAC9I,OAAEmM,EAAAnM,EAAAmM,WAAY4xB,EAAA/9B,EAAA+9B,aACzBx9B,EAAKy9B,OAASD,EACdx9B,EAAKnE,SAAS+P,QAIZoxB,EAAA3iC,UAAAwB,SAAR,SAAiB+P,GACfzR,KAAK8iC,wBAAwBS,qBAC3B9xB,EAAWtM,cACXnF,KAAK4D,SACL,CAAE0zB,cAAet3B,KAAKijC,sBAI1BJ,EAAA3iC,UAAAmP,YAAA,WACMrP,KAAKojC,kBACPpjC,KAAKojC,iBAAiBx1B,wDA1DT0B,EAAAA,wBACiB0wB,UACZjH,EAAAA,gBACeyK,EAAAA,+BACfvqB,EAAAA,iBACQkpB,UACLZ,MApBhBtgC,EAAA,CAAR0I,EAAAA,kDADUk5B,EAAyB5hC,EAAA,CAHrC2I,EAAAA,UAAU,CACTC,SAAU,0BAECg5B,GAAb,GCPAY,GAAA,WAAA,SAAAA,YACEA,EAAAvjC,UAAAuG,SAAA,SAAS87B,GACP,MAA6C,mBAA/BA,EAAiBr+B,WAGjCu/B,EAAAvjC,UAAAsF,YAAA,WACE,OAAA,IAGFi+B,EAAAvjC,UAAA0iC,SAAA,SACEL,EACAG,EACAC,GAHF,IAAA98B,EAAA7F,KAKE,OAAO,IAAImL,EAAAA,YAGR,SAACu4B,GACF,IAAIL,EAEE7L,EAAWmL,MAAAA,EAAAA,EAAmBD,EAAiBlL,SAQ/CmM,EAAU99B,EAAK+9B,oBACnBpM,EACA+K,EAAiBr+B,WAYnB,OATIy/B,IACFN,EAAeX,EAAiBv8B,gBAC9Bw9B,OACAx8B,EACAqwB,GAEFkM,EAAWthC,KAAK,CAAEqP,WAAY4xB,EAAan+B,SAAUm+B,aAAYA,KAjBnD,WACVA,GACFA,EAAa/xB,eAsBXmyB,EAAAvjC,UAAA0jC,oBAAV,SAA8BpM,EAAoBtzB,GAChD,OAAKA,EAGWszB,EACb9uB,IAAI7B,EAAAA,0BACJX,wBAAwBhC,GAJlB,oGAhDAu/B,EAAuBxiC,EAAA,CAHnC+B,EAAAA,WAAW,CACVC,WAAY,UAEDwgC,GAAb,GCkBAI,GAAA,WAGE,SAAAA,EAEqBC,EAEA7H,EAEA8H,EACAC,EACAC,EAEAC,EACAC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EAEAC,EAEAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EAEZC,EAEAC,EACYC,EAEZC,GA5CY1lC,KAAA8jC,KAAAA,EAEA9jC,KAAAi8B,KAAAA,EAEAj8B,KAAA+jC,SAAAA,EACA/jC,KAAAgkC,iBAAAA,EACAhkC,KAAAikC,gBAAAA,EAEAjkC,KAAAkkC,IAAAA,EACAlkC,KAAAmkC,SAAAA,EAEAnkC,KAAAokC,cAAAA,EAEApkC,KAAAqkC,cAAAA,EAEArkC,KAAAskC,YAAAA,EAEAtkC,KAAAukC,KAAAA,EAEAvkC,KAAAwkC,aAAAA,EAEAxkC,KAAAykC,QAAAA,EACAzkC,KAAA0kC,cAAAA,EACA1kC,KAAA2kC,cAAAA,EACA3kC,KAAA4kC,iBAAAA,EACA5kC,KAAA6kC,UAAAA,EAEA7kC,KAAA8kC,QAAAA,EAEA9kC,KAAA+kC,SAAAA,EACA/kC,KAAAglC,SAAAA,EACAhlC,KAAAilC,SAAAA,EAEAjlC,KAAAklC,KAAAA,EACAllC,KAAAmlC,YAAAA,EACAnlC,KAAAolC,YAAAA,EACAplC,KAAAqlC,UAAAA,EACArlC,KAAAslC,YAAAA,EAEZtlC,KAAAulC,kCAAAA,EAEAvlC,KAAAwlC,qBAAAA,EACYxlC,KAAAylC,qBAAAA,EAEZzlC,KAAA0lC,OAAAA,kDA5CkBhgB,EAAAA,YAAWxkB,WAAA,CAAA,CAAA+L,KAAnC4rB,EAAAA,kBAEwB+E,EAAAA,kBAAiB18B,WAAA,CAAA,CAAA+L,KAAzC4rB,EAAAA,kBAE4B8E,EAAAA,gBAAez8B,WAAA,CAAA,CAAA+L,KAA3C4rB,EAAAA,kBACoC8M,EAAAA,wBAAuBzkC,WAAA,CAAA,CAAA+L,KAA3D4rB,EAAAA,kBACmC+M,EAAAA,uBAAsB1kC,WAAA,CAAA,CAAA+L,KAAzD4rB,EAAAA,kBAEuB+I,EAAAA,WAAU1gC,WAAA,CAAA,CAAA+L,KAAjC4rB,EAAAA,kBAC4BgN,EAAAA,gBAAe3kC,WAAA,CAAA,CAAA+L,KAA3C4rB,EAAAA,kBAEiCiN,EAAAA,qBAAoB5kC,WAAA,CAAA,CAAA+L,KAArD4rB,EAAAA,kBAEiCpT,EAAAA,qBAAoBvkB,WAAA,CAAA,CAAA+L,KAArD4rB,EAAAA,kBAE+BkN,EAAAA,mBAAkB7kC,WAAA,CAAA,CAAA+L,KAAjD4rB,EAAAA,kBAEwBmN,EAAAA,YAAW9kC,WAAA,CAAA,CAAA+L,KAAnC4rB,EAAAA,kBAEgCoN,EAAAA,oBAAmB/kC,WAAA,CAAA,CAAA+L,KAAnD4rB,EAAAA,kBAE2BqN,EAAAA,eAAchlC,WAAA,CAAA,CAAA+L,KAAzC4rB,EAAAA,kBACiCsN,EAAAA,qBAAoBjlC,WAAA,CAAA,CAAA+L,KAArD4rB,EAAAA,kBACiCuN,EAAAA,qBAAoBllC,WAAA,CAAA,CAAA+L,KAArD4rB,EAAAA,kBACoCwN,EAAAA,wBAAuBnlC,WAAA,CAAA,CAAA+L,KAA3D4rB,EAAAA,kBAC6ByN,EAAAA,iBAAgBplC,WAAA,CAAA,CAAA+L,KAA7C4rB,EAAAA,kBAE2BvoB,EAAAA,eAAcpP,WAAA,CAAA,CAAA+L,KAAzC4rB,EAAAA,kBAE4B0N,EAAAA,gBAAerlC,WAAA,CAAA,CAAA+L,KAA3C4rB,EAAAA,kBAC4B2N,EAAAA,gBAAetlC,WAAA,CAAA,CAAA+L,KAA3C4rB,EAAAA,kBAC4B4N,EAAAA,gBAAevlC,WAAA,CAAA,CAAA+L,KAA3C4rB,EAAAA,kBAEwB6N,EAAAA,YAAWxlC,WAAA,CAAA,CAAA+L,KAAnC4rB,EAAAA,kBAC+B8N,EAAAA,mBAAkBzlC,WAAA,CAAA,CAAA+L,KAAjD4rB,EAAAA,kBAC+BrT,EAAAA,mBAAkBtkB,WAAA,CAAA,CAAA+L,KAAjD4rB,EAAAA,kBAC6BsC,EAAAA,iBAAgBj6B,WAAA,CAAA,CAAA+L,KAA7C4rB,EAAAA,kBAC+B+N,EAAAA,mBAAkB1lC,WAAA,CAAA,CAAA+L,KAAjD4rB,EAAAA,kBAEyCgO,EAAAA,kCAAiC3lC,WAAA,CAAA,CAAA+L,KAD1E4rB,EAAAA,kBAG4BiO,EAAAA,qBAAoB5lC,WAAA,CAAA,CAAA+L,KADhD4rB,EAAAA,kBAEwCkO,EAAAA,qBAAoB7lC,WAAA,CAAA,CAAA+L,KAA5D4rB,EAAAA,kBAEcmO,EAAAA,gsCAjDNnD,EAAY5iC,EAAA,CAHxB+B,EAAAA,WAAW,CACVC,WAAY,SAOTrB,EAAA,EAAAi3B,EAAAA,YAEAj3B,EAAA,EAAAi3B,EAAAA,YAEAj3B,EAAA,EAAAi3B,EAAAA,YACAj3B,EAAA,EAAAi3B,EAAAA,YACAj3B,EAAA,EAAAi3B,EAAAA,YAEAj3B,EAAA,EAAAi3B,EAAAA,YACAj3B,EAAA,EAAAi3B,EAAAA,YAEAj3B,EAAA,EAAAi3B,EAAAA,YAEAj3B,EAAA,EAAAi3B,EAAAA,YAEAj3B,EAAA,EAAAi3B,EAAAA,YAEAj3B,EAAA,GAAAi3B,EAAAA,YAEAj3B,EAAA,GAAAi3B,EAAAA,YAEAj3B,EAAA,GAAAi3B,EAAAA,YACAj3B,EAAA,GAAAi3B,EAAAA,YACAj3B,EAAA,GAAAi3B,EAAAA,YACAj3B,EAAA,GAAAi3B,EAAAA,YACAj3B,EAAA,GAAAi3B,EAAAA,YAEAj3B,EAAA,GAAAi3B,EAAAA,YAEAj3B,EAAA,GAAAi3B,EAAAA,YACAj3B,EAAA,GAAAi3B,EAAAA,YACAj3B,EAAA,GAAAi3B,EAAAA,YAEAj3B,EAAA,GAAAi3B,EAAAA,YACAj3B,EAAA,GAAAi3B,EAAAA,YACAj3B,EAAA,GAAAi3B,EAAAA,YACAj3B,EAAA,GAAAi3B,EAAAA,YACAj3B,EAAA,GAAAi3B,EAAAA,YACAj3B,EAAA,GAAAi3B,EAAAA,YAEAj3B,EAAA,GAAAi3B,EAAAA,YAEAj3B,EAAA,GAAAi3B,EAAAA,aA/CQgL,GAAb,GCfAoD,GAAA,WACE,SAAAA,EAC8B5jC,EACG6jC,GADHlnC,KAAAqD,SAAAA,EACGrD,KAAAknC,SAAAA,EAGzBlnC,KAAAmnC,oBAA+C,UAEvDF,EAAA/mC,UAAAuG,SAAA,SAAS87B,GACP,MACwC,iBAA/BA,EAAiBr+B,WACxBq+B,EAAiBr+B,UAAUqK,SAAS,MAIxC04B,EAAA/mC,UAAAsF,YAAA,WACE,OAAA,IAGFyhC,EAAA/mC,UAAA0iC,SAAA,SACEL,EACAG,EACAC,GAHF,IAAA98B,EAAA7F,KAKE,OAAO,IAAImL,EAAAA,YAAuC,SAACu4B,GACjD,IAAI0D,EACAnxB,GAAS,EACPuhB,EAAWmL,MAAAA,EAAAA,EAAmBD,EAAiBlL,SAE/C5zB,EAAW4zB,EAAS9uB,IAAIuQ,EAAAA,WAExBouB,EAAc,WAClBpxB,GAAS,EACLmxB,GACFA,EAAWhiC,UA8Bf,OA1BAS,EAAKyhC,iBAAiB/E,EAAiBr+B,UAAWN,GAAU2jC,MAC1D,SAACC,GACC,GAAIA,EAAa,CACfJ,EAAaxjC,EAASma,cAAcypB,GAEpC,IAAMC,EAAmBjQ,EAAS9uB,IAAIkwB,GAAkB,MAExDwO,EAAWM,MAAKnnC,EAAAA,EAAA,GACXi3B,EAAS9uB,IAAIm7B,KAAa,CAC7B4D,iBAAgBA,IAGlB7jC,EAASsa,YACPwkB,EAAiBt8B,QAAQjB,cAAcwiC,cACvCP,GAGF1D,EAAWthC,KAAK,CAAEqP,WAAY,IAAIY,EAAAA,WAAW+0B,KAExCnxB,GACHoxB,QAMDA,MAIHJ,EAAA/mC,UAAAonC,iBAAR,SACEpjC,EACAN,GAFF,IAAAiC,EAAA7F,KAIE,OAAO,IAAI4nC,SAAQ,SAACtF,GACZ,IAAAh9B,EAAA/C,EAAA2B,EAAAya,MAAA,KAAA,GAACkpB,EAAAviC,EAAA,GAAMuE,EAAAvE,EAAA,GAETwiC,EAASjiC,EAAKshC,oBAAoBU,GAkBtC,GAhBKC,IACCD,GACFC,EAASlkC,EAASma,cAAc,UAChClY,EAAKshC,oBAAoBU,GAAQC,EACjCA,EAAOjvB,aAAa,MAAOgvB,GAC3BjkC,EAASsa,YAAYrY,EAAKxC,SAASsB,KAAMmjC,GACrCC,EAAAA,kBAAkBliC,EAAKqhC,YACzBY,EAAOE,OAAS,WACdF,EAAOE,OAAS,QAIpBF,EAAS,IAITA,EAAOE,OAAQ,CAIjB,IAAMC,EAAgBH,EAAOE,OAC7BF,EAAOE,OAAS,WACdC,IACA3F,EAAQz4B,SAGVy4B,EAAQz4B,yEArGXpE,EAAAA,OAAMkB,KAAA,CAACjB,EAAAA,4CACPD,EAAAA,OAAMkB,KAAA,CAACuG,EAAAA,wKAHC+5B,EAAmBhmC,EAAA,CAH/B+B,EAAAA,WAAW,CACVC,WAAY,SAITrB,EAAA,EAAA6D,EAAAA,OAAOC,EAAAA,WACP9D,EAAA,EAAA6D,EAAAA,OAAOyH,EAAAA,eAHC+5B,GAAb,GCFAiB,GAAA,WACE,SAAAA,EAAsBC,GAAAnoC,KAAAmoC,eAAAA,SAKtBD,EAAAhoC,UAAAuG,SAAA,SAAS87B,GACP,MACwC,mBAA/BA,EAAiBr+B,WACxBlE,KAAKooC,WAAW7F,EAAiBr+B,YAI7BgkC,EAAAhoC,UAAAkoC,WAAR,SAAmB1P,GACjB,IAAM2P,EAAY3P,EAAO1f,WAAWsvB,OAAO,EAAG,IAAIC,QAAQ,IAAK,IAC/D,OAAOF,EAAU7c,WAAW,eAAiB6c,EAAU7c,WAAW,SAGpE0c,EAAAhoC,UAAAsF,YAAA,WACE,OAAA,IAGF0iC,EAAAhoC,UAAA0iC,SAAA,SACEL,EACAG,EACAC,GAHF,IAAA98B,EAAA7F,KAKE,OAAOiU,EAAAA,KAAKsuB,EAAiBr+B,aAAayG,KACxCyrB,EAAAA,WAAU,SAAClyB,GACT,OAAA2B,EAAKsiC,eAAevF,SAAQriC,EAAAA,EAAA,GACrBgiC,GAAgB,CAAEr+B,UAASA,IAChCw+B,EACAC,iDA/B8Bc,uHAD3ByE,EAAoBjnC,EAAA,CAHhC+B,EAAAA,WAAW,CACVC,WAAY,UAEDilC,GAAb,iBCUA,SAAAM,KAAkC,OAArBA,EAAmBvnC,EAAA,CAtB/B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,cACVwF,UAAW,CACT,CACEkB,QAASuxB,GACTh/B,YAAaugC,GACbp/B,OAAO,GAET,CACEsM,QAASuxB,GACTh/B,YAAaglC,GACb7jC,OAAO,GAET,CACEsM,QAASuxB,GACTh/B,YAAa+jC,GACb5iC,OAAO,IAGX6F,aAAc,CAAC24B,IACf14B,QAAS,CAAC04B,OAEC2F,MCfbC,GAAA,WACE,SAAAA,EACYvjC,EACAsX,EACA3L,GAFA7Q,KAAAkF,SAAAA,EACAlF,KAAAwc,OAAAA,EACAxc,KAAA6Q,oBAAAA,SAOZ43B,EAAAvoC,UAAAyM,KAAA,WACM3M,KAAK0oC,aACP1oC,KAAK2oC,SAOTF,EAAAvoC,UAAAwoC,UAAA,WAME,OALI1oC,KAAK4oC,eAAiB5oC,KAAK6oC,gBACzB7oC,KAAKwc,OAAOssB,cACd9oC,KAAKwc,OAAOssB,aAAaC,QCtCY,cDsC2B,QAG7D/oC,KAAK4oC,cAAgB5oC,KAAK6oC,gBAOzBJ,EAAAvoC,UAAA0oC,WAAV,WACE,IAAMlO,EAAS16B,KAAKkF,SAAS2iC,OAAOlpB,MAAM,KAAK,GAC/C,OAAO+b,GAAUA,EAAO/b,MAAM,KAAKpQ,SAAS,aAMpCk6B,EAAAvoC,UAAA2oC,aAAV,WACE,OACE7oC,KAAKwc,OAAOssB,cACwD,SAApE9oC,KAAKwc,OAAOssB,aAAaE,QC3Dc,gBDkEjCP,EAAAvoC,UAAAyoC,MAAV,WACE3oC,KAAK6Q,oBAAoBzJ,OAAO/G,EAAAA,cAAc4oC,+CAlD1BC,EAAAA,gBACF/qB,EAAAA,iBACarX,0KAJtB2hC,EAAiBxnC,EAAA,CAH7B+B,EAAAA,WAAW,CACVC,WAAY,UAEDwlC,GAAb,GEKAU,GAAA,WAAA,SAAAA,KAA8B,OAAjBA,EAAeloC,EAAA,CAX3B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcu+B,IACxB/4B,UAAW,CACT,CACEkB,QAASy4B,EAAAA,gBACTC,WAAYC,GACZhQ,KAAM,CAACmP,IACPpkC,OAAO,OAIA8kC,GAAb,GAQA,SAAgBG,GAAWC,GAIzB,OAHgB,WACdA,EAAkB58B,YC9BV68B,GCIAC,iBCWV,SAAAC,EACYjnB,EACAknB,EACAz5B,EACAsM,GAHAxc,KAAAyiB,YAAAA,EACAziB,KAAA2pC,eAAAA,EACA3pC,KAAAkQ,eAAAA,EACAlQ,KAAAwc,OAAAA,SAGZktB,EAAAxpC,UAAA0pC,sCAAA,WAAA,IAAA/jC,EAAA7F,KACEA,KAAKyiB,YACFonB,eACAl/B,KAAKmV,EAAAA,KAAK,IACV1R,WAAU,SAAC07B,GACNjkC,EAAK8jC,eAAeI,yBAAyBD,IAC/CjkC,EAAKmkC,iBAEPnkC,EAAK8jC,eAAeM,iCAI1BP,EAAAxpC,UAAA8pC,eAAA,WACEhqC,KAAKyiB,YAAYynB,SACjBlqC,KAAKkQ,eAAeE,GAAG,CAAEC,QAAS,UAGpCq5B,EAAAxpC,UAAAiqC,qCAAA,WAAA,IAAAtkC,EAAA7F,KACE,OAAOA,KAAKyiB,YACTonB,eACAl/B,KACCy/B,EAAAA,UAAS,SAACC,GACR,OAAAhkC,EAAAA,GAAGR,EAAK8jC,eAAeI,yBAAyBM,SAYxDX,EAAAxpC,UAAAu2B,OAAA,WACMz2B,KAAKwc,OAAOssB,cACd9oC,KAAKwc,OAAOssB,aAAawB,WJ1Dc,yDIgBlB5kB,EAAAA,mBACG6kB,EAAAA,sBACAj6B,EAAAA,sBACR6N,EAAAA,oOALTurB,EAAmBzoC,EAAA,CAH/B+B,EAAAA,WAAW,CACVC,WAAY,UAEDymC,oBCqBX,SAAAc,EACY/nB,EACAknB,EACAc,EACAC,EACAnoB,EACArS,GALAlQ,KAAAyiB,YAAAA,EACAziB,KAAA2pC,eAAAA,EACA3pC,KAAAyqC,YAAAA,EACAzqC,KAAA0qC,oBAAAA,EACA1qC,KAAAuiB,qBAAAA,EACAviB,KAAAkQ,eAAAA,EAViBlQ,KAAAw5B,UAAW,EAEhCx5B,KAAA2qC,yBAA0B,EAqEpC,OA1DEH,EAAAtqC,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAK4qC,cAAgB5qC,KAAK2pC,eAAekB,+BACzC7qC,KAAK8qC,qBAAuB9qC,KAAK2pC,eAAeoB,sCAChD/qC,KAAKgrC,UAAYhrC,KAAKyiB,YAAYonB,eAAel/B,KAC/CyrB,EAAAA,WAAU,SAAC0T,GACT,OAAIA,GAAWA,EAAMmB,cACnBplC,EAAKqlC,sCAAsCpB,GACpCjkC,EAAK4kC,YAAY/hC,OAEjBrC,EAAAA,QAAGc,QAMVqjC,EAAAtqC,UAAAgrC,sCAAR,SAA8CpB,GAE1C9pC,KAAK2qC,yBACL3qC,KAAK2pC,eAAeI,yBAAyBD,KAE7C9pC,KAAK2qC,yBAA0B,EAC/B3qC,KAAKuiB,qBAAqBnd,OAAOwf,EAAAA,kBAAkBumB,gBACnDnrC,KAAKkQ,eAAeE,GAAG,OAI3Bo6B,EAAAtqC,UAAAkrC,0BAAA,SAA0B9lC,OACxB+lC,EAAA/lC,EAAA+lC,OACAjN,EAAA94B,EAAA84B,SAKAp+B,KAAK2pC,eAAe2B,8BAA8BD,EAAQjN,IAG5DoM,EAAAtqC,UAAAgqC,OAAA,WACElqC,KAAK0qC,oBAAoBd,yCAG3BY,EAAAtqC,UAAAqrC,8BAAA,SAA8BjmC,GAA9B,IAAAO,EAAA7F,KAAgCwrC,EAAAlmC,EAAAkmC,WAC9BxrC,KAAK2pC,eACFkB,+BACAlgC,KAAKmV,EAAAA,KAAK,IACV1R,WAAU,SAACq9B,GACV,OAAA5lC,EAAK8jC,eAAe4B,8BAClBE,EACAD,MAGH59B,cACH5N,KAAK2qC,yBAA0B,GAGjCH,EAAAtqC,UAAAwrC,OAAA,WACE1rC,KAAKw5B,UAAW,EAChBx5B,KAAK0qC,oBAAoBjU,mDAhEF/Q,EAAAA,mBACG6kB,EAAAA,sBACH7D,EAAAA,mBACQgD,UACCjkB,EAAAA,4BACNnV,EAAAA,kBAVCrP,EAAA,CAA5BqR,EAAAA,YAAY,gDALFk4B,EAAkBvpC,EAAA,CAN9BkZ,EAAAA,UAAU,CACTtQ,SAAU,iBACV5D,SAAA,40NAEA0lC,cAAeC,EAAAA,kBAAkBC,w1GAEtBrB,oBCFX,SAAAsB,EACU9nC,EACA0mC,EACAjoB,EACAvS,EACA67B,GAJA/rC,KAAAgE,OAAAA,EACAhE,KAAA0qC,oBAAAA,EACA1qC,KAAAyiB,YAAAA,EACAziB,KAAAkQ,eAAAA,EACAlQ,KAAA+rC,kBAAAA,EAVF/rC,KAAAyZ,cAAgB,IAAI9L,EAAAA,aAEpB3N,KAAAgsC,uBAAyB,IAoEnC,OAzDEF,EAAA5rC,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAKisC,SAAWjsC,KAAKksC,8BACrBlsC,KAAKmsC,SAAWC,aAAY,WACtBvmC,EAAKomC,SAAW,EAClBpmC,EAAKomC,YAELI,cAAcxmC,EAAKsmC,UACnBtmC,EAAK6kC,oBAAoBd,yCAE3B/jC,EAAKkmC,kBAAkB78B,iBACtB,KAEHlP,KAAKssC,kBACLtsC,KAAKusC,gCAGCT,EAAA5rC,UAAAosC,gBAAR,WAAA,IAAAzmC,EAAA7F,KACEA,KAAKyZ,cAAcvR,IACjBlI,KAAKkQ,eAAes8B,eAAep+B,WAAU,SAACo+B,GACxCA,GACF3mC,EAAK4mC,kBAMLX,EAAA5rC,UAAAqsC,6BAAR,WAAA,IAAA1mC,EAAA7F,KACEA,KAAKyZ,cAAcvR,IACjBlI,KAAKyiB,YACFiqB,eACA/hC,KAAKsB,EAAAA,wBACLmC,WAAU,WAAM,OAAAvI,EAAK4mC,kBAI5BX,EAAA5rC,UAAAusC,WAAA,WACMzsC,KAAKisC,SAAW,IAClBjsC,KAAKisC,SAAWjsC,KAAKksC,gCAIjBJ,EAAA5rC,UAAAgsC,4BAAR,WACE,OACElsC,KAAKgE,OAAO2oC,IAAIC,kBAAkBC,uBAClC7sC,KAAKgsC,uBAEEhsC,KAAKgsC,uBAELhsC,KAAKgE,OAAO2oC,IAAIC,kBAAkBC,wBAG7Cf,EAAA5rC,UAAAmP,YAAA,WACErP,KAAKyZ,cAAc7L,cACf5N,KAAKmsC,UACPE,cAAcrsC,KAAKmsC,oDA7DLW,EAAAA,iBACapD,UACRhkB,EAAAA,mBACGpV,EAAAA,sBACGy8B,EAAAA,qBAXlBjB,EAAwB7qC,EAAA,CANpCkZ,EAAAA,UAAU,CACTtQ,SAAU,uBACV5D,SAAA,0UAEA0lC,cAAeC,EAAAA,kBAAkBC,4iCAEtBC,oBCbb,SAAAkB,KAgBA,OAfEA,EAAA9sC,UAAA+sC,UAAA,SAAUC,GACJA,EAAe,IACjBA,EAAe,GAEjB,IAAMC,EAAkB/2B,KAAKuR,MAAMulB,EAAe,IAC5CE,EAAkBF,EAAe,GAQvC,OANIC,EAAU,IACS,KAAOA,GAAS3jB,OAAO,GAExB2jB,EAAU,IAGL,KADQ,KAAOC,GAAS5jB,OAAO,IAbjDwjB,EAAe/rC,EAAA,CAH3BosC,EAAAA,KAAK,CACJC,KAAM,iBAEKN,oBCoBX,SAAAO,EAAoBC,GAAAxtC,KAAAwtC,GAAAA,EALpBxtC,KAAAytC,qBAAsB,EAGtBztC,KAAA0tC,YAAc,IAAIjgC,EAAAA,aAqBpB,OAjBE8/B,EAAArtC,UAAAqJ,SAAA,WACEvJ,KAAK2tC,iBAAmB3tC,KAAKwtC,GAAGv6B,MAAM,CACpCo4B,OAAQ,CAAC,GAAI,CAACuC,EAAAA,WAAWC,WACzBzP,SAAU,CAAC,GAAI,CAACwP,EAAAA,WAAWC,cAI/BN,EAAArtC,UAAA4tC,SAAA,WACM9tC,KAAK2tC,iBAAiBI,MACxB/tC,KAAK0tC,YAAYz/B,KAAK,CACpBo9B,OAAQrrC,KAAK2tC,iBAAiBjlC,IAAI,UAAUrG,MAC5C+7B,SAAUp+B,KAAK2tC,iBAAiBjlC,IAAI,YAAYrG,QAGlDrC,KAAK2tC,iBAAiBK,6DAhBFC,EAAAA,eALxBhtC,EAAA,CADC0I,EAAAA,mDAID1I,EAAA,CADCsO,EAAAA,4CANUg+B,EAAyBtsC,EAAA,CANrCkZ,EAAAA,UAAU,CACTtQ,SAAU,wBACV5D,SAAA,03BAEA0lC,cAAeC,EAAAA,kBAAkBC,6gBAEtB0B,oBCAX,SAAAW,EACYxD,EACAD,GADAzqC,KAAA0qC,oBAAAA,EACA1qC,KAAAyqC,YAAAA,EAJJzqC,KAAA0N,aAAe,IAAIC,EAAAA,aAqB7B,OAdEugC,EAAAhuC,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAK0N,aAAaxF,IAChBlI,KAAKyqC,YAAY/hC,MAAM0F,WAAU,SAAC82B,GAAS,OAACr/B,EAAKsoC,SAAWjJ,MAE9DllC,KAAKouC,sCAAwCpuC,KAAK0qC,oBAAoBP,wCAGxE+D,EAAAhuC,UAAA8pC,eAAA,WACEhqC,KAAK0qC,oBAAoBV,kBAG3BkE,EAAAhuC,UAAAmP,YAAA,WACErP,KAAK0N,aAAaE,wDAhBa87B,UACRhD,EAAAA,eAPdwH,EAA0BjtC,EAAA,CANtCkZ,EAAAA,UAAU,CACTtQ,SAAU,wBACV5D,SAAA,8hBAEA0lC,cAAeC,EAAAA,kBAAkBC,m+CAEtBqC,oBCgCX,SAAAG,EACUb,EACAc,EACAtqC,GAFAhE,KAAAwtC,GAAAA,EACAxtC,KAAAsuC,WAAAA,EACAtuC,KAAAgE,OAAAA,EAdFhE,KAAA0N,aAAe,IAAIC,EAAAA,aAM3B3N,KAAA0tC,YAAc,IAAIjgC,EAAAA,aAoFpB,OAzEE4gC,EAAAnuC,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAKuuC,sBAAwBvuC,KAAKwtC,GAAGv6B,MAAM,CACzCu7B,WAAY,CAAC,GAAIZ,EAAAA,WAAWC,YAE9B7tC,KAAKsuC,WAAWG,sBAChBzuC,KAAK0uC,sBAAwB1uC,KAAKsuC,WAAWK,kCAC7C3uC,KAAK4uC,cAAgB5uC,KAAKsuC,WAAWO,2BAErC7uC,KAAK0N,aAAaxF,IAChBlI,KAAKuuC,sBAAsBpP,SAASqP,WAAWjgB,aAC5C5jB,KAAKmkC,EAAAA,aAAa,MAClB1gC,WAAU,SAAC2gC,GACVlpC,EAAKmpC,iBAAiBD,QAKtBV,EAAAnuC,UAAA8uC,iBAAR,SAAyBD,GAErB9qC,QAAQjE,KAAKivC,mBACbF,IAAoB/uC,KAAKivC,iBAAiB3B,OAE1CttC,KAAKivC,sBAAmB9nC,GAEtBlD,QAAQjE,KAAKivC,oBAGjBjvC,KAAKsuC,WAAWG,sBACZM,EAAgBG,OAAOpuC,QAAU,GACnCd,KAAKsuC,WAAWa,eAAe,CAC7Bn7B,MAAO+6B,EACPK,SAAUpvC,KAAKgE,OAAO2oC,IAAIwC,eAAeE,eAK/ChB,EAAAnuC,UAAAovC,uBAAA,SAAuBnB,GACrBnuC,KAAKivC,iBAAmBd,EACxBnuC,KAAKuuC,sBAAsBpP,SAASqP,WAAWtgB,SAC7CluB,KAAKivC,iBAAiB3B,MAExBttC,KAAKsuC,WAAWG,uBAGlBJ,EAAAnuC,UAAA4tC,SAAA,WACM9tC,KAAKuuC,sBAAsBR,OAAS9pC,QAAQjE,KAAKivC,kBACnDjvC,KAAK0tC,YAAYz/B,KAAK,CAAEu9B,WAAYxrC,KAAKivC,iBAAiBzD,aAE1DxrC,KAAKuuC,sBAAsBP,oBAI/BK,EAAAnuC,UAAAqvC,gBAAA,SAAgBj8B,GACd,GAAIrP,QAAQjE,KAAKwvC,YAAa,CAC5B,GACExvC,KAAKwvC,WAAWrqC,cAAcsqC,SAASn8B,EAAMnS,SAC7CnB,KAAKwuC,WAAWrpC,cAAcsqC,SAASn8B,EAAMnS,QAE7C,OAEAnB,KAAKsuC,WAAWG,wBAKtBJ,EAAAnuC,UAAAwvC,aAAA,WACE1vC,KAAKsuC,WAAWG,uBAGlBJ,EAAAnuC,UAAAmP,YAAA,WACErP,KAAK0N,aAAaE,cAClB5N,KAAKsuC,WAAWG,gEA5EJR,EAAAA,mBACQ0B,EAAAA,kBACJ7C,EAAAA,aARlB7rC,EAAA,CADCsO,EAAAA,4CAGwBtO,EAAA,CAAxBggB,EAAAA,UAAU,gDACchgB,EAAA,CAAxBggB,EAAAA,UAAU,gDAXAotB,EAA0BptC,EAAA,CAVtCkZ,EAAAA,UAAU,CACTtQ,SAAU,wBACV5D,SAAA,8vCAEA0lC,cAAeC,EAAAA,kBAAkBC,KAEjC55B,KAAM,CACJ29B,mBAAoB,u5PAGXvB,MC3BAwB,GAAuC,CAClDzoC,OAAQ,CACN6hC,IAAK,CACH9gC,OAAQ,gBACRjE,UAAWsmC,oBC+BjB,SAAAsF,KAAwB,OAAXA,EAAS7uC,EAAA,CApBrB8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACA4b,EAAAA,oBACA1E,EAAAA,WACA4uB,EAAAA,UAAcv/B,UACd24B,GACA9b,IAEFnjB,aAAc,CACZsgC,GACA+C,GACAc,GACAvC,GACAkB,GACAkB,IAEFz+B,UAAW,CAAC4R,EAAAA,cAAcwuB,KAC1BtuB,gBAAiB,CAACipB,OAEPsF,oBCxBX,SAAAE,EACU9/B,EACA+/B,GADAjwC,KAAAkQ,eAAAA,EACAlQ,KAAAiwC,eAAAA,EAGSjwC,KAAAkwC,sBAAwBC,EAAAA,aAAaC,eAOxDJ,EAAA9vC,UAAAmwC,WAAA,SACEC,GADF,IAAAzqC,EAAA7F,KAGE,OAAOA,KAAKkQ,eAAeqqB,iBAAiB5vB,KAC1CC,EAAAA,KAAI,SAAC6vB,GAAU,OAAAA,EAAMA,MAAMC,OAAoB,eAC/CtE,EAAAA,WAAU,SAACma,GACT,OAAOA,EACH1qC,EAAKoqC,eAAevnC,IAClB6nC,EACAD,GAAUzqC,EAAKqqC,uBAEjB7pC,EAAAA,GAAG,SAEThB,EAAAA,QAAO,SAACmrC,GAAM,YAAMrpC,IAANqpC,KACdvkC,EAAAA,kEAzBsBqE,EAAAA,sBACA41B,EAAAA,iLAHf8J,EAAqB/uC,EAAA,CAHjC+B,EAAAA,WAAW,CACVC,WAAY,UAED+sC,oBC0BX,SAAAS,EACYC,EACAC,EACAC,GAFA5wC,KAAA0wC,aAAAA,EACA1wC,KAAA2wC,YAAAA,EACA3wC,KAAA4wC,iBAAAA,EAtBZ5wC,KAAAkf,UAAYtX,EAAAA,UAOZ5H,KAAAy7B,kBAAuCC,EAAAA,kBAAkBC,WAEzD37B,KAAA6wC,SAAW,EACX7wC,KAAA8wC,aAAc,EAKd9wC,KAAA+wC,KAAkB,IAAIC,EAAAA,UAAU,IAgElC,OAlDEP,EAAAvwC,UAAA+wC,mBAAA,WAAA,IAAAprC,EAAA7F,KA2BE,OA1BKA,KAAKkxC,mBACRlxC,KAAKkxC,iBAAmBlxC,KAAKmxC,OAAOxmC,KAClCtF,EAAAA,QAAO,SAAC7C,GAAM,QAAEA,KAChBoI,EAAAA,KAAI,SAACmB,GAAU,OAAAlG,EAAKurC,eAAerlC,MACnCqqB,EAAAA,WAAU,WACR,OAAAvwB,EAAKkrC,KAAKxiB,aAAa5jB,KAErBqiB,EAAAA,UAAU,MACVhd,EAAAA,KAAI,SAACqhC,GACCA,GACFxrC,EAAK8qC,YAAYW,YACfD,EAAY3T,YACZ2T,EAAYR,UAEe,IAAzBQ,EAAYR,UACdhrC,EAAK0rC,aAAa,YAGpB1rC,EAAKkrC,KAAKS,wBAKlB5mC,EAAAA,KAAI,WAAM,OAAa/E,EAAKkrC,KAAKroC,IAAI,iBAGlC1I,KAAKkxC,kBAGdT,EAAAvwC,UAAAqJ,SAAA,WACEvJ,KAAKyxC,iBAAmBzxC,KAAK4wC,iBAAiBpV,mBAC5Cx7B,KAAKy7B,oBAIDgV,EAAAvwC,UAAAkxC,eAAR,SAAuBrlC,GACrB,IAAK/L,KAAK+wC,KAAKroC,IAAI,YAAa,CAC9B,IAAMmoC,EAAW,IAAIa,EAAAA,YAAY3lC,EAAM8kC,SAAU,CAAEc,SAAU,SAC7D3xC,KAAK+wC,KAAKa,WAAW,WAAYf,GAEjC,IAAMnT,EAAc,IAAIgU,EAAAA,YAAY3lC,EAAM2xB,aAC1C19B,KAAK+wC,KAAKa,WAAW,cAAelU,GAEtC,OAAoB19B,KAAK+wC,KAAKroC,IAAI,aAGpC+nC,EAAAvwC,UAAAqxC,aAAA,SAAa7pC,GACX1H,KAAK0wC,aAAa5b,mBAAmBptB,6CAzDb6sB,UACDqJ,EAAAA,yBACKxC,MAT9Bn6B,EAAA,CADCggB,EAAAA,UAAU,SAAU,CAAE4wB,KAAMx/B,EAAAA,2CAblBo+B,EAA0BxvC,EAAA,CAJtCkZ,EAAAA,UAAU,CACTtQ,SAAU,0BACV5D,SAAA,sgHAEWwqC,oBC2BX,SAAAqB,EACYpB,EACAqB,EACFC,EACEzW,GAHAv7B,KAAA0wC,aAAAA,EACA1wC,KAAA+xC,sBAAAA,EACF/xC,KAAAgyC,GAAAA,EACEhyC,KAAAu7B,kBAAAA,EA1BHv7B,KAAAiyC,cAAe,EAWxBjyC,KAAAkyC,UAAW,EACXlyC,KAAA6wC,SAAW,EACX7wC,KAAA6V,WAAY,EAKZ7V,KAAAmyC,cAAgB,IAAInB,EAAAA,UAAU,CAC5BH,SAAU,IAAIa,EAAAA,YAAY,KAwF9B,OA9EEI,EAAA5xC,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACMA,KAAKykC,SACPzkC,KAAKuwC,YAAcvwC,KAAKykC,QAAQ9f,KAChC3kB,KAAKoyC,WAAapyC,KAAKu7B,kBAAkB8W,SAASryC,KAAKuwC,aACvDvwC,KAAKsyC,aAAatyC,KAAKykC,SACvBzkC,KAAKgyC,GAAG9iC,gBACClP,KAAKuwC,aACdvwC,KAAKoyC,WAAapyC,KAAKu7B,kBAAkB8W,SAASryC,KAAKuwC,aAEvDvwC,KAAK6wC,SAAW,EAChB7wC,KAAKkyC,UAAW,EAChBlyC,KAAKgyC,GAAG9iC,gBAERlP,KAAK0N,aAAe1N,KAAK+xC,sBACtB1B,aACA1lC,KAAKtF,EAAAA,OAAOpB,UACZmK,WAAU,SAACq2B,GACV5+B,EAAK0qC,YAAc9L,EAAQ9f,KAC3B9e,EAAKysC,aAAa7N,GAClB5+B,EAAKusC,WAAavsC,EAAK01B,kBAAkB8W,SAASxsC,EAAK0qC,aACvD1qC,EAAKmsC,GAAG9iC,mBAKR4iC,EAAA5xC,UAAAoyC,aAAR,SAAqB7N,GACnBzkC,KAAK6wC,SAAW,EAChB7wC,KAAKkyC,SACHzN,EAAQ8N,OAA4C,eAAnC9N,EAAQ8N,MAAMC,iBAC7BxyC,KAAKkyC,UAAYzN,EAAQ8N,MAAME,aACjCzyC,KAAK0yC,YAAcjO,EAAQ8N,MAAME,aAIrCX,EAAA5xC,UAAAyyC,YAAA,SAAYtwC,GACVrC,KAAK6wC,SAAWxuC,GAGlByvC,EAAA5xC,UAAA0yC,UAAA,WAAA,IAAA/sC,EAAA7F,KACQ6wC,EAAW7wC,KAAKmyC,cAAczpC,IAAI,YAAYrG,OAC/CrC,KAAKuwC,aAAeM,GAAY,GAKrC7wC,KAAKu7B,kBACF8W,SAASryC,KAAKuwC,aACdniC,WAAU,SAACrC,GACNA,IACFlG,EAAKgQ,WAAY,GAEnBhQ,EAAKgtC,YACLhtC,EAAK01B,kBAAkBuX,SAASjtC,EAAK0qC,YAAaM,GAClDhrC,EAAKgQ,WAAY,KAElBjI,eAGGkkC,EAAA5xC,UAAA2yC,UAAR,WACE,IAAIE,EACJ/yC,KAAKgzC,SAAWhzC,KAAK0wC,aAAahc,KAAK+b,GAA4B,CACjEwC,UAAU,EACV3oC,KAAM,QAGRyoC,EAAgB/yC,KAAKgzC,SAASE,mBAChB/B,OAASnxC,KAAKoyC,WAC5BW,EAAcI,MAAQnzC,KAAKu7B,kBAAkBpD,YAC7C4a,EAAcK,QAAUpzC,KAAKu7B,kBAAkB8X,WAC/CN,EAAclC,SAAW7wC,KAAK6wC,SAC9BkC,EAAcl9B,UAAY7V,KAAK6V,WAGjCi8B,EAAA5xC,UAAAmP,YAAA,WACMrP,KAAK0N,cACP1N,KAAK0N,aAAaE,wDAjFI2mB,UACSyb,UACrBjD,EAAAA,yBACiBnP,EAAAA,qBA3BtB38B,EAAA,CAAR0I,EAAAA,2CACQ1I,EAAA,CAAR0I,EAAAA,4CAMQ1I,EAAA,CAAR0I,EAAAA,uCARUmoC,EAAkB7wC,EAAA,CAL9BkZ,EAAAA,UAAU,CACTtQ,SAAU,iBACV5D,SAAA,iuBACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BupB,oBCVX,SAAAwB,KACF,OAHEryC,EAAA,CADC0I,EAAAA,0CADU2pC,EAAmBryC,EAAA,CAL/BkZ,EAAAA,UAAU,CACTtQ,SAAU,gBACV5D,SAAA,gZACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B+qB,oBCEb,SAAAC,KAA+B,OAAlBA,EAAgBtyC,EAAA,CAL5B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcmX,EAAAA,sBACxBlX,aAAc,CAACopC,IACfnpC,QAAS,CAACmpC,OAECC,oBCSX,SAAAC,EAAoBC,GAAAzzC,KAAAyzC,mBAAAA,EANpBzzC,KAAA0zC,eAAgB,EAEhB1zC,KAAA2zC,YAAa,EAEb3zC,KAAAkf,UAAYtX,EAAAA,UAcd,OAVEpI,OAAAmC,eAAW6xC,EAAAtzC,UAAA,iBAAc,KAAzB,WAEE,OADAF,KAAK4zC,SAAW5zC,KAAK4zC,UAAY,GAC1B5zC,KAAK4zC,SAASpqB,QAAQsB,MAAK,SAACC,EAAGxrB,GACpC,OAAOwrB,EAAEpG,KAAKkvB,cAAct0C,EAAEolB,0CAIlC6uB,EAAAtzC,UAAA4zC,cAAA,SAAcC,GACZ/zC,KAAKyzC,mBAAmBK,cAAcC,6CAVAC,EAAAA,sBARxC/yC,EAAA,CADC0I,EAAAA,wCAGD1I,EAAA,CADC0I,EAAAA,6CAGD1I,EAAA,CADC0I,EAAAA,0CALU6pC,EAAuBvyC,EAAA,CALnCkZ,EAAAA,UAAU,CACTtQ,SAAU,qBACV5D,SAAA,isCACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BirB,oBCsBX,SAAAS,EACYR,EACAS,EACAC,EACA5Y,GAHAv7B,KAAAyzC,mBAAAA,EACAzzC,KAAAk0C,YAAAA,EACAl0C,KAAAm0C,sBAAAA,EACAn0C,KAAAu7B,kBAAAA,EAjBZv7B,KAAAo0C,yBAA2B,IAOnBp0C,KAAAq0C,kBAAmB,EAEnBr0C,KAAA0N,aAAe,IAAIC,EAAAA,aAE3B3N,KAAAs0C,mBAAoB,EAiItB,OAxHEL,EAAA/zC,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACMA,KAAKm0C,uBACPn0C,KAAKm0C,sBAAsBI,oBACzBv0C,KAAKo0C,0BAITp0C,KAAKmzC,MAAQliC,EAAAA,cAAc,CACzBjR,KAAKu7B,kBAAkBpD,YACvBn4B,KAAKu7B,kBAAkBiZ,kBACvBx0C,KAAKm0C,sBAAsBM,mBACzBz0C,KAAKo0C,4BAENzpC,KACDqF,EAAAA,KACE,SAAC1K,OAAAsT,EAAArW,EAAA+C,EAAA,GAAC22B,EAAArjB,EAAA,GAAM87B,EAAA97B,EAAA,GAAc+7B,EAAA/7B,EAAA,GAKpB/S,EAAK+uC,OAASF,EACd7uC,EAAKgvC,6BAA6B5Y,EAAM0Y,EAAgBG,YAG5DlqC,EAAAA,KAAI,SAACtF,GAAuD,OAAvD/C,EAAA+C,EAAA,GAAC,OAGRtF,KAAK+0C,eAAiB/0C,KAAKu7B,kBACxB8X,WACA1oC,KAAKC,EAAAA,KAAI,SAAC4C,GAAW,OAACA,MAEzBxN,KAAKyzC,mBAAmBuB,iCAExBh1C,KAAKi1C,WAAaj1C,KAAKk0C,YAAYjhC,MAAM,CACvCiiC,WAAY,CAAC,GAAI,CAACtH,EAAAA,WAAWC,aAI/B7tC,KAAK0N,aAAaxF,IAChBlI,KAAKyzC,mBACF0B,6BACA/mC,WAAU,SAAC+V,GACVte,EAAKuvC,UAAUjxB,OAKrBnkB,KAAK0N,aAAaxF,IAChBlI,KAAKyzC,mBAAmB4B,2BAA2BjnC,WAAU,SAACzL,GAC5DkD,EAAKyvC,QAAQ3yC,QAKTsxC,EAAA/zC,UAAAo1C,QAAV,SAAkB3yC,GACZA,IACF3C,KAAKm0C,sBAAsBI,oBACzBv0C,KAAKo0C,0BAEPp0C,KAAKyzC,mBAAmBuB,mCAI5Bf,EAAA/zC,UAAAk1C,UAAA,SAAUjxB,GACJA,IACFnkB,KAAKi1C,WAAWM,QAChBv1C,KAAKyzC,mBAAmBuB,mCAIlBf,EAAA/zC,UAAA20C,6BAAV,SACE5Y,EACA6Y,GAFF,IAAAjvC,EAAA7F,KAIEA,KAAKw1C,kBAAoBV,GAAW,GAChC7Y,EAAKwZ,iBACPxZ,EAAKwZ,gBAAgB/mC,SAAQ,SAACgnC,GAC5B7vC,EAAK2vC,kBAAoB3vC,EAAK2vC,kBAAkBnwC,QAC9C,SAACswC,GAAW,OAAAA,EAAOC,WAAaF,EAAe/wB,YAMvDsvB,EAAA/zC,UAAA21C,aAAA,WACM71C,KAAKi1C,WAAWlH,MAClB/tC,KAAKyzC,mBAAmBqC,WACtB91C,KAAKi1C,WAAW5yC,MAAM6yC,WACtBl1C,KAAK40C,QAGP50C,KAAKi1C,WAAWjH,oBAIpBiG,EAAA/zC,UAAA61C,oBAAA,SAAoBH,GAClB51C,KAAKyzC,mBAAmBqC,WAAWF,EAAU51C,KAAK40C,QAClD50C,KAAKs0C,mBAAoB,GAG3BL,EAAA/zC,UAAAiR,MAAA,SAAMmC,GACCtT,KAAKq0C,mBACRr0C,KAAKs0C,mBAAoB,EACrBhhC,GAASA,EAAMnS,QACHmS,EAAMnS,OAAQ60C,QAGhCh2C,KAAKq0C,kBAAmB,GAG1BJ,EAAA/zC,UAAA+1C,aAAA,WACEj2C,KAAKq0C,kBAAmB,GAG1BJ,EAAA/zC,UAAAmP,YAAA,WACMrP,KAAK0N,cACP1N,KAAK0N,aAAaE,cAEpB5N,KAAKyzC,mBAAmBuB,2EA5HMhB,EAAAA,0BACP/F,EAAAA,mBACUiI,EAAAA,6BACJtY,EAAAA,qBAlBpBqW,EAAmBhzC,EAAA,CAJ/BkZ,EAAAA,UAAU,CACTtQ,SAAU,iBACV5D,SAAA,82DAEWguC,oBCiBb,SAAAkC,KAA+B,OAAlBA,EAAgBl1C,EAAA,CAxB5B8I,EAAAA,SAAS,CACRG,aAAc,CAAC+pC,GAAqBT,IACpCrpC,QAAS,CAAC8pC,GAAqBT,IAC/BxpC,QAAS,CACPC,EAAAA,aACAkqB,EAAAA,eACAvO,EAAAA,YACAC,EAAAA,oBACA1E,EAAAA,WACAvC,GACAyO,IAEF5d,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb80B,yBAA0B,CACxBlyC,UAAW+vC,QAMnB1yB,gBAAiB,CAAC0yB,OAEPkC,oBCuBX,SAAAE,EACY9a,EACAkK,GADAzlC,KAAAu7B,kBAAAA,EACAv7B,KAAAylC,qBAAAA,EAtCHzlC,KAAAguB,UAAW,EAEXhuB,KAAAs2C,WAAY,EAEZt2C,KAAA+K,QAAoC,CAC3CwrC,gBAAgB,EAChBC,YAAa,MAGPx2C,KAAAy2C,OAAiB,GAehBz2C,KAAAy7B,kBAAuCC,EAAAA,kBAAkBC,WA6EpE,OArFEn8B,OAAAmC,eAAI00C,EAAAn2C,UAAA,QAAK,KAIT,WACE,OAAOF,KAAKy2C,YALd,SAAUvuB,GACRloB,KAAK02C,aAAaxuB,GAClBloB,KAAK22C,8CAQiBn3C,OAAAmC,eAAI00C,EAAAn2C,UAAA,aAAU,KAAd,SAAemC,GAChCrC,KAAKguB,WAGR3rB,EACIrC,KAAK+wC,KAAK6F,QAAQ,CAAEnoB,WAAW,IAC/BzuB,KAAK+wC,KAAK8F,OAAO,CAAEpoB,WAAW,sCAa9B4nB,EAAAn2C,UAAAw2C,aAAR,SAAqBxuB,GACfA,EAAM4uB,OAAM,SAAC3jB,GAAS,OAAAA,EAAKtzB,eAAe,iBAC5CG,KAAKy2C,OAASvuB,EAAMtd,KAAI,SAACmsC,GACvB,IAAMhrC,EAAQvM,OAAOgB,OACnB,GACCu2C,EAAsCC,YAGzC,OADAjrC,EAAM8kC,SAAWkG,EAAiBlG,SAC3B9kC,KAGT/L,KAAKy2C,OAASvuB,GAIVmuB,EAAAn2C,UAAAy2C,WAAR,WAAA,IAAA9wC,EAAA7F,KACEA,KAAK+wC,KAAO,IAAIC,EAAAA,UAAU,IAC1BhxC,KAAKy2C,OAAO/nC,SAAQ,SAACykB,GACX,IAAAxO,EAAAwO,EAAAsR,QAAA9f,KACF1R,EAAQ,IAAI+9B,EAAAA,UAAU,CAC1BtT,YAAa,IAAIgU,EAAAA,YAAkBve,EAAMuK,aACzCmT,SAAU,IAAIa,EAAAA,YAAYve,EAAK0d,SAAU,CAAEc,SAAU,WAElDxe,EAAK8jB,aAAcpxC,EAAKmoB,UAC3B/a,EAAM2jC,UAER/wC,EAAKkrC,KAAKa,WAAWjtB,EAAM1R,OAI/BojC,EAAAn2C,UAAAg3C,YAAA,SAAY/jB,GACNnzB,KAAKylC,sBAAwBzlC,KAAK+K,QAAQwrC,eAC5Cv2C,KAAKylC,qBAAqByR,YAAY/jB,GAEtCnzB,KAAKu7B,kBAAkB2b,YAAY/jB,UAE9BnzB,KAAK+wC,KAAK5R,SAAShM,EAAKsR,QAAQ9f,OAGzC0xB,EAAAn2C,UAAAmuB,WAAA,SAAW8E,GAAX,IAAAttB,EAAA7F,KACE,OAAOA,KAAK+wC,KAAKroC,IAAIyqB,EAAKsR,QAAQ9f,MAAM4J,aAAa5jB,KAEnDqiB,EAAAA,UAAU,MACVpiB,EAAAA,KAAI,SAACvI,GACCA,GAASwD,EAAK4/B,sBAAwB5/B,EAAKkF,QAAQwrC,eACrD1wC,EAAK4/B,qBAAqB6L,YACxBjvC,EAAMq7B,YACNr7B,EAAMwuC,UAECxuC,GACTwD,EAAK01B,kBAAkB+V,YAAYjvC,EAAMq7B,YAAar7B,EAAMwuC,aAGhEjmC,EAAAA,KAAI,WAAM,OAAW/E,EAAKkrC,KAAKroC,IAAIyqB,EAAKsR,QAAQ9f,oDA7DrBiZ,EAAAA,yBACGmJ,EAAAA,wBAtCzB9lC,EAAA,CAAR0I,EAAAA,wCAEQ1I,EAAA,CAAR0I,EAAAA,yCAEQ1I,EAAA,CAAR0I,EAAAA,uCAYD1I,EAAA,CAJC0I,EAAAA,MAAM,oCAYE1I,EAAA,CAAR0I,EAAAA,iDAEuB1I,EAAA,CAAvB0I,EAAAA,MAAM,iDA3BI0sC,EAAqBp1C,EAAA,CALjCkZ,EAAAA,UAAU,CACTtQ,SAAU,oBACV5D,SAAA,q2CACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B8tB,oBCqBX,SAAAc,EAAsBvG,GAAA5wC,KAAA4wC,iBAAAA,EAjBb5wC,KAAAo3C,SAAU,EAEVp3C,KAAAguB,UAAW,EAGVhuB,KAAA8O,KAAO,IAAIrB,EAAAA,aAEZzN,KAAAy7B,kBAAuCC,EAAAA,kBAAkBC,WAGzD37B,KAAA+K,QAAoC,CAC3CwrC,gBAAgB,EAChBC,YAAa,MA+BjB,OAxBEW,EAAAj3C,UAAAqJ,SAAA,WACEvJ,KAAKq3C,0BAA4Br3C,KAAK4wC,iBAAiBnU,4BACrDz8B,KAAKmzB,KACLnzB,KAAKy7B,oBAIT0b,EAAAj3C,UAAAo3C,oBAAA,SAAoB7S,GAElB,OACEA,GACAA,EAAQ8N,OAC2B,eAAnC9N,EAAQ8N,MAAMC,kBAIlB2E,EAAAj3C,UAAAoqC,WAAA,WACEtqC,KAAKu3C,gBAAgBrpB,SAAS,GAC9BluB,KAAKu3C,gBAAgBppB,eAGvBgpB,EAAAj3C,UAAAs3C,SAAA,WACEx3C,KAAK8O,KAAKb,iDAxB4BmtB,MAjB/Bn6B,EAAA,CAAR0I,EAAAA,uCACQ1I,EAAA,CAAR0I,EAAAA,oCACQ1I,EAAA,CAAR0I,EAAAA,wCACQ1I,EAAA,CAAR0I,EAAAA,+CAES1I,EAAA,CAATsO,EAAAA,qCAEQtO,EAAA,CAAR0I,EAAAA,iDAGQ1I,EAAA,CAAR0I,EAAAA,uCAXUwtC,EAAiBl2C,EAAA,CAJ7BkZ,EAAAA,UAAU,CACTtQ,SAAU,eACV5D,SAAA,uuKAEWkxC,oBChBb,SAAAM,KAGA,OADEx2C,EAAA,CADC0I,EAAAA,oCADU8tC,EAAqBx2C,EAAA,CAJjCkZ,EAAAA,UAAU,CACTtQ,SAAU,mBACV5D,SAAA,yzDAEWwxC,oBC4Bb,SAAAC,KAA+B,OAAlBA,EAAgBz2C,EAAA,CArB5B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aACA0pB,GACAtwB,EAAAA,oBACA6G,EAAAA,UACAirB,EAAAA,UACApE,GACApyB,EAAAA,WACAmL,GACAqC,GACAvN,EAAAA,sBAEFlX,aAAc,CACZitC,GACAM,GACApB,IAEFlsC,QAAS,CAACgtC,GAAmBd,GAAuBoB,OAEzCC,oBCYb,SAAAE,KAA8B,OAAjBA,EAAe32C,EAAA,CA5B3B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACA4b,EAAAA,oBACA6xB,GACAjrB,EAAAA,aACAhL,GACA8xB,GACAnyB,EAAAA,qBACAsL,EAAAA,UACA9N,GACAuC,EAAAA,WACAwN,GACAtV,IAEF5J,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbu2B,0BAA2B,CACzB3zC,UAAW4tC,QAKnB5nC,aAAc,CAAC4nC,GAAoBrB,IACnClvB,gBAAiB,CAACuwB,GAAoBrB,IACtCtmC,QAAS,CAAC2nC,GAAoBrB,OAEnBmH,oBChBX,SAAAE,EACYvc,EACAqV,EACAnL,EACAhjB,EACAvS,GAJAlQ,KAAAu7B,kBAAAA,EACAv7B,KAAA4wC,iBAAAA,EACA5wC,KAAAylC,qBAAAA,EACAzlC,KAAAyiB,YAAAA,EACAziB,KAAAkQ,eAAAA,EAXZlQ,KAAA+3C,UAAW,EAEX/3C,KAAAy7B,kBAAuCC,EAAAA,kBAAkBC,WAkD3D,OAtCEmc,EAAA53C,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAKmzC,MAAQnzC,KAAKu7B,kBAAkBpD,YACpCn4B,KAAKg4C,YAAch4C,KAAK4wC,iBAAiBhV,6BAEzC57B,KAAKi4C,SAAWj4C,KAAKu7B,kBAClB2c,aACAvtC,KAAKtF,EAAAA,QAAO,SAACsG,GAAY,OAAAA,EAAQ7K,OAAS,MAE7Cd,KAAKm4C,qBAAuBn4C,KAAKylC,qBAAqBiD,YAEtD1oC,KAAKo4C,YAAcnnC,EAAAA,cAAc,CAC/BjR,KAAKu7B,kBAAkB8X,WACvBrzC,KAAKm4C,qBACDn4C,KAAKylC,qBAAqB4S,YAC1BhyC,EAAAA,IAAG,GACPrG,KAAKyiB,YAAYK,mBAChBnY,KACDqF,EAAAA,KAAI,SAAC1K,OAAKyyC,EAALx1C,EAAA+C,EAAA,GAAK,GAAc,OAACO,EAAKkyC,SAAWA,KACzCntC,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAACgzC,EAAA1/B,EAAA,GAAY2/B,EAAA3/B,EAAA,GAChB,OAD2BA,EAAA,IACf/S,EAAKsyC,qBACbG,GAAcC,EACdD,MAIRt4C,KAAKyxC,iBAAmBzxC,KAAK4wC,iBAAiBpV,mBAC5Cx7B,KAAKy7B,oBAITqc,EAAA53C,UAAAs4C,aAAA,SAAarlB,GACPnzB,KAAK+3C,UACP/3C,KAAKu7B,kBAAkB2b,YAAY/jB,GACnCnzB,KAAKylC,qBAAqBqN,SAAS3f,EAAKsR,QAAQ9f,KAAMwO,EAAK0d,WAE3D7wC,KAAKkQ,eAAeE,GAAG,CAAEC,QAAS,oDA1CPutB,EAAAA,yBACDxC,UACI2L,EAAAA,4BACTrhB,EAAAA,mBACGpV,EAAAA,kBAfjBwnC,EAAoB72C,EAAA,CALhCkZ,EAAAA,UAAU,CACTtQ,SAAU,kBACV5D,SAAA,uqCACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BuvB,oBCkBb,SAAAW,KAAgC,OAAnBA,EAAiBx3C,EAAA,CAxB7B8I,EAAAA,SAAS,CACRC,QAAS,CACP0tC,GACAztC,EAAAA,aACAksC,GACA1pB,EAAAA,aACAC,EAAAA,UACA6mB,GACAnyB,EAAAA,qBACAD,EAAAA,YAEF1R,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbo3B,cAAe,CACbx0C,UAAW4zC,QAKnB5tC,aAAc,CAAC4tC,IACf3tC,QAAS,CAAC2tC,IACVv2B,gBAAiB,CAACu2B,OAEPW,oBC7BX,SAAAE,EACYzoC,EACAqrB,GADAv7B,KAAAkQ,eAAAA,EACAlQ,KAAAu7B,kBAAAA,SAGZod,EAAAz4C,UAAA04C,YAAA,WAAA,IAAA/yC,EAAA7F,KACE,OAAOiR,EAAAA,cAAc,CACnBjR,KAAKu7B,kBAAkBpD,YACvBn4B,KAAKu7B,kBAAkB8X,aACtB1oC,KACDtF,EAAAA,QAAO,SAACC,OAAAsT,EAAArW,EAAA+C,EAAA,GAACsT,EAAA,GAAe,OAAZA,EAAA,MACZhO,EAAAA,KAAI,SAACtF,OAAC22B,EAAD15B,EAAA+C,EAAA,GAAC,GACJ,OAAIO,EAAKgzC,QAAQ5c,KACfp2B,EAAKqK,eAAeE,GAAG,CAAEC,QAAS,UAC3B,QAOPsoC,EAAAz4C,UAAA24C,QAAR,SAAgB5c,GACd,OAAOA,IAASA,EAAK6c,qDArBKxoC,EAAAA,sBACGstB,EAAAA,uLAHpB+a,EAAiB13C,EAAA,CAH7B+B,EAAAA,WAAW,CACVC,WAAY,UAED01C,oBCCX,SAAAI,EACYxd,EACAkK,GADAzlC,KAAAu7B,kBAAAA,EACAv7B,KAAAylC,qBAAAA,SAGZsT,EAAA74C,UAAA84C,OAAA,SACEC,EACAC,EACAC,GAEA,MAAqB,qBAAjBD,GAAwCC,EA6BrCF,EA5BEhoC,EAAAA,cAAc,CACnBgoC,EACAj5C,KAAKu7B,kBAAkBpD,YACvBn4B,KAAKylC,qBAAqBiD,YACtB1oC,KAAKylC,qBAAqB2T,UAC1B/yC,EAAAA,GAAG,IACPrG,KAAKu7B,kBAAkB8d,eACtB1uC,KACDC,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAACg0C,EAAA1gC,EAAA,GAAOqjB,EAAArjB,EAAA,GAAM2gC,EAAA3gC,EAAA,GAAe4gC,EAAA5gC,EAAA,GAC1B6gC,EAAU,SAACC,EAAK/yC,GACpB,OAAA+yC,EAAIr0C,QAAO,SAAC8tB,GAAS,OAAAxsB,EAAKmwC,OAAM,SAAC6C,GAAQ,OAAAA,IAAQxmB,SACnD,OAAoC,IAA7B3zB,OAAOorB,KAAKqR,GAAMn7B,QAAgB04C,EACrCC,EAAQH,EAAO,CACb,aACA,yBACA,2BAEFrd,EAAK6c,WACLW,EAAQH,EAAO,CAAC,2BAChBC,EAAcT,WACdW,EAAQH,EAAO,CACb,yBACA,2BAEFG,EAAQH,EAAO,CAAC,aAAc,yEAlCX1b,EAAAA,yBACGmJ,EAAAA,gMAHvBgS,EAAqB93C,EAAA,CAHjC+B,EAAAA,WAAW,CACVC,WAAY,UAED81C,oBCKX,SAAAa,EAAsBre,GAAAv7B,KAAAu7B,kBAAAA,EAQxB,OANEqe,EAAA15C,UAAAqJ,SAAA,WACEvJ,KAAKmzC,MAAQnzC,KAAKu7B,kBAAkBpD,YACpCn4B,KAAKi4C,SAAWj4C,KAAKu7B,kBAClB2c,aACAvtC,KAAKtF,EAAAA,QAAO,SAACsG,GAAY,OAAAA,EAAQ7K,OAAS,gDANN88B,EAAAA,qBAJ9Bgc,EAAmB34C,EAAA,CAL/BkZ,EAAAA,UAAU,CACTtQ,SAAU,iBACV5D,SAAA,wbACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BqxB,oBCyBb,SAAAC,KAA+B,OAAlBA,EAAgB54C,EAAA,CAtB5B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aACAC,EAAAA,UACAgrB,GACAv2B,EAAAA,WACAg1B,IAEF1mC,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbs4B,oBAAqB,CACnB11C,UAAW01C,QAKnB1vC,aAAc,CAAC0vC,IACfzvC,QAAS,CAACyvC,IACVr4B,gBAAiB,CAACq4B,OAEPC,MC/BAC,GAAsB,IAAIC,EAAAA,eACrC,mCCmBA,SAAAC,EAAsBze,GAAAv7B,KAAAu7B,kBAAAA,EAZtBv7B,KAAAkf,UAAYtX,EAAAA,UAEZ5H,KAAAi6C,UAAgCj6C,KAAKu7B,kBAAkBpD,YAAYxtB,KACjEqiB,EAAAA,UAAU,CAAEktB,sBAAuB,IACnCtvC,EAAAA,KAAI,SAACqxB,GAAS,OAAAA,EAAKie,uBAAyB,MAG9Cl6C,KAAAm6C,OAA6Bn6C,KAAKu7B,kBAAkBpD,YAAYxtB,KAC9DtF,EAAAA,QAAO,SAAC42B,GAAS,QAAEA,EAAKme,cACxBxvC,EAAAA,KAAI,SAACqxB,GAAS,OAAAA,EAAKme,WAAWC,mBAIlC,gDAD2Czc,EAAAA,qBAb9Boc,EAAiB/4C,EAAA,CAL7BkZ,EAAAA,UAAU,CACTtQ,SAAU,eACV5D,SAAA,yaACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9ByxB,oBCgBb,SAAAM,KAA6B,OAAhBA,EAAcr5C,EAAA,CAf1B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcwiB,EAAAA,aAAcC,EAAAA,UAAW9N,GAAYuC,EAAAA,YAC7D1R,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb04B,kBAAmB,CACjB91C,UAAW81C,QAKnB9vC,aAAc,CAAC8vC,IACf7vC,QAAS,CAAC6vC,IACVz4B,gBAAiB,CAACy4B,OAEPM,oBCSX,SAAAC,EACYC,EACAzI,EACAtvB,GAHZ,IAAA5c,EAAA7F,KACYA,KAAAw6C,gBAAAA,EACAx6C,KAAA+xC,sBAAAA,EACA/xC,KAAAyiB,YAAAA,EArBZziB,KAAAy6C,SAAgCz6C,KAAK+xC,sBAAsB1B,aAAa1lC,KACtEtF,EAAAA,QAAO,SAACo/B,GAAY,OAAAxgC,QAAQwgC,MAC5Bz0B,EAAAA,KAAI,SAACy0B,GAAY,OAAA5+B,EAAKysC,aAAa7N,OAGrCzkC,KAAA06C,iBAEI16C,KAAKw6C,gBAAgBG,cAAchwC,KACrCtF,EAAAA,QAAO,SAACu1C,GAAa,OAAA32C,QAAQ22C,MAC7BhwC,EAAAA,KAAI,SAACiwC,GAAa,OAAAA,EAASlvC,YAG7B3L,KAAA86C,cAAqC96C,KAAKyiB,YAAYK,iBACtD9iB,KAAA2f,SAAgC3f,KAAKw6C,gBAAgBO,qBAErD/6C,KAAAkyC,UAAW,EACXlyC,KAAAkf,UAAYtX,EAAAA,UAyBd,OAjBE2yC,EAAAr6C,UAAAgI,IAAA,SAAIu8B,GACFzkC,KAAKw6C,gBAAgB1H,SAASrO,EAAQ9f,OAGxC41B,EAAAr6C,UAAAkF,OAAA,SAAO2G,GACL/L,KAAKw6C,gBAAgBtD,YAAYnrC,IAGnCwuC,EAAAr6C,UAAA86C,qBAAA,SAAqBvW,EAAkB94B,GAErC,OADaA,EAAQmE,MAAK,SAAC/D,GAAU,OAAAA,EAAM04B,QAAQ9f,OAAS8f,EAAQ9f,SAI9D41B,EAAAr6C,UAAAoyC,aAAR,SAAqB7N,GACnBzkC,KAAKkyC,SACHzN,EAAQ8N,OAA4C,eAAnC9N,EAAQ8N,MAAMC,2DApBNyI,EAAAA,uBACMjL,UACVtqB,EAAAA,eAtBd60B,EAAsBt5C,EAAA,CALlCkZ,EAAAA,UAAU,CACTtQ,SAAU,qBACV5D,SAAA,0lDACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BgyB,oBCUb,SAAAW,KAAkC,OAArBA,EAAmBj6C,EAAA,CAf/B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAckX,EAAAA,WAAYvC,GAAY6N,EAAAA,aAAcC,EAAAA,WAC9Djd,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbi5B,uBAAwB,CACtBr2C,UAAWq2C,QAKnBrwC,aAAc,CAACqwC,IACfh5B,gBAAiB,CAACg5B,IAClBpwC,QAAS,CAACowC,OAECW,oBCFX,SAAAC,EACYC,EACAzK,EACAlL,GAFAzlC,KAAAo7C,WAAAA,EACAp7C,KAAA2wC,YAAAA,EACA3wC,KAAAylC,qBAAAA,EAwBd,OArBE0V,EAAAj7C,UAAAqJ,SAAA,WACEvJ,KAAKq7C,aAAer7C,KAAK2wC,YACtBxY,YACAxtB,KAAKC,EAAAA,KAAI,SAACqxB,GAAS,QAAEA,GAAQA,EAAK6c,YAAc7c,EAAK6c,WAAa,OACrE94C,KAAKs7C,cAAgBt7C,KAAKylC,qBAAqB2T,UAC/Cp5C,KAAKi4C,SAAWj4C,KAAKylC,qBAClByS,aACAvtC,KAAKtF,EAAAA,QAAO,SAACsG,GAAY,OAAAA,EAAQ7K,OAAS,MAC7Cd,KAAKo4C,YAAcnnC,EAAAA,cAAc,CAC/BjR,KAAK2wC,YAAY0C,WACjBrzC,KAAKylC,qBAAqB4S,cACzB1tC,KAAKC,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAACgzC,EAAA1/B,EAAA,GAAY2/B,EAAA3/B,EAAA,GAAe,OAAA0/B,GAAcC,MACvDv4C,KAAKu4B,MAAQv4B,KAAKo7C,WAAWvZ,iBAC3B,gCAIJsZ,EAAAj7C,UAAAq7C,WAAA,SAAWpoB,GACTnzB,KAAKylC,qBAAqByR,YAAY/jB,GACtCnzB,KAAK2wC,YAAYmC,SAAS3f,EAAKsR,QAAQ9f,KAAMwO,EAAK0d,oDAxB5BjP,EAAAA,kBACChE,EAAAA,yBACSmJ,EAAAA,wBAXvBoU,EAAqBl6C,EAAA,CAJjCkZ,EAAAA,UAAU,CACTtQ,SAAU,oBACV5D,SAAA,qrCAEWk1C,oBCSb,SAAAK,KAAiC,OAApBA,EAAkBv6C,EAAA,CAf9B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAckX,EAAAA,WAAYu2B,IACpCjoC,UAAW,CACToP,EAAAA,qBAAiD,CAC/CyC,cAAe,CACb65B,sBAAuB,CACrBj3C,UAAWi3C,QAKnBjxC,aAAc,CAACixC,IACfhxC,QAAS,CAACgxC,IACV55B,gBAAiB,CAAC45B,OAEPK,oBCab,SAAAC,KAAkC,OAArBA,EAAmBx6C,EAAA,CA3B/B8I,EAAAA,SAAS,CACRC,QAAS,CACP2tC,EAAAA,UACAc,GACAoB,GACAnC,GACA8D,IAEFrxC,QAAS,CACP+wC,GACAzC,GACAoB,GACAnC,GACAE,GACA0C,GACAoB,EAAAA,WACAF,IAEFtxC,aAAc,GACduF,UAAW,CACT,CACEkB,QAASmpC,GACT52C,YAAa61C,GACb10C,OAAO,OAIAo3C,OrCvCDjS,GAAAA,EAAAA,mBAAAA,EAAAA,iBAAgB,KAC1B,iBAAA,kBACAA,GAAA,cAAA,eACAA,GAAA,gBAAA,iBACAA,GAAA,aAAA,eCAUC,GAAAA,EAAAA,0BAAAA,EAAAA,wBAAuB,KACjC,KAAA,OACAA,GAAA,gBAAA,kBACAA,GAAA,eAAA,iBAOF,IqCIYkS,GrCJZC,GAAA,WAAA,SAAAA,4HAAsBA,EAAc36C,EAAA,CAJnC+B,EAAAA,WAAW,CACVC,WAAY,OACZC,YAAaC,EAAAA,UAEOy4C,GAAtB,GsCXaC,GAAwC,CACnD9X,SAAU,CACR+X,MAAO,CACL,CACEz7B,GAAI,kBACJitB,KAAM,mCACNyO,UAAW,0BACX9uC,KAAM,CAACu8B,EAAAA,iBAAiBwS,mBAE1B,CACE37B,GAAI,eACJitB,KAAM,gCACNyO,UAAW,uBACX9uC,KAAM,CAACu8B,EAAAA,iBAAiByS,gBAE1B,CACE57B,GAAI,iBACJitB,KAAM,kCACNyO,UAAW,yBACX9uC,KAAM,CAACu8B,EAAAA,iBAAiB0S,kBAE1B,CACE77B,GAAI,cACJitB,KAAM,+BACNyO,UAAW,sBACX9uC,KAAM,CAACu8B,EAAAA,iBAAiB2S,gBAG5BC,SAAS,EACTC,oBAAqB,CAAC5S,EAAAA,wBAAwB6S,MAC9CC,OAAO,kBCdT,SAAAC,EACUC,EACAC,GADA18C,KAAAy8C,eAAAA,EACAz8C,KAAA08C,qBAAAA,EARV18C,KAAA87C,MAAwB97C,KAAKy8C,eAAe1Y,SAAS+X,MAC7C97C,KAAAo8C,QAAmBp8C,KAAKy8C,eAAe1Y,SAASqY,QAChDp8C,KAAAu8C,MAAiBv8C,KAAKy8C,eAAe1Y,SAASwY,MAC9Cv8C,KAAAq8C,oBACNr8C,KAAKy8C,eAAe1Y,SAASsY,qBAAuB,UAOtDG,EAAAt8C,UAAAy8C,gBAAA,SAAgBC,GACd,OAAO58C,KAAK87C,MAAM97C,KAAK68C,qBAAqB,OAAQD,KAGtDJ,EAAAt8C,UAAA48C,qBAAA,SAAqBF,GACnB,OAAO58C,KAAK28C,gBAAgBC,GAAiBb,WAG/CS,EAAAt8C,UAAA68C,0BAAA,WACE,OAAO/8C,KAAK87C,MAAM,GAAGC,WAGvBS,EAAAt8C,UAAA88C,uBAAA,SAAuBnqB,GACrB,IAAMoqB,EAAYj9C,KAAKk9C,oBAAoBrqB,GAE3C,OAAOoqB,GAAa,GAAKj9C,KAAK87C,MAAMmB,EAAY,GAC5Cj9C,KAAKm9C,wBAAwBn9C,KAAK87C,MAAMmB,EAAY,GAAGlB,WACvD,MAGNS,EAAAt8C,UAAAk9C,2BAAA,SAA2BvqB,GACzB,IAAMoqB,EAAYj9C,KAAKk9C,oBAAoBrqB,GAE3C,OAAOoqB,GAAa,GAAKj9C,KAAK87C,MAAMmB,EAAY,GAC5Cj9C,KAAKm9C,wBAAwBn9C,KAAK87C,MAAMmB,EAAY,GAAGlB,WACvD,MAGNS,EAAAt8C,UAAAg9C,oBAAA,SAAoBrqB,WAKdoqB,EAJEI,EAAyBr9C,KAAKs9C,6BAClCzqB,GAIE7b,EAAQ,MACZ,IAAmB,IAAA4B,EAAA7W,EAAA/B,KAAK87C,OAAK3e,EAAAvkB,EAAAxW,QAAA+6B,EAAA76B,KAAA66B,EAAAvkB,EAAAxW,OAAE,CAA1B,IAAM0rB,EAAIqP,EAAA96B,MAEXg7C,IAAmB,IAAIr9C,KAAKm9C,wBAAwBrvB,EAAKiuB,WAEzDkB,EAAYjmC,EAEZA,sGAIJ,OAAOimC,GAAa,EAAIA,EAAY,MAG5BT,EAAAt8C,UAAAq9C,oBAAV,SACEC,EACAC,GAEA,OAAID,EAAcE,aAAar7C,MAAQo7C,EAAcC,aAAar7C,MACzD,EAEPm7C,EAAcE,aAAar7C,MAAQo7C,EAAcC,aAAar7C,OAEtD,EAEH,GAGCm6C,EAAAt8C,UAAAy9C,yBAAV,SACEC,EACA5mC,GAFF,IAAAnR,EAAA7F,KAIE,YAFA,IAAAgX,IAAAA,EAAA,GAEQhX,KAAKq8C,oBAAoBrlC,IAC/B,KAAKyyB,EAAAA,wBAAwB6S,KAC3B,GAA4C,IAAxCsB,EAAc,GAAGF,aAAar7C,MAChC,OAAOu7C,EAAc,GAAGj5B,KAE1B,MACF,KAAK8kB,EAAAA,wBAAwBoU,gBAC3B,IAAMC,EAAsBF,EAAc9tC,MACxC,SAACiuC,GAAiB,OAAoC,IAApCA,EAAaL,aAAar7C,SAE9C,GAAIy7C,EACF,OAAOA,EAAoBn5B,KAE7B,MACF,KAAK8kB,EAAAA,wBAAwBuU,eAC3B,OAAOJ,EAAcA,EAAc98C,OAAS,GAAG6jB,KACjD,QACE,IAAMs5B,EAAYL,EAAc9tC,MAC9B,SAACiuC,GACC,OAAAA,EAAap5B,OAAS9e,EAAKw2C,oBAAoBrlC,MAEnD,GAAIinC,EACF,OAAOA,EAAUt5B,KAIvB,OADiB3kB,KAAKq8C,oBAAoBv7C,OAAS,GAAKkW,EAEpD4mC,EAAc,GAAGj5B,KACjB3kB,KAAK29C,yBAAyBC,EAAe5mC,EAAQ,IAG3DwlC,EAAAt8C,UAAAg+C,yBAAA,SAAyBN,GAEvB,OADAA,EAAc9yB,KAAK9qB,KAAKu9C,qBACjBv9C,KAAK29C,yBAAyBC,IAGvCpB,EAAAt8C,UAAAi+C,kBAAA,WACE,OAAOn+C,KAAKo8C,SAGdI,EAAAt8C,UAAAk+C,gBAAA,WACE,OAAOp+C,KAAKu8C,OAGNC,EAAAt8C,UAAAo9C,6BAAR,SACEzqB,GAEA,OAAOA,GACLA,EAAeU,UACfV,EAAeU,SAASjX,IACtB,IAAIuW,EAAeU,SAASjX,IAAI5H,KAAK,KACrC,MAGE8nC,EAAAt8C,UAAAi9C,wBAAR,SAAgCkB,GAC9B,OAAOr+C,KAAK08C,qBAAqB4B,eAAeD,GAAWE,MAAM,IAG3D/B,EAAAt8C,UAAA28C,qBAAR,SAA6Bz7C,EAAaiB,GACxC,OAAOjB,GAAOiB,EACVrC,KAAK87C,MAAMjlC,WAAU,SAACiX,GAAuB,OAAAA,EAAK1sB,GAAKmN,SAASlM,MAChE,+CAnIoBu5C,UACM4C,EAAAA,+KATrBhC,EAAqBv7C,EAAA,CAHjC+B,EAAAA,WAAW,CACVC,WAAY,UAEDu5C,oBCMX,SAAAiC,EACYvuC,EACAuS,EACAi8B,EACAC,EACApjB,GAJAv7B,KAAAkQ,eAAAA,EACAlQ,KAAAyiB,YAAAA,EACAziB,KAAA0+C,oBAAAA,EACA1+C,KAAA2+C,sBAAAA,EACA3+C,KAAAu7B,kBAAAA,SAGZkjB,EAAAv+C,UAAA04C,YAAA,WAAA,IAAA/yC,EAAA7F,KACE,OAAOiR,EAAAA,cAAc,CACnBjR,KAAKyiB,YAAYonB,eACjB7pC,KAAKu7B,kBAAkBqjB,oBACtBj0C,KACDC,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAACwkC,EAAAlxB,EAAA,GAAOssB,EAAAtsB,EAAA,GACX,IAAKkxB,EAAMmB,aAAc,CACvB,GAAIplC,EAAK01B,kBAAkBsjB,cACzB,OAAO56C,QAAQihC,GAEbr/B,EAAK84C,sBAAsBP,kBAC7Bv4C,EAAKqK,eAAeE,GAAG,CAAEC,QAAS,SAAW,CAAEyuC,QAAQ,IAEvDj5C,EAAKqK,eAAeE,GAAG,CAAEC,QAAS,UAEpCxK,EAAK64C,oBAAoBK,kBAE3B,QAASjV,EAAMmB,2DAxBO36B,EAAAA,sBACHoV,EAAAA,mBACQs5B,EAAAA,2BACExC,UACJ5e,EAAAA,2QANpB6gB,EAAiBx9C,EAAA,CAH7B+B,EAAAA,WAAW,CACVC,WAAY,UAEDw7C,oBCUX,SAAAQ,EACY3jB,EACA4jB,EACAC,EACA5jB,GAJZ,IAAA11B,EAAA7F,KACYA,KAAAs7B,gBAAAA,EACAt7B,KAAAk/C,wBAAAA,EACAl/C,KAAAm/C,uBAAAA,EACAn/C,KAAAu7B,kBAAAA,EAEVv7B,KAAKo/C,QAAUp/C,KAAKu7B,kBAAkBpD,YAAYxtB,KAChDC,EAAAA,KAAI,SAACy0C,GACH,OACGA,EAASna,MAAQma,EAASna,KAAKxD,MAAQ4d,EAAAA,uBACxCz5C,EAAK01B,kBAAkBsjB,cAEhBQ,EAASE,KAEXF,EAAS16B,QAElBtf,EAAAA,QAAO,SAACuvC,GAAW,QAAEA,MAGvB50C,KAAKw/C,0BAA4Bx/C,KAAKo/C,QAAQz0C,KAC5CqF,EAAAA,KAAI,SAAC4kC,GAAW,OAAA/uC,EAAKy1B,gBAAgBmkB,oBAAoB7K,MACzD7Z,EAAAA,YAAY,GACZ3E,EAAAA,WAAU,WAAM,OAAAvwB,EAAKy1B,gBAAgBokB,8BACrCp7B,EAAAA,WAAU,SAAC9W,GAAW,OAACA,aAI3ByxC,EAAA/+C,UAAAy/C,mBAAA,WAAA,IAAA95C,EAAA7F,KACE,OAAOA,KAAKw/C,0BAA0B70C,KACpCyrB,EAAAA,WAAU,WAAM,OAAAvwB,EAAKq5C,wBAAwBS,0BAIjDV,EAAA/+C,UAAA0/C,4BAAA,WAAA,IAAA/5C,EAAA7F,KACE,OAAOA,KAAKw/C,0BAA0B70C,KACpCyrB,EAAAA,WAAU,WACR,OAAAvwB,EAAKq5C,wBAAwBU,mCAKnCX,EAAA/+C,UAAA2/C,kBAAA,WAAA,IAAAh6C,EAAA7F,KACE,OAAOA,KAAKw/C,0BAA0B70C,KACpCyrB,EAAAA,WAAU,WAAM,OAAAvwB,EAAKs5C,uBAAuBU,kEA1CnBliB,EAAAA,uBACQgI,EAAAA,+BACDC,EAAAA,8BACLhI,EAAAA,yQARpBqhB,EAAsBh+C,EAAA,CAHlC+B,EAAAA,WAAW,CACVC,WAAY,UAEDg8C,oBCEX,SAAAa,EACYC,EACAC,EACAd,EACAC,EACAc,EACAtB,GALA3+C,KAAA+/C,mBAAAA,EACA//C,KAAAggD,mBAAAA,EACAhgD,KAAAk/C,wBAAAA,EACAl/C,KAAAm/C,uBAAAA,EACAn/C,KAAAigD,uBAAAA,EACAjgD,KAAA2+C,sBAAAA,EAEV3+C,KAAKkgD,qBACLlgD,KAAKmgD,kBACLngD,KAAKogD,0BAGGN,EAAA5/C,UAAAggD,mBAAV,WAAA,IAAAr6C,EAAA7F,KACEA,KAAKqgD,oBAAsBpvC,EAAAA,cAAc,CACvCjR,KAAK+/C,mBAAmBO,eACxBtgD,KAAK+/C,mBAAmBQ,4BACxBvgD,KAAKk/C,wBAAwBsB,iCAC5B71C,KACDmkC,EAAAA,aAAa,GACb9+B,EAAAA,KACE,SAAC1K,GAAA/C,EAAA+C,EAAA,GAAG,IAMAO,EAAKk6C,mBAAmBU,mBAI9Bp7C,EAAAA,QACE,SAACC,GAIK,OAJL/C,EAAA+C,EAAA,GAAG,MAMN8wB,EAAAA,WACE,SAAC9wB,OAAAsT,EAAArW,EAAA+C,EAAA,GAACo7C,EAAA9nC,EAAA,GAAa+nC,EAAA/nC,EAAA,GAKPgoC,EACJF,EAAU5wC,MAAK,SAAC+wC,GAAY,OAAAA,EAAQD,mBAAmBF,EAAU,GACnE,OAAIE,GAAkBphD,OAAOorB,KAAKg2B,GAAgB9/C,QAG5C6/C,EAA0Bx8B,SAC1Bw8B,EAA0Bh+C,OAC1Bg+C,EAA0B17B,SAG5Bpf,EAAKq5C,wBAAwB4B,mBAAmBF,GAE3Cv6C,EAAAA,GAAGs6C,GAA2Bh2C,KACnCtF,EAAAA,QACE,SACE07C,GAEA,OACGA,EAA+B58B,SAC9B48B,EAA+Bp+C,SAChCo+C,EAA+B97B,WAItCmR,EAAAA,WACE,SACE2qB,GAEA,OAAIA,EAA+B58B,QAC1Bte,EAAKo6C,uBAAuBN,qBAE9Bt5C,EAAAA,IAAG,MAGduE,EAAAA,KAAI,SAAC4tB,GAAS,OAAAv0B,QAAQu0B,GAAQh5B,OAAOorB,KAAK4N,GAAM13B,aAG7CuF,EAAAA,IAAG,QAMRy5C,EAAA5/C,UAAAkgD,iBAAV,WAAA,IAAAv6C,EAAA7F,KACEA,KAAKghD,kBAAoB/vC,EAAAA,cAAc,CACrCjR,KAAKggD,mBAAmBiB,oBACxBjhD,KAAKggD,mBAAmBkB,iCACxBlhD,KAAKm/C,uBAAuBgC,sCAC3Bx2C,KACDmkC,EAAAA,aAAa,GACb9+B,EAAAA,KACE,SAAC1K,GAAA/C,EAAA+C,EAAA,GAAG,IAMAO,EAAKm6C,mBAAmBoB,wBAI9B/7C,EAAAA,QACE,SAACC,GAIK,OAJL/C,EAAA+C,EAAA,GAAG,MAMN8wB,EAAAA,WACE,SAAC9wB,OAAAsT,EAAArW,EAAA+C,EAAA,GAAC+7C,EAAAzoC,EAAA,GAAY0oC,EAAA1oC,EAAA,GAKN2oC,EACJF,EAASvxC,MAAK,SAAC+wC,GAAY,OAAAA,EAAQU,mBAAmBF,EAAS,GACjE,OAAIE,GAAkB/hD,OAAOorB,KAAK22B,GAAgBzgD,QAG5CwgD,EAAyBn9B,SACzBm9B,EAAyB3+C,OACzB2+C,EAAyBr8B,SAG3Bpf,EAAKs5C,uBAAuBqC,kBAAkBD,GAEzCl7C,EAAAA,GAAGi7C,GAA0B32C,KAClCtF,EAAAA,QACE,SACEo8C,GAEA,OACGA,EAA8Bt9B,SAC7Bs9B,EAA8B9+C,SAC/B8+C,EAA8Bx8B,WAIrCmR,EAAAA,WACE,SACEqrB,GAEA,OAAIA,EAA8Bt9B,QACzBte,EAAKo6C,uBAAuBJ,oBAE9Bx5C,EAAAA,IAAG,MAGduE,EAAAA,KAAI,SAAC4tB,GAAS,OAAAv0B,QAAQu0B,GAAQh5B,OAAOorB,KAAK4N,GAAM13B,aAG7CuF,EAAAA,IAAG,QAMRy5C,EAAA5/C,UAAAigD,gBAAV,WAAA,IAAAt6C,EAAA7F,KACEA,KAAK0hD,iBAAmBzwC,EAAAA,cAAc,CACpCjR,KAAKqgD,oBACLrgD,KAAKk/C,wBAAwByC,4BAC7B3hD,KAAKk/C,wBAAwB0C,4BAC7B5hD,KAAKk/C,wBAAwB2C,wCAC5Bl3C,KACDmkC,EAAAA,aAAa,GACb1Y,EAAAA,WACE,SAAC9wB,OAAAsT,EAAArW,EAAA+C,EAAA,GACCw8C,EAAAlpC,EAAA,GACAmpC,EAAAnpC,EAAA,GACAopC,EAAAppC,EAAA,GACAqpC,EAAArpC,EAAA,GAOA,OAAIkpC,EACKz7C,EAAAA,GAAG,CACR07C,EACAC,EACAC,IACCt3C,KACDtF,EAAAA,QACE,SAACC,GAIK,OAJL/C,EAAA+C,EAAA,GAAK,GAI4B6e,WAEpCiS,EAAAA,WACE,SAAC9wB,OAAAsT,EAAArW,EAAA+C,EAAA,GAACs4C,EAAAhlC,EAAA,GAAespC,EAAAtpC,EAAA,GAKf,GAAI3U,QAAQ25C,EAAc98C,QAAS,CACjC,IAAMqhD,EAAwBt8C,EAAK84C,sBAAsBT,yBACvDN,GAEF,OAAOv3C,EAAAA,GAAG,CACR87C,EACAD,IACCv3C,KACDqF,EAAAA,KACE,SAAC1K,OAAAsT,EAAArW,EAAA+C,EAAA,GAACy4C,EAAAnlC,EAAA,GAAcwpC,EAAAxpC,EAAA,GAKZmlC,KAEEqE,EAA0Bj+B,SAC1Bi+B,EAA0Bz/C,OAC1By/C,EAA0Bn9B,UAG5Bpf,EAAKq5C,wBAAwBiB,gBAC3BpC,MAKR14C,EAAAA,QACE,SAACC,OAAG88C,EAAH7/C,EAAA+C,EAAA,GAAG,GAIF,OACG88C,EAA0Bj+B,SACzBi+B,EAA0Bz/C,SAC3By/C,EAA0Bn9B,WAIjCmR,EAAAA,WACE,SAAC9wB,GAIC,OAJD/C,EAAA+C,EAAA,GAAG,GAI4B6e,QACrBte,EAAKo6C,uBAAuBL,8BAE9Bv5C,EAAAA,IAAG,MAGduE,EAAAA,KAAI,SAAC4tB,GAAS,OAAAv0B,QAAQu0B,OAG1B,OAAOnyB,EAAAA,IAAG,OAKTA,EAAAA,IAAG,QAOVy5C,EAAA5/C,UAAAmiD,uBAAV,WACEriD,KAAKk/C,wBAAwBoD,iCAC7BtiD,KAAKm/C,uBAAuBoD,gCAC5BviD,KAAKk/C,wBAAwBsD,+BAGxB1C,EAAA5/C,UAAAuiD,6BAAP,WAEE,OADAziD,KAAKqiD,yBACEpxC,EAAAA,cAAc,CAACjR,KAAK0hD,iBAAkB1hD,KAAKghD,oBAAoBr2C,KACpEC,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAACo9C,EAAA9pC,EAAA,GAAiB+pC,EAAA/pC,EAAA,GACrB,OAAA3U,QAAQy+C,GAAmBC,iDAlRDhc,EAAAA,0BACAC,EAAAA,0BACKjB,EAAAA,+BACDC,EAAAA,8BACAqZ,UACDzC,kSAXxBsD,EAAsB7+C,EAAA,CAHlC+B,EAAAA,WAAW,CACVC,WAAY,UAED68C,oBCLX,SAAA8C,EACYC,EACAnG,EACAiC,EACAmE,EACAvnB,GAJAv7B,KAAA6iD,OAAAA,EACA7iD,KAAA08C,qBAAAA,EACA18C,KAAA2+C,sBAAAA,EACA3+C,KAAA8iD,uBAAAA,EACA9iD,KAAAu7B,kBAAAA,EAEVv7B,KAAK+iD,WAAa18C,EAAAA,GAChBrG,KAAK6iD,OAAOG,SACVhjD,KAAK08C,qBAAqB4B,eACxBt+C,KAAK2+C,sBAAsB5B,6BAC3BwB,MAAM,YAKdqE,EAAA1iD,UAAA04C,YAAA,WAAA,IAAA/yC,EAAA7F,KACE,OACEA,KAAK2+C,sBAAsBR,sBAC1Bn+C,KAAKu7B,kBAAkBsjB,cAEjB7+C,KAAK8iD,uBAAuBL,+BAA+B93C,KAChEyrB,EAAAA,WAAU,SAAC6sB,GACT,OAAOA,EACH58C,EAAAA,GACER,EAAKg9C,OAAOG,SACVn9C,EAAK62C,qBAAqB4B,eACxBz4C,EAAK84C,sBAAsB7B,qBACzBtT,EAAAA,iBAAiB2S,eAEnBoC,MAAM,KAGZ14C,EAAKk9C,eAIR/iD,KAAK+iD,qDApCMG,EAAAA,cACc1E,EAAAA,4BACChC,UACCsD,UACLliB,EAAAA,yPARpBglB,EAAa3hD,EAAA,CAHzB+B,EAAAA,WAAW,CACVC,WAAY,UAED2/C,oBCJX,SAAAO,KACF,OAFaA,EAA6BliD,EAAA,CALzCkZ,EAAAA,UAAU,CACTtQ,SAAU,2BACV5D,SAAA,GACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B46B,oBCmBb,SAAAC,KAAyC,OAA5BA,EAA0BniD,EAAA,CAjBtC8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,cACVwF,UAAW,CACToP,EAAAA,qBAAqBg9B,IACrBh9B,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb+hC,qBAAsB,CACpBn/C,UAAWi/C,GACXr9B,OAAQ,CAAC24B,GAAmB9F,GAAmBiK,SAKvD14C,aAAc,CAACi5C,IACf5hC,gBAAiB,CAAC4hC,IAClBh5C,QAAS,CAACg5C,OAECC,oBCfX,SAAAE,EAAsB/nB,GAAAv7B,KAAAu7B,kBAAAA,EACpBv7B,KAAKmzC,MAAQnzC,KAAKu7B,kBAAkBpD,YAExC,gDAH2CyF,EAAAA,qBAH9B0lB,EAA6BriD,EAAA,CALzCkZ,EAAAA,UAAU,CACTtQ,SAAU,4BACV5D,SAAA,iEACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B+6B,oBCab,SAAAC,KAAyC,OAA5BA,EAA0BtiD,EAAA,CAftC8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcytC,IACxBjoC,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbkiC,qBAAsB,CACpBt/C,UAAWo/C,QAKnBp5C,aAAc,CAACo5C,IACf/hC,gBAAiB,CAAC+hC,IAClBn5C,QAAS,CAACm5C,OAECC,oBCTX,SAAAE,EACYz/C,EACAkM,EACAwsC,GAFA18C,KAAAgE,OAAAA,EACAhE,KAAAkQ,eAAAA,EACAlQ,KAAA08C,qBAAAA,EAyBd,OAjBE+G,EAAAvjD,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAK87C,MAAQ97C,KAAKgE,OAAO+/B,SAAS+X,MAClC97C,KAAK0jD,aAAe1jD,KAAKkQ,eAAeqqB,iBAAiB5vB,KACvDqF,EAAAA,KAAI,SAAC6yC,GACHh9C,EAAK89C,cAAgBd,EAAOpoB,MAAMhwB,QAAQ4V,GAE1Cxa,EAAKi2C,MAAMptC,SAAQ,SAACof,EAAM9W,GACP,IACfnR,EAAK62C,qBAAqB4B,eAAexwB,EAAKiuB,WAAWwC,MAAM,KAEhD14C,EAAK89C,gBACpB99C,EAAK+9C,gBAAkB5sC,oDArBb4kC,UACQtrC,EAAAA,sBACMkuC,EAAAA,wBAJvBiF,EAAqCxiD,EAAA,CAJjDkZ,EAAAA,UAAU,CACTtQ,SAAU,qCACV5D,SAAA,kTAEWw9C,oBCoBb,SAAAI,KAAiD,OAApCA,EAAkC5iD,EAAA,CAjB9C8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcyiB,EAAAA,UAAWvL,EAAAA,WAAYsL,EAAAA,cAC/Chd,UAAW,CACToP,EAAAA,qBAAqBg9B,IACrBh9B,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbwiC,6BAA8B,CAC5B5/C,UAAWu/C,GACX39B,OAAQ,CAAC24B,GAAmB9F,SAKpCzuC,aAAc,CAACu5C,IACfliC,gBAAiB,CAACkiC,IAClBt5C,QAAS,CAACs5C,OAECI,oBCdX,SAAAE,EACY//C,EACAkM,EACAwsC,EACAnhB,GAHAv7B,KAAAgE,OAAAA,EACAhE,KAAAkQ,eAAAA,EACAlQ,KAAA08C,qBAAAA,EACA18C,KAAAu7B,kBAAAA,EA2Bd,OAlBEwoB,EAAA7jD,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAK87C,MAAQ97C,KAAKgE,OAAO+/B,SAAS+X,MAClC97C,KAAKmzC,MAAQnzC,KAAKu7B,kBAAkBpD,YACpCn4B,KAAK0jD,aAAe1jD,KAAKkQ,eAAeqqB,iBAAiB5vB,KACvDqF,EAAAA,KAAI,SAAC6yC,GACHh9C,EAAK89C,cAAgBd,EAAOpoB,MAAMhwB,QAAQ4V,GAE1Cxa,EAAKi2C,MAAMptC,SAAQ,SAACof,EAAM9W,GACP,IACfnR,EAAK62C,qBAAqB4B,eAAexwB,EAAKiuB,WAAWwC,MAAM,KAEhD14C,EAAK89C,gBACpB99C,EAAK+9C,gBAAkB5sC,oDAxBb4kC,UACQtrC,EAAAA,sBACMkuC,EAAAA,4BACH5gB,EAAAA,qBALpBmmB,EAAkC9iD,EAAA,CAJ9CkZ,EAAAA,UAAU,CACTtQ,SAAU,kCACV5D,SAAA,i7BAEW89C,oBCeb,SAAAC,KAA8C,OAAjCA,EAA+B/iD,EAAA,CAjB3C8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcyiB,EAAAA,UAAWvL,EAAAA,WAAYsL,EAAAA,cAC/Chd,UAAW,CACToP,EAAAA,qBAAqBg9B,IACrBh9B,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb2iC,0BAA2B,CACzB//C,UAAW6/C,GACXj+B,OAAQ,CAAC24B,GAAmB9F,SAKpCzuC,aAAc,CAAC65C,IACfxiC,gBAAiB,CAACwiC,IAClB55C,QAAS,CAAC45C,OAECC,oBClBX,SAAAE,EACYlgD,EACAkM,EACAwsC,GAFA18C,KAAAgE,OAAAA,EACAhE,KAAAkQ,eAAAA,EACAlQ,KAAA08C,qBAAAA,EAqCd,OA7BEwH,EAAAhkD,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAK87C,MAAQ97C,KAAKgE,OAAO+/B,SAAS+X,MAClC97C,KAAK0jD,aAAe1jD,KAAKkQ,eAAeqqB,iBAAiB5vB,KACvDqF,EAAAA,KAAI,SAAC6yC,GACHh9C,EAAK89C,cAAgBd,EAAOpoB,MAAMhwB,QAAQ4V,GAE1Cxa,EAAKi2C,MAAMptC,SAAQ,SAACof,EAAM9W,GACP,IACfnR,EAAK62C,qBAAqB4B,eAAexwB,EAAKiuB,WAAWwC,MAAM,KAEhD14C,EAAK89C,gBACpB99C,EAAK+9C,gBAAkB5sC,WAOjCktC,EAAAhkD,UAAAikD,YAAA,SAAYlH,GACV,OAAQj9C,KAAKiX,SAASgmC,IAAej9C,KAAKokD,WAAWnH,IAAkB,EAAL,GAGpEiH,EAAAhkD,UAAA+W,SAAA,SAASD,GACP,OAAOA,IAAUhX,KAAK4jD,iBAGxBM,EAAAhkD,UAAAkkD,WAAA,SAAWptC,GACT,OAAOA,EAAQhX,KAAK4jD,0DArCFhI,UACQtrC,EAAAA,sBACMkuC,EAAAA,wBAJvB0F,EAAyBjjD,EAAA,CALrCkZ,EAAAA,UAAU,CACTtQ,SAAU,uBACV5D,SAAA,4iBACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B27B,oBCmBb,SAAAG,KAAqC,OAAxBA,EAAsBpjD,EAAA,CAjBlC8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcyiB,EAAAA,UAAWvL,EAAAA,WAAYsL,EAAAA,cAC/CviB,aAAc,CAACg6C,IACf3iC,gBAAiB,CAAC2iC,IAClB/5C,QAAS,CAAC+5C,IACVz0C,UAAW,CACToP,EAAAA,qBAAqBg9B,IACrBh9B,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbgjC,iBAAkB,CAChBpgD,UAAWggD,GACXp+B,OAAQ,CAAC24B,GAAmB9F,YAMzB0L,oBClBX,SAAAE,EACUtE,EACAtB,EACAjC,EACAmG,GAHA7iD,KAAAigD,uBAAAA,EACAjgD,KAAA2+C,sBAAAA,EACA3+C,KAAA08C,qBAAAA,EACA18C,KAAA6iD,OAAAA,SAGV0B,EAAArkD,UAAA04C,YAAA,WAAA,IAAA/yC,EAAA7F,KACQwkD,EAA6BxkD,KAAK2+C,sBAAsBhC,gBAC5DnT,EAAAA,iBAAiBwS,kBASnB,OANKwI,GAAgBl+C,EAAAA,aACnBC,QAAQC,KACN,0BAA0BgjC,EAAAA,iBAAiBwS,iBAAgB,+BAIxDh8C,KAAKigD,uBACTN,qBACAh1C,KACCC,EAAAA,KAAI,SAAC65C,GACH,SAAAA,IAAmBjlD,OAAOorB,KAAK65B,GAAiB3jD,SAE5C+E,EAAKg9C,OAAOG,SACVwB,GACE3+C,EAAK62C,qBAAqB4B,eACxBkG,EAAazI,WACbwC,MAAM,kDA3BUU,UACDzC,UACDgC,EAAAA,4BACd0E,EAAAA,2MALPqB,EAAuBtjD,EAAA,CAHnC+B,EAAAA,WAAW,CACVC,WAAY,UAEDshD,oBCwBX,SAAAG,EACUlX,EACA0R,EACAhvC,EACAyuC,EACA9rB,GAJA7yB,KAAAwtC,GAAAA,EACAxtC,KAAAk/C,wBAAAA,EACAl/C,KAAAkQ,eAAAA,EACAlQ,KAAA2+C,sBAAAA,EACA3+C,KAAA6yB,eAAAA,EAbF7yB,KAAA2kD,eAAgB,EAIxB3kD,KAAA4kD,KAAkB5kD,KAAKwtC,GAAGv6B,MAAM,CAC9B4xC,eAAgB,CAAC,GAAIjX,EAAAA,WAAWC,YAmFpC,OAxEE6W,EAAAxkD,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAK8kD,oBAAsB9kD,KAAK2+C,sBAAsB3B,uBACpDh9C,KAAK6yB,gBAEP7yB,KAAK+kD,wBAA0B/kD,KAAK2+C,sBAAsBvB,2BACxDp9C,KAAK6yB,gBAGP7yB,KAAKglD,wBAA0BhlD,KAAKk/C,wBAAwByC,4BAE5D3hD,KAAKilD,gBAAkBjlD,KAAKglD,wBACzBr6C,KACC2Y,EAAAA,eACEtjB,KAAKk/C,wBACFgG,0BACAv6C,KACCC,EAAAA,KAAI,SAACmzC,GACH,OAAAA,GAAgBA,EAAap5B,KAAOo5B,EAAap5B,KAAO,WAKjEvW,WAAU,SAAC9I,OAAAsT,EAAArW,EAAA+C,EAAA,GAACs4C,EAAAhlC,EAAA,GAAe+L,EAAA/L,EAAA,IACrB+L,GAAQi5B,GAAiBA,EAAc98C,SAC1C6jB,EAAO9e,EAAK84C,sBAAsBT,yBAChCN,IAIF/3C,EAAK8+C,eACHhgC,GACFA,IAAS9e,EAAKs/C,uBAEdt/C,EAAKqK,eAAeE,GAAGvK,EAAKi/C,qBAE9Bj/C,EAAKs/C,sBAAwBxgC,EACzBA,GACF9e,EAAK++C,KAAKzlB,SAAyB,eAAEjR,SAASvJ,OAKtD+/B,EAAAxkD,UAAAklD,WAAA,SAAWzgC,GACLA,IAAS3kB,KAAKmlD,wBAChBnlD,KAAKmlD,sBAAwBxgC,IAIjC+/B,EAAAxkD,UAAAkC,KAAA,WACEpC,KAAK2kD,eAAgB,EACjB3kD,KAAK4kD,KAAK7W,OAAS/tC,KAAK4kD,KAAKviD,QAC1BrC,KAAKmlD,wBACRnlD,KAAKmlD,sBAAwBnlD,KAAK4kD,KAAKviD,MAAMwiD,gBAE/C7kD,KAAKk/C,wBAAwBiB,gBAAgBngD,KAAKmlD,wBAEpDnlD,KAAKkQ,eAAeE,GAAGpQ,KAAK8kD,sBAG9BJ,EAAAxkD,UAAAmlD,KAAA,WACErlD,KAAKkQ,eAAeE,GAAGpQ,KAAK+kD,0BAG9BvlD,OAAAmC,eAAI+iD,EAAAxkD,UAAA,sBAAmB,KAAvB,WACE,OAAOF,KAAK4kD,KAAKzlB,SAAyB,eAAEjS,yCAG9Cw3B,EAAAxkD,UAAAmP,YAAA,WACMrP,KAAKilD,iBACPjlD,KAAKilD,gBAAgBr3C,wDA5EXqgC,EAAAA,mBACqBtI,EAAAA,+BACTr1B,EAAAA,sBACOksC,UACP5oB,EAAAA,kBAnBf8wB,EAAqBzjD,EAAA,CALjCkZ,EAAAA,UAAU,CACTtQ,SAAU,mBACV5D,SAAA,k1DACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9Bm8B,oBCQb,SAAAY,KAAiC,OAApBA,EAAkBrkD,EAAA,CApB9B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAc4b,EAAAA,oBAAqB1E,EAAAA,WAAYM,IACzDhS,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbikC,qBAAsB,CACpBrhD,UAAWwgD,GACX5+B,OAAQ,CACN24B,GACA9F,GACA4L,SAMVr6C,aAAc,CAACw6C,IACfnjC,gBAAiB,CAACmjC,IAClBv6C,QAAS,CAACu6C,OAECY,oBCjBX,SAAAE,EACUvF,EACAtB,EACAjC,EACAmG,GAHA7iD,KAAAigD,uBAAAA,EACAjgD,KAAA2+C,sBAAAA,EACA3+C,KAAA08C,qBAAAA,EACA18C,KAAA6iD,OAAAA,SAGV2C,EAAAtlD,UAAA04C,YAAA,WAAA,IAAA/yC,EAAA7F,KACQwkD,EAA6BxkD,KAAK2+C,sBAAsBhC,gBAC5DnT,EAAAA,iBAAiByS,eASnB,OANKuI,GAAgBl+C,EAAAA,aACnBC,QAAQC,KACN,0BAA0BgjC,EAAAA,iBAAiByS,cAAa,+BAIrDj8C,KAAKigD,uBACTL,8BACAj1C,KACCC,EAAAA,KAAI,SAACg6C,GACH,SAAAA,IAAQA,EAAK9jD,SAET+E,EAAKg9C,OAAOG,SACVwB,GACE3+C,EAAK62C,qBAAqB4B,eACxBkG,EAAazI,WACbwC,MAAM,kDA3BUU,UACDzC,UACDgC,EAAAA,4BACd0E,EAAAA,2MALPsC,EAAoBvkD,EAAA,CAHhC+B,EAAAA,WAAW,CACVC,WAAY,UAEDuiD,oBCMX,SAAAC,EAAsB/U,GAAA1wC,KAAA0wC,aAAAA,EAFtB1wC,KAAAkf,UAAYtX,EAAAA,UAoBd,OATE69C,EAAAvlD,UAAAqJ,SAAA,WACEvJ,KAAK0lD,gBAAkB1lD,KAAK2lD,mBAAmB7kD,OAC3Cd,KAAK2lD,mBAAmB,GACxB3lD,KAAK4lD,gBAGXH,EAAAvlD,UAAA2lD,WAAA,SAAWn+C,GACT1H,KAAK0wC,aAAazb,iBAAiBvtB,6CAhBD6sB,MAGpCtzB,EAAA,CADC0I,EAAAA,kDAGD1I,EAAA,CADC0I,EAAAA,8CAPU87C,EAA+BxkD,EAAA,CAL3CkZ,EAAAA,UAAU,CACTtQ,SAAU,gCACV5D,SAAA,66GACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9Bk9B,oBCmFX,SAAAK,EACY3G,EACAD,EACAc,EACAz9B,EACAirB,EACAkD,EACAqP,GANA//C,KAAAm/C,uBAAAA,EACAn/C,KAAAk/C,wBAAAA,EACAl/C,KAAAggD,mBAAAA,EACAhgD,KAAAuiB,qBAAAA,EACAviB,KAAAwtC,GAAAA,EACAxtC,KAAA0wC,aAAAA,EACA1wC,KAAA+/C,mBAAAA,EAjEZ//C,KAAAkf,UAAYtX,EAAAA,UAIZ5H,KAAA+lD,OAAmB,GACnB/lD,KAAAgmD,MAAkB,GAMlBhmD,KAAAimD,uBAAwB,EAExBjmD,KAAAkmD,iBAA4C,IAAIh/C,EAAAA,gBAAwB,IAUxElH,KAAAmmD,OAAS,IAAI14C,EAAAA,aAGbzN,KAAAomD,UAAY,IAAI34C,EAAAA,aAGhBzN,KAAAwhD,kBAAoB,IAAI/zC,EAAAA,aAExBzN,KAAAqmD,YAAyBrmD,KAAKwtC,GAAGv6B,MAAM,CACrCqzC,SAAUtmD,KAAKwtC,GAAGv6B,MAAM,CACtB0R,KAAM,CAAC,KAAMipB,EAAAA,WAAWC,YAE1B0Y,kBAAmB,CAAC,GAAI3Y,EAAAA,WAAWC,UACnC2Y,WAAY,CAAC,GAAI5Y,EAAAA,WAAWC,UAC5B4Y,YAAa,CAAC,KAAM7Y,EAAAA,WAAWC,UAC/B6Y,WAAY,CAAC,KAAM9Y,EAAAA,WAAWC,UAC9B8Y,IAAK,CAAC,GAAI/Y,EAAAA,WAAWC,UACrB0T,eAAgB,EAAC,KAGnBvhD,KAAA4mD,mBAAgC5mD,KAAKwtC,GAAGv6B,MAAM,CAC5C4zC,UAAW,CAAC,GAAIjZ,EAAAA,WAAWC,UAC3BiZ,SAAU,CAAC,GAAIlZ,EAAAA,WAAWC,UAC1BkZ,MAAO,CAAC,GAAInZ,EAAAA,WAAWC,UACvBmZ,MAAO,CAAC,IACRC,KAAM,CAAC,GAAIrZ,EAAAA,WAAWC,UACtBqZ,OAAQlnD,KAAKwtC,GAAGv6B,MAAM,CACpBk0C,aAAc,CAAC,KAAMvZ,EAAAA,WAAWC,YAElCuZ,QAASpnD,KAAKwtC,GAAGv6B,MAAM,CACrB0lB,QAAS,CAAC,KAAMiV,EAAAA,WAAWC,YAE7BwZ,WAAY,CAAC,GAAIzZ,EAAAA,WAAWC,YA4MhC,OA/LEiY,EAAA5lD,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAKsnD,kBACLtnD,KAAKunD,WAAavnD,KAAKggD,mBAAmBwH,yBAAyB78C,KACjEqF,EAAAA,KAAI,SAACy3C,GAEmC,IAAlCjoD,OAAOorB,KAAK68B,GAAW3mD,QACzB+E,EAAKm6C,mBAAmB0H,2BAK9B1nD,KAAK2nD,WAAa3nD,KAAKm/C,uBAAuByI,eAAej9C,KAC3DqF,EAAAA,KAAI,SAAC63C,GACmC,IAAlCroD,OAAOorB,KAAKi9B,GAAW/mD,QACzB+E,EAAKs5C,uBAAuB2I,6BAKlC9nD,KAAK+nD,iBAAmB/nD,KAAKk/C,wBAAwBS,qBACrD3/C,KAAK2f,SAAW3f,KAAKm/C,uBAAuBgC,oCAE5CnhD,KAAKgoD,mCAAqC/2C,EAAAA,cAAc,CACtDjR,KAAKunD,WACLvnD,KAAK+nD,mBACJp9C,KACDC,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAACmiD,EAAA7uC,EAAA,GAAWioC,EAAAjoC,EAAA,GACf,OACEioC,MAAAA,OAAO,EAAPA,EAASuG,YACPK,EAAUpiD,QACV,SAAC+hD,GACC,OAAAA,EAAQzuB,UAAYkoB,EAAQuG,QAAQzuB,WACtC73B,UAGNkP,EAAAA,KAAI,SAACi4C,GACHpiD,EAAKogD,sBAAwBgC,MAKjCjoD,KAAKkoD,iBAAmBloD,KAAKk/C,wBAC1BiJ,gCACA/5C,WAAU,SAACg6C,GACe,SAArBA,EAAQC,SACVxiD,EAAKq5C,wBAAwBoJ,kCACC,WAArBF,EAAQC,SACjBxiD,EAAKzD,OACyB,WAArBgmD,EAAQC,UACjBxiD,EAAK0c,qBAAqBra,IACxB,CAAE9G,IAAK,8BACPwjB,EAAAA,kBAAkBumB,gBAEpBtlC,EAAKq5C,wBAAwBoJ,mCACC,WAArBF,EAAQC,UACjBxiD,EAAK0iD,qBAAqBH,MAIhCpoD,KAAKwoD,SAAWxoD,KAAKkmD,iBAAiBv7C,KACpCyrB,EAAAA,WAAU,SAACgxB,GAAY,OAAAvhD,EAAKk6C,mBAAmB0I,WAAWrB,MAC1Dp3C,EAAAA,KAAI,SAAC04C,GACH,IAAMC,EAAgB9iD,EAAK+gD,mBAAmBl+C,IAC5C,uBAEEggD,EAAQ5nD,OAAS,EACnB6nD,EAAc9R,SAEd8R,EAAc/R,eAMtBkP,EAAA5lD,UAAAonD,gBAAA,WAGE,IAFA,IAAMsB,GAAO,IAAIC,MAAOC,cAEfnoD,EAAI,EAAGA,EAAI,GAAIA,IACtBX,KAAKgmD,MAAMtjD,KAAKkmD,EAAOjoD,GAGzB,IAAK,IAAIooD,EAAI,EAAGA,GAAK,GAAIA,IACnBA,EAAI,GACN/oD,KAAK+lD,OAAOrjD,KAAK,IAAIqmD,GAErB/oD,KAAK+lD,OAAOrjD,KAAKqmD,EAAE/vC,aAKzB8sC,EAAA5lD,UAAA8oD,2BAAA,WACEhpD,KAAKqmD,YAAYhkD,MAAMk/C,gBAAkBvhD,KAAKqmD,YAAYhkD,MACvDk/C,gBAGLuE,EAAA5lD,UAAA+oD,4BAAA,WACEjpD,KAAKimD,uBAAyBjmD,KAAKimD,uBAGrCH,EAAA5lD,UAAAgpD,sBAAA,SAAsBrI,GACpB,IAAIqG,EAAS,GAKb,OAJIrG,EAAQqG,QAAUrG,EAAQqG,OAAOvuB,UACnCuuB,EAASrG,EAAQqG,OAAOvuB,QAAU,MAG7B,CACLwwB,SAAUtI,EAAQgG,UAAY,IAAMhG,EAAQiG,SAC5CsC,KAAM,CACJvI,EAAQkG,MACRlG,EAAQmG,MACRnG,EAAQoG,KAAO,KAAOC,EAASrG,EAAQuG,QAAQzuB,QAC/CkoB,EAAQwG,WACRxG,EAAQwI,SAKdvD,EAAA5lD,UAAAqoD,qBAAA,SAAqBH,GAArB,IAAAviD,EAAA7F,KACOA,KAAKspD,2BACRtpD,KAAKspD,yBAA2BtpD,KAAK0wC,aAAahc,KAChD+wB,GACA,CAAExS,UAAU,EAAM3oC,KAAM,OAE1BtK,KAAKspD,yBAAyBpW,kBAAkB0S,eAAiB5lD,KAAK4mD,mBAAmBvkD,MACzFrC,KAAKspD,yBAAyBpW,kBAAkByS,mBAC9CyC,EAAQzC,mBACV3lD,KAAKspD,yBAAyBC,OAC3BhiB,MAAK,WACJ1hC,EAAKq5C,wBAAwBoJ,kCAC7BziD,EAAKyjD,yBAA2B,QAEjCE,OAAM,WAEL3jD,EAAKq5C,wBAAwBoJ,kCAC7BziD,EAAKyjD,yBAA2B,UAKxCxD,EAAA5lD,UAAAiR,MAAA,WACEnR,KAAKomD,UAAUn4C,QAGjB63C,EAAA5lD,UAAAmlD,KAAA,WACErlD,KAAKmmD,OAAOl4C,QAGd63C,EAAA5lD,UAAAupD,cAAA,WACMzpD,KAAKimD,sBACPjmD,KAAKoC,OAELpC,KAAKk/C,wBAAwBuK,cAAczpD,KAAK4mD,mBAAmBvkD,QAIvEyjD,EAAA5lD,UAAAwpD,gBAAA,SAAgBtC,GACdpnD,KAAK4mD,mBAAmBl+C,IAAI,mBAAmBwlB,SAASk5B,EAAQzuB,SAChE34B,KAAKkmD,iBAAiB9jD,KAAKglD,EAAQzuB,UAGrCmtB,EAAA5lD,UAAAkC,KAAA,WACMpC,KAAKqmD,YAAYtY,MACf/tC,KAAKimD,sBACPjmD,KAAKwhD,kBAAkBvzC,KAAK,CAC1B07C,eAAgB3pD,KAAKqmD,YAAYhkD,MACjCunD,eAAgB,OAGd5pD,KAAK4mD,mBAAmB7Y,MAC1B/tC,KAAKwhD,kBAAkBvzC,KAAK,CAC1B07C,eAAgB3pD,KAAKqmD,YAAYhkD,MACjCunD,eAAgB5pD,KAAK4mD,mBAAmBvkD,QAG1CrC,KAAK4mD,mBAAmB5Y,oBAI5BhuC,KAAKqmD,YAAYrY,mBAEZhuC,KAAKimD,uBACRjmD,KAAK4mD,mBAAmB5Y,qBAK9B8X,EAAA5lD,UAAAmP,YAAA,WACMrP,KAAKkoD,kBACPloD,KAAKkoD,iBAAiBt6C,wDArMUg4B,EAAAA,8BACCD,EAAAA,+BACLiB,EAAAA,0BACEnhB,EAAAA,4BAClBwoB,EAAAA,mBACU1Z,UACMoS,EAAAA,sBAhDhC1lC,EAAA,CADC0I,EAAAA,iDAID1I,EAAA,CADC0I,EAAAA,mDAID1I,EAAA,CADCsO,EAAAA,uCAIDtO,EAAA,CADCsO,EAAAA,0CAIDtO,EAAA,CADCsO,EAAAA,kDA7BUu2C,EAAoB7kD,EAAA,CALhCkZ,EAAAA,UAAU,CACTtQ,SAAU,kBACV5D,SAAA,0tcACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9Bu9B,oBCbb,SAAA+D,KAAgC,OAAnBA,EAAiB5oD,EAAA,CAf7B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACA4b,EAAAA,oBACAsO,EAAAA,eACAnN,GACA7F,EAAAA,WACAvC,GACA6C,GACA4L,IAEFnjB,aAAc,CAAC47C,IACfvkC,gBAAiB,CAACukC,IAClB37C,QAAS,CAAC27C,OAEC+D,oBCmBX,SAAAC,EACY9J,EACA1kB,EACA4jB,EACAC,EACA58B,EACArS,EACAyuC,EACA9rB,EACAyR,EACA/I,GATAv7B,KAAAggD,mBAAAA,EACAhgD,KAAAs7B,gBAAAA,EACAt7B,KAAAk/C,wBAAAA,EACAl/C,KAAAm/C,uBAAAA,EACAn/C,KAAAuiB,qBAAAA,EACAviB,KAAAkQ,eAAAA,EACAlQ,KAAA2+C,sBAAAA,EACA3+C,KAAA6yB,eAAAA,EACA7yB,KAAAskC,YAAAA,EACAtkC,KAAAu7B,kBAAAA,EAvBZv7B,KAAAkf,UAAYtX,EAAAA,UAKZ5H,KAAAo+C,iBAAkB,EAClBp+C,KAAA+pD,8BAA+B,EA0NjC,OAtMED,EAAA5pD,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAKgqD,gBAAiB,EACtBhqD,KAAKiqD,WAAajqD,KAAKggD,mBAAmBkK,2BAErClqD,KAAKu7B,kBAAkBsjB,cAG1B7+C,KAAKo+C,iBAAkB,EAFvBp+C,KAAKggD,mBAAmBoB,qBAK1BphD,KAAK8kD,oBAAsB9kD,KAAK2+C,sBAAsB3B,uBACpDh9C,KAAK6yB,gBAGP7yB,KAAK+kD,wBAA0B/kD,KAAK2+C,sBAAsBvB,2BACxDp9C,KAAK6yB,gBAGP7yB,KAAKk/C,wBACFS,qBACAh1C,KAAKmV,EAAAA,KAAK,IACV1R,WAAU,SAACyyC,GACVh7C,EAAK4+C,gBAAkB5D,KAG3B7gD,KAAKmqD,wBAA0BnqD,KAAKggD,mBAAmBiB,oBAEvDjhD,KAAKoqD,gBAAkBpqD,KAAKm/C,uBAAuBU,oBAAoBl1C,KACrEqF,EAAAA,KAAI,SAACq6C,GACCA,GAAiB7qD,OAAOorB,KAAKy/B,GAAavpD,SACxCupD,EAAsB,UACxB7qD,OAAOorB,KAAKy/B,GAAa37C,SAAQ,SAACtN,GAC5BA,EAAIoqB,WAAW,iBACjB3lB,EAAKykD,mCAAmCD,EAAYjpD,OAGxDyE,EAAKy1B,gBAAgBivB,kBAAkB,IAC9B1kD,EAAKmkD,gBACdnkD,EAAKqK,eAAeE,GAAGvK,EAAKi/C,0BAMpC9kD,KAAKwqD,OAASv5C,EAAAA,cAAc,CAC1BjR,KAAKmqD,wBAAwBx/C,KAC3ByrB,EAAAA,WAAU,SAACq0B,GACT,OAAQA,MAAAA,OAAO,EAAPA,EAAS3pD,QAEbmQ,EAAAA,cACEw5C,EAAQ7/C,KAAI,SAAC8/C,GACX,OAAAz5C,EAAAA,cAAc,CACZ5K,EAAAA,GAAGqkD,GACH7kD,EAAKy+B,YAAYqmB,UAAU,sBAAuB,CAChDC,MAAOF,EAAOjE,YACdmC,KAAM8B,EAAOhE,eAEd/7C,KACDC,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAA2B,MAAA,CAC9BulD,QADIjyC,EAAA,GAEJkyC,kBAFalyC,EAAA,YAVrBvS,EAAAA,GAAG,QAmBXrG,KAAKoqD,gBACLpqD,KAAKskC,YAAYqmB,UAAU,8BAC3B3qD,KAAKskC,YAAYqmB,UAAU,oCAC3B3qD,KAAKskC,YAAYqmB,UAAU,0BAC1BhgD,KACDC,EAAAA,KACE,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GACCylD,EAAAnyC,EAAA,GACAoyC,EAAApyC,EAAA,GACAqyC,EAAAryC,EAAA,GACAsyC,EAAAtyC,EAAA,GACAuyC,EAAAvyC,EAAA,GAEA,GACEmyC,EAAejqD,UACbkqD,GAAyD,IAAvCxrD,OAAOorB,KAAKogC,GAAgBlqD,QAChD,CACA,IAAMsqD,EAAuBL,EAAej7C,MAC1C,SAACu7C,GAAkB,OAAAA,EAAcR,QAAQtJ,kBAEvC6J,IACFJ,EAAiBI,EAAqBP,QACtChlD,EAAKs5C,uBAAuBqC,kBAAkBwJ,IAGlD,OAAOD,EAAengD,KAAI,SAACigD,GAAY,MAAA,CACrCl2B,QAAS9uB,EAAKylD,WACZT,EAAQA,QACR,CACEU,YAAaV,EAAQC,kBACrBG,mBAAkBA,EAClBC,yBAAwBA,EACxBC,aAAYA,GAEdH,GAEFK,cAAeR,EAAQA,iBAOjCf,EAAA5pD,UAAAsrD,oBAAA,SAAoB7B,GAClB3pD,KAAKm/C,uBAAuBqC,kBAAkBmI,IAGhDG,EAAA5pD,UAAAurD,mBAAA,WACEzrD,KAAK+pD,8BAA+B,GAGtCD,EAAA5pD,UAAAwrD,mBAAA,WACE1rD,KAAK+pD,8BAA+B,GAGtCD,EAAA5pD,UAAAshD,kBAAA,SAAkBl8C,OAChBqkD,EAAArkD,EAAAqkD,eACAC,EAAAtkD,EAAAskD,eAKM+B,EAAOprD,EAAA,GAAwBopD,GACrCgC,EAAQ/B,eAAiBA,GAAkB5pD,KAAKykD,gBAChDzkD,KAAKm/C,uBAAuByM,qBAAqBD,GACjD3rD,KAAKgqD,gBAAiB,GAGxBF,EAAA5pD,UAAAmP,YAAA,WACErP,KAAKm/C,uBAAuB0M,yBAGpB/B,EAAA5pD,UAAA4rD,YAAV,SAAsBnnC,GAcpB,MAZa,SAATA,EACO3kB,KAAKkf,UAAU1D,KACN,WAATmJ,GAA8B,wBAATA,EACrB3kB,KAAKkf,UAAUzD,YACN,WAATkJ,EACA3kB,KAAKkf,UAAUvD,YACN,SAATgJ,EACA3kB,KAAKkf,UAAUxD,KAEf1b,KAAKkf,UAAUtD,aAMlBkuC,EAAA5pD,UAAAoqD,mCAAV,SAA6CyB,GAC3C/rD,KAAKuiB,qBAAqBra,IACxB,CACE9G,IAAK,8BACLs5B,OAAQ,CAAEqxB,MAAKA,IAEjBnnC,EAAAA,kBAAkBumB,iBAIZ2e,EAAA5pD,UAAAorD,WAAV,SACE3B,EACAqC,EAMAC,GAEA,MAAO,CACLC,MAAOvC,EAAepI,eAClByK,EAAWd,yBACX,GACJ/B,SAAUQ,EAAepD,kBACzB6C,KAAM,CAACO,EAAenD,WAAYwF,EAAWT,aAC7CY,IAAKnsD,KAAK8rD,YAAYnC,EAAerD,SAAS3hC,MAC9CynC,QAAS,CAAC,CAAE9e,KAAM0e,EAAWf,mBAAoB33C,MAAO,SACxD+4C,QACEJ,MAAAA,OAAQ,EAARA,EAAU5rC,MAAOspC,EAAetpC,GAC5B2rC,EAAWb,kBACXhkD,IAIV2iD,EAAA5pD,UAAAosD,OAAA,WACEtsD,KAAKkQ,eAAeE,GAAGpQ,KAAK8kD,sBAG9BgF,EAAA5pD,UAAAqsD,WAAA,WACEvsD,KAAKkQ,eAAeE,GAAGpQ,KAAK+kD,mEAhNEne,EAAAA,0BACHjJ,EAAAA,uBACQgI,EAAAA,+BACDC,EAAAA,8BACFngB,EAAAA,4BACNnV,EAAAA,sBACOksC,UACP5oB,EAAAA,sBACHmS,EAAAA,0BACMnI,EAAAA,qBAxBpBksB,EAAsB7oD,EAAA,CALlCkZ,EAAAA,UAAU,CACTtQ,SAAU,oBACV5D,SAAA,+zEACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BuhC,oBCUb,SAAA0C,KAAkC,OAArBA,EAAmBvrD,EAAA,CA5B/B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aACAo9B,GACA7iC,GACAvF,GACAN,EAAAA,YAEF1R,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbmrC,uBAAwB,CACtBvoD,UAAW4lD,GACXhkC,OAAQ,CACN24B,GACA9F,GACA4L,GACAiB,SAMVt7C,aAAc,CAAC4/C,IACfvoC,gBAAiB,CAACuoC,IAClB3/C,QAAS,CAAC2/C,OAEC0C,oBChBX,SAAAE,EACYpxB,EACAprB,EACAs9B,GAFAxtC,KAAAs7B,gBAAAA,EACAt7B,KAAAkQ,eAAAA,EACAlQ,KAAAwtC,GAAAA,EAPZxtC,KAAA2sD,mBAAqB3sD,KAAKwtC,GAAGv6B,MAAM,CACjC25C,mBAAoB,EAAC,EAAOhf,EAAAA,WAAWif,gBA+B3C,OAtBEH,EAAAxsD,UAAA4sD,WAAA,WACM9sD,KAAK2sD,mBAAmB5e,MAC1B/tC,KAAKs7B,gBAAgByxB,aAErB/sD,KAAK2sD,mBAAmB3e,oBAI5B0e,EAAAxsD,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAKgtD,uBAAyBhtD,KAAKs7B,gBAChCJ,kBACAvwB,KAAKtF,EAAAA,QAAO,SAACk3B,GAAU,OAA8B,IAA9B/8B,OAAOorB,KAAK2R,GAAOz7B,WAC1CsN,WAAU,WACTvI,EAAKqK,eAAeE,GAAG,CAAEC,QAAS,0BAIxCq8C,EAAAxsD,UAAAmP,YAAA,WACMrP,KAAKgtD,wBACPhtD,KAAKgtD,uBAAuBp/C,wDAxBH+vB,EAAAA,uBACDrtB,EAAAA,sBACZ29B,EAAAA,eAVLye,EAAmBzrD,EAAA,CAL/BkZ,EAAAA,UAAU,CACTtQ,SAAU,iBACV5D,SAAA,y5BACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BmkC,oBCoBb,SAAAO,KAA+B,OAAlBA,EAAgBhsD,EAAA,CAvB5B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aACAC,EAAAA,UACAvL,EAAAA,WACA0E,EAAAA,oBACAwH,IAEF5d,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb4rC,mBAAoB,CAClBhpD,UAAWwoD,GACX5mC,OAAQ,CAAC24B,GAAmB9F,SAKpCzuC,aAAc,CAACwiD,IACfnrC,gBAAiB,CAACmrC,IAClBviD,QAAS,CAACuiD,OAECO,oBCzBX,SAAAE,EACUlN,EACAtB,EACAjC,EACAmG,GAHA7iD,KAAAigD,uBAAAA,EACAjgD,KAAA2+C,sBAAAA,EACA3+C,KAAA08C,qBAAAA,EACA18C,KAAA6iD,OAAAA,SAGVsK,EAAAjtD,UAAA04C,YAAA,WAAA,IAAA/yC,EAAA7F,KACQwkD,EAA6BxkD,KAAK2+C,sBAAsBhC,gBAC5DnT,EAAAA,iBAAiB0S,iBASnB,OANKsI,GAAgBl+C,EAAAA,aACnBC,QAAQC,KACN,0BAA0BgjC,EAAAA,iBAAiB0S,gBAAe,+BAIvDl8C,KAAKigD,uBACTJ,oBACAl1C,KACCC,EAAAA,KAAI,SAAC++C,GACH,SAAAA,GAAyD,IAAvCnqD,OAAOorB,KAAK++B,GAAgB7oD,SAE1C+E,EAAKg9C,OAAOG,SACVwB,GACE3+C,EAAK62C,qBAAqB4B,eACxBkG,EAAazI,WACbwC,MAAM,kDA3BUU,UACDzC,UACDgC,EAAAA,4BACd0E,EAAAA,2MALPiK,EAAsBlsD,EAAA,CAHlC+B,EAAAA,WAAW,CACVC,WAAY,UAEDkqD,oBC2BX,SAAAC,EACYlO,EACAC,EACAY,EACAxkB,EACA+I,EACAqa,EACA/N,GANA5wC,KAAAk/C,wBAAAA,EACAl/C,KAAAm/C,uBAAAA,EACAn/C,KAAA+/C,mBAAAA,EACA//C,KAAAu7B,kBAAAA,EACAv7B,KAAAskC,YAAAA,EACAtkC,KAAA2+C,sBAAAA,EACA3+C,KAAA4wC,iBAAAA,EAjBZ5wC,KAAAqtD,iBAAmB7jB,EAAAA,iBAQnBxpC,KAAAy7B,kBAAuCC,EAAAA,kBAAkBC,WAgH3D,OApGEyxB,EAAAltD,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAKmzC,MAAQnzC,KAAKu7B,kBAAkBpD,YACpCn4B,KAAKi4C,SAAWj4C,KAAKu7B,kBAAkB2c,aACvCl4C,KAAKstD,iBAAmBttD,KAAKk/C,wBAAwBS,qBACrD3/C,KAAKutD,gBAAkBvtD,KAAKm/C,uBAAuBU,oBACnD7/C,KAAKyxC,iBAAmBzxC,KAAK4wC,iBAAiBpV,mBAC5Cx7B,KAAKy7B,mBAGPz7B,KAAKwtD,cAAgBxtD,KAAKk/C,wBACvBgG,0BACAv6C,KACCqF,EAAAA,KAAI,SAACi8C,GACc,OAAbA,GACFpmD,EAAKq5C,wBAAwBuO,iCAKrCztD,KAAK0tD,aAAe1tD,KAAKstD,iBAAiB3iD,KACxCyrB,EAAAA,WAAU,SAACyqB,GACT,OAAAh7C,EAAKk6C,mBAAmB4N,WAAW9M,EAAQuG,QAAQzuB,YAErD3oB,EAAAA,KAAI,SAACo3C,GACa,OAAZA,GACFvhD,EAAKk6C,mBAAmB6N,2BAG5BhjD,EAAAA,KAAI,SAACw8C,GAAqB,OAAAA,GAAWA,EAAQ9Z,UAIjD8f,EAAAltD,UAAA2tD,uBAAA,SACEpJ,EACAqJ,GAEA,OAAO78C,EAAAA,cAAc,CACnBjR,KAAKskC,YAAYqmB,UAAU,wBAC1BhgD,KACDC,EAAAA,KAAI,SAACtF,OAACyoD,EAADxrD,EAAA+C,EAAA,GAAC,GACCwoD,IACHA,EAAcrJ,EAAgB2C,QAAQzuB,SAGxC,IAAIuuB,EAAS,GAKb,OAJIzC,EAAgByC,QAAUzC,EAAgByC,OAAOvuB,UACnDuuB,EAASzC,EAAgByC,OAAOvuB,QAAU,MAGrC,CACLuzB,MAAO6B,EACP5E,SAAU1E,EAAgBoC,UAAY,IAAMpC,EAAgBqC,SAC5DsC,KAAM,CACJ3E,EAAgBsC,MAChBtC,EAAgBuC,MAChBvC,EAAgBwC,KAAO,KAAOC,EAAS4G,EACvCrJ,EAAgB4C,WAChB5C,EAAgB4E,aAO1B+D,EAAAltD,UAAA8tD,oBAAA,SAAoBjQ,GAClB,OAAO9sC,EAAAA,cAAc,CACnBjR,KAAKskC,YAAYqmB,UAAU,qCAC1BhgD,KACDC,EAAAA,KAAI,SAACtF,GACH,MAAO,CACL4mD,MAFC3pD,EAAA+C,EAAA,GAAC,GAGF6jD,SAAUpL,EAAazQ,KACvB8b,KAAM,CAACrL,EAAa9gB,mBAM5BmwB,EAAAltD,UAAA+tD,qBAAA,SAAqBtE,GACnB,OAAO14C,EAAAA,cAAc,CACnBjR,KAAKskC,YAAYqmB,UAAU,uBAC3B3qD,KAAKskC,YAAYqmB,UAAU,sBAAuB,CAChDC,MAAOjB,EAAelD,YACtBmC,KAAMe,EAAejD,eAEtB/7C,KACDC,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAACyoD,EAAAn1C,EAAA,GAAW2yC,EAAA3yC,EAAA,GACf,MAAO,CACLszC,MAAO6B,EACP5E,SAAUQ,EAAepD,kBACzB6C,KAAM,CAACO,EAAenD,WAAY+E,SAM1C6B,EAAAltD,UAAAguD,mBAAA,SAAmBC,GACjB,IAAMrgC,EAAO9tB,KAAK2+C,sBAAsBhC,gBAAgBwR,GACxD,OAAOrgC,GAAQA,EAAKiuB,oDA3GepW,EAAAA,+BACDC,EAAAA,8BACJe,EAAAA,0BACD/I,EAAAA,yBACNmI,EAAAA,0BACUyW,UACLphB,MAlBnBgyB,EAAqBnsD,EAAA,CALjCkZ,EAAAA,UAAU,CACTtQ,SAAU,mBACV5D,SAAA,q5GACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B6kC,oBCuBb,SAAAgB,KAAiC,OAApBA,EAAkBntD,EAAA,CA/B9B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACA+c,GACA0wB,GACAv2B,EAAAA,WACAuL,EAAAA,UACAD,EAAAA,aACA8mB,GACAnyB,EAAAA,sBAEF3R,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb+sC,oBAAqB,CACnBnqD,UAAWkpD,GACXtnC,OAAQ,CACN24B,GACA9F,GACA4L,GACAiB,GACA2H,SAMVjjD,aAAc,CAACkjD,IACf7rC,gBAAiB,CAAC6rC,IAClBjjD,QAAS,CAACijD,OAECgB,oBCsCX,SAAAE,EACY9gB,EACA0R,EACAzU,EACAsV,EACAx9B,EACAmuB,GALA1wC,KAAAwtC,GAAAA,EACAxtC,KAAAk/C,wBAAAA,EACAl/C,KAAAyqC,YAAAA,EACAzqC,KAAA+/C,mBAAAA,EACA//C,KAAAuiB,qBAAAA,EACAviB,KAAA0wC,aAAAA,EAtDZ1wC,KAAAkmD,iBAA4C,IAAIh/C,EAAAA,gBAAwB,IAYxElH,KAAAuuD,mBAAoB,EAMpBvuD,KAAAwuD,eAAgB,EAGhBxuD,KAAAyuD,cAAgB,IAAIhhD,EAAAA,aAGpBzN,KAAA0uD,cAAgB,IAAIjhD,EAAAA,aAMpBzN,KAAA2uD,YAAyB3uD,KAAKwtC,GAAGv6B,MAAM,CACrCm0C,QAASpnD,KAAKwtC,GAAGv6B,MAAM,CACrB0lB,QAAS,CAAC,KAAMiV,EAAAA,WAAWC,YAE7B+gB,UAAW,CAAC,IACZ/H,UAAW,CAAC,GAAIjZ,EAAAA,WAAWC,UAC3BiZ,SAAU,CAAC,GAAIlZ,EAAAA,WAAWC,UAC1BkZ,MAAO,CAAC,GAAInZ,EAAAA,WAAWC,UACvBmZ,MAAO,CAAC,IACRC,KAAM,CAAC,GAAIrZ,EAAAA,WAAWC,UACtBqZ,OAAQlnD,KAAKwtC,GAAGv6B,MAAM,CACpB0lB,QAAS,CAAC,KAAMiV,EAAAA,WAAWC,YAE7BwZ,WAAY,CAAC,GAAIzZ,EAAAA,WAAWC,UAC5Bwb,MAAO,GACPzI,eAAgB,EAAC,KA+LrB,OAnLE0N,EAAApuD,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KAEEA,KAAKunD,WAAavnD,KAAK+/C,mBAAmB8O,uBAAuBlkD,KAC/DqF,EAAAA,KAAI,SAACy3C,GACmC,IAAlCjoD,OAAOorB,KAAK68B,GAAW3mD,QACzB+E,EAAKk6C,mBAAmB6N,4BAM9B5tD,KAAK8uD,QAAU9uD,KAAKyqC,YAAYskB,YAAYpkD,KAC1CqF,EAAAA,KAAI,SAACg/C,GACgC,IAA/BxvD,OAAOorB,KAAKokC,GAAQluD,QACtB+E,EAAK4kC,YAAYwkB,gBAGrBrkD,EAAAA,KAAI,SAACokD,GACHA,EAAOlkC,KAAK+U,IAEZ,OAAAj9B,EAAA,CADkB,CAAE+hB,KAAM,GAAI2oB,KAAM,UACd0hB,OAK1BhvD,KAAKwoD,SAAWxoD,KAAKkmD,iBAAiBv7C,KACpCyrB,EAAAA,WAAU,SAACgxB,GAAY,OAAAvhD,EAAKk6C,mBAAmB0I,WAAWrB,MAC1Dp3C,EAAAA,KAAI,SAAC04C,GACH,IAAMC,EAAgB9iD,EAAK8oD,YAAYjmD,IAAI,kBACvCggD,GAAWA,EAAQ5nD,OAAS,EAC9B6nD,EAAc9R,SAEd8R,EAAc/R,cAMpB52C,KAAKkoD,iBAAmBloD,KAAKk/C,wBAC1BiJ,gCACA/5C,WAAU,SAACg6C,GACe,SAArBA,EAAQC,SACVxiD,EAAKq5C,wBAAwBoJ,kCACC,WAArBF,EAAQC,SACjBxiD,EAAK4oD,cAAcxgD,KAAKpI,EAAK8oD,YAAYtsD,OACX,WAArB+lD,EAAQC,UAGfD,EAAQn7B,OAAOA,OAAO9oB,MACpB,SAACxB,GAAsB,MAAkB,cAAlBA,EAAMusD,WAG/BrpD,EAAK0c,qBAAqBra,IACxB,CAAE9G,IAAK,6BACPwjB,EAAAA,kBAAkBumB,gBAGpBtlC,EAAK0c,qBAAqBra,IACxB,CAAE9G,IAAK,8BACPwjB,EAAAA,kBAAkBumB,gBAGtBtlC,EAAKq5C,wBAAwBoJ,mCACC,WAArBF,EAAQC,UACjBxiD,EAAK0iD,qBAAqBH,MAI5BpoD,KAAKmvD,aAAwD,IAAzC3vD,OAAOorB,KAAK5qB,KAAKmvD,aAAaruD,SACpDd,KAAK2uD,YAAYS,WAAWpvD,KAAKmvD,aAEjCnvD,KAAK0pD,gBAAgB1pD,KAAKmvD,YAAY/H,SAClCpnD,KAAKmvD,YAAYjI,QACnBlnD,KAAKqvD,eAAervD,KAAKmvD,YAAYjI,UAK3CoH,EAAApuD,UAAAwpD,gBAAA,SAAgBtC,GACdpnD,KAAK2uD,YAAsB,SAAEvH,QAAkB,SAAEzuB,QAAQzK,SACvDk5B,EAAQzuB,SAEV34B,KAAKkmD,iBAAiB9jD,KAAKglD,EAAQzuB,UAGrC21B,EAAApuD,UAAAmvD,eAAA,SAAenI,GACblnD,KAAK2uD,YAAsB,SAAEzH,OAAiB,SAAEvuB,QAAQzK,SACtDg5B,EAAOvuB,UAIX21B,EAAApuD,UAAAovD,qBAAA,WACEtvD,KAAK2uD,YAAsB,SAAE/N,eAAe1yB,SAC1CluB,KAAK2uD,YAAYtsD,MAAMu+C,iBAI3B0N,EAAApuD,UAAAmlD,KAAA,WACErlD,KAAK0uD,cAAczgD,QAGrBqgD,EAAApuD,UAAAupD,cAAA,WAAA,IAAA5jD,EAAA7F,KACMA,KAAK2uD,YAAY5gB,OACf/tC,KAAK2uD,YAAYjmD,IAAI,UAAUrG,MAAMs2B,UACvC34B,KAAKuvD,WAAavvD,KAAKwoD,SAAS79C,KAAKmV,EAAAA,KAAK,IAAI1R,WAAU,SAACs6C,GACvD,IAAM/5C,EAAM+5C,EAAQ54C,MAClB,SAACo3C,GACC,OAAAA,EAAOvuB,UACP9yB,EAAK8oD,YAAYxvB,SAAiB,OAAE98B,MAAMs2B,WAE9Cn5B,OAAOgB,OAAOqF,EAAK8oD,YAAYtsD,MAAM6kD,OAAQ,CAC3CC,aAAcx4C,EAAIw4C,mBAKpBnnD,KAAK2uD,YAAYxhC,MACnBntB,KAAKk/C,wBAAwBuK,cAAczpD,KAAK2uD,YAAYtsD,OAI5DrC,KAAKyuD,cAAcxgD,UAAK9G,IAG1BnH,KAAK2uD,YAAY3gB,oBAIrBsgB,EAAApuD,UAAAqoD,qBAAA,SAAqBH,GAArB,IAAAviD,EAAA7F,KACOA,KAAKspD,2BACRtpD,KAAKspD,yBAA2BtpD,KAAK0wC,aAAahc,KAChD+wB,GACA,CAAExS,UAAU,EAAM3oC,KAAM,OAE1BtK,KAAKspD,yBAAyBpW,kBAAkB0S,eAAiB5lD,KAAK2uD,YAAYtsD,MAClFrC,KAAKspD,yBAAyBpW,kBAAkByS,mBAC9CyC,EAAQzC,mBACV3lD,KAAKspD,yBAAyBC,OAC3BhiB,MAAK,SAACsZ,GACLh7C,EAAKq5C,wBAAwBoJ,kCACzBzH,IACFA,EAAUrhD,OAAOgB,OACf,CACEouD,UAAW/oD,EAAK8oD,YAAYtsD,MAAMusD,UAClCvF,MAAOxjD,EAAK8oD,YAAYtsD,MAAMgnD,MAC9B4C,UAAU,GAEZpL,GAEFh7C,EAAK4oD,cAAcxgD,KAAK4yC,IAE1Bh7C,EAAKyjD,yBAA2B,QAEjCE,OAAM,WAEL3jD,EAAKq5C,wBAAwBoJ,kCAC7B,IAAMzH,EAAUrhD,OAAOgB,OACrB,CACEyrD,UAAU,GAEZpmD,EAAK8oD,YAAYtsD,OAEnBwD,EAAK4oD,cAAcxgD,KAAK4yC,GACxBh7C,EAAKyjD,yBAA2B,UAKxCgF,EAAApuD,UAAAmP,YAAA,WACErP,KAAKk/C,wBAAwBoJ,kCAEzBtoD,KAAKkoD,kBACPloD,KAAKkoD,iBAAiBt6C,cAGpB5N,KAAKuvD,YACPvvD,KAAKuvD,WAAW3hD,wDAxLJqgC,EAAAA,mBACqBtI,EAAAA,+BACZe,EAAAA,mBACOC,EAAAA,0BACElhB,EAAAA,4BACR8O,MAnD1BtzB,EAAA,CADC0I,EAAAA,2CAID1I,EAAA,CADC0I,EAAAA,8CAID1I,EAAA,CADC0I,EAAAA,8CAID1I,EAAA,CADC0I,EAAAA,iDAID1I,EAAA,CADC0I,EAAAA,6CAID1I,EAAA,CADC0I,EAAAA,6CAID1I,EAAA,CADCsO,EAAAA,8CAIDtO,EAAA,CADCsO,EAAAA,8CA3BU++C,EAAoBrtD,EAAA,CALhCkZ,EAAAA,UAAU,CACTtQ,SAAU,kBACV5D,SAAA,++OACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B+lC,oBCXb,SAAAkB,KAAgC,OAAnBA,EAAiBvuD,EAAA,CAf7B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACA4b,EAAAA,oBACAD,EAAAA,YACA6G,EAAAA,aACA0H,EAAAA,eACAvV,GACAuC,EAAAA,WACAkM,IAEFnjB,aAAc,CAACokD,GAAsB7I,IACrClkC,gBAAiB,CAACkkC,IAClBt7C,QAAS,CAACmkD,GAAsB7I,OAErB+J,oBChBX,SAAAC,EAAoBxP,GAAAjgD,KAAAigD,uBAAAA,SAEpBwP,EAAAvvD,UAAA04C,YAAA,WACE,OAAO54C,KAAKigD,uBAAuBT,oEAHOP,uHADjCwQ,EAA0BxuD,EAAA,CAHtC+B,EAAAA,WAAW,CACVC,WAAY,UAEDwsD,oBCyBX,SAAAC,EACY3P,EACA7vC,EACAgvC,EACAP,EACA9rB,EACAyR,EACA/I,GANAv7B,KAAA+/C,mBAAAA,EACA//C,KAAAkQ,eAAAA,EACAlQ,KAAAk/C,wBAAAA,EACAl/C,KAAA2+C,sBAAAA,EACA3+C,KAAA6yB,eAAAA,EACA7yB,KAAAskC,YAAAA,EACAtkC,KAAAu7B,kBAAAA,EAdZv7B,KAAA2vD,8BAA+B,EAI/B3vD,KAAA4vD,aAAc,EACd5vD,KAAAo+C,iBAAkB,EA4IpB,OAhIEsR,EAAAxvD,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAKiqD,WAAajqD,KAAK+/C,mBAAmB8P,sBAC1C7vD,KAAK8vD,mBAAqB9vD,KAAK+/C,mBAAmBO,eAClDtgD,KAAK+vD,iBAAmB/vD,KAAKk/C,wBAAwBS,qBAErD3/C,KAAKwqD,OAASv5C,EAAAA,cAAc,CAC1BjR,KAAK8vD,mBACL9vD,KAAK+vD,iBACL/vD,KAAKskC,YAAYqmB,UAAU,0CAC3B3qD,KAAKskC,YAAYqmB,UAAU,qCAC3B3qD,KAAKskC,YAAYqmB,UAAU,0BAC1BhgD,KACDC,EAAAA,KACE,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GACCo7C,EAAA9nC,EAAA,GACAqzC,EAAArzC,EAAA,GACAo3C,EAAAp3C,EAAA,GACAq3C,EAAAr3C,EAAA,GACAuyC,EAAAvyC,EAAA,GAGA,GACE8nC,EAAU5/C,UACRmrD,GAA6C,IAAjCzsD,OAAOorB,KAAKqhC,GAAUnrD,QACpC,CACA,IAAM8/C,EAAiBF,EAAU5wC,MAC/B,SAAC+wC,GAAY,OAAAA,EAAQD,kBAEvBqL,EAAWrL,EACX/6C,EAAKqqD,cAActP,GAErB,OAAOF,EAAU91C,KAAI,SAACi2C,GAQpB,MAAO,CACLA,QAAOA,EACPsP,KATWtqD,EAAKuqD,eAChBvP,EACAoL,EACA+D,EACAC,EACA9E,WAWLnrD,KAAKu7B,kBAAkBsjB,cAG1B7+C,KAAKo+C,iBAAkB,EAFvBp+C,KAAK+/C,mBAAmBU,iBAM5BiP,EAAAxvD,UAAAkwD,eAAA,SACEvP,EACAoL,EACA+D,EACAC,EACA9E,GAEA,IAAIjE,EAAS,GAMb,OAJIrG,EAAQqG,QAAUrG,EAAQqG,OAAOvuB,UACnCuuB,EAASrG,EAAQqG,OAAOvuB,QAAU,MAG7B,CACLuzB,MAAOrL,EAAQD,eAAiBoP,EAA6B,GAC7D7G,SAAUtI,EAAQgG,UAAY,IAAMhG,EAAQiG,SAC5CsC,KAAM,CACJvI,EAAQkG,MACRlG,EAAQmG,MACRnG,EAAQoG,KAAO,KAAOC,EAASrG,EAAQuG,QAAQzuB,QAC/CkoB,EAAQwG,WACRxG,EAAQwI,OAEV+C,QAAS,CAAC,CAAE9e,KAAM2iB,EAAuB38C,MAAO,SAChD+4C,OAAQJ,GAAYA,EAAS5rC,KAAOwgC,EAAQxgC,GAAK8qC,EAAe,KAIpEuE,EAAAxvD,UAAAgwD,cAAA,SAAcrP,GACZ7gD,KAAKk/C,wBAAwB4B,mBAAmBD,IAGlD6O,EAAAxvD,UAAAmwD,WAAA,SAAWxP,GAAX,IAAAh7C,EAAA7F,KACQswD,EAActwD,KAAK+vD,iBAAiB3hD,WAAU,SAAC69C,GAC/CA,GAAYA,EAASsE,kBACvB1qD,EAAKymD,SACLgE,EAAY1iD,kBAIhB5N,KAAK4vD,aAAc,EAEnB5vD,KAAK8vD,mBAAmBnlD,KAAKmV,EAAAA,KAAK,IAAI1R,WAAU,SAACsyC,GAC/CA,EAAUnyC,SAASsyC,GACfh7C,EAAKqqD,cAAcrP,GACnBh7C,EAAKq5C,wBAAwBsR,oBAAoB3P,OAIzD6O,EAAAxvD,UAAAuwD,mBAAA,WACEzwD,KAAK2vD,8BAA+B,GAGtCD,EAAAxvD,UAAAwwD,mBAAA,SAAmBnE,QAAA,IAAAA,IAAAA,GAAA,GACjBvsD,KAAK2vD,8BAA+B,EAChCpD,GACFvsD,KAAKusD,cAITmD,EAAAxvD,UAAAosD,OAAA,WACEtsD,KAAKkQ,eAAeE,GAClBpQ,KAAK2+C,sBAAsB3B,uBAAuBh9C,KAAK6yB,kBAI3D68B,EAAAxvD,UAAAqsD,WAAA,WACEvsD,KAAKkQ,eAAeE,GAClBpQ,KAAK2+C,sBAAsBvB,2BACzBp9C,KAAK6yB,iBACF,kDAtIuB8T,EAAAA,0BACJr2B,EAAAA,sBACSq1B,EAAAA,+BACF6W,UACP5oB,EAAAA,sBACHmS,EAAAA,0BACMnI,EAAAA,qBAhBpB8xB,EAAwBzuD,EAAA,CALpCkZ,EAAAA,UAAU,CACTtQ,SAAU,sBACV5D,SAAA,u7FACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BmnC,oBCmBb,SAAAiB,KAAoC,OAAvBA,EAAqB1vD,EAAA,CA7BjC8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aACA+iC,GACAxoC,GACAvF,GACAN,EAAAA,WACA6iC,GACAH,IAEFp0C,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbsvC,wBAAyB,CACvB1sD,UAAWwrD,GACX5pC,OAAQ,CACN24B,GACA9F,GACA8W,SAMVvlD,aAAc,CAACwlD,IACfnuC,gBAAiB,CAACmuC,IAClBvlD,QAAS,CAACulD,OAECiB,oBCZb,SAAAE,KAAsC,OAAzBA,EAAuB5vD,EAAA,CAhBnC8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAm5C,GACAG,GACAc,GACAL,GACAH,GACAyB,GACAkH,GACAS,GACA1Z,GACA6a,GACAuC,OAGSE,oBClBX,SAAAC,EACY5gD,EACAuS,EACA8Y,GAFAv7B,KAAAkQ,eAAAA,EACAlQ,KAAAyiB,YAAAA,EACAziB,KAAAu7B,kBAAAA,SAGZu1B,EAAA5wD,UAAA04C,YAAA,WAAA,IAAA/yC,EAAA7F,KACE,OAAOA,KAAKyiB,YAAYonB,eAAel/B,KACrCC,EAAAA,KAAI,SAACk/B,GACH,GAAIA,EAAMmB,aACRplC,EAAKqK,eAAeE,GAAG,CAAEC,QAAS,cAC7B,GAAIxK,EAAK01B,kBAAkBsjB,cAEhC,OADAh5C,EAAKqK,eAAeE,GAAG,CAAEC,QAAS,UAC3B,EAET,OAAQy5B,EAAMmB,2DAdQ36B,EAAAA,sBACHoV,EAAAA,mBACMkY,EAAAA,oNAJpBkzB,EAAoB7vD,EAAA,CAHhC+B,EAAAA,WAAW,CACVC,WAAY,UAED6tD,oBrCNb,SAAAC,4HAAsBA,EAAc9vD,EAAA,CAJnC+B,EAAAA,WAAW,CACVC,WAAY,OACZC,YAAaC,EAAAA,UAEO4tD,SAItB,cAOYpV,GAAAA,EAAAA,yBAAAA,EAAAA,uBAAsB,KAChC,OAAA,SACAA,GAAA,MAAA,0BsCTA,SAAAqV,EACYhtD,EACAitD,GADAjxD,KAAAgE,OAAAA,EACAhE,KAAAixD,qBAAAA,EAJJjxD,KAAAkxD,WAAa,IAAIhqD,EAAAA,gBAA4B,WAOrD8pD,EAAA9wD,UAAAixD,aAAA,WACE,OAAOnxD,KAAKkxD,YAGdF,EAAA9wD,UAAAgI,IAAA,SAAI9G,EAAaD,GACf,IAAMiwD,EAAkBpxD,KAAKgE,OAAOqtD,UAAUvhD,MAC5C,SAACwhD,GAAa,OAAAA,EAASlwD,MAAQA,KAGjC,GAAIgwD,EAAO,CACT,IAAMloD,EAAuBlJ,KAAKkxD,WAAW7uD,MAC7C6G,EAASqoD,OAAOvxD,KAAKwxD,wBAAwBpwD,GAAM,EAAG,CACpDD,OAAMA,EACNswD,QAASL,EAAMK,QACfppD,SAAU+oD,EAAM/oD,SAChBjH,IAAGA,IAELpB,KAAKkxD,WAAW9uD,KAAK8G,KAIzB8nD,EAAA9wD,UAAAkF,OAAA,SAAOhE,GAKL,GAJwBpB,KAAKgE,OAAOqtD,UAAUvhD,MAC5C,SAACwhD,GAAa,OAAAA,EAASlwD,MAAQA,KAGtB,CACT,IAAI8H,EAAuBlJ,KAAKkxD,WAAW7uD,MAC3C6G,EAAWA,EAAS7D,QAAO,SAACisD,GAAa,OAAAA,EAASlwD,MAAQA,KAC1DpB,KAAKkxD,WAAW9uD,KAAK8G,KAIzB8nD,EAAA9wD,UAAAwxD,eAAA,SAAeJ,GACb,IAAMnwD,EACJmwD,EAASnwD,kBAAkBgO,YACvBmiD,EAASnwD,OACRmwD,EAASnwD,OAAmBwmC,cAG7BjyB,EACJ1V,KAAKixD,qBAAqB98C,mBAAmBhT,IAAWA,EAGpDwwD,EAAcj8C,EAAetD,aAAa,YAC3Cu/C,GACHj8C,EAAemD,aAAa,WAAY,MAG1CnD,EAAerE,QAGVsgD,GACHj8C,EAAek8C,gBAAgB,aAIzBZ,EAAA9wD,UAAAsxD,wBAAV,SAAkCpwD,GAKhC,IAJA,IAAI4V,EAAgBhX,KAAKgE,OAAOqtD,UAAUx6C,WACxC,SAACy6C,GAAa,OAAAA,EAASlwD,MAAQA,kBAI/B4V,IACA,IAAM66C,EAAqBC,EAAK9tD,OAAOqtD,UAAUr6C,GACjD,GAAI66C,EAAU,CACZ,IACMT,EADuBU,EAAKZ,WAAW7uD,MACdwU,WAC7B,SAACy6C,GAAa,OAAAA,EAASlwD,MAAQywD,EAASzwD,OAE1C,GAAIgwD,GAAS,eACJA,EAAQ,YATdp6C,EAAQ,GAAC,gDAahB,OAAO,4CA/EW+5C,UACc73C,yIALvB83C,EAAe/vD,EAAA,CAH3B+B,EAAAA,WAAW,CACVC,WAAY,UAED+tD,oBCKX,SAAAe,EAAoBC,GAAAhyD,KAAAgyD,gBAAAA,EAFpBhyD,KAAAkxD,WAAqClxD,KAAKgyD,gBAAgBb,eAO5D,OAHEY,EAAA7xD,UAAAwxD,eAAA,SAAeJ,GACbtxD,KAAKgyD,gBAAgBN,eAAeJ,6CAHDN,MAH1Be,EAAiB9wD,EAAA,CAL7BkZ,EAAAA,UAAU,CACTtQ,SAAU,eACV5D,SAAA,sPACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BwpC,MCRAE,GAAwC,CACnDZ,UAAW,CACT,CACEjwD,IAAK,YACLqwD,QAAS,0BAEX,CACErwD,IAAK,UACLqwD,QAAS,wBAEX,CAAErwD,IAAK,YAAaqwD,QAAS,0CCH/B,SAAAS,EACYzgD,EACAugD,GADAhyD,KAAAyR,WAAAA,EACAzR,KAAAgyD,gBAAAA,EAUd,OAPEE,EAAAhyD,UAAAqJ,SAAA,WACEvJ,KAAKgyD,gBAAgB9pD,IAAIlI,KAAKmyD,WAAYnyD,KAAKyR,WAAWtM,gBAG5D+sD,EAAAhyD,UAAAmP,YAAA,WACErP,KAAKgyD,gBAAgB5sD,OAAOpF,KAAKmyD,sDATX9/C,EAAAA,kBACK2+C,MAJpB/vD,EAAA,CAAR0I,EAAAA,0CADUuoD,EAAiBjxD,EAAA,CAH7B2I,EAAAA,UAAU,CACTC,SAAU,kBAECqoD,oBCiCb,SAAAE,KAA6B,OAAhBA,EAAcnxD,EAAA,CArB1B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAkX,EAAAA,WACAkxC,EAAAA,aAAaC,WAAWL,IACxB54C,IAEFnP,aAAc,CAAC6nD,GAAmBG,IAClC/nD,QAAS,CAAC+nD,IACV3wC,gBAAiB,CAACwwC,IAElBtiD,UAAW,CACToP,EAAAA,qBAAqBozC,IACrB,CACEthD,QAASy4B,EAAAA,gBACTC,WAAYkpB,GACZj5B,KAAM,CAACzyB,EAAAA,yBAA0BgB,GACjCxD,OAAO,OAIA+tD,MAKb,SAAgBG,GACd3sD,EACA0D,GAQA,OANgB,WACd,IAAMq6B,EAAU/9B,EAAyBM,wBACvC6rD,IAEFzoD,EAAcpB,IAAI,gBAAsBy7B,EAAS7gC,EAAAA,eAAeyF,2BCzClE,SAAAiqD,EAAY3P,GAAZ,IAAAh9C,EAAA7F,KAFAA,KAAAyyD,WAAuC,IAAIvrD,EAAAA,iBAAgB,GAGzD27C,EAAO6P,OACJ/nD,KAAKtF,EAAAA,QAAO,SAACiO,GAAU,OAAAA,aAAiBq/C,EAAAA,oBACxCvkD,WAAU,WACTvI,EAAK+sD,QAAO,aAOlBJ,EAAAtyD,UAAA0yD,OAAA,SAAOC,GACDA,EACF7yD,KAAKyyD,WAAWrwD,MAAK,GAErBpC,KAAKyyD,WAAWrwD,MAAMpC,KAAKyyD,WAAWpwD,iDAftB6gD,EAAAA,iIAHTsP,EAAoBvxD,EAAA,CAHhC+B,EAAAA,WAAW,CACVC,WAAY,UAEDuvD,oBCEX,SAAAM,EAAoBC,GAAA/yD,KAAA+yD,qBAAAA,EAStB,OAPED,EAAA5yD,UAAA0yD,OAAA,WACE5yD,KAAK+yD,qBAAqBH,UAG5BpzD,OAAAmC,eAAImxD,EAAA5yD,UAAA,aAAU,KAAd,WACE,OAAOF,KAAK+yD,qBAAqBN,qFAPOD,MAD/BM,EAAsB7xD,EAAA,CALlCkZ,EAAAA,UAAU,CACTtQ,SAAU,oBACV5D,SAAA,6XACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BuqC,oBCWb,SAAAE,KAAkC,OAArBA,EAAmB/xD,EAAA,CAf/B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,cACVwF,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbwxC,uBAAwB,CACtB5uD,UAAW4uD,QAKnB5oD,aAAc,CAAC4oD,IACf3oD,QAAS,CAAC2oD,IACVvxC,gBAAiB,CAACuxC,OAEPE,oBCZb,SAAAC,KAA2B,OAAdA,EAAYhyD,EAAA,CAJxB8I,EAAAA,SAAS,CACRC,QAAS,CAACF,EAAiByG,EAAmBC,WAC9CrG,QAAS,CAACL,MAECmpD,MC4BbC,GAAA,WA0DE,SAAAA,EACY9X,EACAtY,EACAl/B,EACA6N,EACA+vB,EACAwQ,GANZ,IAAAnsC,EAAA7F,KACYA,KAAAo7C,WAAAA,EACAp7C,KAAA8iC,wBAAAA,EACA9iC,KAAA4D,SAAAA,EACA5D,KAAAyR,WAAAA,EACAzR,KAAAwhC,qBAAAA,EACAxhC,KAAAgyC,GAAAA,EAzC6BhyC,KAAAmzD,YAAa,EAMrBnzD,KAAAozD,WAAY,EAMCpzD,KAAAqzD,eAAgB,EAEpDrzD,KAAAszD,UAAqC,IAAIpsD,EAAAA,qBAAgBC,GAIzDnH,KAAAuzD,MAAqCvzD,KAAKszD,UAAU3oD,KAC5DyrB,EAAAA,WAAU,SAAC/tB,GAAa,OAAAxC,EAAKu1C,WAAWoY,eAAenrD,MACvD4D,EAAAA,qBAAqBjM,KAAKyzD,aAI5BzzD,KAAA0zD,YAAsD1zD,KAAKuzD,MAAM5oD,KAC/DC,EAAAA,KAAI,SAAC+oD,GAAI,IAAAruD,EAAA,OAAqB,QAArBA,EAAKquD,MAAAA,OAAI,EAAJA,EAAMllD,kBAAU,IAAAnJ,EAAAA,EAAI,OAG1BtF,KAAA0N,aAA6B,IAAIC,EAAAA,aAGnC3N,KAAA4zD,sBAAwB,EAqGlC,OAnJWp0D,OAAAmC,eAAIuxD,EAAAhzD,UAAA,WAAQ,KAGrB,WACE,OAAOF,KAAKszD,UAAUjxD,WAJf,SAAaA,GACpBrC,KAAKszD,UAAUlxD,KAAKC,oCA0DtB6wD,EAAAhzD,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAK0N,aAAaxF,IAChBlI,KAAKuzD,MAAM5oD,KAAKqF,EAAAA,KAAI,SAAC2jD,GAAS,OAAA9tD,EAAKnE,SAASiyD,OAAQvlD,WAAU,SAAC/L,GAC7DwD,EAAK4I,YAAapM,MAAAA,OAAK,EAALA,EAAOoM,aAAc,GACvC5I,EAAKmsC,GAAG9iC,oBAKJgkD,EAAAhzD,UAAAwB,SAAV,SAAmBiyD,WACbj1C,EAAM1e,KAAK6zD,OAAS,GAEpB7zD,KAAK8zD,cAAgBp1C,EAAI1M,QAAQhS,KAAK8zD,eAAiB,IACzDp1C,EAAMA,EAAI6pB,QAAQvoC,KAAK8zD,aAAc,KAEnC9zD,KAAKszD,UAAUjxD,QACjBqc,GAAO,IAAI1e,KAAKszD,UAAUjxD,MAC1BrC,KAAK8zD,aAAe9zD,KAAKszD,UAAUjxD,OAIrCrC,KAAK+zD,SAA0B,QAAhBzuD,EAAAquD,MAAAA,OAAI,EAAJA,EAAMllD,kBAAU,IAAAnJ,OAAA,EAAAA,EAAExE,SAAU,EAC3Cd,KAAKqzD,eAAgC,QAAhBz6C,EAAA+6C,MAAAA,OAAI,EAAJA,EAAMllD,kBAAU,IAAAmK,OAAA,EAAAA,EAAE9X,QAAS,EAC5C4d,GAAOA,IAAQ1e,KAAK6zD,QACtB7zD,KAAK6zD,MAAQn1C,GAGf1e,KAAKg0D,sBAAsBL,IAO7Bn0D,OAAAmC,eAAcuxD,EAAAhzD,UAAA,UAAO,KAKrB,WACE,OAAOF,KAAK4zD,2BANd,SAAsBrhC,GACpBvyB,KAAK4zD,sBAAwBrhC,EAC7BvyB,KAAKozD,UAAYpzD,KAAK4zD,sBAAwB,mCAWhDV,EAAAhzD,UAAA+zD,SAAA,SAASC,GACHA,IACFl0D,KAAK+zD,UACL/zD,KAAKgyC,GAAG9iC,iBAQZgkD,EAAAhzD,UAAAi0D,yBAAA,SAAyBpkD,GAIvB,MAAO,CAAElD,aAHY7M,KAAKwhC,qBAAqBjB,wBAC7CxwB,KAKMmjD,EAAAhzD,UAAAuzD,WAAV,SAAqBW,EAAsBvkC,SACzC,OACEA,EAAQphB,aACM,QAAdnJ,EAAA8uD,EAAI3lD,kBAAU,IAAAnJ,OAAA,EAAAA,EAAExE,UAAW+uB,EAAQphB,WAAW3N,SAC7CszD,EAAI3lD,WAAWqB,MACd,SAAC1L,EAAI4S,GAAU,OAAA5S,EAAGs9B,MAAQ7R,EAAQphB,WAAWuI,GAAO0qB,QAKlDwxB,EAAAhzD,UAAA8zD,sBAAR,SAA8BL,GACxBA,GACF3zD,KAAK8iC,wBAAwBS,qBAC3BvjC,KAAKyR,WAAWtM,cAChBnF,KAAK4D,SACL,CAAEywD,SAAUV,KAKlBT,EAAAhzD,UAAAmP,YAAA,iBACmB,QAAjB/J,EAAAtF,KAAK0N,oBAAY,IAAApI,GAAAA,EAAEsI,wDA9FGg0B,EAAAA,kBACa4B,EAAAA,+BACfvqB,EAAAA,iBACE5G,EAAAA,kBACU2tB,UAClB+M,EAAAA,qBAxDP9rC,EAAA,CAAR0I,EAAAA,sCAUuB1I,EAAA,CAAvB0I,EAAAA,QAAS2I,EAAAA,2CAK+BrR,EAAA,CAAxCqR,EAAAA,YAAY,mBAAoB3I,EAAAA,0CAMA1I,EAAA,CAAhCqR,EAAAA,YAAY,qDAMiCrR,EAAA,CAA7CqR,EAAAA,YAAY,wBAAyB3I,EAAAA,6CAnC3BupD,EAAiBjyD,EAAA,CAL7BkZ,EAAAA,UAAU,CACTtQ,SAAU,8BACV5D,SAAA,kcACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B2qC,GAAb,iBCxBA,SAAAoB,KAA6B,OAAhBA,EAAcrzD,EAAA,CAN1B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcuF,EAAcg5B,IACtC/4B,UAAW,GACXvF,aAAc,CAACgpD,IACf/oD,QAAS,CAAC+oD,OAECoB,oBCGX,SAAAC,EACUrwB,EACAlgC,EACA+lB,EAGAqY,GALApiC,KAAAkkC,IAAAA,EACAlkC,KAAAgE,OAAAA,EACAhE,KAAA+pB,kBAAAA,EAGA/pB,KAAAoiC,SAAAA,EAMFpiC,KAAAw0D,gBAAkB,GAClBx0D,KAAAy0D,SAAW,GA8NrB,OA5NEF,EAAAr0D,UAAAw0D,SAAA,SAASvb,GAAT,IAAAtzC,EAAA7F,KACE,OAAOiR,EAAAA,cAAc,CAACjR,KAAK20D,MAAO30D,KAAK+pB,kBAAkBT,cAAc3e,KACrEC,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAACquB,EAAA/a,EAAA,GAAMsQ,EAAAtQ,EAAA,GACJsgC,EAAevlB,EAAK1tB,SAE1B,MAAO,CAAEqzC,MADKzzC,EAAK+uD,aAAajhC,EAAMwlB,EAASjwB,GAC/BgwB,aAAYA,EAAEhwB,WAAUA,MAE1CkN,EAAAA,WAAU,SAAC9wB,WAAEg0C,EAAAh0C,EAAAg0C,MAAOJ,EAAA5zC,EAAA4zC,aAAchwB,EAAA5jB,EAAA4jB,WAC5BqgC,EAASljD,EAAAA,GAAGizC,OAChB,IAAsB,IAAAnc,EAAAp7B,EAAA8D,EAAKu8B,UAAY,IAAE/E,EAAAF,EAAA/6B,QAAAi7B,EAAA/6B,KAAA+6B,EAAAF,EAAA/6B,OAAE,CACzCmnD,EADgBlsB,EAAAh7B,MACC22C,OAAOuQ,EAAQrQ,EAAcC,EAASjwB,qGAEzD,OAAOqgC,KAETt9C,EAAAA,sBAAqB,SAAC8e,EAAGxrB,GACvB,GAAIwrB,EAAEjqB,SAAWvB,EAAEuB,OACjB,OAAO,EAET,IAAK,IAAIH,EAAI,EAAGA,EAAIoqB,EAAEjqB,OAAQH,IAC5B,GAAIoqB,EAAEpqB,KAAOpB,EAAEoB,GACb,OAAO,EAGX,OAAO,OAWb4zD,EAAAr0D,UAAA20D,gBAAA,SAAgB3b,GAAhB,IAAArzC,EAAA7F,KACE,OAAOA,KAAK+pB,kBAAkBT,YAAY3e,KACxCC,EAAAA,KAAI,SAACse,GACH,IAAKrjB,EAAK7B,OAAO8wD,YAEf,OAAO,KAET,IAAMC,EAAqBlvD,EAAK7B,OAAO8wD,YAAY5b,GAC7Cl1C,EAAS6B,EAAKmvD,wBACAD,EAClB,WACA7rC,GAEF,OAAOllB,EAASA,EAAOixD,SAAW,UAKhCV,EAAAr0D,UAAA00D,aAAR,SAAqBjhC,EAAMwlB,EAASjwB,GAClC,IAAMllB,EAAShE,KAAKk1D,cAClBvhC,EAAK1tB,SACL,QACAkzC,EACAjwB,GAEF,GAAIllB,GAAUA,EAAOs1C,MAAO,CAC1B,IAAM6b,EAAY31D,OAAOorB,KAAK+I,EAAK2lB,OACnC,OAAOt1C,EAAOs1C,MAAMj0C,QAAO,SAACsuD,GAAS,OAAAwB,EAAU5mD,SAASolD,MACnD,OAAKxa,GAIVn5C,KAAKo1D,uBAAuBzhC,EAAMwlB,GAC3B,KAJPn5C,KAAKo1D,uBAAuBzhC,GACrBn0B,OAAOorB,KAAK+I,EAAK2lB,SAO5B95C,OAAAmC,eAAI4yD,EAAAr0D,UAAA,QAAK,KAAT,WACE,OAAOF,KAAKkkC,IAAImxB,iBAAiB1qD,KAAKtF,EAAAA,QAAO,SAACsuB,GAAS,QAAEA,uCAG3Dn0B,OAAAmC,eAAI4yD,EAAAr0D,UAAA,gBAAa,KAAjB,WACE,OAAOF,KAAK20D,MAAMhqD,KAChBtF,EAAAA,QAAO,SAACsuB,GAAS,QAAEA,EAAK1tB,YACxB2E,EAAAA,KAAI,SAAC+oB,GAAe,OAAAA,EAAK1tB,8CAUnBsuD,EAAAr0D,UAAAg1D,cAAV,SACEI,EACAC,EACApc,EACAjwB,GAEA,IAAKlpB,KAAKgE,OAAO8wD,YACf,OAAO,KAET,IAAMC,EAAqB/0D,KAAKgE,OAAO8wD,YAAYQ,GAEnD,OAAInc,EACKn5C,KAAKw1D,wBACVF,EACAC,EACApc,EACAjwB,GAIA6rC,EACK/0D,KAAKg1D,wBACQD,EAClBQ,EACArsC,QAJJ,GASQqrC,EAAAr0D,UAAAs1D,wBAAV,SACEF,EACAC,EACApc,EACAjwB,GAEA,IAAM6rC,EAAqB/0D,KAAKgE,OAAO8wD,YAAYQ,GAEnD,IAAKP,EACH,OAAO,KAKT,IAAMU,EAAgBV,EAAmB5b,GACrC4b,EAAmB5b,GACnBn5C,KAAKgE,OAAO8wD,YAAY3b,GAE5B,IAAKsc,EACH,OAAO,KAGT,IAAMC,EAAmB11D,KAAKg1D,wBACVS,EAClBF,EACArsC,GAGF,OAAIwsC,EAAiB71D,eAAe01D,GAC3BG,EACEX,EAAmB5b,GAASt5C,eAAe01D,GAC7CR,EAAmB5b,GACjBn5C,KAAKgE,OAAO8wD,YAAY3b,GACdn5C,KAAKgE,OAAO8wD,YAAY3b,QADtC,GAUCob,EAAAr0D,UAAA80D,wBAAV,SACEW,EACAJ,EACArsC,WAEI0sC,EAAyBD,EAG7B,IAAKA,IAAqBzsC,EACxB,OAAO0sC,EAIT,GACED,EAAiBzsC,IACjBysC,EAAiBzsC,GAAYrpB,eAAe01D,GAE5C,OAAmBI,EAAiBzsC,GAItC,IAAM2sC,EAAM71D,KAAK+pB,kBAAkBZ,gBAEnC,IAAiB,IAAAvQ,EAAA7W,EAAA8zD,EAAItE,OAAO,EAAGsE,EAAI7jD,QAAQkX,KAAYiU,EAAAvkB,EAAAxW,QAAA+6B,EAAA76B,KAAA66B,EAAAvkB,EAAAxW,OAAE,CAApD,IAAMmnB,EAAE4T,EAAA96B,MAETszD,EAAiBpsC,IACjBosC,EAAiBpsC,GAAI1pB,eAAe01D,KAEpCK,EAAyBD,EAAiBpsC,sGAG9C,OAAOqsC,GASDrB,EAAAr0D,UAAAk1D,uBAAR,SAA+BzhC,EAAYwlB,GACzC,GAAK7yC,EAAAA,YAAL,CAGKtG,KAAKy0D,SAAS9gC,EAAK1tB,YAGtBM,QAAQuvD,KACN,8BAA8Bt2D,OAAOorB,KAAK+I,EAAK2lB,OAAO5kC,KAAK,OAAM,KAEnE1U,KAAKy0D,SAAS9gC,EAAK1tB,WAAY,GAGjC,IAAM8vD,EAAW5c,GAAWxlB,EAAK1tB,SAC5BjG,KAAKw0D,gBAAgBuB,KACxBxvD,QAAQC,KACN,8BAA8BuvD,EAAQ,gFAExC/1D,KAAKw0D,gBAAgBuB,IAAY,8CAvOtBn0B,EAAAA,kBACG7+B,SACW8lB,kCAC1BgQ,EAAAA,UAAQ,CAAA5rB,KACRxH,EAAAA,OAAMkB,KAAA,CAACmzC,SANCya,EAAiBtzD,EAAA,CAD7B+B,EAAAA,aAMIpB,EAAA,EAAAi3B,EAAAA,YACAj3B,EAAA,EAAA6D,EAAAA,OAAOq0C,MANCya,oBC8BX,SAAAyB,EACU5xD,EACAR,EACAqyD,GAHV,IAAApwD,EAAA7F,KACUA,KAAAoE,GAAAA,EACApE,KAAA4D,SAAAA,EACA5D,KAAAi2D,kBAAAA,EA3BDj2D,KAAAk2D,SAAoC,IAAIhvD,EAAAA,qBAAgBC,GACxDnH,KAAAm2D,cAAoCn2D,KAAKi2D,kBAC/CE,cAEMn2D,KAAAo2D,YAAkCp2D,KAAKk2D,SAASvrD,KACvDyrB,EAAAA,WAAU,SAAC+iB,GAAY,OAACA,EAAU9yC,EAAAA,GAAG8yC,GAAWtzC,EAAKswD,iBACrDnmD,EAAAA,KAAI,SAACs9B,GACHznC,EAAKwwD,WAAa/oB,MAIbttC,KAAAi5C,OAA+Bj5C,KAAKk2D,SAASvrD,KACpDyrB,EAAAA,WAAU,SAAC+iB,GAAY,OAAAtzC,EAAKowD,kBAAkBvB,SAASvb,OAGhDn5C,KAAAs2D,cAAoCt2D,KAAKm2D,cAAcxrD,KAC9DyrB,EAAAA,WAAU,SAACmgC,GACT,OAAA1wD,EAAKowD,kBAAkBpB,gBAAgB0B,MAEzCtqD,EAAAA,wBAkBJ,OAxCWzM,OAAAmC,eAAIq0D,EAAA91D,UAAA,UAAO,KAAX,SAAYmC,GACnBrC,KAAKk2D,SAAS9zD,KAAKC,oCAgCrB7C,OAAAmC,eAAIq0D,EAAA91D,UAAA,aAAU,KAAd,SAAewe,GACT1e,KAAKw2D,cACPx2D,KAAK4D,SAAS2B,YAAYvF,KAAKoE,GAAGe,cAAenF,KAAKw2D,cAExDx2D,KAAK4D,SAASc,SAAS1E,KAAKoE,GAAGe,cAAeuZ,GAC9C1e,KAAKw2D,aAAe93C,4EAVRrM,EAAAA,kBACM4G,EAAAA,iBACSs7C,MA9BpBtzD,EAAA,CAAR0I,EAAAA,qCADUqsD,EAAmB/0D,EAAA,CAL/BkZ,EAAAA,UAAU,CACTtQ,SAAU,iBACV5D,SAAA,+WACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BytC,oBCHb,SAAAS,KAA+B,OAAlBA,EAAgBx1D,EAAA,CAN5B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcuF,EAAc8kD,IACtCpqD,aAAc,CAAC8rD,IACfvmD,UAAW,CAAC8kD,IACZpqD,QAAS,CAAC6rD,OAECS,oBCNb,SAAAC,4HAAsBA,EAAez1D,EAAA,CAJpC+B,EAAAA,WAAW,CACVC,WAAY,OACZC,YAAaC,EAAAA,UAEOuzD,MAOTC,GAA0C,CACrDC,IAAK,CACHC,SAAS,EACTC,iBAAiB,kBCAnB,SAAAC,EACU/yD,EACAue,EACA/F,GAFAxc,KAAAgE,OAAAA,EACAhE,KAAAuiB,qBAAAA,EACAviB,KAAAwc,OAAAA,EAPFxc,KAAAg3D,UAAY,IAAI9vD,EAAAA,iBAAyB,GAEjDlH,KAAAi3D,WAAkCj3D,KAAKg3D,UAAUxvD,eAO3CxH,KAAKgE,OAAO4yD,IAAIE,iBAClB92D,KAAKk3D,OAwCX,OApCEH,EAAA72D,UAAAg3D,KAAA,WAAA,IAAArxD,EAAA7F,KACMA,KAAKwc,OAAOqN,eACd7pB,KAAKwc,OAAOqN,aAAastC,iBACvB,uBACA,SAAC7jD,GACCA,EAAMC,iBACN1N,EAAKuxD,cAAgB9jD,EACrBzN,EAAKwxD,2BAITr3D,KAAKwc,OAAOqN,aAAastC,iBAAiB,gBAAgB,WACxDtxD,EAAK0c,qBAAqBra,IACxB,CAAE9G,IAAK,yBACPwjB,EAAAA,kBAAkBC,uBAGpBhf,EAAKyxD,yBACLzxD,EAAKuxD,cAAgB,UAK3BL,EAAA72D,UAAAm3D,sBAAA,WACEr3D,KAAKg3D,UAAU50D,MAAK,IAGtB20D,EAAA72D,UAAAo3D,uBAAA,WACEt3D,KAAKg3D,UAAU50D,MAAK,IAGtB20D,EAAA72D,UAAAq3D,WAAA,WACMv3D,KAAKo3D,eACPp3D,KAAKo3D,cAAcI,mDA1CLd,UACcjxC,EAAAA,4BACdtH,EAAAA,aAVP44C,EAAsB91D,EAAA,CADlC+B,EAAAA,cACY+zD,oBCJX,SAAAU,EAAsBC,GAAA13D,KAAA03D,uBAAAA,EASxB,OAPED,EAAAv3D,UAAAqJ,SAAA,WACEvJ,KAAKi3D,WAAaj3D,KAAK03D,uBAAuBT,YAGhDQ,EAAAv3D,UAAAs3D,OAAA,WACEx3D,KAAK03D,uBAAuBH,cAEhCE,oBCNE,SAAAE,EAAsBD,GAAtB,IAAA7xD,EACEC,EAAA/E,KAAAf,KAAM03D,IAAuB13D,YADT6F,EAAA6xD,uBAAAA,IAGxB,OAJoD53D,EAAA63D,EAAA7xD,4CACJixD,MADnCY,EAA8B12D,EAAA,CAJ1CkZ,EAAAA,UAAU,CACTtQ,SAAU,+BACV5D,SAAA,oiBAEW0xD,IAAuCF,mBCClD,SAAAG,EAAsBF,GAAtB,IAAA7xD,EACEC,EAAA/E,KAAAf,KAAM03D,IAAuB13D,YADT6F,EAAA6xD,uBAAAA,IAGxB,OAJiD53D,EAAA83D,EAAA9xD,4CACDixD,MADnCa,EAA2B32D,EAAA,CAJvCkZ,EAAAA,UAAU,CACTtQ,SAAU,4BACV5D,SAAA,kGAEW2xD,IAAoCH,aCIjCI,GACdC,GAEA,MAAO,CAAEjB,SAAWvwD,EAAAA,aAAewxD,EAAUlB,IAAIC,UAAY,GAG/D,SAAgBkB,GAAWL,GAEzB,OADe,WAAM,OAAAA,GA4BvB,IAAAM,GAAA,WAAA,SAAAA,KAAwB,OAAXA,EAAS/2D,EAAA,CAxBrB8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAguD,EAAAA,oBAAoB1tD,SAAS,mBAC7B4W,EAAAA,YAEF1R,UAAW,CACToP,EAAAA,qBAAqB83C,IACrB,CACEhmD,QAASunD,EAAAA,sBACT7uB,WAAYwuB,GACZv+B,KAAM,CAACn2B,EAAAA,SAET,CACEwN,QAASy4B,EAAAA,gBACTC,WAAY0uB,GACZz+B,KAAM,CAACy9B,IACP1yD,OAAO,GAET0yD,IAEF7sD,aAAc,CAAC0tD,GAA6BD,IAC5CxtD,QAAS,CAACytD,GAA6BD,OAE5BK,GAAb,GC5CaG,GAA6B,CACxCxnD,QAASy4B,EAAAA,gBACT/kC,OAAO,EACPglC,WAAY+uB,GACZ9+B,KAAM,CAACnb,EAAAA,UAAWqoB,EAAAA,kBAMpB,SAAgB4xB,GACd57C,EACA67C,GAOA,OALe,WACbA,EAAgBlgC,YAAY/pB,WAAU,SAACkqD,GACrC97C,EAAOnZ,SAASk1D,gBAAgBD,KAAOA,EAAK/vB,QAAQ,KAAM,2BCV9D,SAAAiwB,EACYC,EACAC,EACAC,GAFA34D,KAAAy4D,QAAAA,EACAz4D,KAAA04D,OAAAA,EACA14D,KAAA24D,gBAAAA,SAGZH,EAAAt4D,UAAAg3D,KAAA,WAAA,IAAArxD,EAAA7F,KACEA,KAAK24D,gBACFC,UACAjuD,KAAKtF,EAAAA,OAAOpB,UACZmK,WAAU,SAACyqD,GAAmB,OAAChzD,EAAKgzD,KAAOA,MAGhDr5D,OAAAmC,eAAc62D,EAAAt4D,UAAA,OAAI,KAAlB,SAAmB24D,GACjB74D,KAAKksD,MAAQ2M,EAAK3M,MAClBlsD,KAAKi9B,YAAc47B,EAAK57B,YACxBj9B,KAAK84D,MAAQD,EAAKC,MAClB94D,KAAK+4D,OAASF,EAAKE,QAAU,CAACC,EAAAA,eAAeC,MAAOD,EAAAA,eAAeE,yCAGrE15D,OAAAmC,eAAc62D,EAAAt4D,UAAA,QAAK,KAAnB,SAAoBgsD,GAClBlsD,KAAKy4D,QAAQU,SAASjN,GAAS,qCAGjC1sD,OAAAmC,eAAc62D,EAAAt4D,UAAA,cAAW,KAAzB,SAA0BmC,GACxBrC,KAAKo5D,OAAO,CAAE9rB,KAAM,cAAe3Y,QAAStyB,qCAG9C7C,OAAAmC,eAAc62D,EAAAt4D,UAAA,QAAK,KAAnB,SAAoBm5D,GACdA,GACFr5D,KAAKo5D,OAAO,CAAE9rB,KAAM,WAAY3Y,QAAS0kC,qCAI7C75D,OAAAmC,eAAc62D,EAAAt4D,UAAA,SAAM,KAApB,SAAqBmC,GACfA,GACFrC,KAAKo5D,OAAO,CAAE9rB,KAAM,SAAU3Y,QAAStyB,EAAMqS,KAAK,yCAI5C8jD,EAAAt4D,UAAAk5D,OAAV,SAAiBP,GACXA,EAAKlkC,SACP30B,KAAK04D,OAAOY,UAAUT,6CAzCLU,EAAAA,aACDC,EAAAA,YACS3zB,EAAAA,gMAJlB2yB,EAAcv3D,EAAA,CAH1B+B,EAAAA,WAAW,CACVC,WAAY,UAEDu1D,oBCSX,SAAAiB,EACiCptD,EACrBmQ,EACAlZ,EACAoZ,GAHqB1c,KAAAqM,WAAAA,EACrBrM,KAAAwc,OAAAA,EACAxc,KAAAsD,gBAAAA,EACAtD,KAAA0c,UAAAA,SAGZ+8C,EAAAv5D,UAAA4N,MAAA,SAAM4rD,GACAA,GAAU15D,KAAK25D,qBACjB35D,KAAK45D,4BAA4BC,UAAY75D,KAAK85D,SAASJ,KAQ/DD,EAAAv5D,UAAAy5D,iBAAA,WACE,OAAQ5xB,EAAAA,kBAAkB/nC,KAAKqM,aAAe/F,EAAAA,aAGxCmzD,EAAAv5D,UAAA05D,0BAAR,WACE,IAAMv5C,EAAK,UACP05C,EACF/5D,KAAKwc,OAAOnZ,SAAS22D,eAAe35C,GAGtC,IAAK05C,EAAe,CAClB,IAAMn2D,EAAsB5D,KAAKsD,gBAAgBO,eAC/C,KACA,MAEIikC,EAA4BlkC,EAASma,cAAc,UACzD+pB,EAAOznB,GAAKA,EACZynB,EAAO76B,KAAO,sBACdrJ,EAASsa,YAAYle,KAAKwc,OAAOnZ,SAASsB,KAAMmjC,GAChDiyB,EAAgBjyB,EAElB,OAAOiyB,GASTN,EAAAv5D,UAAA45D,SAAA,SAASJ,GAAT,IAAA7zD,EAAA7F,KACE,OAAOi6D,KAAKC,UAAUR,GAAQ,SAACS,EAAM93D,GACnC,MAAiB,iBAAVA,EACHwD,EAAK6W,UAAUo9C,SAASM,EAAAA,gBAAgBC,KAAMh4D,GAC9CA,wEAlDLoD,EAAAA,OAAMkB,KAAA,CAACuG,EAAAA,sBACUiR,EAAAA,iBACSvX,EAAAA,wBACNwX,EAAAA,uOALZq7C,EAAmBx4D,EAAA,CAH/B+B,EAAAA,WAAW,CACVC,WAAY,SAITrB,EAAA,EAAA6D,EAAAA,OAAOyH,EAAAA,eAFCusD,MCJba,GAAA,WAOE,SAAAA,EACYC,EACA79C,GADA1c,KAAAu6D,oBAAAA,EACAv6D,KAAA0c,UAAAA,EAUd,OAlBWld,OAAAmC,eAAI24D,EAAAp6D,UAAA,WAAQ,KAAZ,SAAaw5D,GACpB15D,KAAKw6D,YAAYd,oCAUXY,EAAAp6D,UAAAs6D,YAAR,SAAoBd,GAClB,GAAIA,GAAU15D,KAAKu6D,oBAAoBZ,mBAAoB,CACzD,IACMc,EAAO,sCADWz6D,KAAKu6D,oBAAoBT,SAASJ,GACQ,aAClE15D,KAAK06D,OAAS16D,KAAK0c,UAAUK,wBAAwB09C,8CARxBhB,UACVr7C,EAAAA,gBARdnd,EAAA,CAAR0I,EAAAA,sCAIyB1I,EAAA,CAAzBqR,EAAAA,YAAY,2CALFgoD,EAAer5D,EAAA,CAH3B2I,EAAAA,UAAU,CACTC,SAAU,gBAECywD,GAAb,GCJaK,GAAiB,IAAI5gB,EAAAA,eAAe,sBAMpC6gB,GAAyB,IAAI7gB,EAAAA,eACxC,6BCNF8gB,GAAA,WACE,SAAAA,EACUC,EAGAC,GAHA/6D,KAAA86D,cAAAA,EAGA96D,KAAA+6D,SAAAA,SAGVF,EAAA36D,UAAA4N,MAAA,WAAA,IAAAjI,EAAA7F,KACEA,KAAKg7D,iBAAiB5sD,WAAU,SAACsrD,GAC/B7zD,EAAKi1D,cAAchtD,MAAM4rD,OAIrBmB,EAAA36D,UAAA86D,eAAR,WACE,OAAKh7D,KAAK86D,cAAcnB,oBAAuB35D,KAAK+6D,SAG7C9pD,EAAAA,cACLjR,KAAK+6D,SAASnwD,KAAI,SAACqwD,GAAY,OAAAA,EAAQntD,YACvCnD,OAJOtE,EAAAA,+CAdcozD,kCACtB5gC,EAAAA,UAAQ,CAAA5rB,KACRxH,EAAAA,OAAMkB,KAAA,CAACg0D,8IAJCE,EAAqB55D,EAAA,CAHjC+B,EAAAA,WAAW,CACVC,WAAY,SAKTrB,EAAA,EAAAi3B,EAAAA,YACAj3B,EAAA,EAAA6D,EAAAA,OAAOk1D,MAJCE,GAAb,GCAA,SAAgBK,GAAyB1jC,GAKvC,OAJe,WACGA,EAAS9uB,IAAImyD,IACrB/sD,SAkBZ,IAAAqtD,GAAA,WAAA,SAAAA,KAAmC,OAAtBA,EAAoBl6D,EAAA,CAbhC8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,cACVC,aAAc,CAACowD,IACfnwD,QAAS,CAACmwD,IACV7qD,UAAW,CACT,CACEkB,QAASy4B,EAAAA,gBACTC,WAAY6xB,GACZ5hC,KAAM,CAACP,EAAAA,UACP10B,OAAO,OAIA82D,GAAb,YCzBgBC,GAAe5jC,GAK7B,OAJe,WACGA,EAAS9uB,IAAI8vD,IACrBtB,QAiBZ,IAAAmE,GAAA,WAAA,SAAAA,KAAwB,OAAXA,EAASp6D,EAAA,CAZrB8I,EAAAA,SAAS,CACRC,QAAS,CAACmxD,IACV1rD,UAAW,CACT,CACEkB,QAASy4B,EAAAA,gBACTC,WAAY+xB,GACZ9hC,KAAM,CAACP,EAAAA,UACP10B,OAAO,GAET8zD,OAGSkD,GAAb,iBCuBE,SAAAC,EACUvI,EACA7iD,EACEuB,EACAw/C,GAHFjxD,KAAA+yD,qBAAAA,EACA/yD,KAAAkQ,eAAAA,EACElQ,KAAAyR,WAAAA,EACAzR,KAAAixD,qBAAAA,EA5BZjxD,KAAAu7D,YAAmCv7D,KAAK+yD,qBAAqBN,WAMpCzyD,KAAA8R,SAAW,IAI5B9R,KAAAw7D,oBAAmC,CACzCzmD,eAAe,EACfE,qBAAqB,GA2CzB,OAvCEqmD,EAAAp7D,UAAA8U,aAAA,SAAa1B,GACXtT,KAAKixD,qBAAqBj8C,aACxBhV,KAAKyR,WAAWtM,cAChBnF,KAAKw7D,oBACLloD,IAWJgoD,EAAAp7D,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAKy7D,qBAAuBz7D,KAAKkQ,eAC9Bs8B,eACAp+B,WAAU,SAACjF,GACVtD,EAAK61D,iBAA0B,IAARvyD,EACvBtD,EAAK81D,gBAAyB,IAARxyD,MAI5BmyD,EAAAp7D,UAAA07D,2BAAA,SAA2BtoD,GACPA,EAAMnS,OAAQ06D,UAAUttD,SAAS,gBACjDvO,KAAK87D,gBAITR,EAAAp7D,UAAA47D,aAAA,WACE97D,KAAK+yD,qBAAqBH,QAAO,IAGnC0I,EAAAp7D,UAAAmP,YAAA,WACMrP,KAAKy7D,sBACPz7D,KAAKy7D,qBAAqB7tD,wDA3BE4kD,UACNliD,EAAAA,sBACF+B,EAAAA,kBACU6G,MA1BKjY,EAAA,CAAtCqR,EAAAA,YAAY,iEACyBrR,EAAA,CAArCqR,EAAAA,YAAY,+DAGYrR,EAAA,CAAxBqR,EAAAA,YAAY,4CAEiBrR,EAAA,CAA7BggB,EAAAA,UAAU8wC,iCAQX9wD,EAAA,CADC4R,EAAAA,aAAa,iBAAkB,CAAC,6CAjBtByoD,EAAmBr6D,EAAA,CAJ/BkZ,EAAAA,UAAU,CACTtQ,SAAU,gBACV5D,SAAA,i6BAEWq1D,oBCcb,SAAAS,KAAyB,OAAZA,EAAU96D,EAAA,CApBtB8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aACA6I,GACA9lB,EACA1F,EACAkuD,GACAvB,GACA4E,GACA/G,GACAtuC,GACA5E,EAAAA,qBAEAgxC,GACA/4C,IAEFnP,aAAc,CAACoxD,IACfnxD,QAAS,CAACmxD,OAECS,oBCzBX,SAAAC,EACYx6B,EACAhK,GADAx3B,KAAAwhC,qBAAAA,EACAxhC,KAAAw3B,SAAAA,SAGZwkC,EAAA97D,UAAA+7D,mBAAA,SACE97B,EACA+7B,EACAzhC,GAHF,IAAA50B,EAAA7F,KAKQ8lB,EAAS9lB,KAAKwhC,qBAAqBX,UAAUV,GAEnD,GAAIra,EAAOhlB,OAAQ,CACjB,IAAMq7D,EAAyBr2C,EAAOlb,KAAI,SAACwxD,GACzC,IAAMn7B,EAAQp7B,EAAK2xB,SAAS9uB,IAAiB0zD,EAAY,MACzD,GAsCR,SAAuBn7B,GACrB,OAAOA,IAGc/1B,EAHmB+1B,EAAM2X,YAI1B,mBAAN1tC,GADhB,IAAuBA,EA1CXmxD,CAAcp7B,GAChB,OAmBV,SACE5+B,GAEA,GAAIi6D,EAAAA,aAAaj6D,GACf,OAAOA,EAGT,GAOiBsM,EAPHtM,EAQLsM,GAA2B,mBAAbA,EAAI44B,KAPzB,OAAOtzB,EAAAA,KAAK2zB,QAAQtF,QAAQjgC,IAMhC,IAAmBsM,EAHjB,OAAOtI,EAAAA,GAAGhE,GA9BKk6D,CAAmBt7B,EAAM2X,YAAYsjB,EAAOzhC,IAAQ9vB,KACzDM,EAAAA,SAGF,MAAM,IAAIuxD,MAAM,8CAIpB,OAAO35D,EAAAA,OAAM7B,WAAA,EAAA4B,EAAIu5D,IAAwBxxD,KACvC2Z,EAAAA,WAAU,SAACs0B,GAAmC,OAAgB,IAAhBA,KAC9C6jB,EAAAA,SAAQ,GACRxxD,EAAAA,SAGF,OAAO5E,EAAAA,IAAG,6CA7BoB25B,UACZjH,EAAAA,uJAHXijC,EAAgB/6D,EAAA,CAH5B+B,EAAAA,WAAW,CACVC,WAAY,UAED+4D,wBCFX,SAAAU,EACYl7B,EACA8C,EACAq4B,GAFA38D,KAAAwhC,qBAAAA,EACAxhC,KAAAskC,YAAAA,EACAtkC,KAAA28D,iBAAAA,SAGZD,EAAAx8D,UAAA08D,kBAAA,SAAkBz8B,WACVgB,EAAWnhC,KAAKwhC,qBAAqBN,YAAYf,GACjD08B,EAAa,IAAI/7B,QACvB,IAAkB,IAAAg8B,EAAA/6D,EAAAo/B,GAAQ47B,EAAAD,EAAA16D,QAAA26D,EAAAz6D,KAAAy6D,EAAAD,EAAA16D,OAAE,CAAvB,IAAMhB,EAAG27D,EAAA16D,MACZw6D,EAAW30D,IAAIlI,KAAK28D,iBAAiBK,mBAAmB57D,sGAE1DpB,KAAKskC,YAAY24B,WAAWt9D,MAAMsU,KAAK4oD,8CAXP78B,UACT+F,EAAAA,0BACKm3B,EAAAA,yNAJnBR,EAAcz7D,EAAA,CAH1B+B,EAAAA,WAAW,CACVC,WAAY,UAEDy5D,MCCbS,GAAA,WACE,SAAAA,EACUta,EACArhB,GADAxhC,KAAA6iD,OAAAA,EACA7iD,KAAAwhC,qBAAAA,SAGF27B,EAAAj9D,UAAAk9D,eAAR,SAAuB9gD,GACrB,IAAM+gD,EAAmB/gD,EAAIkP,WAAW,KAExC,IAAK6xC,EACH,OAAO,EAGT,IAAMC,EAAYhhD,EAAIgsB,OAAO,GAE7B,OACE+0B,KACEr9D,KAAK6iD,OAAO7+C,OAAO8L,MACnB,SAACosD,GACC,OAAAA,EAAM1jC,MAAQ0jC,EAAM1jC,KAAK+kC,mBAAqBrB,EAAMr0B,OAASy1B,MAcrEH,EAAAj9D,UAAAs9D,uBAAA,SACEC,EACAt9B,EACAu9B,EACAC,GAEA,GAAI39D,KAAKo9D,eAAeO,GACtB,OAAO,EAGT,IAAMC,EAAkB59D,KAAKwhC,qBAAqBhB,eAChDL,GAEF,OAAIy9B,EAAgB98D,SACdd,KAAK69D,cAAcJ,EAAaE,EAAkBC,KACpD59D,KAAK6iD,OAAOib,cAAcJ,IACnB,IAMLP,EAAAj9D,UAAA29D,cAAR,SACEJ,EACAM,EACAt9B,GAEA,GACEg9B,EAAYxwD,OAAS+wD,EAAAA,SAASC,cAC9BF,EAAUvyC,WAAW,MACrBuyC,EAAUj9D,OAAS,EACnB,CACA,IAAMo9D,EAAqB,CACzBr2B,KAAMk2B,EAAUz1B,OAAO,GACvBpkC,UAAW8xD,GACXj/C,SAAU0pB,EACVjI,KAAM,CACJ+kC,kBAAmB,CACjBtwD,KAAMwwD,EAAYxwD,KAClBoT,GAAI09C,KAMV,OADA/9D,KAAK6iD,OAAOsb,YAAWv7D,EAAA,CAAEs7D,GAAal+D,KAAK6iD,OAAO7+C,UAC3C,EAGT,OAAO,4CA/ESk/C,EAAAA,cACcljB,+IAHrBm9B,EAAoBl8D,EAAA,CADhC+B,EAAAA,WAAW,CAAEC,WAAY,UACbk6D,GAAb,GCEAiB,GAAA,WAAA,SAAAA,sHAAsBA,EAAgBn9D,EAAA,CAJrC+B,EAAAA,WAAW,CACVC,WAAY,OACZC,YAAai6D,MAEOiB,GAAtB,GCoBAC,GAAA,WACE,SAAAA,EACYC,EACAljB,EACAmjB,EACAC,EACAC,EACAj9B,GALAxhC,KAAAs+D,oBAAAA,EACAt+D,KAAAo7C,WAAAA,EACAp7C,KAAAu+D,UAAAA,EACAv+D,KAAAw+D,QAAAA,EACAx+D,KAAAy+D,UAAAA,EACAz+D,KAAAwhC,qBAAAA,SAmBZ68B,EAAAn+D,UAAAw+D,gBAAA,SACEjB,EACAkB,EACAzC,EACAzhC,GAJF,IAAA50B,EAAA7F,KAME,OAAOA,KAAKo7C,WAAWwjB,sBAAsBnB,GAAa9yD,KACxDmV,EAAAA,KAAK,GACLsW,EAAAA,WAAU,SAAC+J,GACT,OAAAt6B,EAAK27B,qBAAqBtB,kBAAkBC,MAE9C/J,EAAAA,WAAU,SAAC+J,GACT,OAAAt6B,EAAK44D,UACFxC,mBAAmB97B,EAAgB+7B,EAAOzhC,GAC1C9vB,KAAK2Y,EAAAA,eAAejd,EAAAA,GAAG85B,QAE5BnwB,EAAAA,KAAI,SAAC1K,OAAAsT,EAAArW,EAAA+C,EAAA,GAACszC,EAAAhgC,EAAA,GAAaunB,EAAAvnB,EAAA,IACG,IAAhBggC,GACF/yC,EAAK24D,QAAQ5B,kBAAkBz8B,MAGnCv1B,EAAAA,KAAI,SAACtF,SAAAsT,EAAArW,EAAA+C,EAAA,GAACszC,EAAAhgC,EAAA,GAAaunB,EAAAvnB,EAAA,GACXmlD,EAAYY,EAASpuC,OAASktC,EAAYp9C,GAChD,OAAoB,IAAhBu4B,IAAoC,QAAZzb,EAAC++B,MAAAA,OAAK,EAALA,EAAO1jC,YAAI,IAAA2E,OAAA,EAAAA,EAAEogC,mBAQnC3kB,EAPE/yC,EAAK04D,UAAUf,uBACpBC,EACAt9B,EACA1F,EAAMne,IACNyhD,QAcVM,EAAAn+D,UAAA2+D,wBAAA,SACEpB,EACAvB,EACAzhC,GAHF,IAAA50B,EAAA7F,KAKQ8+D,EAAsC,CAC1C7xD,KAAM+wD,EAAAA,SAASC,aACf59C,GAAIrgB,KAAKs+D,oBAAoB51D,IAAI,aAGnC,OAAO1I,KAAKo7C,WAAW2jB,QAAQD,GAAwBn0D,KACrDyrB,EAAAA,WAAU,SAAC4oC,GACT,OAAIA,EACKn5D,EAAKu1C,WAAW6jB,aAAaH,GAAwBn0D,KAC1DqF,EAAAA,KAAI,SAACkvD,GACHr5D,EAAKu1C,WAAW+jB,iBAAiB1B,EAAayB,MAEhD9oC,EAAAA,WAAU,SAAC8oC,GACT,OAAAr5D,EAAKu1C,WAAW6jB,aAAaxB,GAAa9yD,KAExCtF,EAAAA,QAAO,SAAC2R,GAAU,OAAAA,IAAUkoD,SAGhC9oC,EAAAA,WAAU,WACR,OAAAvwB,EAAK64D,gBAAgBjB,EAAauB,EAAc9C,EAAOzhC,OAItDp0B,EAAAA,IAAG,iDA9FiB+4D,EAAAA,2BACTx9B,EAAAA,kBACDw8B,UACF1B,UACEV,UACWh8B,8OAPvBq+B,EAAmBp9D,EAAA,CAH/B+B,EAAAA,WAAW,CACVC,WAAY,UAEDo7D,GAAb,iBCVE,SAAAgB,EACYnvD,EACAkrC,EACAkkB,EACA5tD,EACA6tD,GAJAv/D,KAAAkQ,eAAAA,EACAlQ,KAAAo7C,WAAAA,EACAp7C,KAAAs/D,qBAAAA,EACAt/D,KAAA0R,QAAAA,EACA1R,KAAAu/D,cAAAA,SAcZF,EAAAn/D,UAAA04C,YAAA,SACEsjB,EACAzhC,GAFF,IAAA50B,EAAA7F,KAIE,OAAOA,KAAKs/D,qBAAqB1mB,YAAYsjB,GAAOvxD,KAClDyrB,EAAAA,WAAU,SAACwiB,GACT,OAAAA,EACI/yC,EAAKqK,eAAesvD,qBAAqB70D,KACvCyrB,EAAAA,WAAU,SAACqnC,GACT,OAAA53D,EAAKu1C,WAAW2jB,QAAQtB,EAAa53D,EAAK45D,gBAAgB90D,KACxDM,EAAAA,QACAmrB,EAAAA,WAAU,SAACuoC,GACT,OAAAA,EACI94D,EAAK6L,QAAQgtD,gBACXjB,EACAkB,EACAzC,EACAzhC,GAEF50B,EAAK6L,QAAQmtD,wBACXpB,EACAvB,EACAzhC,WAMdp0B,EAAAA,IAAG,QAQLg5D,EAAAn/D,UAAAu/D,aAAR,WACE,MAA2C,SAApCz/D,KAAKu/D,cAAcG,mBA1DrBL,EAAAM,UAAY,wDAGSrvD,EAAAA,sBACJsxB,EAAAA,kBACUg+B,EAAAA,4BACbvB,UACM7f,EAAAA,iRARhB6gB,EAAYp+D,EAAA,CAHxB+B,EAAAA,WAAW,CACVC,WAAY,UAEDo8D,MCZPQ,GAAkB,CACtBh4B,KAAM,KACN+Q,YAAa,CAACymB,IACdn7D,UAAW8xD,IAGb,SAAgB8J,GAAYtoC,GAK1B,OAJe,WACEA,EAAS9uB,IAAIw6C,EAAAA,QACrBl/C,OAAOtB,KAAKm9D,YCLLC,GAIlBC,GAAA,WAAA,SAAAA,KAA6B,OAAhBA,EAAc9+D,EAAA,CAV1B8I,EAAAA,SAAS,CACR0F,UAAW,CACT,CACEkB,QAASy4B,EAAAA,gBACT/kC,OAAO,EACPi1B,KAAM,CAACP,EAAAA,UACPsQ,WAAU22B,QAIHD,GAAb,GCXaE,GAA8C,CACzDC,KAAM,CAAE3hB,MAAO,CAAC,KAChB4hB,SAAU,CAAE5hB,MAAO,CAAC,cACpBtiB,KAAM,CAAEsiB,MAAO,CAAC,SAGhB6hB,MAAO,CAAE7hB,MAAO,CAAC,SAAU8hB,WAAW,GACtC91D,SAAU,CAAEg0C,MAAO,CAAC,kBAAmB8hB,WAAW,GAClDC,eAAgB,CAAE/hB,MAAO,CAAC,yBAA0B8hB,WAAW,GAC/DE,cAAe,CAAEhiB,MAAO,CAAC,mBAAoB8hB,WAAW,GACxDn2B,OAAQ,CAAEqU,MAAO,CAAC,WAClBiiB,cAAe,CAAEjiB,MAAO,CAAC,mBAEzBxa,SAAU,CAAEwa,MAAO,CAAC,aACpBkiB,wBAAyB,CAAEliB,MAAO,CAAC,8BACnCmiB,qBAAsB,CAAEniB,MAAO,CAAC,2BAChCoiB,uBAAwB,CAAEpiB,MAAO,CAAC,6BAClCqiB,oBAAqB,CAAEriB,MAAO,CAAC,0BAC/BsiB,kBAAmB,CAAEtiB,MAAO,CAAC,uBAG7BuiB,OAAQ,CAAEviB,MAAO,CAAC,kBAClBwiB,SAAU,CACRxiB,MAAO,CAAC,0BACRyiB,cAAe,CAAEC,aAAc,SAEjCC,MAAO,CAAE3iB,MAAO,CAAC,mCAGjB9Z,QAAS,CACP8Z,MAAO,CAAC,8BACRyiB,cAAe,CAAEzwB,YAAa,SAGhCqc,mBAAoB,CAAErO,MAAO,CAAC,yBAC9B4iB,OAAQ,CACN5iB,MAAO,CAAC,sBAEV6iB,aAAc,CACZ7iB,MAAO,CAAC,+BACRyiB,cAAe,CAAErmC,UAAW,SAE9B0mC,WAAY,CACV9iB,MAAO,CAAC,0BACRyiB,cAAe,CAAErmC,UAAW,SAE9B2mC,YAAa,CACX/iB,MAAO,CAAC,sCACRyiB,cAAe,CAAErmC,UAAW,SAE9B4mC,wBAAyB,CACvBhjB,MAAO,CAAC,mDACRyiB,cAAe,CAAErmC,UAAW,SAE9B6mC,YAAa,CACXjjB,MAAO,CAAC,sCACRyiB,cAAe,CAAErmC,UAAW,SAE9B8mC,wBAAyB,CACvBljB,MAAO,CAAC,mDACRyiB,cAAe,CAAErmC,UAAW,SAE9B+mC,qBAAsB,CACpBnjB,MAAO,CAAC,yCACRyiB,cAAe,CAAEW,WAAY,QAE/B7sB,QAAS,CAAEyJ,MAAO,CAAC,uBACnBqjB,YAAa,CACXrjB,MAAO,CAAC,uCACRyiB,cAAe,CAAE9rB,WAAY,UAIpB2sB,GAAsC,CACjD/8B,QAAS,CACPrE,OAAQw/B,mBClEZ,SAAA6B,WAOA,SAPaA,EACJA,EAAAtxD,QAAP,WACE,MAAO,CACLC,SAAUsxD,EACVtyD,UAAW,CAACoP,EAAAA,qBAAqBgjD,OAJ1BC,EAAaC,EAAA9gE,EAAA,CAHzB8I,EAAAA,SAAS,CACRC,QAAS,CAACg4D,EAAAA,cAAkBxxD,UAAWuvD,OAE5B+B,MCAb,SAAgBG,GAAoB38D,OAClC48D,EAAA58D,EAAA48D,OACAC,EAAA78D,EAAA68D,UACAC,EAAA98D,EAAA88D,mBAMAA,EAAqBA,GAAsB,QAC3C,IAAMC,EAAU,SACdC,SAEMC,EA0BV,SAA0BC,EAAeC,GACvC,IAAK,IAAIzrD,EAAQwrD,EAAS1hE,OAAS,EAAGkW,GAAS,EAAGA,IAChD,GAAIyrD,EAAUD,EAASxrD,IACrB,OAAOA,EAGX,OAAQ,EAhCc0rD,CAAcJ,GAAU,SAACh9D,GAAa,OAAXA,EAAAuiC,OAAoBq6B,KAC7DS,EAAsBJ,IAAgBD,EAASxhE,OAAS,EAE9D,IAAqB,IAAjByhE,GAAsBI,EACxB,OAAO,KAQT,IALA,IAAM9gE,EAAa0gE,EAAc,EAC3BK,IAASt9D,EAAA,IACZ68D,GAAYG,EAASzgE,MAGflB,EAAI,EAAGA,EAAI4hE,EAAa5hE,IAC/BiiE,EAAU,GAAGR,EAAqBzhE,GAAO2hE,EAAS3hE,GAGpD,MAAO,CAAEkiE,SAAUP,EAAS94C,MAAM,EAAG3nB,EAAa,GAAI+gE,UAASA,IAOjE,OAJIt8D,EAAAA,cACF+7D,EAA4B,mBAAI,CAAEH,OAAMA,EAAEC,UAASA,EAAEC,mBAAkBA,IAGlEC,MC/CGS,iBCUV,SAAAC,EAAsBpK,GAAA34D,KAAA24D,gBAAAA,SAEtBoK,EAAA7iE,UAAA4N,MAAA,WAAA,IAAAjI,EAAA7F,KACE,OAAOA,KAAK24D,gBACTC,UACAjuD,KAAKC,EAAAA,KAAI,SAACu5B,GAAuB,OAAAt+B,EAAKm9D,QAAQ7+B,QAGzC4+B,EAAA7iE,UAAA8iE,QAAV,SAAkB7+B,GAChB,GAAKA,MAAAA,OAAQ,EAARA,EAAU8+B,YAAf,CAGA,IAAMC,EAAS/+B,EAAS8+B,YAAYr4D,KAAI,SAACu4D,EAAOnsD,GAC9C,MAAO,CACLosD,QAAS,WACT/6D,SAAU2O,EAAQ,EAClBmc,KAAM,CACJkwC,MAAOF,EAAMrlD,KACbwvB,KAAM61B,EAAM5yC,WAgBlB,OAXI4T,EAAS+nB,OACXgX,EAAOxgE,KAAK,CACV0gE,QAAS,WACT/6D,SAAU66D,EAAOpiE,OAAS,EAC1BqyB,KAAM,CACJkwC,MAAOl/B,EAAS+nB,MAChB5e,KAAMnJ,EAAS+nB,SAKd,CACLoX,WAAY,oBACZF,QAAS,iBACTG,gBAAiBL,8CArCkBr9B,EAAAA,mJAD5Bk9B,EAAuB9hE,EAAA,CAHnC+B,EAAAA,WAAW,CACVC,WAAY,UAED8/D,MCGbS,GAAA,WAAA,SAAAA,YACEA,EAAAtjE,UAAA4N,MAAA,SAAM22B,GACJ,OAAOp+B,EAAAA,GAAE9F,EAAAA,EAAAA,EAAA,GACJP,KAAKyjE,eAAeh/B,IACpBzkC,KAAK0jE,gBAAgBj/B,IACrBzkC,KAAK2jE,gBAAgBl/B,MAIpB++B,EAAAtjE,UAAAujE,eAAR,SAAuBh/B,GACrB,IAAM8kB,EAAc,CAAEqa,IAAKn/B,EAAQ9f,MAOnC,OANI8f,EAAQ6I,OACVic,EAAOjc,KAAO7I,EAAQ6I,MAEpB7I,EAAQo/B,UACVta,EAAOtsB,YAAcwH,EAAQo/B,SAExBta,GAGDia,EAAAtjE,UAAAyjE,gBAAR,SAAwBl/B,GACtB,OAAOA,EAAQq/B,QACbr/B,EAAQq/B,OAAOC,SACft/B,EAAQq/B,OAAOC,QAAc,MAC7Bt/B,EAAQq/B,OAAOC,QAAc,KAAEznD,IAC7B,CACEw8C,MAAOr0B,EAAQq/B,OAAOC,QAAc,KAAEznD,KAExC,IAGEknD,EAAAtjE,UAAAwjE,gBAAR,SAAwBj/B,GACtB,OAAOA,EAAsB,aACzB,CACEy8B,MAAOz8B,EAAsB,cAE/B,oGApCK++B,EAAwBviE,EAAA,CAHpC+B,EAAAA,WAAW,CACVC,WAAY,UAEDugE,GAAb,GCAAQ,GAAA,WAAA,SAAAA,YACEA,EAAA9jE,UAAA4N,MAAA,SAAM22B,GACJ,IAAMi1B,EAAc,CAAE0J,QAAS,SAe/B,OAdI3+B,EAAQw/B,QACNx/B,EAAQw/B,MAAM5hE,QAChBq3D,EAAOuK,MAAQx/B,EAAQw/B,MAAM5hE,OAE3BoiC,EAAQw/B,MAAMC,cAChBxK,EAAOyK,cAAgB1/B,EAAQw/B,MAAMC,cAIrCz/B,EAAQ8N,OAAS9N,EAAQ8N,MAAMC,mBACjCknB,EAAO0K,aAC8B,YAAnC3/B,EAAQ8N,MAAMC,iBAAiC,UAAY,cAGxDnsC,EAAAA,GAAG,CACRg+D,OAAQ3K,mGAlBDsK,EAAyB/iE,EAAA,CAHrC+B,EAAAA,WAAW,CACVC,WAAY,UAED+gE,GAAb,GCCAM,GAAA,WACE,SAAAA,EAAoBC,GAAAvkE,KAAAukE,cAAAA,SAEpBD,EAAApkE,UAAA4N,MAAA,SAAM22B,GAAN,IAAA5+B,EAAA7F,KACE,OAAOA,KAAKukE,cAAcC,iBAAiB//B,EAAQ9f,MAAMha,KACvDtF,EAAAA,OAAOpB,SACP2G,EAAAA,KAAI,SAAC65D,GACH,MAAO,CACLC,gBAAiB7+D,EAAK8+D,uBAAuBlgC,EAASggC,GACtDG,OAAQH,EAAQ75D,KAAI,SAACg6D,GAAW,OAAA/+D,EAAKg/D,aAAaD,YAMlDN,EAAApkE,UAAAykE,uBAAR,SAA+BlgC,EAAkBggC,GAC/C,IAAMK,EAAkB,CACtB1B,QAAS,mBASX,OAPI3+B,EAAQsgC,gBACVD,EAAWE,YAAcvgC,EAAQsgC,eAE/BN,IACFK,EAAWG,YAAcR,EAAQp/D,QAAO,SAACu6B,GAAQ,QAAEA,EAAIhG,UAAQ94B,OAC/DgkE,EAAWI,YAAcT,EAAQp/D,QAAO,SAACu6B,GAAQ,QAAEA,EAAIulC,WAASrkE,QAE3DgkE,GAGDR,EAAApkE,UAAA2kE,aAAR,SAAqBD,GACnB,IAAMQ,EAAoB,CACxBhC,QAAS,UAMX,GAHIwB,EAAOS,WAAaT,EAAOS,UAAU/3B,OACvC83B,EAAaE,OAASV,EAAOS,UAAU/3B,MAErCs3B,EAAOW,KAAM,CACf,IAAMA,EAAO,IAAI1c,KAAK+b,EAAOW,MAC7BH,EAAaI,cAAmBD,EAAKzc,cAAa,KAChDyc,EAAKE,WAAa,GAAC,IACjBF,EAAKG,UAeX,OAbId,EAAOe,WACTP,EAAa93B,KAAOs3B,EAAOe,UAEzBf,EAAOO,UACTC,EAAanoC,YAAc2nC,EAAOO,SAEhCP,EAAOhrC,SACTwrC,EAAaQ,aAAe,CAC1BxC,QAAS,SACT4B,YAAaJ,EAAOhrC,OAAO5gB,aAIxBosD,4CAvD0Bh/B,EAAAA,6JADxBk+B,EAA0BrjE,EAAA,CAHtC+B,EAAAA,WAAW,CACVC,WAAY,UAEDqhE,GAAb,GCGAuB,GAAA,WACE,SAAAA,EACUC,EAGE/K,GAHF/6D,KAAA8lE,eAAAA,EAGE9lE,KAAA+6D,SAAAA,SAGZ8K,EAAA3lE,UAAA4N,MAAA,WAAA,IAAAjI,EAAA7F,KACE,OAAOA,KAAK8lE,eAAez1B,aAAa1lC,KACtCyrB,EAAAA,WAAU,SAACqO,GACT,OAAIA,EACKxzB,EAAAA,cAAcpL,EAAKm9D,QAAQv+B,IAAU95B,KAC1CC,EAAAA,KAAI,SAAC0S,GAAc,OAAA9d,OAAOgB,OAAMQ,MAAbxB,OAAMoD,EAAA,CAAQ,IAAO0a,QAGrCjX,EAAAA,GAAG,SAKNw/D,EAAA3lE,UAAA8iE,QAAV,SAAkBv+B,GAChB,IAAKA,IAAYA,EAAQ9f,KACvB,MAAO,GAET,IAAMo2C,EAAW/6D,KAAK+6D,SAClB/6D,KAAK+6D,SAASnwD,KAAI,SAACqwD,GAAY,OAAAA,EAAQntD,MAAM22B,MAC7C,GACJ,OAAA7hC,EAAA,CACEyD,EAAAA,GAAG,CACDi9D,WAAY,oBACZF,QAAS,aAERrI,6CA/BmB/qB,kCACvBnX,EAAAA,UAAQ,CAAA5rB,KACRxH,EAAAA,OAAMkB,KAAA,CAACi0D,8IAJCiL,EAAoB5kE,EAAA,CAHhC+B,EAAAA,WAAW,CACVC,WAAY,SAKTrB,EAAA,EAAAi3B,EAAAA,YACAj3B,EAAA,EAAA6D,EAAAA,OAAOm1D,MAJCiL,GAAb,GC6BAE,GAAA,WAAA,SAAAA,KAAkC,OAArBA,EAAmB9kE,EAAA,CA/B/B8I,EAAAA,SAAS,CACR0F,UAAW,CACT,CACEkB,QAASgqD,GACTz3D,YAAa2iE,GACbxhE,OAAO,GAET,CACEsM,QAASgqD,GACTz3D,YAAa6/D,GACb1+D,OAAO,GAIT,CACEsM,QAASiqD,GACT13D,YAAasgE,GACbn/D,OAAO,GAET,CACEsM,QAASiqD,GACT13D,YAAa8gE,GACb3/D,OAAO,GAET,CACEsM,QAASiqD,GACT13D,YAAaohE,GACbjgE,OAAO,OAIA0hE,GAAb,GC3BAC,GAAA,WAmBE,SAAAA,EACU1uC,EACA8jB,GAFV,IAAAv1C,EAAA7F,KACUA,KAAAs3B,cAAAA,EACAt3B,KAAAo7C,WAAAA,EApBFp7C,KAAAimE,eAAoCjmE,KAAKs3B,cAAciB,MAAM5tB,KACnEtF,EAAAA,OAAOpB,SACP+L,EAAAA,KAAI,SAAC1Q,GAAa,OAACuG,EAAKqgE,MAAW5mE,EAAE6mE,OAAM,aAGrCnmE,KAAAomE,OAEJpmE,KAAKimE,eAAet7D,KACtBC,EAAAA,KAAI,SAAC4tB,GAAS,OAAAA,EAAK6tC,QAAQn3B,OAAOvwB,MAAM,QACxC/T,EAAAA,KAAI,SAAC07D,GAAU,OAAAA,EAAM17D,KAAI,SAAC+Z,GAAS,OAAA9e,EAAKu1C,WAAWvZ,iBAAiBld,UAOhD3kB,KAAAkmE,MAAQ,GAehC,OAHEF,EAAA9lE,UAAAu3B,SAAA,WACE,OAAOz3B,KAAKomE,iDAVWxtC,UACHgJ,EAAAA,cAJA3gC,EAAA,CAArBqR,EAAAA,YAAY,sCAjBF0zD,EAAuB/kE,EAAA,CALnCkZ,EAAAA,UAAU,CACTtQ,SAAU,qBACV5D,SAAA,2WACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9By9C,GAAb,iBCIA,SAAAO,KAAmC,OAAtBA,EAAoBtlE,EAAA,CAfhC8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcu+B,GAAqBhc,GAAgBF,IAC7D7c,UAAW,CACToP,EAAAA,qBAAqB,CACnByC,cAAe,CACbklD,wBAAyB,CACvBtiE,UAAW8hE,QAKnB97D,aAAc,CAAC87D,IACfzkD,gBAAiB,CAACykD,IAClB77D,QAAS,CAAC67D,OAECO,oBCZX,SAAAE,EAAmBviE,GAAAlE,KAAAkE,UAAAA,EACrB,gDADgC00B,MADnB6tC,EAAexlE,EAAA,CAL3BkZ,EAAAA,UAAU,CACTtQ,SAAU,YACV5D,SAAA,0ZACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9Bk+C,oBCoBb,SAAAC,KAA2B,OAAdA,EAAYzlE,EAAA,CArBxB8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcwiB,EAAAA,aAAckB,GAAmBrB,IACzD7c,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbqlD,gCAAiC,CAC/BziE,UAAWuiE,IAEbA,gBAAiB,CACfviE,UAAWuiE,IAEbG,sBAAuB,CACrB1iE,UAAWuiE,QAKnBv8D,aAAc,CAACu8D,IACfllD,gBAAiB,CAACklD,IAClBt8D,QAAS,CAACs8D,OAECC,oBCnBX,SAAAG,EAAmB3iE,GAAAlE,KAAAkE,UAAAA,EACrB,gDADgC00B,MADnBiuC,EAAa5lE,EAAA,CALzBkZ,EAAAA,UAAU,CACTtQ,SAAU,UACV5D,SAAA,kKACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9Bs+C,oBCWb,SAAAC,KAAyB,OAAZA,EAAU7lE,EAAA,CAbtB8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcwiB,EAAAA,aAAckB,IACtCle,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbylD,iBAAkB,CAAE7iE,UAAW2iE,QAIrC38D,aAAc,CAAC28D,IACf18D,QAAS,CAAC08D,IACVtlD,gBAAiB,CAACslD,OAEPC,oBCVX,SAAAE,EAAmB9iE,GAAAlE,KAAAkE,UAAAA,EACrB,gDADgC00B,MADnBouC,EAAkB/lE,EAAA,CAL9BkZ,EAAAA,UAAU,CACTtQ,SAAU,eACV5D,SAAA,+EACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9By+C,oBCcb,SAAAC,KAAiC,OAApBA,EAAkBhmE,EAAA,CAlB9B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,cACVwF,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb4lD,sBAAuB,CACrBhjE,UAAW8iE,IAEbG,yBAA0B,CACxBjjE,UAAW8iE,QAKnB98D,aAAc,CAAC88D,IACf78D,QAAS,CAAC68D,IACVzlD,gBAAiB,CAACylD,OAEPC,oBCaX,SAAAG,EACS9vC,EACG8jB,EACA5+B,GAHZ,IAAA3W,EAAA7F,KACSA,KAAAs3B,cAAAA,EACGt3B,KAAAo7C,WAAAA,EACAp7C,KAAAwc,OAAAA,EAbZxc,KAAAqnE,aAAe,EAMfrnE,KAAAsnE,eAAoC,GAUpCtnE,KAAA0zD,YAAiC1zD,KAAKs3B,cAAciB,MAAM5tB,KACxDsB,EAAAA,sBAAqB,SAACukC,EAAG+2B,GAAM,OAAA/2B,MAAAA,OAAC,EAADA,EAAG/hC,eAAe84D,MAAAA,OAAC,EAADA,EAAG94D,eACpD2nB,EAAAA,WAAU,SAACoC,SACT,OAAAvnB,EAAAA,eACmB,QAAjB3L,EAACkzB,MAAAA,OAAI,EAAJA,EAAM/pB,kBAAU,IAAAnJ,EAAAA,EAAI,IAAIqZ,MAAM,KAAK/T,KAAI,SAAC1G,GACvC,OAAA2B,EAAKu1C,WAAWvZ,iBAAsB39B,GAAWyG,KAC/CsB,EAAAA,uBACArB,EAAAA,KAAI,SAACkL,GACH,GAAKA,EAWL,OAPKA,EAAIotB,WACPptB,EAAGvV,EAAAA,EAAA,GACEuV,GAAG,CACNotB,SAAUptB,EAAI0xD,YAIlBjnE,EAAAA,EAAA,GACKuV,GAAG,CACNo2C,MAAU1zB,EAAKkJ,IAAG,SAAS5rB,EAAI4rB,kBAgD/C,OAvCE0lC,EAAAlnE,UAAAunE,OAAA,SAAOC,GACL1nE,KAAKqnE,aAAeK,GAGtBN,EAAAlnE,UAAAqJ,SAAA,qBACEvJ,KAAKqnE,aAC+C,QADnClqC,EACwB,QADxBvkB,EACiB,QADjBtT,EACftF,KAAKwc,OAAOqN,aAAa89C,eAAO,IAAAriE,OAAA,EAAAA,EAAEm1B,aAAK,IAAA7hB,OAAA,EAAAA,EAAEgvD,iBAAS,IAAAzqC,EAAAA,EAAIn9B,KAAKqnE,cAG/DD,EAAAlnE,UAAAwT,gBAAA,WAAA,IAAA7N,EAAA7F,KAKMA,KAAK+W,SAASjW,OAAS,EACzBd,KAAK6nE,eAAe7nE,KAAK+W,UAEzB/W,KAAK0N,aAAe1N,KAAK+W,SAAS/I,QAAQI,WACxC,SAAC05D,GACC,OAAAjiE,EAAKgiE,eAAeC,OAKpBV,EAAAlnE,UAAA2nE,eAAR,SAAuB9wD,GAAvB,IAAAlR,EAAA7F,KACE+W,EAASrI,SAAQ,SAAC0C,GACZA,EAAKkyB,QAAUlyB,EAAKkyB,OAAOykC,SAASC,eACtCniE,EAAKyhE,eAAe5kE,KAAK0O,EAAKkyB,OAAOykC,SAASC,gBAE9CniE,EAAKyhE,eAAe5kE,KAAK,UAK/B0kE,EAAAlnE,UAAAmP,YAAA,WACMrP,KAAK0N,cACP1N,KAAK0N,aAAaE,wDAvEEgrB,UACAgJ,EAAAA,kBACJzjB,EAAAA,aAXqBld,EAAA,CAAxCgnE,EAAAA,aAAaplC,oCAJHukC,EAA8BnmE,EAAA,CAL1CkZ,EAAAA,UAAU,CACTtQ,SAAU,6BACV5D,SAAA,miBACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B6+C,oBCFb,SAAAc,KAA0C,OAA7BA,EAA2BjnE,EAAA,CAfvC8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcu+B,GAAqBh5B,EAAc2R,EAAAA,YAC3D1R,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb6mD,yBAA0B,CACxBjkE,UAAWkjE,QAKnBl9D,aAAc,CAACk9D,IACf7lD,gBAAiB,CAAC6lD,IAClBj9D,QAAS,CAACi9D,OAECc,oBCZX,SAAAE,EACYroB,EACAb,GADAl/C,KAAA+/C,mBAAAA,EACA//C,KAAAk/C,wBAAAA,EAuBd,OApBEkpB,EAAAloE,UAAAogD,aAAA,WACE,OAAOtgD,KAAK+/C,mBAAmBO,gBAGjC8nB,EAAAloE,UAAAmoE,yBAAA,WACE,OAAOroE,KAAK+/C,mBAAmB8P,uBAGjCuY,EAAAloE,UAAAugD,cAAA,WACEzgD,KAAK+/C,mBAAmBU,iBAG1B2nB,EAAAloE,UAAAooE,eAAA,SAAeznB,GACb7gD,KAAK+/C,mBAAmBuoB,eAAeznB,IAGzCunB,EAAAloE,UAAAqoE,kBAAA,SAAkBC,EAAmB3nB,GACnC7gD,KAAK+/C,mBAAmBwoB,kBAAkBC,EAAW3nB,GACrD7gD,KAAKk/C,wBAAwBupB,yEAtBC9hC,EAAAA,0BACKhB,EAAAA,2BAH1ByiC,EAA2BnnE,EAAA,CADvC+B,EAAAA,cACYolE,oBCiBX,SAAAM,EACSh3D,EACG4yB,EACAyb,EACAb,GAHHl/C,KAAA0R,QAAAA,EACG1R,KAAAskC,YAAAA,EACAtkC,KAAA+/C,mBAAAA,EACA//C,KAAAk/C,wBAAAA,EARZl/C,KAAA2oE,oBAAqB,EACrB3oE,KAAA4oE,qBAAsB,EAiHxB,OAvGEF,EAAAxoE,UAAAqJ,SAAA,WACEvJ,KAAK6oE,WAAa7oE,KAAK0R,QAAQ4uC,eAC/BtgD,KAAK8oE,uBAAyB9oE,KAAK0R,QAAQ22D,2BAC3CroE,KAAK0R,QAAQ+uC,iBAGfioB,EAAAxoE,UAAA6oE,uBAAA,WACE/oE,KAAK4oE,qBAAsB,EAC3B5oE,KAAK2oE,oBAAqB,GAG5BD,EAAAxoE,UAAA8oE,wBAAA,SAAwBnoB,GACtB7gD,KAAK2oE,oBAAqB,EAC1B3oE,KAAK4oE,qBAAsB,EAC3B5oE,KAAKipE,eAAiBpoB,GAGxB6nB,EAAAxoE,UAAAgpE,iBAAA,SAAiBroB,GACf7gD,KAAK2oE,oBAAqB,EAC1B3oE,KAAK0R,QAAQ42D,eAAeznB,IAG9B6nB,EAAAxoE,UAAAipE,iBAAA,WACEnpE,KAAK2oE,oBAAqB,GAG5BD,EAAAxoE,UAAAkpE,kBAAA,SAAkBvoB,GAChB7gD,KAAK4oE,qBAAsB,EAC3B5oE,KAAK0R,QAAQ62D,kBAAkBvoE,KAAKipE,eAAmB,GAAGpoB,IAG5D6nB,EAAAxoE,UAAAmpE,kBAAA,WACErpE,KAAK4oE,qBAAsB,GAG7BF,EAAAxoE,UAAAkwD,eAAA,SAAevP,GACb,OAAO5vC,EAAAA,cAAc,CACnBjR,KAAKskC,YAAYqmB,UAAU,uBAC3B3qD,KAAKskC,YAAYqmB,UAAU,4BAC3B3qD,KAAKskC,YAAYqmB,UAAU,iBAC3B3qD,KAAKskC,YAAYqmB,UAAU,eAC3B3qD,KAAKskC,YAAYqmB,UAAU,2CAC1BhgD,KACDC,EAAAA,KACE,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GACCgkE,EAAA1wD,EAAA,GACA2wD,EAAA3wD,EAAA,GACA4wD,EAAA5wD,EAAA,GACA6wD,EAAA7wD,EAAA,GACA8wD,EAAA9wD,EAAA,GAEIsuC,EAAS,GAETrG,EAAQqG,QAAUrG,EAAQqG,OAAOvuB,UACnCuuB,EAASrG,EAAQqG,OAAOvuB,QAAU,MAGpC,IAAMyzB,EAA6C,GAOnD,OANKvL,EAAQD,gBACXwL,EAAQ1pD,KAAK,CAAE4qC,KAAMi8B,EAAkBj2D,MAAO,YAEhD84C,EAAQ1pD,KAAK,CAAE4qC,KAAMm8B,EAAUn2D,MAAO,SACtC84C,EAAQ1pD,KAAK,CAAE4qC,KAAMk8B,EAAYl2D,MAAO,WAEjC,CACL61C,SAAUtI,EAAQgG,UAAY,IAAMhG,EAAQiG,SAC5CsC,KAAM,CACJvI,EAAQkG,MACRlG,EAAQmG,MACRnG,EAAQoG,KAAO,KAAOC,EAASrG,EAAQuG,QAAQzuB,QAC/CkoB,EAAQwG,WACRxG,EAAQwI,OAEV+C,QAASA,EACTC,OAAQxL,EAAQD,eAAiB,KAAK0oB,EAAgB,GACtDK,UAAWD,QAOrBhB,EAAAxoE,UAAA0pE,oBAAA,SAAoBpB,GAClBxoE,KAAK+/C,mBAAmB6pB,oBAAoBpB,GAC5CxoE,KAAKk/C,wBAAwBupB,gCAG/BC,EAAAxoE,UAAA2pE,cAAA,SAAcrB,GACZxoE,KAAK+/C,mBAAmB+pB,kBAAkBtB,GAC1CxoE,KAAKk/C,wBAAwBupB,gCAG/BC,EAAAxoE,UAAA6pE,QAAA,SAAQvB,GACFxoE,KAAKqmB,WAAamiD,EACpBxoE,KAAKqmB,SAAWmiD,EAEhBxoE,KAAK6pE,cAAcrB,IAIvBE,EAAAxoE,UAAAomB,WAAA,WACEtmB,KAAKqmB,SAAW,+CA3GA+hD,UACOriC,EAAAA,0BACOY,EAAAA,0BACKhB,EAAAA,2BAd1B+iC,EAAoBznE,EAAA,CAJhCkZ,EAAAA,UAAU,CACTtQ,SAAU,kBACV5D,SAAA,yjFAEWyiE,oBC8Bb,SAAAsB,KAAgC,OAAnBA,EAAiB/oE,EAAA,CA/B7B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACA+c,GACAwoC,GACA/tC,GACAN,EAAAA,YAEFjX,aAAc,CAACw+D,IACfv+D,QAAS,CAACu+D,IACVj5D,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb2oD,4BAA6B,CAC3B/lE,UAAWwkE,GACXj5D,UAAW,CACT,CACEkB,QAASy3D,GACT/uC,SAAU+uC,GACV9uC,KAAM,CAACqN,EAAAA,sBAGX7gB,OAAQ,CAACC,EAAAA,eAIf4gB,EAAAA,mBACAyhC,IAEF7mD,gBAAiB,CAACmnD,OAEPsB,oBCdX,SAAAE,EACYx5B,EACFjG,EACAhoB,EACAF,EACArS,EACAi6D,GALEnqE,KAAA0wC,aAAAA,EACF1wC,KAAAyqC,YAAAA,EACAzqC,KAAAyiB,YAAAA,EACAziB,KAAAuiB,qBAAAA,EACAviB,KAAAkQ,eAAAA,EACAlQ,KAAAmqE,mBAAAA,EAZVnqE,KAAAkf,UAAYtX,EAAAA,UAEJ5H,KAAA0N,aAAe,IAAIC,EAAAA,aAuE7B,OA1DEu8D,EAAAhqE,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAKoqE,WAAapqE,KAAKyiB,YAAYonB,eACnC7pC,KAAKyqC,YAAY4/B,8BACjBrqE,KAAK0N,aAAaxF,IAChBlI,KAAKyqC,YACF6/B,6BACAl8D,WAAU,SAAC+V,GAAY,OAAAte,EAAKuvC,UAAUjxB,OAG3CnkB,KAAK0N,aAAaxF,IAChBlI,KAAKyqC,YACF8/B,2BACAn8D,WAAU,SAACzL,GAAU,OAAAkD,EAAKyvC,QAAQ3yC,OAEvC3C,KAAKiqD,WAAajqD,KAAKyqC,YAAY+/B,8BAGrCN,EAAAhqE,UAAAk1C,UAAA,SAAUjxB,GAAV,IAAAte,EAAA7F,KACMmkB,IACFnkB,KAAKuxC,eACLvxC,KAAKmqE,mBACFxf,UAAU,0CACVhgD,KAAKM,EAAAA,SACLmD,WAAU,SAACg7C,GACVvjD,EAAK0c,qBAAqBra,IACxBkhD,EACAxkC,EAAAA,kBAAkBC,0BAGxB7kB,KAAKkQ,eAAeE,GAAG,CAAEC,QAAS,WAItC65D,EAAAhqE,UAAAo1C,QAAA,SAAQ3yC,GAAR,IAAAkD,EAAA7F,KACM2C,IACF3C,KAAKuxC,eACLvxC,KAAKmqE,mBACFxf,UAAU,qCACVhgD,KAAKM,EAAAA,SACLmD,WAAU,SAACg7C,GACVvjD,EAAK0c,qBAAqBra,IAAIkhD,EAAMxkC,EAAAA,kBAAkBumB,qBAK9D++B,EAAAhqE,UAAAqxC,aAAA,SAAa7pC,GACX1H,KAAK0wC,aAAa5b,mBAAmBptB,IAGvCwiE,EAAAhqE,UAAAuqE,aAAA,WACEzqE,KAAKyqC,YAAYrlC,UAGnB8kE,EAAAhqE,UAAAmP,YAAA,WACMrP,KAAK0N,cACP1N,KAAK0N,aAAaE,wDA/DI2mB,UACHmS,EAAAA,mBACAhhB,EAAAA,mBACSD,EAAAA,4BACNnV,EAAAA,sBACIy1B,EAAAA,sBAbnBmkC,EAA0BjpE,EAAA,CALtCkZ,EAAAA,UAAU,CACTtQ,SAAU,yBACV5D,SAAA,yvCACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B2hD,oBCbX,SAAAQ,EAAoBh6B,GAAA1wC,KAAA0wC,aAAAA,EAOtB,OALEg6B,EAAAxqE,UAAA2yC,UAAA,WACE7yC,KAAKgf,MAAQhf,KAAK0wC,aAAahc,KAAKw1C,GAA4B,CAC9Dj3B,UAAU,IACTC,4DAL6B3e,MAFvBm2C,EAAqBzpE,EAAA,CALjCkZ,EAAAA,UAAU,CACTtQ,SAAU,mBACV5D,SAAA,6dACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BmiD,oBC4Bb,SAAAC,KAAiC,OAApBA,EAAkB1pE,EAAA,CAvB9B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aACAC,EAAAA,UACAvL,EAAAA,WACAvC,GACA6C,IAEFhS,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbopD,sBAAuB,CACrBxmE,UAAWwmE,GACX5kD,OAAQ,CAACC,EAAAA,gBAKjB7b,aAAc,CAACwgE,GAAuBR,IACtC//D,QAAS,CAACugE,GAAuBR,IACjC3oD,gBAAiB,CAACmpD,GAAuBR,OAE9BS,oBC3BX,SAAAC,EACUp9B,EACA/C,EACAv6B,GAFAlQ,KAAAwtC,GAAAA,EACAxtC,KAAAyqC,YAAAA,EACAzqC,KAAAkQ,eAAAA,EAsBZ,OAnBE06D,EAAA1qE,UAAAqJ,SAAA,WACEvJ,KAAK6qE,mBAAqB7qE,KAAKwtC,GAAGv6B,MAAM,CACtC63D,UAAW,CACT,GACA,CAACl9B,EAAAA,WAAWC,SAAUhQ,GAAqBC,oBAKjD8sC,EAAA1qE,UAAA6qE,2BAAA,WACM/qE,KAAK6qE,mBAAmB98B,OAC1B/tC,KAAKyqC,YAAYsgC,2BACf/qE,KAAK6qE,mBAAmBxoE,MAAMyoE,WAEhC9qE,KAAKkQ,eAAeE,GAAG,CAAEC,QAAS,WAElCrQ,KAAK6qE,mBAAmB78B,6DArBdC,EAAAA,mBACSvH,EAAAA,mBACGp2B,EAAAA,kBANfs6D,EAAuB3pE,EAAA,CAJnCkZ,EAAAA,UAAU,CACTtQ,SAAU,qBACV5D,SAAA,y3BAEW2kE,oBC6Bb,SAAAI,KAAmC,OAAtBA,EAAoB/pE,EAAA,CAvBhC8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACA4b,EAAAA,oBACA4G,EAAAA,aACAC,EAAAA,UACAvL,EAAAA,WACAkM,IAEF5d,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbspD,wBAAyB,CACvB1mE,UAAW0mE,GACX9kD,OAAQ,CAACmlD,EAAAA,mBAKjB/gE,aAAc,CAAC0gE,IACfzgE,QAAS,CAACygE,IACVrpD,gBAAiB,CAACqpD,OAEPI,oBCfX,SAAAE,EAAsBh7D,GAAAlQ,KAAAkQ,eAAAA,EAFAlQ,KAAAmrE,OAAS,MAejC,OAXED,EAAAhrE,UAAAkrE,SAAA,SAAS93D,GACHtT,KAAKqrE,eAAet9B,MACtB/tC,KAAKkQ,eAAeE,GAAG,CACrBC,QAASrQ,KAAKsrE,aACd5wC,OAAQ,CAAE/V,KAAM3kB,KAAK26B,cAGvB36B,KAAKqrE,eAAer9B,mBACpB16B,EAAME,6DAV4BlD,EAAAA,kBAP7BrP,EAAA,CAAR0I,EAAAA,yCACQ1I,EAAA,CAAR0I,EAAAA,8CACQ1I,EAAA,CAAR0I,EAAAA,yCACQ1I,EAAA,CAAR0I,EAAAA,4CAEqB1I,EAAA,CAArBqR,EAAAA,YAAY,uCANF44D,EAA0BjqE,EAAA,CALtCkZ,EAAAA,UAAU,CACTtQ,SAAU,yBACV5D,SAAA,qpBACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B2iD,oBCHb,SAAAK,KAAsC,OAAzBA,EAAuBtqE,EAAA,CALnC8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcwiB,EAAAA,aAAcC,EAAAA,UAAWvL,EAAAA,YACjDjX,aAAc,CAACghE,IACf/gE,QAAS,CAAC+gE,OAECK,MCFb,SAASC,GAAyB3+C,GAChC,OAAKA,EAAQxqB,MAGI7C,OAAOisE,OAAO5+C,EAAQxqB,OAAOkpB,QAC5C,SAACpG,EAAahc,GAAgB,OAAAgc,EAAMhc,IACpC,GAEgB,EAAI,KAAO,CAAEuiE,0BAA0B,GANhD,M3BXC5I,GAAAA,EAAAA,iBAAAA,EAAAA,eAAc,KACxBA,GAAA,OAAA,GAAA,SACAA,GAAAA,GAAA,OAAA,GAAA,S2BmBF,ICZY6I,GDYZC,GAAA,WAIE,SAAAA,EAAsBvwC,GAAAr7B,KAAAq7B,oBAAAA,EA2GxB,OAjGEuwC,EAAA1rE,UAAA2rE,kBAAA,WAAA,IAAAhmE,EAAA7F,KACE,OAAOA,KAAK8rE,UAAUnhE,KACpByrB,EAAAA,WAAU,SAAC2a,GACT,OAAOlrC,EAAKqyC,aAAavtC,KACvBC,EAAAA,KAAI,SAACe,GACH,OAAAA,EAAQtG,QACN,SAAC0G,GAAU,OAAAlG,EAAKurC,eAAeL,EAAMhlC,GAAO1J,MAAQ,cAahEupE,EAAA1rE,UAAA6rE,SAAA,WACE,OAAO/rE,KAAKq7B,oBAAoBH,mBAMlC0wC,EAAA1rE,UAAA4rE,QAAA,WAAA,IAAAjmE,EAAA7F,KACE,OAAOA,KAAK+rE,WAAWphE,KACrBqF,EAAAA,KAAI,SAACusB,GACE12B,EAAKkrC,MAAQlrC,EAAKkrC,KAAKroC,IAAI,aAAarG,QAAUk6B,EAAM5X,MAC3D9e,EAAKmmE,UAAUzvC,MAGnB3xB,EAAAA,KAAI,WAAM,OAAA/E,EAAKkrC,UAIX66B,EAAA1rE,UAAA8rE,UAAR,SAAkBzvC,GAAlB,IAAA12B,EAAA7F,KACEA,KAAK+wC,KAAO,IAAIC,EAAAA,UAAU,IAC1BhxC,KAAK+wC,KAAKa,WAAW,YAAa,IAAIF,EAAAA,YAAYnV,EAAM5X,OAExD,IAAMsnD,EAAa,IAAIj7B,EAAAA,UACrB,GACA,CAAEk7B,WAAY,CAACV,MAEjBxrE,KAAK+wC,KAAKa,WAAW,UAAWq6B,IAE/B1vC,EAAM5wB,SAAW,IAAI+C,SAAQ,SAAC3C,GAC7B,IAAM3K,EAAM2K,EAAM2xB,YAAY1kB,WAC9BizD,EAAWr6B,WACTxwC,EACA,IAAIswC,EAAAA,YAAY,EAAG,CACjBw6B,WAAY,CACVt+B,EAAAA,WAAW/f,IAAI,GACf+f,EAAAA,WAAWlf,IAAI7oB,EAAKsmE,oBAAoBpgE,YAOxC6/D,EAAA1rE,UAAAkxC,eAAV,SAAyBL,EAAiBhlC,GACxC,OAAoBglC,EAAKroC,IAAI,WAAWA,IAAIqD,EAAM2xB,YAAY1kB,aAOhE4yD,EAAA1rE,UAAAksE,gBAAA,SAAgBrgE,GACd,IAAMsgE,EAAkBrsE,KAAKoxC,eAAepxC,KAAK+wC,KAAMhlC,GAAO1J,MACxDiqE,EAAe9sE,OAAOgB,OAAO,GAAIuL,EAAMwgE,WAY7C,OAXAD,EAAajqE,MACX+T,KAAKC,MAAMtK,EAAMwgE,UAAUlqE,MAAQgqE,EAAkB,KAAO,IAE9DC,EAAajyB,eAAiBmyB,EAAAA,eAC5BF,EAAajqE,MAEb,KACAoqE,EAAAA,kBAAkBH,EAAapI,YAAa,UAC5CoI,EAAapI,aAGRoI,GAGTV,EAAA1rE,UAAAisE,oBAAA,SAAoBpgE,GAClB,OACG/L,KAAK0sE,iBACF3gE,EAAM4gE,oBACN5gE,EAAM6gE,qBAAuB7gE,EAAM8kC,UAI3C+6B,EAAA1rE,UAAAwsE,eAAA,WACE,OAAO1sE,KAAK6sE,YAAc/J,EAAAA,eAAegK,iDAzGA1yC,MAJvBwxC,EAAiB3qE,EAAA,CADtC+B,EAAAA,cACqB4oE,GAAtB,iBEJE,SAAAmB,EAAsBC,GAAAhtE,KAAAgtE,kBAAAA,EAJbhtE,KAAAitE,gBAAiB,EAE1BjtE,KAAAktE,MAA+BltE,KAAKgtE,kBAAkBlB,UA4BxD,OAxBEiB,EAAA7sE,UAAAmuB,WAAA,SAAW0iB,EAAiBhlC,GAI1B,OAFEglC,EAAKroC,IAAI,WAAWA,IAAIqD,EAAM2xB,YAAY1kB,aAK9C+zD,EAAA7sE,UAAAitE,OAAA,SAAOp8B,GAAP,IAAAlrC,EAAA7F,KACEA,KAAK2L,QAAQ+C,SAAQ,SAAC3C,GACpB,OAAAlG,EAAKwoB,WAAW0iB,EAAMhlC,GAAOmiB,SAASroB,EAAKsmE,oBAAoBpgE,QAInEghE,EAAA7sE,UAAAktE,aAAA,SAAarhE,GACX,OAAO/L,KAAKgtE,kBAAkBZ,gBAAgBrgE,IAGhDghE,EAAA7sE,UAAAisE,oBAAA,SAAoBpgE,GAClB,OAAO/L,KAAKgtE,kBAAkBb,oBAAoBpgE,IAGpDghE,EAAA7sE,UAAAwsE,eAAA,WACE,OAAO1sE,KAAKgtE,kBAAkBN,2DAxBSd,MALhC3qE,EAAA,CAAR0I,EAAAA,uCACQ1I,EAAA,CAAR0I,EAAAA,8CAFUojE,EAA4B9rE,EAAA,CALxCkZ,EAAAA,UAAU,CACTtQ,SAAU,uBACV5D,SAAA,+6JACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BwkD,oBCcb,SAAAM,KAAoC,OAAvBA,EAAqBpsE,EAAA,CAdjC8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACA4b,EAAAA,oBACA1E,EAAAA,WACAmL,GACAqC,GACAvN,EAAAA,qBACAiM,IAEFnjB,aAAc,CAAC6iE,IACf5iE,QAAS,CAAC4iE,IACVxrD,gBAAiB,CAACwrD,OAEPM,oBCFX,SAAAC,EAAsBN,GAAtB,IAAAnnE,EAAA7F,KAAsBA,KAAAgtE,kBAAAA,EARtBhtE,KAAAktE,MAAQltE,KAAKgtE,kBACVlB,UACAnhE,KAAKqF,EAAAA,KAAI,SAAC+gC,GAAS,OAAClrC,EAAK80B,UAAYoW,EAAK1uC,MAAMs4B,cAEnD36B,KAAAi4C,SAEIj4C,KAAKgtE,kBAAkBnB,oBAW7B,OAPEyB,EAAAptE,UAAAqtE,OAAA,SAAOx8B,GACDA,EAAKhD,MACP/tC,KAAKgtE,kBAAkBQ,OAEvBz8B,EAAK/C,6DANgC49B,MAX9B0B,EAAgCrsE,EAAA,CAL5CkZ,EAAAA,UAAU,CACTtQ,SAAU,+BACV5D,SAAA,imBACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B+kD,qBCSX,SAAAG,EACYpyC,EACAhB,EACAyK,EACAviB,GAJZ,IAAA1c,EAMEC,EAAA/E,KAAAf,KAAMq7B,IAAoBr7B,YALhB6F,EAAAw1B,oBAAAA,EACAx1B,EAAAw0B,iBAAAA,EACAx0B,EAAAi/B,QAAAA,EACAj/B,EAAA0c,qBAAAA,EANZ1c,EAAAgnE,UAAY/J,EAAAA,eAAegK,gBADiBhtE,EAAA2tE,EAAA3nE,GAc5C2nE,EAAAvtE,UAAAg4C,WAAA,WACE,OAAOl4C,KAAK+rE,WAAWphE,KACrBtF,EAAAA,QAAO,SAACk3B,GAAU,SAAEA,MAAAA,OAAK,EAALA,EAAO5wB,YAC3Bf,EAAAA,KAAI,SAAC2xB,GACH,OAAAA,EAAM5wB,QAAQtG,QACZ,SAAC0G,GAAU,OAAuB,IAAvBA,EAAM2xB,aAAsB3xB,EAAM4gE,oBAAsB,UAM3Ec,EAAAvtE,UAAAstE,KAAA,WAAA,IAAA3nE,EAAA7F,KACQ26B,EAAY36B,KAAK+wC,KAAK1uC,MAAMs4B,UAC5BhvB,EAAU3L,KAAK+wC,KAAK1uC,MAAMsJ,QAC1B+hE,EAA4CluE,OAAOorB,KAAKjf,GAC3DtG,QAAO,SAACq4B,GAAgB,OAAQ/xB,EAAQ+xB,GAAe,KACvD9yB,KACC,SAAC8yB,GACC,MAAA,CACED,iBAAkBkwC,OAAOjwC,GACzBmT,SAAkBllC,EAAQ+xB,OAIlC19B,KAAK+wC,KAAKwE,QAEVv1C,KAAKq6B,iBAAiBuzC,YAAYjzC,EAAW,CAC3CkzC,+BAAgCH,IAGlC1tE,KAAKq6B,iBACFyzC,wBACAnjE,KAAKM,EAAAA,MAAMhH,UACXmK,WAAU,WAAM,OAAAvI,EAAKkoE,UAAUpzC,OAG5B8yC,EAAAvtE,UAAA6tE,UAAR,SAAkBpzC,GAChB36B,KAAKq6B,iBAAiB2zC,+BACtBhuE,KAAKuiB,qBAAqBra,IACxB,CACE9G,IAAK,mDACLs5B,OAAQ,CAAEC,UAASA,IAErB/V,EAAAA,kBAAkBC,uBAEpB7kB,KAAK8kC,QAAQ10B,GAAG,CACdC,QAAS,qDAxDoB+pB,UACHe,EAAAA,wBACT7qB,EAAAA,sBACamV,EAAAA,iPAPvBgoD,EAAwBxsE,EAAA,CAHpC+B,EAAAA,WAAW,CACVC,WAAY,UAEDwqE,IAAiC7B,kBCP5C,SAAAqC,EACYnpC,EACAkoC,GADAhtE,KAAA8kC,QAAAA,EACA9kC,KAAAgtE,kBAAAA,SAGZiB,EAAA/tE,UAAA04C,YAAA,WAAA,IAAA/yC,EAAA7F,KACE,OAAOA,KAAKgtE,kBAAkBlB,UAAUnhE,KACtCC,EAAAA,KAAI,SAACmmC,GACH,QAAKA,EAAKhD,QAIRloC,EAAKi/B,QAAQ10B,GAAG,CAAEC,QAAS,YACpB,iDAZMC,EAAAA,sBACUm9D,uJAHpBQ,EAAsBhtE,EAAA,CAHlC+B,EAAAA,WAAW,CACVC,WAAY,UAEDgrE,SCYC,CACJ59D,QAAS,2BA4BnB69D,GAAA,WAAA,SAAAA,KAA4C,OAA/BA,EAA6BjtE,EAAA,CArCzC8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aAAa0hD,SAAS,CACpB,CACEtmC,KAAM,KACN+Q,YAAa,CAACymB,IACdn7D,UAAW8xD,GACXx9B,KAAI41C,MAKRvoD,EAAAA,oBACAwnD,GACA9B,IAEF97D,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbgsD,iCAAkC,CAChCppE,UAAWopE,GACXxnD,OAAQ,CAACC,EAAAA,UAAWkoD,IACpBx+D,UAAW,CACT,CACEkB,QAASi7D,GACT1oE,YAAauqE,UAOzBvjE,aAAc,CAACojE,IACfnjE,QAAS,CAACmjE,IACV/rD,gBAAiB,CAAC+rD,OAEPY,GAAb,iBC/BE,SAAAG,EAAsBrB,GAAtB,IAAAnnE,EAAA7F,KAAsBA,KAAAgtE,kBAAAA,EANtBhtE,KAAAktE,MAAQltE,KAAKgtE,kBACVlB,UACAnhE,KAAKqF,EAAAA,KAAI,SAAC+gC,GAAS,OAAClrC,EAAK80B,UAAYoW,EAAK1uC,MAAMs4B,cAEnD36B,KAAAi4C,SAAqCj4C,KAAKgtE,kBAAkB90B,aAG9D,gDAD2C0zB,MAT9ByC,EAAoBptE,EAAA,CALhCkZ,EAAAA,UAAU,CACTtQ,SAAU,kBACV5D,SAAA,soBACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B8lD,SCYC,CACJh+D,QAAS,eA4BnBi+D,GAAA,WAAA,SAAAA,KAAgC,OAAnBA,EAAiBrtE,EAAA,CArC7B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aAAa0hD,SAAS,CACpB,CACEtmC,KAAM,KACN+Q,YAAa,CAACymB,IACdn7D,UAAW8xD,GACXx9B,KAAI+1C,MAKRlB,GACA9B,GACAl+C,IAEF5d,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb+sD,qBAAsB,CACpBnqE,UAAWmqE,GACXvoD,OAAQ,CAACC,EAAAA,WACTtW,UAAW,CACT,CACEkB,QAASi7D,GACT1oE,YAAauqE,UAOzBvjE,aAAc,CAACmkE,IACflkE,QAAS,CAACkkE,IACV9sD,gBAAiB,CAAC8sD,OAEPC,GAAb,iBC7CA,SAAAE,KAAsC,OAAzBA,EAAuBvtE,EAAA,CAHnC8I,EAAAA,SAAS,CACRC,QAAS,CAACskE,GAAmBJ,OAElBM,qBCcX,SAAAC,EACYpzC,EACAqzC,EACA5pC,EACAviB,GAJZ,IAAA1c,EAMEC,EAAA/E,KAAAf,KAAMq7B,IAAoBr7B,YALhB6F,EAAAw1B,oBAAAA,EACAx1B,EAAA6oE,qBAAAA,EACA7oE,EAAAi/B,QAAAA,EACAj/B,EAAA0c,qBAAAA,EANZ1c,EAAAgnE,UAAY/J,EAAAA,eAAe6L,gBADW7uE,EAAA2uE,EAAA3oE,GAYtC2oE,EAAAvuE,UAAAg4C,WAAA,WACE,OAAOl4C,KAAK+rE,WAAWphE,KACrBtF,EAAAA,QAAO,SAACk3B,GAAU,QAAEA,EAAM5wB,WAC1Bf,EAAAA,KAAI,SAAC2xB,GACH,OAAAA,EAAM5wB,QAAQtG,QACZ,SAAC0G,GAAU,OAAuB,IAAvBA,EAAM2xB,aAAsB3xB,EAAM6gE,mBAAqB,UAM1E6B,EAAAvuE,UAAAstE,KAAA,WAAA,IAAA3nE,EAAA7F,KACQ26B,EAAY36B,KAAK+wC,KAAK1uC,MAAMs4B,UAC5BhvB,EAAU3L,KAAK+wC,KAAK1uC,MAAMsJ,QAC1B+hE,EAA4CluE,OAAOorB,KAAKjf,GAC3DtG,QAAO,SAACq4B,GAAgB,OAAQ/xB,EAAQ+xB,GAAe,KACvD9yB,KACC,SAAC8yB,GACC,MAAA,CACED,iBAAkBkwC,OAAOjwC,GACzBmT,SAAkBllC,EAAQ+xB,OAIlC19B,KAAK+wC,KAAKwE,QAEVv1C,KAAK0uE,qBAAqBE,yBAAyB,CACjDj0C,UAASA,EACTk0C,yBAA0BnB,IAG5B1tE,KAAK0uE,qBACFI,0BACAnkE,KAAKM,EAAAA,MAAMhH,UACXmK,WAAU,WAAM,OAAAvI,EAAKkoE,gBAGlBU,EAAAvuE,UAAA6tE,UAAR,WAAA,IAAAloE,EAAA7F,KACEA,KAAK0uE,qBACFK,wBACApkE,KAAKM,EAAAA,OAAM,SAAC1J,GAAM,QAAEA,MACpB6M,WAAU,SAAC4gE,GACV,IAAMC,EAAMD,EAAcC,IAC1BppE,EAAK0c,qBAAqBra,IACxB,CACE9G,IAAK,mDACLs5B,OAAQ,CAAEu0C,IAAGA,IAEfrqD,EAAAA,kBAAkBC,uBAEpBhf,EAAKi/B,QAAQ10B,GAAG,CACdC,QAAS,uBACTqqB,OAAQ,CAAEu0C,IAAGA,kDA5DY70C,UACC80C,EAAAA,iCACb5+D,EAAAA,sBACamV,EAAAA,0PAPvBgpD,EAAkBxtE,EAAA,CAH9B+B,EAAAA,WAAW,CACVC,WAAY,UAEDwrE,IAA2B7C,kBCPtC,SAAAuD,EACYrqC,EACAkoC,GADAhtE,KAAA8kC,QAAAA,EACA9kC,KAAAgtE,kBAAAA,SAGZmC,EAAAjvE,UAAA04C,YAAA,WAAA,IAAA/yC,EAAA7F,KACE,OAAOA,KAAKgtE,kBAAkBlB,UAAUnhE,KACtCC,EAAAA,KAAI,SAACmmC,GACH,QAAKA,EAAKhD,QAIRloC,EAAKi/B,QAAQ10B,GAAG,CAAEC,QAAS,YACpB,iDAZMC,EAAAA,sBACUm+D,uJAHpBU,EAAgBluE,EAAA,CAH5B+B,EAAAA,WAAW,CACVC,WAAY,UAEDksE,oBCaX,SAAAC,EAAsBpC,GAAtB,IAAAnnE,EAAA7F,KAAsBA,KAAAgtE,kBAAAA,EARtBhtE,KAAAktE,MAAQltE,KAAKgtE,kBACVlB,UACAnhE,KAAKqF,EAAAA,KAAI,SAAC+gC,GAAS,OAAClrC,EAAK80B,UAAYoW,EAAK1uC,MAAMs4B,cAEnD36B,KAAAi4C,SAEIj4C,KAAKgtE,kBAAkBnB,oBAQ7B,OAJEuD,EAAAlvE,UAAAqtE,OAAA,SAAOx8B,GACLA,EAAK6F,UACL52C,KAAKgtE,kBAAkBQ,iDAJgB5B,MAX9BwD,EAAgCnuE,EAAA,CAL5CkZ,EAAAA,UAAU,CACTtQ,SAAU,+BACV5D,SAAA,imBACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B6mD,SCeC,CACJ/+D,QAAS,2BA6BnBg/D,GAAA,WAAA,SAAAA,KAA4C,OAA/BA,EAA6BpuE,EAAA,CAtCzC8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aAAa0hD,SAAS,CACpB,CACEtmC,KAAM,KACN+Q,YAAa,CAACymB,IACdn7D,UAAW8xD,GACXx9B,KAAI82C,MAKRjC,GACAlsD,EAAAA,WACA0E,EAAAA,oBACA0lD,IAEF97D,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb8tD,iCAAkC,CAChClrE,UAAWkrE,GACXtpD,OAAQ,CAACC,EAAAA,UAAWopD,IACpB1/D,UAAW,CACT,CACEkB,QAASi7D,GACT1oE,YAAaurE,UAOzBvkE,aAAc,CAACklE,IACfjlE,QAAS,CAACilE,IACV7tD,gBAAiB,CAAC6tD,OAEPC,GAAb,iBCrCE,SAAAE,EAAsBvC,GAAtB,IAAAnnE,EAAA7F,KAAsBA,KAAAgtE,kBAAAA,EANtBhtE,KAAAktE,MAAQltE,KAAKgtE,kBACVlB,UACAnhE,KAAKqF,EAAAA,KAAI,SAAC+gC,GAAS,OAAClrC,EAAK80B,UAAYoW,EAAK1uC,MAAMs4B,cAEnD36B,KAAAi4C,SAAqCj4C,KAAKgtE,kBAAkB90B,aAG9D,gDAD2C0zB,MAT9B2D,EAAoBtuE,EAAA,CALhCkZ,EAAAA,UAAU,CACTtQ,SAAU,kBACV5D,SAAA,6jBACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BgnD,SCSC,CACJl/D,QAAS,eA2BnBm/D,GAAA,WAAA,SAAAA,KAAgC,OAAnBA,EAAiBvuE,EAAA,CApC7B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aAAa0hD,SAAS,CACpB,CACEtmC,KAAM,KACN+Q,YAAa,CAACymB,IACdn7D,UAAW8xD,GACXx9B,KAAIi3C,MAKRpC,GACA9B,IAEF97D,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbiuD,qBAAsB,CACpBrrE,UAAWqrE,GACXzpD,OAAQ,CAACC,EAAAA,WACTtW,UAAW,CACT,CACEkB,QAASi7D,GACT1oE,YAAaurE,UAOzBvkE,aAAc,CAACqlE,IACfplE,QAAS,CAAColE,IACVhuD,gBAAiB,CAACguD,OAEPC,GAAb,iBCzCA,SAAAE,KAAgC,OAAnBA,EAAiBzuE,EAAA,CAH7B8I,EAAAA,SAAS,CACRC,QAAS,CAACwlE,GAAmBH,OAElBK,oBCKX,SAAAC,EAAoBt0C,GAAAr7B,KAAAq7B,oBAAAA,EAOtB,OAHEs0C,EAAAzvE,UAAAqJ,SAAA,WACEvJ,KAAK4vE,OAAS5vE,KAAKq7B,oBAAoBH,4DALAd,MAD9Bu1C,EAA4B1uE,EAAA,CAJxCkZ,EAAAA,UAAU,CACTtQ,SAAU,4BACV5D,SAAA,i7BAEW0pE,MCXAE,GAAkB,CAAC,qBAAsB,mBACzCC,GAAkB,CAAC,2BCoB9B,SAAAC,EACY10C,EACAuV,GADA5wC,KAAAq7B,oBAAAA,EACAr7B,KAAA4wC,iBAAAA,EAGZ5wC,KAAAy7B,kBAAuCC,EAAAA,kBAAkBK,MACzD/7B,KAAA4vE,OAA4B5vE,KAAKq7B,oBAAoBH,kBA0CvD,OApCE60C,EAAA7vE,UAAAqJ,SAAA,WACEvJ,KAAKyxC,iBAAmBzxC,KAAK4wC,iBAAiBpV,mBAC5Cx7B,KAAKy7B,mBAEPz7B,KAAKgwE,QAAUhwE,KAAKiwE,eAAcjvE,MAAnBhB,KAAI4C,EAAmBitE,GAAoBC,KAC1D9vE,KAAKkwE,WAAalwE,KAAKmwE,eAAeN,IACtC7vE,KAAKowE,QAAUpwE,KAAKmwE,eAAeL,KAG7BC,EAAA7vE,UAAAiwE,eAAR,SACEE,GAEA,OAAOrwE,KAAK4vE,OAAOjlE,KACjBC,EAAAA,KAAI,SAAC2xB,GACH,GAAIt4B,QAAQs4B,EAAM+zC,cAChB,OAAO/zC,EAAM+zC,aAAajrE,QAAO,SAACkrE,GAChC,OAAAF,EAAkB9hE,SAASgiE,EAAYC,gBAOzCT,EAAA7vE,UAAA+vE,eAAR,eACE,IAAAI,EAAA,GAAAI,EAAA,EAAAA,EAAA5vE,UAAAC,OAAA2vE,IAAAJ,EAAAI,GAAA5vE,UAAA4vE,GAEA,OAAOzwE,KAAK4vE,OAAOjlE,KACjBC,EAAAA,KAAI,SAAC2xB,GACH,GAAIt4B,QAAQs4B,EAAM+zC,cAChB,OAAO/zC,EAAM+zC,aAAajrE,QACxB,SAACkrE,GAAgB,OAACF,EAAkB9hE,SAASgiE,EAAYC,yDAzClCp2C,UACHgB,MAHnB20C,EAAyB9uE,EAAA,CAJrCkZ,EAAAA,UAAU,CACTtQ,SAAU,yBACV5D,SAAA,8kDAEW8pE,oBCNX,SAAAW,EACS97C,EACCyF,GADDr6B,KAAA40B,YAAAA,EACC50B,KAAAq6B,iBAAAA,EAMZ,OAHEq2C,EAAAxwE,UAAAmP,YAAA,WACErP,KAAKq6B,iBAAiBs2C,qEALFC,EAAAA,sBACMz1C,EAAAA,oBAPjBu1C,EAAuBzvE,EAAA,CAJnCkZ,EAAAA,UAAU,CACTtQ,SAAU,qBACV5D,SAAA,igJAEWyqE,oBCwBX,SAAAG,EACUx2C,EACAqW,GADA1wC,KAAAq6B,iBAAAA,EACAr6B,KAAA0wC,aAAAA,EAjBV1wC,KAAAqwE,kBAA8B,CAC5B,UACA,aACA,qBACA,oBACA,cAuCJ,OAxBEQ,EAAA3wE,UAAAqJ,SAAA,WACEvJ,KAAK8wE,qBAAuB9wE,KAAKq6B,iBAAiB02C,0BAGpDF,EAAA3wE,UAAA8wE,mBAAA,SAAmBT,GAKjB,IAAIx9B,EAJJ/yC,KAAKq6B,iBAAiB42C,wBACpBjxE,KAAK26B,UACL41C,EAAY5rD,MAGd3kB,KAAKgzC,SAAWhzC,KAAK0wC,aAAahc,KAAKg8C,GAAyB,CAC9Dz9B,UAAU,EACV3oC,KAAM,QAGRyoC,EAAgB/yC,KAAKgzC,SAASE,mBAChBg+B,UAAYlxE,KAAK8wE,qBAC/B/9B,EAAco+B,SAAWZ,EAAYa,WACrCr+B,EAAcs+B,gBAAkBd,EAAY5rD,MAG9CksD,EAAA3wE,UAAAmP,YAAA,WACErP,KAAKq6B,iBAAiBs2C,qEA1BIx1C,EAAAA,wBACJ5G,MAPxBtzB,EAAA,CADC0I,EAAAA,2CAGD1I,EAAA,CADC0I,EAAAA,yCAZUknE,EAA4B5vE,EAAA,CAJxCkZ,EAAAA,UAAU,CACTtQ,SAAU,0BACV5D,SAAA,mXAEW4qE,oBCLb,SAAAS,IAGEtxE,KAAAy7B,kBAAuCC,EAAAA,kBAAkBK,MAU3D,OAREu1C,EAAApxE,UAAAqxE,uBAAA,SAAuBhB,GACrB,IAAMiB,EAAyB,GAK/B,OAJAjB,EAAY5kE,QAAQ+C,SAAQ,SAACtI,GAC3BorE,EAAS9uE,KAAK0D,EAAQ4wC,eAGjBw6B,GAVAvwE,EAAA,CAAR0I,EAAAA,4CACQ1I,EAAA,CAAR0I,EAAAA,qCAFU2nE,EAA8BrwE,EAAA,CAJ1CkZ,EAAAA,UAAU,CACTtQ,SAAU,6BACV5D,SAAA,22BAEWqrE,oBCMX,SAAAG,EACUp2C,EACAiJ,GADAtkC,KAAAq7B,oBAAAA,EACAr7B,KAAAskC,YAAAA,EA8EZ,OAzEEmtC,EAAAvxE,UAAAqJ,SAAA,WACEvJ,KAAK4vE,OAAS5vE,KAAKq7B,oBAAoBH,mBAGzCu2C,EAAAvxE,UAAAgpD,sBAAA,SAAsBrI,GACpB,OAAO5vC,EAAAA,cAAc,CACnBjR,KAAKskC,YAAYqmB,UAAU,wBAC1BhgD,KACDC,EAAAA,KAAI,SAACtF,GACH,MAAO,CACL4mD,MAFC3pD,EAAA+C,EAAA,GAAC,GAGF6jD,SAAatI,EAAQgG,UAAS,IAAIhG,EAAQiG,SAC1CsC,KAAM,CACJvI,EAAQkG,MACRlG,EAAQmG,MACLnG,EAAQoG,KAAI,KAAKpG,EAAQuG,QAAQzuB,QAAO,KAAKkoB,EAAQwG,WACxDxG,EAAQwI,aAOlBooB,EAAAvxE,UAAAwxE,6BAAA,SAA6B9nB,GAC3B,OAAO34C,EAAAA,cAAc,CACnBjR,KAAKskC,YAAYqmB,UAAU,wBAC1BhgD,KACDC,EAAAA,KAAI,SAACtF,GACH,MAAO,CACL4mD,MAFC3pD,EAAA+C,EAAA,GAAC,GAGF6jD,SAAaS,EAAe/C,UAAS,IAAI+C,EAAe9C,SACxDsC,KAAM,CACJQ,EAAe7C,MACf6C,EAAe5C,MACZ4C,EAAe3C,KAAI,KAAK2C,EAAexC,QAAQzuB,QAAO,KAAKixB,EAAevC,WAC7EuC,EAAeP,aAOzBooB,EAAAvxE,UAAAyxE,sBAAA,SAAsB9mB,GACpB,OAAO55C,EAAAA,cAAc,CACnBjR,KAAKskC,YAAYqmB,UAAU,uBAC3B3qD,KAAKskC,YAAYqmB,UAAU,sBAAuB,CAChDC,MAAOC,EAAQpE,YACfmC,KAAMiC,EAAQnE,eAEf/7C,KACDC,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAACyoD,EAAAn1C,EAAA,GAAW2yC,EAAA3yC,EAAA,GACf,MAAO,CACLszC,MAAO6B,EACP5E,SAAU0B,EAAQtE,kBAClB6C,KAAM,CAACyB,EAAQvE,SAAShZ,KAAMud,EAAQrE,WAAY+E,SAM1DkmB,EAAAvxE,UAAA0xE,6BAAA,SAA6BC,GAC3B,OAAO5gE,EAAAA,cAAc,CACnBjR,KAAKskC,YAAYqmB,UAAU,qCAC1BhgD,KACDC,EAAAA,KAAI,SAACtF,GACH,MAAO,CACL4mD,MAFC3pD,EAAA+C,EAAA,GAAC,GAGF6jD,SAAU0oB,EAASvkC,KACnB8b,KAAM,CAACyoB,EAAS50C,4DA1EO7C,UACR2L,EAAAA,sBAHZ0rC,EAA4BxwE,EAAA,CAJxCkZ,EAAAA,UAAU,CACTtQ,SAAU,4BACV5D,SAAA,kgCAEWwrE,oBCNX,SAAAK,EAAsBz2C,GAAAr7B,KAAAq7B,oBAAAA,EAOxB,OAHEy2C,EAAA5xE,UAAAqJ,SAAA,WACEvJ,KAAK4vE,OAAS5vE,KAAKq7B,oBAAoBH,4DALEd,MADhC03C,EAA0B7wE,EAAA,CAJtCkZ,EAAAA,UAAU,CACTtQ,SAAU,0BACV5D,SAAA,qQAEW6rE,oBCEX,SAAAC,EAAsB12C,GAAAr7B,KAAAq7B,oBAAAA,EAEtBr7B,KAAA4vE,OAA4B5vE,KAAKq7B,oBAAoBH,kBACvD,gDAH6Cd,MADhC23C,EAA2B9wE,EAAA,CAJvCkZ,EAAAA,UAAU,CACTtQ,SAAU,2BACV5D,SAAA,siCAEW8rE,MCiBPC,GAAmB,CACvBD,GACApC,GACAI,GACA+B,GACAL,GACAf,GACAG,GACAS,OAiBY,CAAEvT,UAAW,QAAS1tD,QAAS,cAAc4hE,GAM7C,CAAE5hE,QAAS,gBAkCzB6hE,GAAA,WAAA,SAAAA,KAAiC,OAApBA,EAAkBjxE,EAAA,CAtD9B8I,EAAAA,SAAS,CACRC,QAAS,CACP0tC,GACA1wB,GACA/c,EAAAA,aACAkX,EAAAA,WACAC,EAAAA,qBACAmyB,GACA7mB,EAAAA,UACAD,EAAAA,aAAa0hD,SAAS,CACpB,CACEtmC,KAAM,KACN+Q,YAAa,CAAC7yB,EAAAA,UAAWs5C,IACzBn7D,UAAW8xD,GACXx9B,KAAI25C,IAEN,CACEtqC,KAAM,KACN+Q,YAAa,CAAC7yB,EAAAA,UAAWs5C,IACzBn7D,UAAW8xD,GACXx9B,KAAIy5C,MAGRxwD,IAEFhS,UAAW,CACToP,EAAAA,qBAAiD,CAC/CyC,cAAe,CACb8wD,oCAAqC,CACnCluE,UAAW6tE,IAEbM,qCAAsC,CACpCnuE,UAAWyrE,IAEb2C,kCAAmC,CACjCpuE,UAAW6rE,IAEbwC,mCAAoC,CAClCruE,UAAW4tE,IAEbU,qCAAsC,CACpCtuE,UAAWutE,KAGfgB,SAAU,CACRC,oBAAqB,SAGzBt4C,IAEFlwB,aAAYtH,EAAMovE,IAClB7nE,QAAOvH,EAAMovE,IACbzwD,gBAAe3e,EAAMovE,OAEVE,GAAb,iBC5EE,SAAAS,EACU7tC,EACAzK,EACAiK,GAHV,IAAAz+B,EAAA7F,KACUA,KAAA8kC,QAAAA,EACA9kC,KAAAq6B,iBAAAA,EACAr6B,KAAAskC,YAAAA,EAGFtkC,KAAA4yE,UAAY,EAGpB5yE,KAAA6yE,QAEI7yE,KAAKq6B,iBAAiBy4C,oBAAoB9yE,KAAK4yE,WAAWjoE,KAC5DqF,EAAAA,KAAI,SAACmxD,GACCA,EAAOtyC,aACThpB,EAAKktE,SAAW5R,EAAOtyC,WAAW/D,UAKxC9qB,KAAAgzE,UAEIhzE,KAAKq6B,iBAAiB44C,4BAM1BjzE,KAAAgoE,eAAqChoE,KAAK6yE,QAAQloE,KAChDC,EAAAA,KAAI,SAAC2xB,GAAU,OAAAA,EAAM1N,WAAWqkD,gBAChC7tE,EAAAA,QAAO,SAAC6tE,GAAiB,YAAiB/rE,IAAjB+rE,KACzBpzD,EAAAA,KAAK,IAoDT,OAjDE6yD,EAAAzyE,UAAAmP,YAAA,WACErP,KAAKq6B,iBAAiB84C,kBAGxBR,EAAAzyE,UAAAkzE,eAAA,SAAen/C,GACb,IAAM3gB,EAAmD,CACvD2gB,SAAQA,EACRhB,YAAa,GAEfjzB,KAAK+yE,SAAW9+C,EAChBj0B,KAAKqzE,YAAY//D,IAGnBq/D,EAAAzyE,UAAAwzB,WAAA,SAAWC,GACT,IAAMrgB,EAAmD,CACvD2gB,SAAUj0B,KAAK+yE,SACf9/C,YAAaU,GAEf3zB,KAAKqzE,YAAY//D,IAGnBq/D,EAAAzyE,UAAAozE,gBAAA,SAAgB/2C,GACdv8B,KAAK8kC,QAAQ10B,GAAG,CACdC,QAAS,eACTqqB,OAAQ6B,KAIZo2C,EAAAzyE,UAAAqzE,cAAA,WACE,OAAOtiE,EAAAA,cAAc,CACnBjR,KAAKskC,YAAYqmB,UAAU,gBAC3B3qD,KAAKskC,YAAYqmB,UAAU,yBAC1BhgD,KACDC,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GACH,MAAO,CACLkuE,OAFE56D,EAAA,GAGF66D,cAHc76D,EAAA,SASd+5D,EAAAzyE,UAAAmzE,YAAR,SAAoB//D,GAClBtT,KAAKq6B,iBAAiBq5C,cACpB1zE,KAAK4yE,UACLt/D,EAAM2f,YACN3f,EAAM2gB,oDA9ES3jB,EAAAA,sBACS6qB,EAAAA,wBACL4K,EAAAA,sBAJZ4sC,EAAqB1xE,EAAA,CALjCkZ,EAAAA,UAAU,CACTtQ,SAAU,mBACV5D,SAAA,guLACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BoqD,SCSC,CAAEtiE,QAAS,UAwBzBsjE,GAAA,WAAA,SAAAA,KAAiC,OAApBA,EAAkB1yE,EAAA,CAhC9B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aAAa0hD,SAAS,CACpB,CACEtmC,KAAM,KACN+Q,YAAa,CAAC7yB,EAAAA,UAAWs5C,IACzBn7D,UAAW8xD,GACXx9B,KAAIo7C,MAGRnnD,EAAAA,aACA7G,EAAAA,YACAuO,EAAAA,eACAD,GACAxH,EAAAA,UACAvL,EAAAA,YAEFjX,aAAc,CAACyoE,IACfxoE,QAAS,CAACwoE,IACVljE,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbuyD,6BAA8B,CAC5B3vE,UAAWyuE,GACX7sD,OAAQ,CAACC,EAAAA,gBAKjBxE,gBAAiB,CAACoxD,OAEPgB,GAAb,iBClCE,SAAAG,EACY5jE,EACAw+D,EACAnsD,GAFAviB,KAAAkQ,eAAAA,EACAlQ,KAAA0uE,qBAAAA,EACA1uE,KAAAuiB,qBAAAA,SAGZ/iB,OAAAmC,eAAImyE,EAAA5zE,UAAA,gBAAa,KAAjB,WACE,OAAOF,KAAK0uE,qBAAqBqF,iEAGnCv0E,OAAAmC,eAAImyE,EAAA5zE,UAAA,mBAAgB,KAApB,WACE,OAAOF,KAAK0uE,qBAAqBsF,iEAGnCF,EAAA5zE,UAAA+zE,iBAAA,WAAA,IAAApuE,EAAA7F,KACE,OAAOiR,EAAAA,cAAc,CACnBjR,KAAKkQ,eAAeqqB,iBACpBv6B,KAAK0uE,qBAAqBK,wBAC1B/uE,KAAK0uE,qBAAqBwF,4BACzBvpE,KACDC,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAAC6uE,EAAAv7D,EAAA,GAAco2D,EAAAp2D,EAAA,GAAeoT,EAAApT,EAAA,GAAe,MAAA,CAChDu7D,EAAa15C,MAAMC,OAAmB,WACtCs0C,EACAhjD,MAEF3mB,EAAAA,QAAO,SAACC,OAACq8D,EAADp/D,EAAA+C,EAAA,GAAC,GAAgB,OAAArB,QAAQ09D,MACjC3xD,EAAAA,KAAI,SAAC1K,OAAAsT,EAAArW,EAAA+C,EAAA,GAACq8D,EAAA/oD,EAAA,GAAYo2D,EAAAp2D,EAAA,GAAeoT,EAAApT,EAAA,QAEVzR,IAAlB6nE,GAA+BA,EAAcC,MAAQtN,GACrD31C,GAEDnmB,EAAK6oE,qBAAqB0F,6BAA6BzS,MAG3D/2D,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAACsT,EAAA,GAAsB,OAAnBA,EAAA,MACTvT,EAAAA,OAAOpB,SACPgI,EAAAA,yBAIJ6nE,EAAA5zE,UAAAm0E,mBAAA,WACEr0E,KAAK0uE,qBAAqB4F,iCAG5BR,EAAA5zE,UAAAq0E,oBAAA,SAAoBC,GAClBx0E,KAAK0uE,qBAAqB+F,yBAAyBD,EAAmB,CACpEhE,OAAQ,gBAIZsD,EAAA5zE,UAAAw0E,cAAA,SAAczF,GACZjvE,KAAK0uE,qBAAqBiG,uCAC1B30E,KAAKuiB,qBAAqBra,IACxB,CACE9G,IAAK,8BACLs5B,OAAQ,CAAEu0C,IAAGA,IAEfrqD,EAAAA,kBAAkBC,uBAEpB7kB,KAAKkQ,eAAeE,GAAG,CACrBC,QAAS,YAIbyjE,EAAA5zE,UAAA00E,WAAA,WACE50E,KAAKkQ,eAAeE,GAAG,CAAEC,QAAS,UAAY,KAAM,CAClDoqB,MAAO,CACLmtC,UAAW,+CAlEWt3D,EAAAA,sBACM4+D,EAAAA,iCACAzpD,EAAAA,wOAJvBquD,EAAoB7yE,EAAA,CAHhC+B,EAAAA,WAAW,CACVC,WAAY,UAED6wE,oBCGX,SAAAe,EAAsBnG,GAAtB,IAAA7oE,EAAA7F,KAAsBA,KAAA0uE,qBAAAA,EAKtB1uE,KAAA80E,eAEI90E,KAAK0uE,qBACNuF,mBACAtpE,KAAKqF,EAAAA,KAAI,SAACg/D,GAAkB,OAACnpE,EAAKopE,IAAMD,EAAcC,QAEzDjvE,KAAA+0E,cAAgB/0E,KAAK0uE,qBAAqBqG,cAyB5C,OAvBEF,EAAA30E,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAK0N,aAAe1N,KAAK0uE,qBAAqBsG,iBAAiB5mE,WAC7D,SAAC+V,GACKA,GACFte,EAAK6oE,qBAAqBgG,cAAc7uE,EAAKopE,SAMrD4F,EAAA30E,UAAA+0E,aAAA,SAAaT,GACXx0E,KAAK0uE,qBAAqB6F,oBAAoBC,IAGhDK,EAAA30E,UAAAmlD,KAAA,WACErlD,KAAK0uE,qBAAqBkG,cAG5BC,EAAA30E,UAAAmP,YAAA,WACMrP,KAAK0N,cACP1N,KAAK0N,aAAaE,wDAjCsBkmE,MADjCe,EAA8B5zE,EAAA,CAL1CkZ,EAAAA,UAAU,CACTtQ,SAAU,6BACV5D,SAAA,8+CACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BssD,oBCLX,SAAAK,EAAsBxG,GAAA1uE,KAAA0uE,qBAAAA,EAEtB1uE,KAAA80E,eAEI90E,KAAK0uE,qBAAqBuF,mBAChC,gDAL8CH,MADjCoB,EAA2Bj0E,EAAA,CALvCkZ,EAAAA,UAAU,CACTtQ,SAAU,0BACV5D,SAAA,kpHACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B2sD,oBCCX,SAAAC,EAAsBzG,GAAA1uE,KAAA0uE,qBAAAA,EAEtB1uE,KAAA80E,eAEI90E,KAAK0uE,qBAAqBuF,mBAKhC,OAHEkB,EAAAj1E,UAAAmP,YAAA,WACErP,KAAK0uE,qBAAqB2F,+DAPgBP,MADjCqB,EAA4Bl0E,EAAA,CALxCkZ,EAAAA,UAAU,CACTtQ,SAAU,2BACV5D,SAAA,2wCACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B4sD,MCQP1mE,GAAa,CACjBomE,GACAK,GACAC,OAWY,CAAE9kE,QAAS,wBA4BzB+kE,GAAA,WAAA,SAAAA,KAAwC,OAA3BA,EAAyBn0E,EAAA,CApCrC8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aAAa0hD,SAAS,CACpB,CACEtmC,KAAM,KACN+Q,YAAa,CAAC7yB,EAAAA,UAAWs5C,IACzBn7D,UAAW8xD,GACXx9B,KAAI68C,MAGR5oD,EAAAA,aACAC,EAAAA,UACAvL,EAAAA,WACAmL,GACAlL,EAAAA,sBAEF3R,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbuzD,+BAAgC,CAC9B3wE,UAAW2wE,IAEbK,4BAA6B,CAC3BhxE,UAAWgxE,IAEbC,6BAA8B,CAC5BjxE,UAAWixE,QAKnBjrE,aAAYtH,EAAM6L,IAClBtE,QAAOvH,EAAM6L,IACb8S,gBAAe3e,EAAM6L,OAEV2mE,GAAb,iBC7CE,SAAAE,EACU5G,EACApqC,GAFV,IAAAz+B,EAAA7F,KACUA,KAAA0uE,qBAAAA,EACA1uE,KAAAskC,YAAAA,EAGFtkC,KAAA4yE,UAAY,EAGpB5yE,KAAAu1E,gBAEIv1E,KAAK0uE,qBAAqB8G,0BAA0Bx1E,KAAK4yE,WAAWjoE,KACtEqF,EAAAA,KAAI,SAACylE,GACCA,EAAY5mD,aACdhpB,EAAKktE,SAAW0C,EAAY5mD,WAAW/D,UAS7C9qB,KAAAgoE,eAAqChoE,KAAKu1E,gBAAgB5qE,KACxDC,EAAAA,KAAI,SAAC8qE,GAAmB,OAAAA,EAAe7mD,WAAWqkD,gBAClD7tE,EAAAA,QAAO,SAAC6tE,GAAiB,YAAiB/rE,IAAjB+rE,KACzBpzD,EAAAA,KAAK,IAgDT,OA7CEw1D,EAAAp1E,UAAAmP,YAAA,WACErP,KAAK0uE,qBAAqBiH,+BAG5BL,EAAAp1E,UAAAkzE,eAAA,SAAen/C,GACb,IAAM3gB,EAAmD,CACvD2gB,SAAQA,EACRhB,YAAa,GAEfjzB,KAAK+yE,SAAW9+C,EAChBj0B,KAAK41E,oBAAoBtiE,IAG3BgiE,EAAAp1E,UAAAwzB,WAAA,SAAWC,GACT,IAAMrgB,EAAmD,CACvD2gB,SAAUj0B,KAAK+yE,SACf9/C,YAAaU,GAEf3zB,KAAK41E,oBAAoBtiE,IAG3BgiE,EAAAp1E,UAAAqzE,cAAA,WACE,OAAOtiE,EAAAA,cAAc,CACnBjR,KAAKskC,YAAYqmB,UAAU,gBAC3B3qD,KAAKskC,YAAYqmB,UAAU,iBAC1BhgD,KACDC,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GACH,MAAO,CACLkuE,OAFE56D,EAAA,GAGFi9D,MAHcj9D,EAAA,SASd08D,EAAAp1E,UAAA01E,oBAAR,SAA4BtiE,GAI1BtT,KAAK0uE,qBAAqBoH,2BACxB91E,KAAK4yE,UACLt/D,EAAM2f,YACN3f,EAAM2gB,oDArEsBi7C,EAAAA,iCACTnpC,EAAAA,sBAHZuvC,EAA+Br0E,EAAA,CAL3CkZ,EAAAA,UAAU,CACTtQ,SAAU,+BACV5D,SAAA,0jJACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B+sD,oBCqBb,SAAAS,KAAsC,OAAzBA,EAAuB90E,EAAA,CAtBnC8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aACAyH,GACAxH,EAAAA,UACAvL,EAAAA,YAEF1R,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbg0D,gCAAiC,CAC/BpxE,UAAWoxE,GACXxvD,OAAQ,CAACC,EAAAA,gBAKjB7b,aAAc,CAACorE,IACfnrE,QAAS,CAACmrE,IACV/zD,gBAAiB,CAAC+zD,OAEPS,oBCfb,SAAAC,KAA0B,OAAbA,EAAW/0E,EAAA,CAVvB8I,EAAAA,SAAS,CACRC,QAAS,CACP2pE,GACAzB,GACA1D,GACAkB,GACAqG,GACAX,OAGSY,oBCCX,SAAAC,EACUj2B,EACA1b,GADAtkC,KAAAggD,mBAAAA,EACAhgD,KAAAskC,YAAAA,EALVtkC,KAAAkf,UAAYtX,EAAAA,UAyGd,OAjGEquE,EAAA/1E,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAKk2E,gBAAkBl2E,KAAKggD,mBAAmBiB,oBAAoBt2C,KACjEqF,EAAAA,KAAI,SAAC25C,GAGDA,EAAe7oD,OAAS,IACvB6oD,EAAe75C,MAAK,SAACqmE,GAAkB,OAAAA,EAAc50B,mBAEtD17C,EAAKuwE,wBAAwBzsB,EAAe,QAKlD3pD,KAAKqmB,SAAW,KAChBrmB,KAAK2f,SAAW3f,KAAKggD,mBAAmBkK,2BACxClqD,KAAKggD,mBAAmBoB,sBAG1B60B,EAAA/1E,UAAAkwD,eAAA,SAAe9qD,GAAf,IAAAO,EAAA7F,KACEuhD,EAAAj8C,EAAAi8C,eACAgF,EAAAjhD,EAAAihD,kBACAE,EAAAnhD,EAAAmhD,YACAC,EAAAphD,EAAAohD,WACAF,EAAAlhD,EAAAkhD,WACAF,EAAAhhD,EAAAghD,SAEA,OAAOr1C,EAAAA,cAAc,CACnBjR,KAAKskC,YAAYqmB,UAAU,4BAC3B3qD,KAAKskC,YAAYqmB,UAAU,iBAC3B3qD,KAAKskC,YAAYqmB,UAAU,kCAC3B3qD,KAAKskC,YAAYqmB,UAAU,sBAAuB,CAChDC,MAAOnE,EACPmC,KAAMlC,IAER1mD,KAAKskC,YAAYqmB,UAAU,sCAC1BhgD,KACDC,EAAAA,KACE,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GACC+wE,EAAAz9D,EAAA,GACA4wD,EAAA5wD,EAAA,GACA09D,EAAA19D,EAAA,GACA2yC,EAAA3yC,EAAA,GACAsyC,EAAAtyC,EAAA,GAEMwzC,EAA6C,GAcnD,OAbK7K,GACH6K,EAAQ1pD,KAAK,CAAE4qC,KAAM+oC,EAAkB/iE,MAAO,YAEhD84C,EAAQ1pD,KAAK,CAAE4qC,KAAMk8B,EAAYl2D,MAAO,SACrB,CACjB+4C,OAAQ9K,EAAiB2J,EAA2B,KACpD/B,SAAU5C,EACV6C,KAAM,CAAC5C,EAAY+E,GACnBa,QAAOA,EACPud,UAAW2M,EACXnqB,IAAKtmD,EAAKimD,YAAYxF,EAAS3hC,YASzCsxD,EAAA/1E,UAAAq2E,oBAAA,SAAoBlrB,GAClBrrD,KAAKggD,mBAAmBu2B,oBAAoBlrB,EAAchrC,IAC1DrgB,KAAKqmB,SAAW,MAGlB4vD,EAAA/1E,UAAA6pE,QAAA,SAAQ1e,GACNrrD,KAAKqmB,SAAWglC,EAAchrC,IAGhC41D,EAAA/1E,UAAAomB,WAAA,WACEtmB,KAAKqmB,SAAW,MAGlB4vD,EAAA/1E,UAAAk2E,wBAAA,SAAwB/qB,GACtBrrD,KAAKggD,mBAAmBw2B,0BAA0BnrB,EAAchrC,KAGlE41D,EAAA/1E,UAAA4rD,YAAA,SAAYnnC,GAcV,MAZa,SAATA,EACO3kB,KAAKkf,UAAU1D,KACN,WAATmJ,GAA8B,wBAATA,EACrB3kB,KAAKkf,UAAUzD,YACN,WAATkJ,EACA3kB,KAAKkf,UAAUvD,YACN,SAATgJ,EACA3kB,KAAKkf,UAAUxD,KAEf1b,KAAKkf,UAAUtD,sDAhGEgrB,EAAAA,0BACPb,EAAAA,sBARZkwC,EAAuBh1E,EAAA,CAJnCkZ,EAAAA,UAAU,CACTtQ,SAAU,qBACV5D,SAAA,w0CAEWgwE,oBCab,SAAAQ,KAAmC,OAAtBA,EAAoBx1E,EAAA,CAhBhC8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAc+c,GAAYvF,GAAeN,EAAAA,YACnD1R,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbo1D,+BAAgC,CAC9BxyE,UAAW+xE,GACXnwD,OAAQ,CAACC,EAAAA,gBAKjB7b,aAAc,CAAC+rE,IACf9rE,QAAS,CAAC8rE,IACV10D,gBAAiB,CAAC00D,OAEPQ,oBCEX,SAAAE,EACUnpC,EACAt9B,EACAu6B,GAFAzqC,KAAAwtC,GAAAA,EACAxtC,KAAAkQ,eAAAA,EACAlQ,KAAAyqC,YAAAA,EArBVzqC,KAAA0N,aAAe,IAAIC,EAAAA,aAEnB3N,KAAA42E,kBAA+B52E,KAAKwtC,GAAGv6B,MACrC,CACEmrB,SAAU,CACR,GACA,CAACwP,EAAAA,WAAWC,SAAUhQ,GAAqBM,oBAE7C04C,WAAY,CAAC,GAAI,CAACjpC,EAAAA,WAAWC,YAE/B,CACEq+B,WAAYruC,GAAqBY,mBAC/B,WACA,gBAyCR,OA9BEk4C,EAAAz2E,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAK0N,aAAaxF,IAChBlI,KAAKkQ,eACFqqB,iBACAnsB,WAAU,SAACqsB,GAAU,OAAC50B,EAAKikC,MAAQrP,EAAMA,MAAMnH,YAAmB,UAGvEtzB,KAAK0N,aAAaxF,IAChBlI,KAAKyqC,YAAYqsC,kBAAkB1oE,WAAU,SAACmnC,GACxCA,GACF1vC,EAAKqK,eAAeE,GAAG,CAAEC,QAAS,eAM1CsmE,EAAAz2E,UAAAqgE,cAAA,WACE,GAAIvgE,KAAK42E,kBAAkB7oC,MAAO,CAChC,IAAM3P,EAAWp+B,KAAK42E,kBAAkBluE,IAAI,YAAYrG,MACxDrC,KAAKyqC,YAAY81B,cAAcvgE,KAAK8pC,MAAO1L,QAE3Cp+B,KAAK42E,kBAAkB5oC,oBAI3B2oC,EAAAz2E,UAAAmP,YAAA,WACMrP,KAAK0N,cACP1N,KAAK0N,aAAaE,wDAhCRqgC,EAAAA,mBACY39B,EAAAA,sBACHo2B,EAAAA,eAvBZiwC,EAA0B11E,EAAA,CAJtCkZ,EAAAA,UAAU,CACTtQ,SAAU,yBACV5D,SAAA,yyCAEW0wE,oBC0Bb,SAAAI,KAAkC,OAArBA,EAAmB91E,EAAA,CAvB/B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACA2b,EAAAA,YACAC,EAAAA,oBACA4G,EAAAA,aACAtL,EAAAA,WACAkM,IAEF5d,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb01D,uBAAwB,CACtB9yE,UAAWyyE,GACX7wD,OAAQ,CAACmlD,EAAAA,mBAKjB/gE,aAAc,CAACysE,IACfxsE,QAAS,CAACwsE,IACVp1D,gBAAiB,CAACo1D,OAEPI,oBCPX,SAAAE,EAAoBzpC,GAAAxtC,KAAAwtC,GAAAA,EAnBpBxtC,KAAAk3E,UAAY,IAAIzpE,EAAAA,aAMhBzN,KAAAm3E,YAAc,IAAI1pE,EAAAA,aAElBzN,KAAAo3E,gBAA6Bp3E,KAAKwtC,GAAGv6B,MACnC,CACE8qB,MAAO,CAAC,GAAI,CAAC6P,EAAAA,WAAWC,SAAUhQ,GAAqBC,iBACvDu5C,aAAc,CAAC,GAAI,CAACzpC,EAAAA,WAAWC,WAC/BzP,SAAU,CAAC,GAAI,CAACwP,EAAAA,WAAWC,YAE7B,CACEq+B,WAAYruC,GAAqBgB,gBAAgB,QAAS,kBAoBhE,OAdEo4C,EAAA/2E,UAAA4tC,SAAA,WACE,GAAI9tC,KAAKo3E,gBAAgBrpC,MAAO,CAC9B,IAAMupC,EAASt3E,KAAKo3E,gBAAgB1uE,IAAI,gBAAgBrG,MAClD+7B,EAAWp+B,KAAKo3E,gBAAgB1uE,IAAI,YAAYrG,MAEtDrC,KAAKk3E,UAAUjpE,KAAK,CAAEqpE,OAAMA,EAAEl5C,SAAQA,SAEtCp+B,KAAKo3E,gBAAgBppC,oBAIzBipC,EAAA/2E,UAAAq3E,SAAA,WACEv3E,KAAKm3E,YAAYlpE,iDAdKggC,EAAAA,eAnBxBhtC,EAAA,CADCsO,EAAAA,0CAODtO,EAAA,CADCsO,EAAAA,4CAPU0nE,EAAwBh2E,EAAA,CAJpCkZ,EAAAA,UAAU,CACTtQ,SAAU,uBACV5D,SAAA,02EAEWgxE,oBCOX,SAAAO,EACUtnE,EACAqS,EACAkoB,EACAhoB,GAHAziB,KAAAkQ,eAAAA,EACAlQ,KAAAuiB,qBAAAA,EACAviB,KAAAyqC,YAAAA,EACAzqC,KAAAyiB,YAAAA,EAGFziB,KAAA0N,aAAe,IAAIC,EAAAA,aA6C7B,OAzCE6pE,EAAAt3E,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAKyqC,YAAYgtC,8BACjBz3E,KAAK0N,aAAaxF,IAChBlI,KAAKyqC,YACFitC,8BACAtpE,WAAU,SAAC+V,GAAY,OAAAte,EAAKuvC,UAAUjxB,OAE3CnkB,KAAKiqD,WAAajqD,KAAKyqC,YAAYktC,+BAGrCH,EAAAt3E,UAAAq3E,SAAA,WACEv3E,KAAKkQ,eAAeE,GAAG,CAAEC,QAAS,UAGpCmnE,EAAAt3E,UAAA4tC,SAAA,SAASxoC,OAAEgyE,EAAAhyE,EAAAgyE,OAAQl5C,EAAA94B,EAAA84B,SACjBp+B,KAAKs3E,OAASA,EACdt3E,KAAKyqC,YAAYmtC,YAAYx5C,EAAUk5C,IAGzCE,EAAAt3E,UAAAk1C,UAAA,SAAUjxB,GACJA,IACFnkB,KAAKuiB,qBAAqBra,IACxB,CACE9G,IAAK,qCACLs5B,OAAQ,CAAE48C,OAAQt3E,KAAKs3E,SAEzB1yD,EAAAA,kBAAkBC,uBAEpB7kB,KAAKyiB,YAAYynB,SACjBlqC,KAAKkQ,eAAeE,GAAG,CAAEC,QAAS,SAAW,KAAM,CACjDoqB,MAAO,CACL68C,OAAQt3E,KAAKs3E,YAMrBE,EAAAt3E,UAAAmP,YAAA,WACErP,KAAK0N,aAAaE,cAClB5N,KAAKyqC,YAAYgtC,wEAjDOnnE,EAAAA,sBACMmV,EAAAA,4BACTihB,EAAAA,mBACAhhB,EAAAA,eALZ8xD,EAAoBv2E,EAAA,CAJhCkZ,EAAAA,UAAU,CACTtQ,SAAU,kBACV5D,SAAA,ggBAEWuxE,oBCuBb,SAAAK,KAAgC,OAAnBA,EAAiB52E,EAAA,CAvB7B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACA2b,EAAAA,YACAC,EAAAA,oBACApE,GACAN,EAAAA,WACAkM,IAEF5d,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbk2D,qBAAsB,CACpBtzE,UAAWszE,GACX1xD,OAAQ,CAACC,EAAAA,gBAKjB7b,aAAc,CAAC+sE,GAA0BO,IACzCrtE,QAAS,CAACqtE,GAAsBP,IAChC11D,gBAAiB,CAACi2D,OAEPK,oBCrBX,SAAAC,EAAoBtqC,GAAAxtC,KAAAwtC,GAAAA,EALpBxtC,KAAA+3E,UAAY,IAAItqE,EAAAA,aAGhBzN,KAAAg4E,UAAY,IAAIvqE,EAAAA,aAqClB,OAjCEqqE,EAAA53E,UAAAqJ,SAAA,WACEvJ,KAAKi4E,mBAAqBj4E,KAAKwtC,GAAGv6B,MAChC,CACEilE,YAAa,CAAC,GAAI,CAACtqC,EAAAA,WAAWC,WAC9BsqC,YAAa,CACX,GACA,CAACvqC,EAAAA,WAAWC,SAAUhQ,GAAqBM,oBAE7Ci6C,mBAAoB,CAAC,GAAI,CAACxqC,EAAAA,WAAWC,YAEvC,CACEq+B,WAAYruC,GAAqBY,mBAC/B,cACA,yBAMRq5C,EAAA53E,UAAA4tC,SAAA,WACM9tC,KAAKi4E,mBAAmBlqC,MAC1B/tC,KAAK+3E,UAAU9pE,KAAK,CAClBiqE,YAAal4E,KAAKi4E,mBAAmB51E,MAAM61E,YAC3CC,YAAan4E,KAAKi4E,mBAAmB51E,MAAM81E,cAG7Cn4E,KAAKi4E,mBAAmBjqC,oBAI5B8pC,EAAA53E,UAAAq3E,SAAA,WACEv3E,KAAKg4E,UAAU/pE,iDAjCOggC,EAAAA,eALxBhtC,EAAA,CADCsO,EAAAA,0CAIDtO,EAAA,CADCsO,EAAAA,0CANUuoE,EAA2B72E,EAAA,CAJvCkZ,EAAAA,UAAU,CACTtQ,SAAU,0BACV5D,SAAA,k8EAEW6xE,oBCUX,SAAAO,EACUnoE,EACAu6B,EACAloB,GAFAviB,KAAAkQ,eAAAA,EACAlQ,KAAAyqC,YAAAA,EACAzqC,KAAAuiB,qBAAAA,EANFviB,KAAA0N,aAAe,IAAIC,EAAAA,aAgD7B,OAvCE0qE,EAAAn4E,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAKyqC,YAAY6tC,kCACjBt4E,KAAK2f,SAAW3f,KAAKyqC,YAAY8tC,iCACjCv4E,KAAK0N,aAAaxF,IAChBlI,KAAKyqC,YACF+tC,iCACApqE,WAAU,SAAC+V,GAAY,OAAAte,EAAKuvC,UAAUjxB,QAI7Ck0D,EAAAn4E,UAAAk1C,UAAA,SAAUjxB,GACJA,IACFnkB,KAAKuiB,qBAAqBra,IACxB,CAAE9G,IAAK,4CACPwjB,EAAAA,kBAAkBC,uBAEpB7kB,KAAKkQ,eAAeE,GAAG,CAAEC,QAAS,WAItCgoE,EAAAn4E,UAAAq3E,SAAA,WACEv3E,KAAKkQ,eAAeE,GAAG,CAAEC,QAAS,UAGpCgoE,EAAAn4E,UAAA4tC,SAAA,SAASxoC,OACP4yE,EAAA5yE,EAAA4yE,YACAC,EAAA7yE,EAAA6yE,YAKAn4E,KAAKyqC,YAAYguC,eAAeP,EAAaC,IAG/CE,EAAAn4E,UAAAmP,YAAA,WACErP,KAAK0N,aAAaE,cAElB5N,KAAKyqC,YAAY6tC,4EA1COhoE,EAAAA,sBACHo2B,EAAAA,mBACSjhB,EAAAA,wBAPrB4yD,EAAuBp3E,EAAA,CAJnCkZ,EAAAA,UAAU,CACTtQ,SAAU,qBACV5D,SAAA,+fAEWoyE,oBCwBb,SAAAK,KAAmC,OAAtBA,EAAoBz3E,EAAA,CAvBhC8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACA2b,EAAAA,YACAC,EAAAA,oBACApE,GACAN,EAAAA,WACAkM,IAEF5d,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb+2D,wBAAyB,CACvBn0E,UAAWm0E,GACXvyD,OAAQ,CAACC,EAAAA,gBAKjB7b,aAAc,CAACmuE,GAAyBP,IACxC3tE,QAAS,CAACkuE,GAAyBP,IACnCv2D,gBAAiB,CAAC82D,OAEPK,oBCVX,SAAAC,EAAoBnrC,GAAAxtC,KAAAwtC,GAAAA,EAXpBxtC,KAAA+3E,UAAY,IAAItqE,EAAAA,aAGhBzN,KAAAg4E,UAAY,IAAIvqE,EAAAA,aAEhBzN,KAAA44E,kBAAoB54E,KAAKwtC,GAAGv6B,MAAM,CAChC27C,UAAW,CAAC,IACZ/H,UAAW,CAAC,GAAIjZ,EAAAA,WAAWC,UAC3BiZ,SAAU,CAAC,GAAIlZ,EAAAA,WAAWC,YAwB9B,OAnBE8qC,EAAAz4E,UAAAqJ,SAAA,WACMvJ,KAAKklC,MACPllC,KAAK44E,kBAAkBxpB,WAAWpvD,KAAKklC,OAI3CyzC,EAAAz4E,UAAA4tC,SAAA,WACM9tC,KAAK44E,kBAAkB7qC,MACzB/tC,KAAK+3E,UAAU9pE,KAAK,CAClB4qE,YAAWt4E,EAAA,GAAOP,KAAK44E,kBAAkBv2E,SAG3CrC,KAAK44E,kBAAkB5qC,oBAI3B2qC,EAAAz4E,UAAAq3E,SAAA,WACEv3E,KAAKg4E,UAAU/pE,iDAnBOggC,EAAAA,eAjBxBhtC,EAAA,CADC0I,EAAAA,oCAID1I,EAAA,CADC0I,EAAAA,sCAID1I,EAAA,CADCsO,EAAAA,0CAIDtO,EAAA,CADCsO,EAAAA,0CAVUopE,EAA0B13E,EAAA,CAJtCkZ,EAAAA,UAAU,CACTtQ,SAAU,yBACV5D,SAAA,6tEAEW0yE,oBCeX,SAAAG,EACU5oE,EACAu6B,EACAloB,GAFAviB,KAAAkQ,eAAAA,EACAlQ,KAAAyqC,YAAAA,EACAzqC,KAAAuiB,qBAAAA,EATFviB,KAAA0N,aAAe,IAAIC,EAAAA,aAyD7B,OA7CEmrE,EAAA54E,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KAEEA,KAAKyqC,YAAYsuC,4CAEjB/4E,KAAKg5E,MAAQh5E,KAAKyqC,YAAY/hC,MAC9B1I,KAAK8uD,QAAU9uD,KAAKyqC,YAAYskB,YAAYpkD,KAC1CqF,EAAAA,KAAI,SAACg/C,GACgC,IAA/BxvD,OAAOorB,KAAKokC,GAAQluD,QACtB+E,EAAK4kC,YAAYwkB,iBAIvBjvD,KAAK2f,SAAW3f,KAAKyqC,YAAYwuC,wCAEjCj5E,KAAK0N,aAAaxF,IAChBlI,KAAKyqC,YACFyuC,wCACA9qE,WAAU,SAAC+V,GAAY,OAAAte,EAAKuvC,UAAUjxB,QAI7C20D,EAAA54E,UAAAk1C,UAAA,SAAUjxB,GACJA,IACFnkB,KAAKuiB,qBAAqBra,IACxB,CAAE9G,IAAK,0CACPwjB,EAAAA,kBAAkBC,uBAEpB7kB,KAAKkQ,eAAeE,GAAG,CAAEC,QAAS,WAItCyoE,EAAA54E,UAAAq3E,SAAA,WACEv3E,KAAKkQ,eAAeE,GAAG,CAAEC,QAAS,UAGpCyoE,EAAA54E,UAAA4tC,SAAA,SAASxoC,OAAEuzE,EAAAvzE,EAAAuzE,YACT74E,KAAKyqC,YAAY0uC,sBAAsBN,IAGzCC,EAAA54E,UAAAmP,YAAA,WACErP,KAAK0N,aAAaE,cAGlB5N,KAAKyqC,YAAYsuC,sFAhDOzoE,EAAAA,sBACHo2B,EAAAA,mBACSjhB,EAAAA,wBAVrBqzD,EAAsB73E,EAAA,CAJlCkZ,EAAAA,UAAU,CACTtQ,SAAU,oBACV5D,SAAA,6mBAEW6yE,oBCqBb,SAAAM,KAAkC,OAArBA,EAAmBn4E,EAAA,CAvB/B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACA2b,EAAAA,YACAC,EAAAA,oBACApE,GACAN,EAAAA,WACAkM,IAEF5d,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbw3D,uBAAwB,CACtB50E,UAAW40E,GACXhzD,OAAQ,CAACC,EAAAA,gBAKjB7b,aAAc,CAAC4uE,GAAwBH,IACvCxuE,QAAS,CAAC2uE,GAAwBH,IAClCp3D,gBAAiB,CAACu3D,OAEPM,oBCdX,SAAAC,EACYnpE,EACAo0B,GADAtkC,KAAAkQ,eAAAA,EACAlQ,KAAAskC,YAAAA,EALOtkC,KAAAs5E,UAAY,aACZt5E,KAAAu5E,qBAAuB,8BAO1CF,EAAAn5E,UAAAs5E,iBAAA,SAAiB7jC,GACf31C,KAAKkQ,eAAeE,GAClB,CACEC,QAAS,SACTqqB,OAAQ,CAAE1mB,MAAOhU,KAAKy5E,iBAAiB9jC,KAEzC,CAAE+jC,WAAY/jC,EAAOC,YAIjByjC,EAAAn5E,UAAAu5E,iBAAR,SAAyB9jC,GACvB,OAAOA,EAAOgkC,sBACV35E,KAAKs5E,UACLt5E,KAAKs5E,UAAYt5E,KAAKu5E,qBAAuB5jC,EAAOC,UAG1DyjC,EAAAn5E,UAAAqzE,cAAA,WAME,OAAOtiE,EAAAA,cAAc,CACnBjR,KAAKskC,YAAYqmB,UAAU,0BAC3B3qD,KAAKskC,YAAYqmB,UAAU,2BAC3B3qD,KAAKskC,YAAYqmB,UAAU,wBAC3B3qD,KAAKskC,YAAYqmB,UAAU,2BAC1BhgD,KACDC,EAAAA,KACE,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAMC,MAAO,CACLs0E,eANFhhE,EAAA,GAOEihE,gBANFjhE,EAAA,GAOEkhE,aANFlhE,EAAA,GAOEmhE,cANFnhE,EAAA,kDArCoBtI,EAAAA,sBACHy1B,EAAAA,yLAbdszC,EAAyBp4E,EAAA,CAHrC+B,EAAAA,WAAW,CACVC,WAAY,UAEDo2E,oBCgDX,SAAAW,EACYC,EACAC,GADAl6E,KAAAi6E,cAAAA,EACAj6E,KAAAk6E,0BAAAA,EA1CZl6E,KAAAkf,UAAYtX,EAAAA,UAEJ5H,KAAAyZ,cAAgB,IAAI9L,EAAAA,aAEpB3N,KAAA4yE,UAAY,GACZ5yE,KAAAm6E,YAAc,CACpBP,eAAgB,gBAChBC,gBAAiB,iBACjBC,aAAc,cACdC,cAAe,gBAEjB/5E,KAAA8qB,KAAO,iBAEP9qB,KAAAo6E,YAAc,CACZ,CACEz1D,KAAM,iBACNsnC,UAAU,GAEZ,CACEtnC,KAAM,kBACNsnC,UAAU,GAEZ,CACEtnC,KAAM,eACNsnC,UAAU,GAEZ,CACEtnC,KAAM,gBACNsnC,UAAU,IAmGhB,OAlFE+tB,EAAA95E,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAKq6E,cAAgBr6E,KAAKi6E,cACvBxlC,mBAAmBz0C,KAAK4yE,WACxBjoE,KACCqF,EAAAA,KACE,SAAC8kC,GACC,OAACjvC,EAAKgpB,WAAa,CACjBoE,YAAa6hB,EAAQjmB,WAAW8E,KAChCyb,SAAU0F,EAAQjmB,WAAW0D,MAC7BS,WAAY8hB,EAAQjmB,WAAWmE,WAC/BkgD,aAAcp+B,EAAQjmB,WAAWyrD,WACjCxvD,KAAMjlB,EAAKilB,UAIrB9qB,KAAKu6E,gBAAkBv6E,KAAKi6E,cAAcO,4BAC1Cx6E,KAAKy6E,2BAA6BxpE,EAAAA,cAAc,CAC9CjR,KAAKi6E,cAAcS,0CACnB16E,KAAKi6E,cAAcU,8CAClBhwE,KACDC,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAACs1E,EAAAhiE,EAAA,GAAaiiE,EAAAjiE,EAAA,GAAmB,OAAAgiE,GAAeC,MAEvD76E,KAAK86E,WAAa96E,KAAKk6E,0BAA0B3G,gBAEjDvzE,KAAKyZ,cACFvR,IACClI,KAAKi6E,cACFc,wCACA3sE,WAAU,SAACzL,GACVkD,EAAKm1E,iBAAiBr4E,OAG3BuF,IACClI,KAAKi6E,cACFgB,0CACA7sE,WAAU,SAACzL,GACVkD,EAAKm1E,iBAAiBr4E,QAKxBq3E,EAAA95E,UAAA86E,iBAAR,SAAyBr4E,GACnBA,GACF3C,KAAKi6E,cAAc1lC,oBAAoBv0C,KAAK4yE,YAIhDoH,EAAA95E,UAAAg7E,WAAA,SAAWpwD,GACT9qB,KAAK8qB,KAAOA,EAEZ9qB,KAAKi6E,cAAc1lC,oBACjBv0C,KAAK4yE,UACL5yE,KAAK6uB,WAAWoE,YAChBjzB,KAAKm6E,YAAYrvD,KAIrBkvD,EAAA95E,UAAAwzB,WAAA,SAAWC,GACT3zB,KAAKi6E,cAAc1lC,oBACjBv0C,KAAK4yE,UACLj/C,EACA3zB,KAAKm6E,YAAYn6E,KAAK8qB,QAI1BkvD,EAAA95E,UAAAi7E,mBAAA,SAAmB71E,OACjBswC,EAAAtwC,EAAAswC,SACAtwC,EAAA81E,aAMEp7E,KAAKi6E,cAAcoB,wBAAwBzlC,GAE3C51C,KAAKi6E,cAAcqB,0BAA0B1lC,IAIjDokC,EAAA95E,UAAAmP,YAAA,WACErP,KAAKyZ,cAAc7L,wDApFMsoC,EAAAA,6BACYmjC,MA/C5BW,EAAkB/4E,EAAA,CAJ9BkZ,EAAAA,UAAU,CACTtQ,SAAU,gBACV5D,SAAA,wjGAEW+zE,oBCCX,SAAAuB,EAAsB7qC,GAAA1wC,KAAA0wC,aAAAA,EANtB1wC,KAAAkf,UAAYtX,EAAAA,UAWd,OAHE2zE,EAAAr7E,UAAAqxC,aAAA,SAAa7pC,GACX1H,KAAK0wC,aAAa5b,mBAAmBptB,6CAHH6sB,MAFpCtzB,EAAA,CADCggB,EAAAA,UAAU,SAAU,CAAE4wB,KAAMx/B,EAAAA,2CAJlBkpE,EAAqBt6E,EAAA,CAJjCkZ,EAAAA,UAAU,CACTtQ,SAAU,mBACV5D,SAAA,uhDAEWs1E,oBCiBX,SAAAC,EACY9qC,EACAwpC,GADAl6E,KAAA0wC,aAAAA,EACA1wC,KAAAk6E,0BAAAA,EAPZl6E,KAAAy7E,oBAAsB,IAAIhuE,EAAAA,aA+B5B,OArBE+tE,EAAAt7E,UAAAw7E,qBAAA,WACE17E,KAAKy7E,oBAAoBxtE,KAAK,CAC5B2nC,SAAU51C,KAAK21C,OAAOC,SACtBwlC,cAAep7E,KAAK21C,OAAOgmC,kBAI/BH,EAAAt7E,UAAA07E,SAAA,WAEE57E,KAAKgzC,SAAWhzC,KAAK0wC,aAAahc,KAAK6mD,GAAuB,CAC5DtoC,UAAU,EACV3oC,KAAM,OAGQtK,KAAKgzC,SAASE,kBAChByC,OAAS31C,KAAK21C,QAG9B6lC,EAAAt7E,UAAA27E,aAAA,WACE77E,KAAKk6E,0BAA0BV,iBAAiBx5E,KAAK21C,kDAvB7BphB,UACa8kD,MAZ9Bp4E,EAAA,CAAR0I,EAAAA,sCACQ1I,EAAA,CAAR0I,EAAAA,0DAID1I,EAAA,CADCsO,EAAAA,oDALUisE,EAAmBv6E,EAAA,CAJ/BkZ,EAAAA,UAAU,CACTtQ,SAAU,iBACV5D,SAAA,68DAEWu1E,oBCCX,SAAAM,EACY7B,EACA/pE,EACA6rE,GAFA/7E,KAAAi6E,cAAAA,EACAj6E,KAAAkQ,eAAAA,EACAlQ,KAAA+7E,eAAAA,EAiCd,OA9BED,EAAA57E,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAKkQ,eACFqqB,iBACAnsB,WAAU,SAAC4tE,GACV,IAAM9mC,EAAa8mC,EAAEvhD,MAAMC,OAAOwa,WAC9BA,GACFrvC,EAAKo0E,cAAcgC,oBAAoB/mC,GACvCrvC,EAAK6H,aAAe7H,EAAKo0E,cACtBiC,sCACA9tE,WAAU,SAAC+V,GACNA,GACFte,EAAKk2E,eAAe7zE,IAClB,CAAE9G,IAAK,iCACPwjB,EAAAA,kBAAkBC,uBAGtBhf,EAAKqK,eAAeE,GAAG,CAAEC,QAAS,gBAGtCxK,EAAKqK,eAAeE,GAAG,CAAEC,QAAS,gBAGrCzC,eAGLkuE,EAAA57E,UAAAmP,YAAA,WACMrP,KAAK0N,cACP1N,KAAK0N,aAAaE,wDAhCKsoC,EAAAA,6BACC5lC,EAAAA,sBACAmV,EAAAA,wBANjBq2D,EAAoB76E,EAAA,CAJhCkZ,EAAAA,UAAU,CACTlU,SAAA,GACA4D,SAAU,qBAECiyE,SCwBC,CAAEzrE,QAAS,eA+BzB8rE,GAAA,WAAA,SAAAA,KAA8B,OAAjBA,EAAel7E,EAAA,CA9C3B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACA+c,GACAvF,GACAN,EAAAA,WACAsL,EAAAA,aACAC,EAAAA,UACA9N,GACAsV,GACAzH,EAAAA,aAAa0hD,SAAS,CACpB,CACEtmC,KAAM,KACN+Q,YAAa,CAAC7yB,EAAAA,UAAWs5C,IACzBn7D,UAAW8xD,GACXx9B,KAAI4jD,OAIVlyE,aAAc,CACZ8vE,GACAwB,GACAD,GACAO,IAEFrsE,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb04D,mBAAoB,CAClB91E,UAAW81E,GACXl0D,OAAQ,CAACC,EAAAA,YAEX+1D,qBAAsB,CACpB53E,UAAW43E,GACXh2D,OAAQ,CAACC,EAAAA,gBAKjB5b,QAAS,CAAC6vE,GAAoB8B,IAC9Bv6D,gBAAiB,CACfy4D,GACAuB,GACAO,OAGSK,GAAb,iBCjDE,SAAAE,EACUC,GAAAt8E,KAAAs8E,8BAAAA,EAHAt8E,KAAAu8E,YAAwC,GAmCpD,OA7BEF,EAAAn8E,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAKs8E,8BAA8BE,+BACnCx8E,KAAKy8E,aAAez8E,KAAKs8E,8BACtBI,iBACA/xE,KAAKqF,EAAAA,KAAI,SAACusE,GAAgB,OAAC12E,EAAK02E,YAAcA,MACjDv8E,KAAKs8E,8BAA8BK,kBAEnC38E,KAAKiqD,WAAah5C,EAAAA,cAAc,CAC9BjR,KAAKs8E,8BAA8BM,wBACnC58E,KAAKs8E,8BAA8BO,sCAClClyE,KACDC,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAACw3E,EAAAlkE,EAAA,GAAcmkE,EAAAnkE,EAAA,GAAmB,OAAAkkE,GAAgBC,OAI3DV,EAAAn8E,UAAA88E,iBAAA,SAAiBC,GACf,IAAMC,EAAqB,GAC3Bl9E,KAAKu8E,YAAY7tE,SAAQ,SAAC9O,GACpBA,EAAEu9E,UAAYF,EAAWE,QAC3BD,EAAmBx6E,KAAInC,EAAAA,EAAA,GAClBX,GAAC,CACJi3D,SAAUj3D,EAAEi3D,WAGdqmB,EAAmBx6E,KAAK9C,MAG5BI,KAAKs8E,8BAA8Bc,kBAAkBF,6CA9Bdr2C,EAAAA,qCAP9Bw1C,EAA+Bp7E,EAAA,CAL3CkZ,EAAAA,UAAU,CACTtQ,SAAU,6BACV5D,SAAA,69CACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B8zD,oBCcb,SAAAgB,KAA2C,OAA9BA,EAA4Bp8E,EAAA,CAhBxC8I,EAAAA,SAAS,CACRG,aAAc,CAACmyE,IACfryE,QAAS,CAACC,EAAAA,aAAcwX,GAAeN,EAAAA,YACvC1R,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb+6D,gCAAiC,CAC/Bn4E,UAAWm4E,GACXv2D,OAAQ,CAACC,EAAAA,gBAKjB5b,QAAS,CAACkyE,IACV96D,gBAAiB,CAAC86D,OAEPgB,oBC4BX,SAAAC,EACUC,EACApT,EACAl6B,GAFAjwC,KAAAu9E,uBAAAA,EACAv9E,KAAAmqE,mBAAAA,EACAnqE,KAAAiwC,eAAAA,EA3BFjwC,KAAAw9E,kBAAoB,GACpBx9E,KAAAm6E,YAAc,CACpBsD,UAAW,WACXC,WAAY,aAGd19E,KAAA8qB,KAAO,YACP9qB,KAAAo6E,YAAc,CACZ,CACEz1D,KAAM,YACNsnC,UAAU,GAEZ,CACEtnC,KAAM,aACNsnC,UAAU,IAyGhB,OAzFEqxB,EAAAp9E,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAK29E,WAAa39E,KAAKu9E,uBACpBK,2BAA2B59E,KAAKw9E,mBAChC7yE,KACCqF,EAAAA,KACE,SAAC6tE,GACC,OAACh4E,EAAKgpB,WAAa,CACjBoE,YAAa4qD,EAAUhvD,WAAW8E,KAClCyb,SAAUyuC,EAAUhvD,WAAW0D,MAC/BS,WAAY6qD,EAAUhvD,WAAWmE,WACjCkgD,aAAc2K,EAAUhvD,WAAWyrD,WACnCxvD,KAAM,gBAGZlgB,EAAAA,KAAI,SAACkzE,GAAa,OAAAv9E,EAAAA,EAAA,GACbu9E,GAAQ,CACX11B,QAAS01B,EAAS11B,QACd01B,EAAS11B,QAAQx9C,KAAI,SAAC2+C,GAAW,OAAAhpD,EAAAA,EAAA,GAC5BgpD,GAAM,CACT9O,SAAU50C,EAAKwqC,WAAWkZ,QAE5Bu0B,EAAS11B,cAInBpoD,KAAK+9E,qBAAuB/9E,KAAKu9E,uBAAuBS,4BACxDh+E,KAAKi+E,kBAAoBhtE,EAAAA,cAAc,CACrCjR,KAAK+9E,qBACL/9E,KAAKu9E,uBAAuBW,mCAC3BvzE,KAAKC,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAAC+zC,EAAAzgC,EAAA,GAAYulE,EAAAvlE,EAAA,GAAmB,OAAAygC,GAAc8kC,MAE3Dn+E,KAAK86E,WAAa96E,KAAKuzE,iBAGjB+J,EAAAp9E,UAAAqzE,cAAR,WAIE,OAAOtiE,EAAAA,cAAc,CACnBjR,KAAKmqE,mBAAmBxf,UAAU,iCAClC3qD,KAAKmqE,mBAAmBxf,UAAU,oCACjChgD,KACDC,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GACH,MAAO,CACLm4E,UAFE7kE,EAAA,GAGF8kE,WAHO9kE,EAAA,SASP0kE,EAAAp9E,UAAAmwC,WAAR,SACEytC,GAEA,OAAO99E,KAAKiwC,eAAevnC,IAAIo1E,EAASr5C,QAAQ9f,KAAMwrB,EAAAA,aAAaC,UAGrEktC,EAAAp9E,UAAAk+E,eAAA,SACEC,GAIAr+E,KAAKu9E,uBAAuBe,qBAAqB,CAC/C75C,QAAS45C,EAAS55C,QAClB85C,qBAAsBF,EAASE,wBAInCjB,EAAAp9E,UAAAg7E,WAAA,SAAWpwD,GACT9qB,KAAK8qB,KAAOA,EACZ9qB,KAAKu9E,uBAAuBiB,qBAC1Bx+E,KAAKw9E,kBACL,EACAx9E,KAAKm6E,YAAYrvD,KAIrBwyD,EAAAp9E,UAAAwzB,WAAA,SAAWC,GACT3zB,KAAKu9E,uBAAuBiB,qBAC1Bx+E,KAAKw9E,kBACL7pD,EACA3zB,KAAKm6E,YAAYn6E,KAAK8qB,QAI1BwyD,EAAAp9E,UAAAmP,YAAA,WACErP,KAAKu9E,uBAAuBkB,wBAC5Bz+E,KAAKu9E,uBAAuBmB,qEA5FI53C,EAAAA,4BACJf,EAAAA,0BACJG,EAAAA,kBA5Bfo3C,EAAoBr8E,EAAA,CALhCkZ,EAAAA,UAAU,CACTtQ,SAAU,kBACV5D,SAAA,m0PACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B+0D,oBCUb,SAAAqB,KAAgC,OAAnBA,EAAiB19E,EAAA,CAzB7B8I,EAAAA,SAAS,CACRG,aAAc,CAACozE,IACftzE,QAAS,CACPC,EAAAA,aACAkX,EAAAA,WACAsL,EAAAA,aACAyH,GACA/S,EAAAA,WACAuL,EAAAA,UACAJ,GACA7K,IAEFhS,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbg8D,qBAAsB,CACpBp5E,UAAWo5E,GACXx3D,OAAQ,CAACC,EAAAA,gBAKjB5b,QAAS,CAACmzE,IACV/7D,gBAAiB,CAAC+7D,OAEPqB,oBCpBX,SAAAC,EACS16E,EACGy0D,EACFr0B,GAFDtkC,KAAAkE,UAAAA,EACGlE,KAAA24D,gBAAAA,EACF34D,KAAAskC,YAAAA,EAyBZ,OAtBEs6C,EAAA1+E,UAAAqJ,SAAA,WACEvJ,KAAKm5D,WACLn5D,KAAK6+E,aAGCD,EAAA1+E,UAAAi5D,SAAR,WACEn5D,KAAK8+E,OAAS9+E,KAAK24D,gBAAgBC,UAAUjuD,KAC3CtF,EAAAA,OAAOpB,SACP2G,EAAAA,KAAI,SAACiuD,GAAmB,OAAAA,EAAKkmB,SAAWlmB,EAAK3M,WAIzC0yB,EAAA1+E,UAAA2+E,UAAR,WACE7+E,KAAKg/E,QAAU/tE,EAAAA,cAAc,CAC3BjR,KAAK24D,gBAAgBC,UACrB54D,KAAKskC,YAAYqmB,UAAU,eAAehgD,KAAKs0E,EAAAA,UAAUC,EAAAA,mBACxDv0E,KACDC,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAACuzD,EAAAjgD,EAAA,GAAMumE,EAAAvmE,EAAA,GACV,OAAAigD,MAAAA,OAAI,EAAJA,EAAMoK,aAAcpK,EAAKoK,YAAc,CAAC,CAAE1yC,MAAO4uD,EAAUrhE,KAAM,oDAvBnD8a,UACSiN,EAAAA,uBACNE,EAAAA,sBAPZ64C,EAAmB39E,EAAA,CAL/BkZ,EAAAA,UAAU,CACTtQ,SAAU,gBACV5D,SAAA,6KACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9Bq2D,oBCSb,SAAAQ,KAA+B,OAAlBA,EAAgBn+E,EAAA,CAf5B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcwiB,EAAAA,aAAc4yD,EAAAA,oBACtC5vE,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbs9D,oBAAqB,CACnB16E,UAAW06E,QAKnB10E,aAAc,CAAC00E,IACfz0E,QAAS,CAACy0E,IACVr9D,gBAAiB,CAACq9D,OAEPQ,oBCXX,SAAAE,EACYlkC,EACAkjB,GADAt+D,KAAAo7C,WAAAA,EACAp7C,KAAAs+D,oBAAAA,SAGLghB,EAAAp/E,UAAAq/E,iBAAP,SACEhnD,GAEA,OAAOtnB,EAAAA,cAAc,CAACsnB,EAAOv4B,KAAKw/E,kBAAkBjnD,KAAS5tB,KAC3DC,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAACkzB,EAAA5f,EAAA,GAAM6mE,EAAA7mE,EAAA,GACV,OAAO4f,EACH,CACE0zB,MAAO1zB,EAAK8U,KACZv2B,SAAU,CAAC0oE,SAEbt4E,OAUHm4E,EAAAp/E,UAAAs/E,kBAAP,SACEjnD,GADF,IAAA1yB,EAAA7F,KAGE,OAAKu4B,EAGEA,EAAM5tB,KACXtF,EAAAA,QAAO,SAACmzB,GAAS,QAAEA,KACnBpC,EAAAA,WAAU,SAACoC,GACT,IAAMknD,EAAalnD,EAAKmnD,eAAiBnnD,EAAKmnD,eAAiBnnD,EAC/D,OAAO3yB,EAAKu1C,WAAWwkC,wBAAwBF,EAAWh+C,KAAK/2B,KAC7DqF,EAAAA,KAAI,SAACkY,GACH,QAAc/gB,IAAV+gB,EACFriB,EAAKg6E,yBAAyBH,GAAY,OACrC,CAEL,IAAMI,EAAgB,GACtBj6E,EAAKg6E,yBAAyBH,GAAY,EAAOI,GACjD,IAAMC,EAAgBvgF,OAAOorB,KAAK1C,GAAOtd,KACvC,SAACxJ,GAAQ,OAAA8mB,EAAM9mB,GAAKsgC,OAEhBs+C,EAAeF,EAAcz6E,QACjC,SAAC46E,GAAO,OAACF,EAAcxxE,SAAS0xE,EAAG5/D,OAEjC2/D,EAAal/E,OAAS,GACxB+E,EAAKu1C,WAAW8kC,oBACdR,EAAWh+C,IACXs+C,OAKR36E,EAAAA,OAAOpB,SACP2G,EAAAA,KAAI,SAACsd,GAAU,OAAAriB,EAAKs6E,uBAAuBT,EAAYx3D,WA7BpD7hB,EAAAA,MAyCHi5E,EAAAp/E,UAAA2/E,yBAAR,SACEO,EACAC,EACAC,GAHF,IAAAz6E,EAAA7F,UAGE,IAAAsgF,IAAAA,EAAA,IAEIF,EAASz0E,SAAWy0E,EAASz0E,QAAQ7K,OAAS,GAChDs/E,EAASz0E,QAAQ+C,SAAQ,SAAC3C,GACxBu0E,EAAU59E,KAAK,CACb69E,UAAWx0E,EAAMy0E,cACjBngE,GAAItU,EAAM00E,YAKZL,EAASrpE,UAAYqpE,EAASrpE,SAASjW,OAAS,GAClDs/E,EAASrpE,SAASrI,SAAQ,SAACwI,GACzB,OAAArR,EAAKg6E,yBAAyB3oE,GAAO,EAAOopE,MAI5CD,GACFrgF,KAAKo7C,WAAW8kC,oBAAoBE,EAAS1+C,IAAK4+C,IAS9ChB,EAAAp/E,UAAAigF,uBAAR,SAA+BC,EAAel4D,GAA9C,IAAAriB,EAAA7F,KACQ0gF,EAAuB,GAY7B,GAVIN,EAASl0B,QAGXw0B,EAAKx0B,MAAQk0B,EAASl0B,OAGpBk0B,EAASz0E,SAAWy0E,EAASz0E,QAAQ7K,OAAS,GAChDd,KAAK2gF,aAAaD,EAAMN,EAASz0E,QAAQ,GAAIuc,GAG3Ck4D,EAASrpE,UAAYqpE,EAASrpE,SAASjW,OAAS,EAAG,CACrD,IAAMiW,EAAWqpE,EAASrpE,SACvBnM,KAAI,SAACsM,GAAU,OAAArR,EAAKs6E,uBAAuBjpE,EAAOgR,MAClD7iB,OAAOpB,SACN8S,EAASjW,OAAS,IACpB4/E,EAAK3pE,SAAWA,GAKpB,OAAoC,IAA7BvX,OAAOorB,KAAK81D,GAAM5/E,OAAe,KAAO4/E,GAMzCpB,EAAAp/E,UAAAygF,aAAR,SAAqBD,EAAsB30E,EAAOmc,GAChD,IAAMiL,EAAOjL,EAASnc,EAAM00E,OAAM,IAAI10E,EAAMy0E,eAG5C,GAAIrtD,GAA2B,qBAAnBpnB,EAAM60E,SAAiC,CAC5CF,EAAKx0B,QACRw0B,EAAKx0B,MAAQ/4B,EAAK0tD,UAEpB,IAAMvkE,EAAMtc,KAAK8gF,QAAQ3tD,GAErButD,EAAKx0B,OAAS5vC,IAChBokE,EAAKpkE,IAAMA,EAGXokE,EAAKv/E,OAAWgyB,EAAKhyB,OAAS,SAAW,MASvCm+E,EAAAp/E,UAAA4gF,QAAR,SAAgB3tD,GACd,OAAIA,EAAK7W,IACA6W,EAAK7W,IACH6W,EAAK8tC,aACPjhE,KAAKs+D,oBAAoBrxB,UAAU,CACxC58B,QAAS,WACTqqB,OAAQ,CACN/V,KAAMwO,EAAK8tC,aACX3zB,KAAMna,EAAKma,aALV,4CA1Je1L,EAAAA,kBACSw9B,EAAAA,uLAHtBkgB,EAAiBr+E,EAAA,CAH7B+B,EAAAA,WAAW,CACVC,WAAY,UAEDq8E,oBCMX,SAAAyB,EACYzpD,EACA5lB,GADA1R,KAAAs3B,cAAAA,EACAt3B,KAAA0R,QAAAA,EARZ1R,KAAAghF,MAAoChhF,KAAK0R,QAAQ8tE,kBAC/Cx/E,KAAKs3B,cAAciB,OAGrBv4B,KAAAu4B,MAA4Cv4B,KAAKs3B,cAAciB,MAMjE,gDAH6BK,UACN0mD,MATVyB,EAA2B9/E,EAAA,CALvCkZ,EAAAA,UAAU,CACTtQ,SAAU,yBACV5D,SAAA,sKACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9Bw4D,oBC4CX,SAAAE,EACUp+B,EACAj/C,EACAs9E,GAHV,IAAAr7E,EAAA7F,KACUA,KAAA6iD,OAAAA,EACA7iD,KAAA4D,SAAAA,EACA5D,KAAAkhF,QAAAA,EAvBVlhF,KAAAod,SAAWxV,EAAAA,UAO2B5H,KAAAmhF,QAAS,EAERnhF,KAAAohF,QAAS,EAExCphF,KAAAqhF,UAA2B,GAC3BrhF,KAAAyZ,cAAgB,IAAI9L,EAAAA,aACpB3N,KAAAshF,OAAS,IAAI7zE,EAAAA,aAYnBzN,KAAKyZ,cAAcvR,IACjBlI,KAAK6iD,OAAO6P,OACT/nD,KAAKtF,EAAAA,QAAO,SAACiO,GAAU,OAAAA,aAAiBiuE,EAAAA,kBACxCnzE,WAAU,WAAM,OAAAvI,EAAK0B,YAE1BvH,KAAKyZ,cAAcvR,IACjBlI,KAAKshF,OAAO32E,KAAKmkC,EAAAA,aAAa,KAAK1gC,WAAU,WAC3CvI,EAAK27E,qCAuHb,OAvIEP,EAAA/gF,UAAAuhF,SAAA,WACEzhF,KAAKshF,OAAOl/E,QAoBd6+E,EAAA/gF,UAAAwhF,WAAA,SAAWpuE,GACU,YAAfA,EAAMrG,MACRqG,EAAMC,iBAER,IAAMmtE,EAAoBptE,EAAMquE,cAC5B3hF,KAAKqhF,UAAU9yE,SAASmyE,GACP,YAAfptE,EAAMrG,KACRjN,KAAKqlD,QAELrlD,KAAKqhF,UAAYrhF,KAAKqhF,UAAUh8E,QAAO,SAACzE,GAAM,OAAAA,IAAM8/E,KACpD1gF,KAAK4D,SAAS2B,YAAYm7E,EAAM,YAGlC1gF,KAAKqhF,UAAU3+E,KAAKg+E,GAGtB1gF,KAAK4hF,gBAELtuE,EAAMuuE,2BACNvuE,EAAME,mBAGRytE,EAAA/gF,UAAAmlD,KAAA,WACMrlD,KAAKqhF,UAAUrhF,KAAKqhF,UAAUvgF,OAAS,KACzCd,KAAK4D,SAAS2B,YACZvF,KAAKqhF,UAAUrhF,KAAKqhF,UAAUvgF,OAAS,GACvC,WAEFd,KAAKqhF,UAAUrsD,MACfh1B,KAAK4hF,kBAITX,EAAA/gF,UAAAqH,MAAA,WACEvH,KAAKqhF,UAAY,GACjBrhF,KAAK4hF,iBAGPX,EAAA/gF,UAAA4hF,aAAA,SAAaxuE,GACXtT,KAAK+hF,8BAA2CzuE,EAAMquE,eACtD3hF,KAAKgiF,0BAA0B1uE,IAGjC2tE,EAAA/gF,UAAA+hF,cAAA,SAAcvB,EAAsBwB,GAApC,IAAAr8E,EAAA7F,KACE,YADkC,IAAAkiF,IAAAA,EAAA,GAC9BxB,EAAK3pE,UAAY2pE,EAAK3pE,SAASjW,OAAS,EACnCsV,KAAKsY,IAAG1tB,MAARoV,KAAIxT,EACN89E,EAAK3pE,SAASnM,KAAI,SAAChK,GAAM,OAAAiF,EAAKo8E,cAAcrhF,EAAGshF,EAAQ,QAGrDA,GAIXjB,EAAA/gF,UAAAiiF,eAAA,SAAerhF,GACb,OAAOsV,KAAKC,MAAMvV,GAAUd,KAAKoiF,WAAathF,KAGhDmgF,EAAA/gF,UAAA8hF,0BAAA,SAA0B1uE,GACxB,IAAMnS,EACHmS,EAAMnS,QAAUmS,EAAM+uE,cAQzB,OALElhF,EAAOmhF,cAAcnrE,cAAcorE,QAAQ,kBAC3CphF,EAAOwmC,cAAc46C,QAAQ,YAE7BphF,EAAOkQ,QAEFlQ,EAAOmhF,eAGhBrB,EAAA/gF,UAAAmP,YAAA,WACMrP,KAAKyZ,eACPzZ,KAAKyZ,cAAc7L,eAIfqzE,EAAA/gF,UAAA6hF,8BAAR,SAAsCrB,GACpC,IAAM8B,EAAuB9B,EAAK+B,cAAc,YAC1C99E,EAAoB+7E,EAAKgC,QAAQ,QACnCF,IACFxiF,KAAK4D,SAAS++E,YAAYH,EAAS,eAEjCA,EAAQ/rE,WAAa+rE,EAAQI,YAC7Bj+E,EAAK8R,WAAa9R,EAAKi+E,aAEvB5iF,KAAK4D,SAASi/E,SACZL,EACA,cACG9B,EAAKkC,YAAcJ,EAAQI,YAAW,QAMzC3B,EAAA/gF,UAAAshF,+BAAR,WAAA,IAAA37E,EAAA7F,KACQ8iF,EAAuB9iF,KAAKkhF,QAAQ/7E,cAAc49E,WACxDpjF,MAAMsU,KAAK6uE,GACRz9E,QAAO,SAACq7E,GAAS,MAAiB,QAAjBA,EAAKxuE,WACtBxD,SAAQ,SAAC+wE,GAAQ,OAAA55E,EAAKk8E,8BAA2CtC,OAG9DwB,EAAA/gF,UAAA0hF,cAAR,WAAA,IAAA/7E,EAAA7F,KACEA,KAAKqhF,UAAU3yE,SAAQ,SAACgyE,EAAM//E,GACxBA,EAAI,EAAIkF,EAAKw7E,UAAUvgF,QACzB+E,EAAKjC,SAASc,SAASg8E,EAAM,aAC7B76E,EAAKjC,SAAS2B,YAAYm7E,EAAM,aAEhC76E,EAAKjC,SAAS2B,YAAYm7E,EAAM,aAChC76E,EAAKjC,SAASc,SAASg8E,EAAM,eAIjC1gF,KAAKohF,OAASphF,KAAKqhF,UAAUvgF,OAAS,4CAhItBoiD,EAAAA,cACEjqC,EAAAA,iBACD5G,EAAAA,cAjCVpR,EAAA,CAAR0I,EAAAA,oCAKQ1I,EAAA,CAAR0I,EAAAA,yCAYqC1I,EAAA,CAArC0I,EAAAA,QAAS2I,EAAAA,YAAY,8CAEiBrR,EAAA,CAAtC0I,EAAAA,QAAS2I,EAAAA,YAAY,+CAOtBrR,EAAA,CADC4R,EAAAA,aAAa,+CA7BHouE,EAAqBhgF,EAAA,CALjCkZ,EAAAA,UAAU,CACTtQ,SAAU,mBACV5D,SAAA,ovEACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B04D,oBCAX,SAAA+B,EACY1rD,EACA5lB,GADA1R,KAAAs3B,cAAAA,EACAt3B,KAAA0R,QAAAA,EAVZ1R,KAAAghF,MAAoChhF,KAAK0R,QAAQ6tE,iBAC/Cv/E,KAAKs3B,cAAciB,OAGrBv4B,KAAAijF,YAAkCjjF,KAAKs3B,cAAciB,MAAM5tB,KACzDC,EAAAA,KAAI,SAACtL,GAAC,OAAKA,MAAAA,OAAC,EAADA,EAAG+2D,eAOlB,gDAH6Bz9B,UACN0mD,MAXV0D,EAAmB/hF,EAAA,CAL/BkZ,EAAAA,UAAU,CACTtQ,SAAU,gBACV5D,SAAA,mGACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9By6D,oBCiBb,SAAAE,KAA+B,OAAlBA,EAAgBjiF,EAAA,CArB5B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aACA7N,GACA+O,GACAxM,EAAAA,YAEF1R,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb0hE,oBAAqB,CACnB9+E,UAAW8+E,QAKnB94E,aAAc,CAAC84E,GAAqB/B,IACpC1/D,gBAAiB,CAACyhE,IAClB74E,QAAS,CAAC64E,GAAqB/B,OAEpBiC,oBCTb,SAAAC,KAAuC,OAA1BA,EAAwBliF,EAAA,CAfpC8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAci5E,IACxBzzE,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACby/D,4BAA6B,CAC3B78E,UAAW68E,QAKnB72E,aAAc,CAAC62E,IACfx/D,gBAAiB,CAACw/D,IAClB52E,QAAS,CAAC42E,OAECoC,oBCCX,SAAAC,EACY9rD,EACA5lB,GADA1R,KAAAs3B,cAAAA,EACAt3B,KAAA0R,QAAAA,EAVZ1R,KAAAghF,MAAoChhF,KAAK0R,QAAQ8tE,kBAC/Cx/E,KAAKs3B,cAAciB,OAGrBv4B,KAAAijF,YAAkCjjF,KAAKs3B,cAAciB,MAAM5tB,KACzDC,EAAAA,KAAI,SAACtL,GAAC,OAAKA,MAAAA,OAAC,EAADA,EAAG+2D,eAOlB,gDAH6Bz9B,UACN0mD,MAXV8D,EAAyBniF,EAAA,CALrCkZ,EAAAA,UAAU,CACTtQ,SAAU,uBACV5D,SAAA,6HACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B66D,oBCgBb,SAAAC,KAAqC,OAAxBA,EAAsBpiF,EAAA,CArBlC8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aACAy2D,GACAv1D,GACAxM,EAAAA,YAEF1R,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb8hE,0BAA2B,CACzBl/E,UAAWk/E,QAKnBl5E,aAAc,CAACk5E,IACf7hE,gBAAiB,CAAC6hE,IAClBj5E,QAAS,CAACi5E,OAECC,MCZbC,GAAA,WACE,SAAAA,EACSC,EACGrzE,EACAi6D,EACA3tD,GAHHxc,KAAAujF,cAAAA,EACGvjF,KAAAkQ,eAAAA,EACAlQ,KAAAmqE,mBAAAA,EACAnqE,KAAAwc,OAAAA,SAQZ8mE,EAAApjF,UAAA4gE,OAAA,SAAO9sD,EAAehQ,GACfgQ,GAAmB,KAAVA,EAMZhQ,EAAOw/E,4BACPxvE,EAAMlT,OAASkD,EAAOw/E,6BAKpBx/E,EAAOy/E,iBACTzjF,KAAKujF,cAAcziB,OAAO9sD,EAAO,CAC/Bo7B,SAAUprC,EAAO0/E,cAIjB1/E,EAAO2/E,oBACT3jF,KAAKujF,cAAcK,kBAAkB5vE,EAAO,CAC1Co7B,SAAUprC,EAAO6/E,kBAnBnB7jF,KAAK8jF,gBA6BTR,EAAApjF,UAAA6jF,WAAA,SAAW//E,GAAX,IAAA6B,EAAA7F,KACE,OAAOiR,EAAAA,cAAc,CACnBjR,KAAKgkF,kBAAkBhgF,GACvBhE,KAAKikF,sBAAsBjgF,GAC3BhE,KAAKkkF,iBAAiBlgF,KACrB2G,KACDC,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAAC6+E,EAAAvrE,EAAA,GAAgBwrE,EAAAxrE,EAAA,GAAayrE,EAAAzrE,EAAA,GACjC,MAAO,CACL44D,SAAU2S,EAAiBA,EAAe3S,SAAW,KACrD4S,YAAWA,EACXC,QAAOA,MAGXr0E,EAAAA,KAAI,SAACo4C,GACH,OAAAviD,EAAKy+E,gBA/DmB,wBA+DsBz+E,EAAK0+E,WAAWn8B,SASpEk7B,EAAApjF,UAAA4jF,aAAA,WACE9jF,KAAKujF,cAAcO,eACnB9jF,KAAKskF,gBA1EuB,yBA0EkB,IAGhDhB,EAAApjF,UAAAskF,aAAA,SAAa3oB,GACX,OAAO77D,KAAKwc,OAAOnZ,SAASsB,KAAK8/E,UAAUh1C,SAASosB,IAGtDynB,EAAApjF,UAAAokF,gBAAA,SAAgBzoB,EAAmB3zD,QACrBf,IAARe,EACFlI,KAAKwc,OAAOnZ,SAASsB,KAAK8/E,UAAU7xB,OAAOiJ,GAE3C3zD,EACIlI,KAAKwc,OAAOnZ,SAASsB,KAAK8/E,UAAUv8E,IAAI2zD,GACxC77D,KAAKwc,OAAOnZ,SAASsB,KAAK8/E,UAAUr/E,OAAOy2D,IAI3CynB,EAAApjF,UAAAqkF,WAAR,SAAmBn8B,GACjB,QACKA,EAAQopB,UAAYppB,EAAQopB,SAAS1wE,OAAS,KAC9CsnD,EAAQg8B,aAAeh8B,EAAQg8B,YAAYtjF,OAAS,KACrDsnD,EAAQi8B,SAINf,EAAApjF,UAAA8jF,kBAAR,SACEhgF,GAEA,OAAIA,EAAOy/E,gBACFzjF,KAAKujF,cAAcQ,aAEnB19E,EAAAA,GAAG,KAQNi9E,EAAApjF,UAAA+jF,sBAAR,SAA8BjgF,GAA9B,IAAA6B,EAAA7F,KACE,OAAKgE,EAAO2/E,mBAGH3jF,KAAKujF,cAAcmB,uBAAuB/5E,KAC/CC,EAAAA,KAAI,SAAC0S,GAAQ,OAAAA,EAAI1S,KAAI,SAAC+5E,GAAe,OAAAA,EAAWtiF,YAChD+zB,EAAAA,WAAU,SAACguD,GACT,OAA2B,IAAvBA,EAAYtjF,OACP+E,EAAK++E,mBAAmB5gF,GAAQ2G,KACrCC,EAAAA,KAAI,SAACozB,GAAU,OAACA,EAAQ,CAACA,GAAS,OAG7B33B,EAAAA,GAAG+9E,OAVT/9E,EAAAA,GAAG,KAqBNi9E,EAAApjF,UAAA0kF,mBAAR,SAA2B5gF,GAA3B,IAAA6B,EAAA7F,KACE,OAAOA,KAAKgkF,kBAAkBhgF,GAAQ2G,KACpCyrB,EAAAA,WAAU,SAACyuD,GACT,OAAOA,EAAcrT,UAAYqT,EAAcrT,SAAS1wE,OAAS,EAC7D+E,EAAKi/E,iBAAiB,4BAA6B,CACjDC,KAAMF,EAAcG,iBAEtB3+E,EAAAA,GAAG,WAKLi9E,EAAApjF,UAAAgkF,iBAAR,SAAyBlgF,GAAzB,IAAA6B,EAAA7F,KACE,OAAOiR,EAAAA,cAAc,CACnBjR,KAAKgkF,kBAAkBhgF,GACvBhE,KAAKikF,sBAAsBjgF,KAC1B2G,KACDyrB,EAAAA,WAAU,SAAC9wB,OAAAsT,EAAArW,EAAA+C,EAAA,GAACu/E,EAAAjsE,EAAA,GAAewrE,EAAAxrE,EAAA,GACzB,OACEisE,GACAA,EAAcrT,UACoB,IAAlCqT,EAAcrT,SAAS1wE,QACvBsjF,GACuB,IAAvBA,EAAYtjF,OAEL+E,EAAKi/E,iBAAiB,0BAEtBz+E,EAAAA,GAAG,WASXi9E,EAAApjF,UAAAs5E,iBAAP,SAAwBxlE,GACtBhU,KAAKkQ,eAAeE,GAAG,CACrBC,QAAS,SACTqqB,OAAQ,CAAE1mB,MAAKA,MAIXsvE,EAAApjF,UAAA4kF,iBAAR,SACEG,EACAl6E,GAEA,OAAO/K,KAAKmqE,mBAAmBxf,UAAUs6B,EAAgBl6E,6CAhLnCu7B,EAAAA,wBACIh2B,EAAAA,sBACIy1B,EAAAA,0BACZ5nB,EAAAA,6OALTmlE,EAAyBriF,EAAA,CAHrC+B,EAAAA,WAAW,CACVC,WAAY,UAEDqgF,GAAb,GCHM4B,GAA4C,CAChD1B,2BAA4B,EAC5BC,iBAAiB,EACjBE,oBAAoB,EACpBD,YAAa,EACbG,eAAgB,EAChBsB,sBAAsB,GAQxBC,GAAA,WAyBE,SAAAA,EACYC,EAEA/tD,EACA9a,GAJZ,IAAA3W,EAAA7F,KACYA,KAAAqlF,0BAAAA,EAEArlF,KAAAs3B,cAAAA,EACAt3B,KAAAwc,OAAAA,EAjBZxc,KAAAkf,UAAYtX,EAAAA,UAMJ5H,KAAAq0C,kBAAmB,EAc3Br0C,KAAAslF,SAAsCtlF,KAAKulF,QAAQ56E,KACjDqF,EAAAA,KAAI,SAAC1O,GAAM,OAACuE,EAAK7B,OAAS1C,KAC1B80B,EAAAA,WAAU,SAACpyB,GAAW,OAAA6B,EAAKw/E,0BAA0BtB,WAAW//E,OAsKpE,OAlMExE,OAAAmC,eAAIyjF,EAAAllF,UAAA,YAAS,KAAb,SAAcmC,GACRA,GACFrC,KAAK8gE,OAAOz+D,oCAgChB7C,OAAAmC,eAAYyjF,EAAAllF,UAAA,UAAO,KAAnB,WACE,OAAIF,KAAKs3B,cAC6Bt3B,KAAKs3B,cAAciB,MAAM5tB,KAG3DC,EAAAA,KAAI,SAACtJ,GACH,OAAAf,EAAAA,EAAA,GACKe,GAAC,CACJmiF,gBAC8B,UAAvBniF,MAAAA,OAAC,EAADA,EAAGmiF,mBAAqD,KAAvBniF,MAAAA,OAAC,EAADA,EAAGmiF,iBAC3C0B,qBACmC,UAA5B7jF,MAAAA,OAAC,EAADA,EAAG6jF,wBACoB,KAA5B7jF,MAAAA,OAAC,EAADA,EAAG6jF,sBACLxB,mBACiC,UAA1BriF,MAAAA,OAAC,EAADA,EAAGqiF,sBACkB,KAA1BriF,MAAAA,OAAC,EAADA,EAAGqiF,0BAKJt9E,EAAAA,GAAG6+E,qCAOdE,EAAAllF,UAAA4gE,OAAA,SAAO9sD,GACLhU,KAAKqlF,0BAA0BvkB,OAAO9sD,EAAOhU,KAAKgE,QAElDhE,KAAK00B,QAMP0wD,EAAAllF,UAAAw0B,KAAA,WACE10B,KAAKqlF,0BAA0Bf,gBAAgB,uBAAuB,IAMxEc,EAAAllF,UAAAiR,MAAA,SAAMmC,EAAgBumB,GAAtB,IAAAh0B,EAAA7F,KAEE+Y,YAAW,aACHlT,EAAKwuC,mBAAqBxuC,EAAK2/E,sBAAyB3rD,IAC5Dh0B,EAAK4/E,cAAcnyE,OAKf8xE,EAAAllF,UAAAulF,cAAV,SAAwBnyE,GACtBtT,KAAKqlF,0BAA0Bf,gBAC7B,uBACA,GAEEhxE,GAASA,EAAMnS,QACHmS,EAAMnS,OAAQ60C,QAKxBovC,EAAAllF,UAAAslF,mBAAR,WACE,OACExlF,KAAK0lF,oBAAoBn3E,SAASvO,KAAK2lF,sBACvC3lF,KAAKwc,OAAOnZ,SAASo/E,cAAc,gCACjCziF,KAAK2lF,qBAQXP,EAAAllF,UAAA0lF,YAAA,SAAYtyE,GACNtT,KAAKqlF,0BAA0Bb,aAAa,yBAC9CxkF,KAAKmR,MAAMmC,GACXA,EAAMC,mBAKF6xE,EAAAllF,UAAAwlF,kBAAR,WACE,OAAO/lF,MAAMsU,KACXjU,KAAKwc,OAAOnZ,SAAS6Q,iBAAiB,qCAKlCkxE,EAAAllF,UAAAylF,kBAAR,WACE,OAAoB3lF,KAAKwc,OAAOnZ,SAAS8T,eAGnCiuE,EAAAllF,UAAA2lF,gBAAR,WACE,OAAO7lF,KAAK0lF,oBAAoB1zE,QAAQhS,KAAK2lF,sBAI/CP,EAAAllF,UAAA4lF,mBAAA,SAAmBxyE,GACjBA,EAAMC,iBACA,IAAAjO,EAAA/C,EAAA,qDAAC6lD,EAAA9iD,EAAA,GAASygF,EAAAzgF,EAAA,GAKZ8iD,EAAQtnD,SACNilF,EAAe,EACjB39B,EAAQA,EAAQtnD,OAAS,GAAGuQ,QAE5B+2C,EAAQ29B,EAAe,GAAG10E,UAMhC+zE,EAAAllF,UAAA8lF,eAAA,SAAe1yE,GACbA,EAAMC,iBACA,IAAAjO,EAAA/C,EAAA,qDAAC6lD,EAAA9iD,EAAA,GAASygF,EAAAzgF,EAAA,GAKZ8iD,EAAQtnD,SACNilF,GAAgB39B,EAAQtnD,OAAS,EACnCsnD,EAAQ,GAAG/2C,QAEX+2C,EAAQ29B,EAAe,GAAG10E,UAUhC+zE,EAAAllF,UAAA+lF,mBAAA,SAAmB3yE,EAAgBU,GAC5BA,GAAiC,IAAxBA,EAAMk7B,OAAOpuC,SAG3Bd,KAAKmR,MAAMmC,GACXtT,KAAKqlF,0BAA0B7L,iBAAiBxlE,KAMlDoxE,EAAAllF,UAAA+1C,aAAA,WACEj2C,KAAKq0C,kBAAmB,GAMnB+wC,EAAAllF,UAAAqH,MAAP,SAAanD,GACXpE,KAAKi2C,eACL7xC,EAAG/B,MAAQ,GACXrC,KAAKqlF,0BAA0BvB,yDA5KMR,UAEZ1qD,GAAgB13B,WAAA,CAAA,CAAA+L,KADxC4rB,EAAAA,kBAEiB1a,EAAAA,aAvBpBld,EAAA,CADC0I,EAAAA,MAAM,4CALIy7E,EAAkBnkF,EAAA,CAL9BkZ,EAAAA,UAAU,CACTtQ,SAAU,eACV5D,SAAA,09EACAoiB,gBAAiBC,EAAAA,wBAAwBC,SA6BtC3mB,EAAA,EAAAi3B,EAAAA,aA3BQusD,GAAb,iBCzBA,SAAAc,KAUA,OATEA,EAAAhmF,UAAA+sC,UAAA,SAAUmc,EAAcprB,GACtB,OAAKA,EAGEorB,EAAK7gB,QACVvK,EAAMkR,OACN,2BAA2BlR,EAAMkR,OAAM,WAJhCka,GAHA88B,EAAajlF,EAAA,CADzBosC,EAAAA,KAAK,CAAEC,KAAM,iBACD44C,oBCiCb,SAAAC,KAA8B,OAAjBA,EAAellF,EAAA,CAtB3B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aACAH,GACA1N,GACA8N,EAAAA,UACAvL,EAAAA,YAEF1R,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb8jE,mBAAoB,CAClBlhF,UAAWkhF,QAKnBl7E,aAAc,CAACk7E,GAAoBc,IACnC3kE,gBAAiB,CAAC6jE,IAClBj7E,QAAS,CAACi7E,OAECe,oBCXX,SAAAC,EACY9qD,EACAsV,GADA5wC,KAAAs7B,gBAAAA,EACAt7B,KAAA4wC,iBAAAA,EANZ5wC,KAAAy7B,kBAAuCC,EAAAA,kBAAkBG,SAmB3D,OAVEuqD,EAAAlmF,UAAAqJ,SAAA,WACEvJ,KAAK4vE,OAAS5vE,KAAKs7B,gBAAgBJ,kBACnCl7B,KAAKyxC,iBAAmBzxC,KAAK4wC,iBAAiBpV,mBAC5Cx7B,KAAKy7B,oBAIT2qD,EAAAlmF,UAAAmP,YAAA,WACErP,KAAKs7B,gBAAgB+qD,8DAZM1oD,EAAAA,uBACCvC,MAPnBgrD,EAA+BnlF,EAAA,CAL3CkZ,EAAAA,UAAU,CACTtQ,SAAU,8BACV5D,SAAA,qfACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B69D,oBCMX,SAAAE,EACYhrD,EACFgJ,GADEtkC,KAAAs7B,gBAAAA,EACFt7B,KAAAskC,YAAAA,EAsEZ,OAnEEgiD,EAAApmF,UAAAqJ,SAAA,WACEvJ,KAAK4vE,OAAS5vE,KAAKs7B,gBAAgBJ,mBAGrCorD,EAAApmF,UAAAmP,YAAA,WACErP,KAAKs7B,gBAAgB+qD,qBAGvBC,EAAApmF,UAAAgpD,sBAAA,SAAsBzE,GACpB,OAAOzkD,KAAKskC,YAAYqmB,UAAU,sBAAsBhgD,KACtDtF,EAAAA,QAAO,WAAM,OAAApB,QAAQwgD,MACrB75C,EAAAA,KAAI,SAACmjD,GAAc,MAAA,CACjB7B,MAAO6B,EACP5E,SAAa1E,EAAgBoC,UAAS,IAAIpC,EAAgBqC,SAC1DsC,KAAM,CACJ3E,EAAgBsC,MAChBtC,EAAgBuC,MACbvC,EAAgBwC,KAAI,KAAKxC,EAAgB2C,QAAQzuB,QAAO,KAAK8rB,EAAgB4C,WAChF5C,EAAgB4E,aAMxBi9B,EAAApmF,UAAAqmF,2BAAA,SAA2BxoC,GACzB,OAAO/9C,KAAKskC,YAAYqmB,UAAU,mCAAmChgD,KACnEtF,EAAAA,QAAO,WAAM,OAAApB,QAAQ85C,MACrBnzC,EAAAA,KAAI,SAACmjD,GAAc,MAAA,CACjB7B,MAAO6B,EACP5E,SAAUpL,EAAazQ,KACvB8b,KAAM,CAACrL,EAAa9gB,mBAK1BqpD,EAAApmF,UAAAwxE,6BAAA,SAA6B9nB,GAC3B,OAAO5pD,KAAKskC,YAAYqmB,UAAU,sBAAsBhgD,KACtDtF,EAAAA,QAAO,WAAM,OAAApB,QAAQ2lD,MACrBh/C,EAAAA,KAAI,SAACmjD,GAAc,MAAA,CACjB7B,MAAO6B,EACP5E,SAAaS,EAAe/C,UAAS,IAAI+C,EAAe9C,SACxDsC,KAAM,CACJQ,EAAe7C,MACf6C,EAAe5C,MACZ4C,EAAe3C,KAAI,KAAK2C,EAAexC,QAAQzuB,QAAO,KAAKixB,EAAevC,WAC7EuC,EAAeP,aAMvBi9B,EAAApmF,UAAAsmF,0BAAA,SAA0B37B,GACxB,OAAO55C,EAAAA,cAAc,CACnBjR,KAAKskC,YAAYqmB,UAAU,uBAC3B3qD,KAAKskC,YAAYqmB,UAAU,sBAAuB,CAChDC,MAAO3mD,QAAQ4mD,GAAWA,EAAQpE,YAAc,GAChDmC,KAAM3kD,QAAQ4mD,GAAWA,EAAQnE,WAAa,OAE/C/7C,KACDtF,EAAAA,QAAO,WAAM,OAAApB,QAAQ4mD,MACrBjgD,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAACyoD,EAAAn1C,EAAA,GAAW2yC,EAAA3yC,EAAA,GAAiB,MAAA,CAChCszC,MAAO6B,EACP5E,SAAU0B,EAAQtE,kBAClB6C,KAAM,CAACyB,EAAQrE,WAAY+E,kDAnEJ5tB,EAAAA,uBACNoI,EAAAA,sBALZugD,EAAkCrlF,EAAA,CAL9CkZ,EAAAA,UAAU,CACTtQ,SAAU,iCACV5D,SAAA,wpCACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B+9D,oBCFX,SAAAG,EAAsBnrD,GAAAt7B,KAAAs7B,gBAAAA,EAHtBt7B,KAAA0mF,iBAAkB,EAiBpB,OAZED,EAAAvmF,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAK4vE,OAAS5vE,KAAKs7B,gBAAgBJ,kBAAkBvwB,KACnDqF,EAAAA,KAAI,SAACusB,GACH12B,EAAK6gF,gBAAkBnqD,EAAMoqD,cAC7B9gF,EAAK+gF,UAAYrqD,EAAMgjB,UAK7BknC,EAAAvmF,UAAAmP,YAAA,WACErP,KAAKs7B,gBAAgB+qD,8DAZgB1oD,EAAAA,mBAN5B8oD,EAAyCxlF,EAAA,CALrDkZ,EAAAA,UAAU,CACTtQ,SAAU,0CACV5D,SAAA,uyBACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9Bk+D,oBCEX,SAAAI,EAAsBvrD,GAAAt7B,KAAAs7B,gBAAAA,EASxB,OAPEurD,EAAA3mF,UAAAqJ,SAAA,WACEvJ,KAAK4vE,OAAS5vE,KAAKs7B,gBAAgBJ,mBAGrC2rD,EAAA3mF,UAAAmP,YAAA,WACErP,KAAKs7B,gBAAgB+qD,8DAPgB1oD,EAAAA,mBAH5BkpD,EAAgC5lF,EAAA,CAL5CkZ,EAAAA,UAAU,CACTtQ,SAAU,+BACV5D,SAAA,wQACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9Bs+D,oBCiBX,SAAAC,EACYr8C,EACAv6B,EACAuS,EACA+qB,GAHAxtC,KAAAyqC,YAAAA,EACAzqC,KAAAkQ,eAAAA,EACAlQ,KAAAyiB,YAAAA,EACAziB,KAAAwtC,GAAAA,EApBZxtC,KAAA+mF,kBAA+B/mF,KAAKwtC,GAAGv6B,MACrC,CACEmrB,SAAU,CACR,GACA,CAACwP,EAAAA,WAAWC,SAAUhQ,GAAqBM,oBAE7C6oD,aAAc,CAAC,GAAIp5C,EAAAA,WAAWC,WAEhC,CACEq+B,WAAYruC,GAAqBY,mBAC/B,WACA,kBAqCR,OAzBEqoD,EAAA5mF,UAAAqtE,OAAA,WAAA,IAAA1nE,EAAA7F,KACMA,KAAK+mF,kBAAkBh5C,OACzB/tC,KAAKyqC,YAAYw8C,cACfjnF,KAAKu/C,KACLv/C,KAAK+mF,kBAAkB1kF,MAAM+7B,UAE1Bp+B,KAAK0N,eACR1N,KAAK0N,aAAe1N,KAAKyiB,YACtBonB,eACAz7B,WAAU,SAAC07B,GACNA,EAAMmB,cACRplC,EAAKqK,eAAeE,GAAG,CAAEC,QAAS,cAK1CrQ,KAAK+mF,kBAAkB/4C,oBAI3B84C,EAAA5mF,UAAAmP,YAAA,WACMrP,KAAK0N,cACP1N,KAAK0N,aAAaE,wDA5BG84B,EAAAA,mBACGp2B,EAAAA,sBACHoV,EAAAA,mBACTuoB,EAAAA,eAxBPhtC,EAAA,CAAR0I,EAAAA,oCACQ1I,EAAA,CAAR0I,EAAAA,qCAFUm9E,EAA0B7lF,EAAA,CAJtCkZ,EAAAA,UAAU,CACTtQ,SAAU,yBACV5D,SAAA,oqDAEW6gF,oBCEX,SAAAI,EACU5rD,EACAunB,EACAyb,GAFAt+D,KAAAs7B,gBAAAA,EACAt7B,KAAA6iD,OAAAA,EACA7iD,KAAAs+D,oBAAAA,SAGV4oB,EAAAhnF,UAAA04C,YAAA,WAAA,IAAA/yC,EAAA7F,KACE,OAAOA,KAAKs7B,gBAAgBJ,kBAAkBvwB,KAC5CC,EAAAA,KAAI,SAACw2D,GACH,SAAIA,GAAqD,IAArC5hE,OAAOorB,KAAKw2C,GAActgE,SAGrC+E,EAAKg9C,OAAOG,SAASn9C,EAAKy4D,oBAAoB51D,IAAI,yDAXtCi1B,EAAAA,uBACTulB,EAAAA,cACakc,EAAAA,oNAJpB8nB,EAAsBjmF,EAAA,CAHlC+B,EAAAA,WAAW,CACVC,WAAY,UAEDikF,MCWPC,GAA8B,CAClCf,GACAE,GACAG,GACAI,GACAC,IAyCFM,GAAA,WAAA,SAAAA,KAAsC,OAAzBA,EAAuBnmF,EAAA,CAtCnC8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAytC,GACA1wB,GACAgxC,GACAzkB,GACApyB,EAAAA,WACA0E,EAAAA,oBACAzE,EAAAA,qBACAiM,IAEF5d,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb+lE,uCAAwC,CACtCnjF,UAAWuiF,GACX3gE,OAAQ,CAACohE,KAEXd,gCAAiC,CAC/BliF,UAAWkiF,GACXtgE,OAAQ,CAACohE,KAEXL,iCAAkC,CAChC3iF,UAAW2iF,GACX/gE,OAAQ,CAACohE,KAEXZ,mCAAoC,CAClCpiF,UAAWoiF,GACXxgE,OAAQ,CAACohE,SAKjBh9E,aAAYtH,EAAMukF,IAClBh9E,QAAOvH,EAAMukF,IACb5lE,gBAAe3e,EAAMukF,OAEVC,GAAb,iBCpDE,SAAAE,EACYr3C,EACAs3C,EACAjpB,GAFAt+D,KAAAiwC,eAAAA,EACAjwC,KAAAunF,iBAAAA,EACAvnF,KAAAs+D,oBAAAA,SAMZgpB,EAAApnF,UAAAsnF,YAAA,SAAY7iE,GAAZ,IAAA9e,EAAA7F,KACE,OAAOA,KAAKiwC,eAAevnC,IAAIic,GAAMha,KACnCtF,EAAAA,OAAOpB,SACP2G,EAAAA,KAAI,SAAC65B,GAAY,OAAA5+B,EAAK4hF,eAAehjD,QAIzC6iD,EAAApnF,UAAAwnF,qBAAA,SACE/iE,EACAgjE,EACAC,EACAC,GAJF,IAAAhiF,EAAA7F,KAME,OAAOA,KAAKunF,iBAAiB7+E,IAAIic,EAAMgjE,GAAeh9E,KACpDtF,EAAAA,OAAOpB,SACP2G,EAAAA,KAAI,SAACk9E,GACH,OAAAA,EAAKl9E,KAAI,SAACm9E,GACR,OAAAliF,EAAK4hF,eAAeM,EAAI5mF,OAAQymF,EAAcC,WAS9CP,EAAApnF,UAAAunF,eAAR,SACEO,EACAJ,EACAC,QADA,IAAAD,IAAAA,GAAA,QACA,IAAAC,IAAAA,GAAA,GAEA,IAAM10D,EAA4B,GAiBlC,OAhBIy0D,IACFz0D,EAAK+4B,MAAQ87B,EAAO16C,MAElBu6C,GAAwBG,EAAO/jB,OAAS+jB,EAAO/jB,MAAM5pB,iBACvDlnB,EAAK8wC,MAAQ+jB,EAAO/jB,MAAM5pB,gBAExB2tC,EAAOlkB,QAAUkkB,EAAOlkB,OAAOC,UACjC5wC,EAAKhI,MAAQ,CACXe,UAAW87D,EAAOlkB,OAAOC,QACzB75C,OAAQ,YAGZiJ,EAAK+oC,MAAQl8D,KAAKs+D,oBAAoBrxB,UAAU,CAC9C58B,QAAS,UACTqqB,OAAQstD,IAEH70D,4CAxDmB+S,EAAAA,sBACEG,EAAAA,+BACG+4B,EAAAA,oOAJtBkoB,EAAsBrmF,EAAA,CAHlC+B,EAAAA,WAAW,CACVC,WAAY,UAEDqkF,oBC2BX,SAAAW,EACY3wD,EACA2Y,GAFZ,IAAApqC,EAAA7F,KACYA,KAAAs3B,cAAAA,EACAt3B,KAAAiwC,eAAAA,EA3BOjwC,KAAAkoF,cAAgB/3C,EAAAA,aAAan1B,KAExChb,KAAAimE,eAAoCjmE,KAAKs3B,cAAciB,MAAM5tB,KACnEtF,EAAAA,OAAOpB,UAMTjE,KAAA8+E,OAA6B9+E,KAAKimE,eAAet7D,KAC/CC,EAAAA,KAAI,SAAC4tB,GAAS,OAAAA,EAAK0zB,UAQrBlsD,KAAAomE,OAA4CpmE,KAAKimE,eAAet7D,KAC9DC,EAAAA,KAAI,SAAC4tB,GAAS,OAAAA,EAAK2vD,aAAaj5C,OAAOvwB,MAAM,QAC7C/T,EAAAA,KAAI,SAAC07D,GACH,OAAAA,EAAM17D,KAAI,SAAC+Z,GAAS,OAAA9e,EAAKoqC,eAAevnC,IAAIic,EAAM9e,EAAKqiF,sBAQ7D,gDAH6BtvD,UACCsN,EAAAA,kBA5BjB+hD,EAAwBhnF,EAAA,CALpCkZ,EAAAA,UAAU,CACTtQ,SAAU,sBACV5D,SAAA,kcACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B0/D,oBCSb,SAAAG,KAAoC,OAAvBA,EAAqBnnF,EAAA,CAfjC8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcuiB,GAAgBF,GAAaG,EAAAA,aAAcC,EAAAA,WACnEjd,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb2mE,yBAA0B,CACxB/jF,UAAW+jF,QAKnB/9E,aAAc,CAAC+9E,IACf1mE,gBAAiB,CAAC0mE,IAClB99E,QAAS,CAAC89E,OAECG,oBC2BX,SAAAC,EACYnkF,EACA2rB,EACA03D,GAHZ,IAAA1hF,EAAA7F,KACYA,KAAAkE,UAAAA,EACAlE,KAAA6vB,QAAAA,EACA7vB,KAAAunF,iBAAAA,EA5BZvnF,KAAA8+E,OAAS9+E,KAAKkE,UAAUq0B,MAAM5tB,KAAKC,EAAAA,KAAI,SAACtL,GAAC,OAAKA,MAAAA,OAAC,EAADA,EAAG4sD,UAEzClsD,KAAAsoF,oBAEJtoF,KAAK6vB,QAAQwgB,aAAa1lC,KAC5BtF,EAAAA,OAAOpB,SACP2G,EAAAA,KAAI,SAAChL,GAAe,OAAAA,EAAE+kB,QACtB1Y,EAAAA,uBACA+D,EAAAA,KAAI,WAAM,OAAAnK,EAAK0hF,iBAAiBgB,sBAQlCvoF,KAAAomE,OAA4Cn1D,EAAAA,cAAc,CACxDjR,KAAKsoF,oBACLtoF,KAAKkE,UAAUq0B,QACd5tB,KACDyrB,EAAAA,WAAU,SAAC9wB,OAAAsT,EAAArW,EAAA+C,EAAA,GAACqf,EAAA/L,EAAA,GAAM4f,EAAA5f,EAAA,GAChB,OAAA/S,EAAK6hF,qBAAqB/iE,EAAM6T,MAAAA,OAAI,EAAJA,EAAMgwD,2BAmB5C,OATUH,EAAAnoF,UAAAwnF,qBAAR,SACE/iE,EACAgjE,GAEA,OAAO3nF,KAAKunF,iBAAiB7+E,IAAIic,EAAMgjE,GAAeh9E,KACpDtF,EAAAA,OAAOpB,SACP2G,EAAAA,KAAI,SAACk9E,GAA6B,OAAAA,EAAKl9E,KAAI,SAACm9E,GAAQ,OAAA1hF,EAAAA,GAAG0hF,EAAI5mF,yDAXxCy3B,UACFoX,UACS3J,EAAAA,2BAhCnBgiD,EAA0BpnF,EAAA,CALtCkZ,EAAAA,UAAU,CACTtQ,SAAU,wBACV5D,SAAA,6aACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B8/D,oBCAb,SAAAI,KAAsC,OAAzBA,EAAuBxnF,EAAA,CAfnC8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcuiB,GAAgBF,GAAaG,EAAAA,aAAcC,EAAAA,WACnEjd,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb+mE,2BAA4B,CAC1BnkF,UAAWmkF,QAKnBn+E,aAAc,CAACm+E,IACf9mE,gBAAiB,CAAC8mE,IAClBl+E,QAAS,CAACk+E,OAECI,MCrBAC,GAAkC,CAC7C55E,KAAM,CACJ65E,eAAgB,CACd1yE,QAAQ,EACR2yE,aAAc,EACdC,gBAAgB,mBCyBpB,SAAAC,EAAoB/2C,GAApB,IAAAlsC,EAAA7F,KAAoBA,KAAA+xC,sBAAAA,EApBZ/xC,KAAA+oF,mBAAqB,IAAI7hF,EAAAA,gBAAgB,MAEzClH,KAAAy6C,SAEJz6C,KAAK+xC,sBAAsB1B,aAAa1lC,KAC1CtF,EAAAA,OAAOpB,SACPgI,EAAAA,uBACA+D,EAAAA,KAAI,SAACpQ,GACH,OAAAiG,EAAKkjF,mBAAmB3mF,KAAKxC,EAAEkkE,OAASlkE,EAAEkkE,OAAOC,QAAU,QAI/D/jE,KAAAgpF,QAA6BhpF,KAAKy6C,SAAS9vC,KACzCC,EAAAA,KAAI,SAAChL,GAAe,OAAAiG,EAAKojF,aAAarpF,OAGxCI,KAAAkpF,WAAaj4E,EAAAA,cAAc,CAACjR,KAAKy6C,SAAUz6C,KAAK+oF,qBAAqBp+E,KACnEC,EAAAA,KAAI,SAACtF,GAAkB,OAAlB/C,EAAA+C,EAAA,GAAG,OAyDZ,OApDEwjF,EAAA5oF,UAAAipF,UAAA,SAAUh2D,GACRnzB,KAAK+oF,mBAAmB3mF,KAAK+wB,IAG/B21D,EAAA5oF,UAAA+W,SAAA,SAASmyE,GACP,OAAOppF,KAAK+oF,mBAAmBp+E,KAC7BtF,EAAAA,OAAOpB,SACP2G,EAAAA,KAAI,SAACshB,GACH,OACEA,EAAUm9D,MACVn9D,EAAUm9D,KAAK/sE,KACf8sE,EAAUC,MACVD,EAAUC,KAAK/sE,KACf4P,EAAUm9D,KAAK/sE,MAAQ8sE,EAAUC,KAAK/sE,SAO9CwsE,EAAA5oF,UAAAi4B,UAAA,SAAUmxD,GACR,OAAOtpF,KAAK+oF,mBAAmBp+E,KAC7BtF,EAAAA,OAAOpB,SACP2G,EAAAA,KAAI,SAACshB,GACH,IAAM2D,EAAUy5D,EAAOx5E,MACrB,SAACrP,GACC,OAAAA,EAAE0qB,OACFe,EAAUm9D,MACV5oF,EAAE0qB,MAAMe,WACRzrB,EAAE0qB,MAAMe,UAAUm9D,MAClB5oF,EAAE0qB,MAAMe,UAAUm9D,KAAK/sE,MAAQ4P,EAAUm9D,KAAK/sE,OAElD,OAAOgtE,EAAOt3E,QAAQ6d,QASpBi5D,EAAA5oF,UAAA+oF,aAAR,SAAqBxkD,GACnB,OACGA,EAAQq/B,SACRr/B,EAAQq/B,OAAOylB,SAChB9kD,EAAQq/B,OAAOylB,QAAQzoF,OAAS,EAEzB,GAGM2jC,EAAQq/B,OAAOylB,QAAS3+E,KAAI,SAACtJ,GAAM,OAAA+E,EAAAA,GAAG,CAAE6lB,UAAW5qB,iDApDzB0uC,MArBhC84C,EAAsB7nF,EAAA,CALlCkZ,EAAAA,UAAU,CACTtQ,SAAU,oBACV5D,SAAA,8lBACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BugE,oBCmBb,SAAAU,KAAkC,OAArBA,EAAmBvoF,EAAA,CArB/B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aACAH,GACA9c,EACAgd,IAEF/c,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbwnE,uBAAwB,CACtB5kF,UAAW4kF,QAKnB5+E,aAAc,CAAC4+E,IACfvnE,gBAAiB,CAACunE,IAClB3+E,QAAS,CAAC2+E,OAECU,oBCXX,SAAAC,EACY13C,EACFo4B,EACE3tD,GAFAxc,KAAA+xC,sBAAAA,EACF/xC,KAAAmqE,mBAAAA,EACEnqE,KAAAwc,OAAAA,EAPZxc,KAAA0pF,oBAAsB,IAAIxiF,EAAAA,iBAAyB,GAEnDlH,KAAAy6C,SAAgCz6C,KAAK+xC,sBAAsB1B,aAsE7D,OA9DEo5C,EAAAvpF,UAAAypF,sBAAA,WACE3pF,KAAK0pF,oBAAoBtnF,OAAOpC,KAAK4pF,wBAIvCH,EAAAvpF,UAAA2pF,YAAA,WAAA,IAAAhkF,EAAA7F,KAEEA,KAAKmqE,mBACFxf,UAAU,qDACVv8C,WAAU,SAAC07E,GACV,IAAMC,EAAgBlkF,EAAKmkF,mBACrBC,EAAapkF,EAAKqkF,cAAcJ,EAAiBC,GACjDI,EAAmBtkF,EAAK+jF,sBAC1BK,GAAcE,IAChBtkF,EAAKukF,mBAAmBH,GACxBlxE,YACE,WAAM,OAAAoxE,EAAiBE,eAAe,CAAEC,SAAU,aAClD,OAIL18E,eAKG67E,EAAAvpF,UAAA0pF,oBAAR,WACE,OAAO5pF,KAAKwc,OAAOnZ,SAASo/E,cAAc,uBAIpCgH,EAAAvpF,UAAA8pF,iBAAR,WACE,OAAOhqF,KAAKwc,OAAOnZ,SAASo/E,cAAc,+BAIpCgH,EAAAvpF,UAAAkqF,mBAAR,SAA2Bt0E,GAEtBA,EAAI2uE,UAAUh1C,SAAS,YACxB35B,EAAI2uE,UAAUh1C,SAAS,YAEvB35B,EAAIy0E,SAKAd,EAAAvpF,UAAAgqF,cAAR,SAAsB35D,EAAew5D,WACnC,GAAIA,EAAe,CAGjB,IAAMS,EAA6CT,EAAclsE,qBAC/D,cAIF,IAA4B,IAAAjF,EAAA7W,EAAApC,MAAMsU,KAAKu2E,IAAYrtD,EAAAvkB,EAAAxW,QAAA+6B,EAAA76B,KAAA66B,EAAAvkB,EAAAxW,OAAE,CAAhD,IAAMqoF,EAAattD,EAAA96B,MACtB,GAAIooF,EAAc5wB,UAAUtrD,SAASgiB,GACnC,OAAOk6D,gJA9DoBz6C,UACLjK,EAAAA,0BACV5nB,EAAAA,aARTsrE,EAAqBxoF,EAAA,CALjCkZ,EAAAA,UAAU,CACTtQ,SAAU,mBACV5D,SAAA,suBACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BkhE,oBCOb,SAAAiB,KAAiC,OAApBA,EAAkBzpF,EAAA,CAf9B8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAckX,EAAAA,WAAY6Y,IACpCvqB,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbmoE,sBAAuB,CACrBvlF,UAAWulF,QAKnBv/E,aAAc,CAACu/E,IACft/E,QAAS,CAACs/E,IACVloE,gBAAiB,CAACkoE,OAEPiB,oBCqBX,SAAAC,EACYC,EACA9lD,EACAjS,EACAg4D,EACAxyB,EACAxV,GANZ,IAAAh9C,EAAA7F,KACYA,KAAA4qF,qBAAAA,EACA5qF,KAAA8kC,QAAAA,EACA9kC,KAAA6yB,eAAAA,EACA7yB,KAAA6qF,gBAAAA,EACA7qF,KAAAq4D,gBAAAA,EACAr4D,KAAA6iD,OAAAA,EAZF7iD,KAAA8qF,gBAAkB,GAIT9qF,KAAA+qF,wBAA0B,4BAWrC/qF,KAAAgrF,eAEJhrF,KAAK4qF,qBACN7G,aACAp5E,KAAKtF,EAAAA,QAAO,SAAC4lF,GAAiB,OAAAzrF,OAAOorB,KAAKqgE,GAAcnqF,OAAS,MAE5Dd,KAAAkrF,iBAEJj6E,EAAAA,cAAc,CAChBjR,KAAK8kC,QAAQvK,iBAAiB5vB,KAC5BsB,EAAAA,sBAAqB,SAACukC,EAAG+2B,GAGvB,OAAO/2B,EAAE/V,MAAMne,MAAQirD,EAAE9sC,MAAMne,QAInCtc,KAAKq4D,gBAAgBlgC,YACrBn4B,KAAK6qF,gBAAgB1yD,cACpBxtB,KACDwgF,EAAAA,MAAM,EAAG,SACTn7E,EAAAA,KAAI,SAACyqB,GACH,IAAM2wD,EAAWvlF,EAAKwlF,qBACpB5wD,EAAMC,OACND,EAAMnH,aAERztB,EAAKi7D,OAAOsqB,OAaPprF,KAAAsrF,OAAwCr6E,EAAAA,cAAc,CAC7DjR,KAAKgrF,eACLhrF,KAAKkrF,mBACJvgF,KAAKwgF,EAAAA,MAAM,GAAIpwD,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,YAEzD0vD,EAAAzqF,UAAAqrF,mBAAA,WACEvrF,KAAK4qF,qBAAqB9G,gBAGpB6G,EAAAzqF,UAAAmrF,qBAAR,SACEG,EACAl4D,GAEA,MAAO,CACLtf,MAAOsf,EAAYtf,OAAShU,KAAKyrF,wBAAwBD,GACzDp8C,SAAU9b,EAAY8b,UAAYpvC,KAAK8qF,gBACvC73D,YAAaK,EAAYL,YACzBgB,SAAUX,EAAYW,WAIlB02D,EAAAzqF,UAAAurF,wBAAR,SAAgCnmF,OAC9BomF,EAAApmF,EAAAomF,UACAzqB,EAAA37D,EAAA27D,aACAjtD,EAAA1O,EAAA0O,MAEA,OAAIA,IAGAitD,EACKjhE,KAAK+qF,wBAA0B9pB,EAEpCyqB,EACK1rF,KAAK+qF,wBAA0BW,OADxC,IAKMf,EAAAzqF,UAAA4gE,OAAR,SAAesqB,GACb,IAAMp3E,EAAQo3E,EAASp3E,MACjB23E,EAAe3rF,KAAK4rF,gBAAgBR,GAE1CprF,KAAK4qF,qBAAqB9pB,OAAO9sD,EAAO23E,IAGlChB,EAAAzqF,UAAA0rF,gBAAR,SAAwBR,GACtB,IAAM7hC,EAAuB,CAC3Bt2B,YAAam4D,EAASn4D,YACtBmc,SAAUg8C,EAASh8C,SACnBnb,SAAUm3D,EAASn3D,UAMrB,OAFAz0B,OAAOorB,KAAK2+B,GAAQ76C,SAAQ,SAACtN,GAAQ,OAACmoD,EAAOnoD,WAAemoD,EAAOnoD,MAE5DmoD,GAGTohC,EAAAzqF,UAAA2rF,SAAA,SAAS73E,GACPhU,KAAK8rF,eAAe,CAAE93E,MAAKA,EAAEif,iBAAa9rB,KAG5CwjF,EAAAzqF,UAAA6rF,SAAA,SAASC,GACPhsF,KAAK8rF,eAAe,CAAE74D,YAAa+4D,KAMrCrB,EAAAzqF,UAAA+rF,aAAA,SAAaD,GAAb,IAAAnmF,EAAA7F,KACEA,KAAK8kC,QACFvK,iBACAnsB,WAAU,SAAC8tD,GACV,IAAMgwB,EAAgBrmF,EAAKwlF,qBACzBnvB,EAAMzhC,MAAMC,OACZwhC,EAAMzhC,MAAMnH,aAER83D,EAAQ7qF,EAAAA,EAAA,GACT2rF,GAAa,CAChBj5D,YAAa+4D,IAEfnmF,EAAKi7D,OAAOsqB,MAEbx9E,eAGL+8E,EAAAzqF,UAAA4qB,KAAA,SAAKmJ,GACHj0B,KAAK8rF,eAAe,CAAE73D,SAAQA,KAGxB02D,EAAAzqF,UAAA4rF,eAAR,SAAuBx4D,GACrBtzB,KAAK6iD,OAAOspC,SAAS,GAAI,CACvB74D,YAAWA,EACX84D,oBAAqB,QACrBC,WAAYrsF,KAAK6yB,2DA5IasT,EAAAA,4BACb71B,EAAAA,sBACOsjB,EAAAA,sBACC2S,EAAAA,uBACAC,EAAAA,uBACT0c,EAAAA,ySAdTynC,EAA2B1pF,EAAA,CADvC+B,EAAAA,WAAW,CAAEC,WAAY,UACb0nF,O3FzBDhf,GAAAA,EAAAA,YAAAA,EAAAA,UAAS,KACnB,KAAA,OACAA,GAAA,KAAA,OAQF,I4FYY2gB,G5FZZC,GAAA,WAAA,SAAAA,IACEvsF,KAAAkf,UAAYtX,EAAAA,UAIZ5H,KAAAwsF,WAAa,IAAI/+E,EAAAA,aAwBnB,OAtBEjO,OAAAmC,eAAI4qF,EAAArsF,UAAA,cAAW,KAAf,WAEE,MAAO,cADkBF,KAAKysF,SAASt6E,+CAQzC3S,OAAAmC,eAAI4qF,EAAArsF,UAAA,WAAQ,KAAZ,WACE,MAAkB,SAAdF,KAAK4kD,KACA5kD,KAAKkf,UAAUnE,KACC,SAAd/a,KAAK4kD,KACP5kD,KAAKkf,UAAUlE,UADjB,mCAKTuxE,EAAArsF,UAAAklD,WAAA,WACE,IAAMsnC,EACJ1sF,KAAK4kD,OAAS+mB,EAAAA,UAAUghB,KAAOhhB,EAAAA,UAAUihB,KAAOjhB,EAAAA,UAAUghB,KAC5D3sF,KAAKwsF,WAAWv+E,KAAKy+E,IAxBvBzrF,EAAA,CADC0I,EAAAA,oCAGD1I,EAAA,CADCsO,EAAAA,2CAJUg9E,EAAoBtrF,EAAA,CALhCkZ,EAAAA,UAAU,CACTtQ,SAAU,kBACV5D,SAAA,kTACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BgkE,GAAb,iB6FKE,SAAAM,EACU52B,EACA62B,EACDC,GAFC/sF,KAAAi2D,kBAAAA,EACAj2D,KAAA8sF,4BAAAA,EACD9sF,KAAA+sF,aAAAA,EAbD/sF,KAAA0N,aAAe,IAAIC,EAAAA,aAI3B3N,KAAAsrF,OAAwCtrF,KAAK8sF,4BAC1CxB,OAEHtrF,KAAAgtF,UAAY,IAAI9lF,EAAAA,gBAA2BykE,EAAAA,UAAUghB,MACrD3sF,KAAA2rE,UAAYA,EAAAA,UAqCd,OA7BEkhB,EAAA3sF,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAKitF,iBAAmBjtF,KAAK+sF,aAAaj+E,KAAK65E,eAAe1yE,OAE9DjW,KAAK8sF,4BAA4BvB,qBAEjCvrF,KAAK0N,aAAaxF,IAChBlI,KAAKi2D,kBAAkBE,cACpBxrD,KAAKmV,EAAAA,KAAK,IACV1R,WAAU,SAACnI,GACVJ,EAAKmnF,UAAU5qF,KACA,4BAAb6D,EACI0lE,EAAAA,UAAUghB,KACVhhB,EAAAA,UAAUihB,WAMxBC,EAAA3sF,UAAA8zB,SAAA,SAASC,GACPj0B,KAAK8sF,4BAA4BhiE,KAAKmJ,IAGxC44D,EAAA3sF,UAAAgtF,YAAA,SAAYtoC,GACV5kD,KAAKgtF,UAAU5qF,KAAKwiD,IAGtBioC,EAAA3sF,UAAAmP,YAAA,WACErP,KAAK0N,aAAaE,wDAhCS2mD,UACUo2B,UAChB1wD,MAdZ4yD,EAAoB5rF,EAAA,CAJhCkZ,EAAAA,UAAU,CACTtQ,SAAU,kBACV5D,SAAA,8pIAEW4mF,oBCsCX,SAAAM,EACUL,EACA/E,GADA/nF,KAAA8sF,4BAAAA,EACA9sF,KAAA+nF,IAAAA,EAzCF/nF,KAAA0N,aAAe,IAAIC,EAAAA,aAgC3B3N,KAAA2rE,UAAYA,EAAAA,UACZ3rE,KAAAotF,gBAAiB,EACjBptF,KAAAqtF,WAAY,EACZrtF,KAAAstF,eAAgB,EAChBttF,KAAAutF,YAAa,EACbvtF,KAAA64C,SAAU,EAkFZ,OApHEr5C,OAAAmC,eAAIwrF,EAAAjtF,UAAA,YAAS,KAAb,SAAcstF,GACZxtF,KAAKytF,2BAA2BD,oCAKlChuF,OAAAmC,eAAIwrF,EAAAjtF,UAAA,WAAQ,KAAZ,SAAawtF,GACX1tF,KAAK2tF,yBAAyBD,oCAKhCluF,OAAAmC,eAAIwrF,EAAAjtF,UAAA,cAAW,KAAf,SAAgB0tF,GACd5tF,KAAK4tF,cAAgBA,EAGjB5tF,KAAKysF,SACPzsF,KAAK6tF,4BAIL7tF,KAAKysF,SAAWmB,mCAoBpBT,EAAAjtF,UAAA4tF,WAAA,SAAW9B,GACThsF,KAAKotF,gBAAiB,EACtBptF,KAAK+nF,IAAI74E,eACTlP,KAAK8sF,4BAA4Bb,aAAaD,IAGhDmB,EAAAjtF,UAAA6tF,aAAA,SAAa/B,GACXhsF,KAAKstF,eAAgB,EACrBttF,KAAK8tF,WAAW9B,IAGlBmB,EAAAjtF,UAAA8tF,YAAA,WACEllE,OAAOmlE,OAAO,EAAG,IAGXd,EAAAjtF,UAAAutF,2BAAR,SAAmCV,GACjC,IAAMmB,EAAWnB,EAAaj+E,KAAK65E,eAAeE,eAC5CsF,EAAqBpB,EAAaj+E,KAAK65E,eAAeC,aAI5D5oF,KAAK4oF,aAAesF,EAAW,EAAIC,GAG7BhB,EAAAjtF,UAAAytF,yBAAR,SAAiCD,GAC3B1tF,KAAKotF,eACPptF,KAAKouF,MAAK7tF,EAAAA,EAAA,GACLmtF,GAAU,CACblc,SAAUxxE,KAAKouF,MAAM5c,SAAS3uE,OAAO6qF,EAAWlc,aAGlDxxE,KAAKouF,MAAQV,EACb1tF,KAAK0jF,YAAc1jF,KAAK4oF,cAE1B5oF,KAAKquF,gBACLruF,KAAK+nF,IAAI74E,gBAGHi+E,EAAAjtF,UAAA2tF,0BAAR,WACE7tF,KAAKguF,cACLhuF,KAAKqtF,WAAY,EACjBrtF,KAAK8sF,4BAA4Bb,aAAa,IAIxCkB,EAAAjtF,UAAAmuF,cAAR,WACEruF,KAAK64C,SAAW74C,KAAKouF,MAAM5c,UAA2C,IAA/BxxE,KAAKouF,MAAM5c,SAAS1wE,OAE3Dd,KAAKutF,WACHvtF,KAAKouF,MAAMv/D,WAAWoE,cACtBjzB,KAAKouF,MAAMv/D,WAAWmE,WAAa,EAErChzB,KAAKstF,cACHttF,KAAK4oF,cACiB,IAAtB5oF,KAAK4oF,cACL5oF,KAAKouF,MAAM5c,SAAS1wE,QAAUd,KAAK0jF,YAGjC1jF,KAAKstF,gBACPttF,KAAK0jF,YAAc1jF,KAAKouF,MAAM5c,SAAS1wE,OAASd,KAAK4oF,cAKnD5oF,KAAKysF,WAAazsF,KAAK4tF,gBACzB5tF,KAAKysF,SAAWzsF,KAAK4tF,eAGvB5tF,KAAKqtF,WAAY,EACjBrtF,KAAKotF,gBAAiB,GAGxBD,EAAAjtF,UAAAmP,YAAA,WACErP,KAAK0N,aAAaE,wDA7EmB+8E,UACxB59C,EAAAA,qBAtCf9rC,EAAA,CADC0I,EAAAA,MAAM,+CAOP1I,EAAA,CADC0I,EAAAA,MAAM,uCAOP1I,EAAA,CADC0I,EAAAA,MAAM,kDAfIwjF,EAAsBlsF,EAAA,CAJlCkZ,EAAAA,UAAU,CACTtQ,SAAU,oBACV5D,SAAA,mqFAEWknF,OFoBDb,GAAAA,EAAAA,2BAAAA,EAAAA,yBAAwB,KAClC,SAAA,WACAA,GAAA,UAAA,YGbF,ICpBYgC,GDoBZC,GAAA,WAgBE,SAAAA,EACYzpD,EACAgoD,GAFZ,IAAAjnF,EAAA7F,KACYA,KAAA8kC,QAAAA,EACA9kC,KAAA8sF,4BAAAA,EAjBO9sF,KAAAwuF,YAAcxuF,KAAK8kC,QACnCvK,iBACA5vB,KAAKwgF,EAAAA,MAAM,UAEKnrF,KAAAyuF,cAEfzuF,KAAKwuF,YAAY7jF,KACnByrB,EAAAA,WAAU,SAACqE,GACT,OAAA50B,EAAKinF,4BAA4BxB,OAAO3gF,KACtCtF,EAAAA,QAAO,SAACsuB,GAAS,OAAA9tB,EAAK6oF,cAAcj0D,EAAO9G,MAC3C/oB,EAAAA,KAAI,SAAC+oB,GAAS,OAAA9tB,EAAK8oF,WAAWl0D,EAAO9G,WAclC3zB,KAAA4uF,WAAoC5uF,KAAKyuF,cAAc9jF,KAC9DC,EAAAA,KACE,SAAC2+C,GACC,MAAA,CACEslC,OAAQtlC,EAAOslC,OACfC,aAAcvlC,EAAO0Z,wBASnBsrB,EAAAruF,UAAAwuF,cAAV,SACEj0D,EACA9G,aAEA,OAAI8G,EAAMhwB,QAAQwC,OAAS+wD,EAAAA,SAAS+wB,eAED,QAA/B5xD,EAAwB,QAAxBvkB,EAAiB,QAAjBtT,EAAAquB,EAAKq7D,oBAAY,IAAA1pF,OAAA,EAAAA,EAAE0O,aAAK,IAAA4E,OAAA,EAAAA,EAAEvW,aAAK,IAAA86B,OAAA,EAAAA,EAAEnrB,QAC/B,iBAAiByoB,EAAMhwB,QAAQ4V,MAC5B,EAKPoa,EAAMhwB,QAAQwC,OAAS+wD,EAAAA,SAASC,cACX,WAArBxjC,EAAMhwB,QAAQ4V,IAEPsT,EAAKq7D,aAAah7E,MAAM3R,MAAMmpB,WAAciP,EAAMC,OAAO1mB,MAAK,MAKjEu6E,EAAAruF,UAAAyuF,WAAR,SACEl0D,EACA9G,GAEA,OAAApzB,EAAAA,EAAA,GACKozB,GAAI,CACPsvC,YAAajjE,KAAKivF,kBAAkBt7D,EAAKsvC,YAAaxoC,EAAMC,WAQxD6zD,EAAAruF,UAAA+uF,kBAAR,SACEhsB,EACAvoC,GAFF,IAAA70B,EAAA7F,KAIE,OAAOijE,EACHA,EAAY59D,QACV,SAAC6pF,GAAe,OAACrpF,EAAKspF,cAAcD,EAAYx0D,MAElD,IAOE6zD,EAAAruF,UAAAivF,cAAR,SAAsBD,EAAwBx0D,GAC5C,MAC2B,kBAAzBw0D,EAAWE,WACXF,EAAWG,iBAAmB30D,EAAOumC,uDA3EpB3wD,EAAAA,sBACoBq6E,uJAlB9B4D,EAAmBttF,EAAA,CAH/B+B,EAAAA,WAAW,CACVC,WAAY,UAEDsrF,GAAb,GEAAe,GAAA,WAME,SAAAA,EAAsBC,GAAtB,IAAA1pF,EAAA7F,KAAsBA,KAAAuvF,oBAAAA,EAFZvvF,KAAAwvF,WAAa,IAAIznF,IAW3B/H,KAAA4uF,WAAoC5uF,KAAKuvF,oBAAoBX,WAAWjkF,KACtEqF,EAAAA,KAAI,SAACy/E,GACHA,EAAUZ,OAAOngF,SAAQ,SAACghF,GAAU,OAAA7pF,EAAK+vB,WAAW85D,iBASxDJ,EAAApvF,UAAAyvF,SAAA,SAASD,GAEP,OADA1vF,KAAK41B,WAAW85D,GACT1vF,KAAKwvF,WAAW9mF,IAAIgnF,EAAMpiD,OAQzBgiD,EAAApvF,UAAA0vF,iBAAV,SAA2BF,GACzB,OAAQ1vF,KAAK2vF,SAASD,GAA+CrtF,OAUvEitF,EAAApvF,UAAA0yD,OAAA,SAAO88B,EAAcj9B,GACnB,IAAMh4B,EAAQz6B,KAAK4vF,iBAAiBF,GAE9BG,EAAe,CACnBC,QAASr9B,EACL65B,EAAAA,yBAAyByD,UACzBzD,EAAAA,yBAAyB0D,UAG3BH,EAAaC,UAAYxD,EAAAA,yBAAyByD,YACpDF,EAAaI,WAAax1D,EAAMy1D,YAGlClwF,KAAKmwF,YAAYT,EAAOG,IAM1BP,EAAApvF,UAAAkwF,sBAAA,SAAsBV,GACpB1vF,KAAKmwF,YAAYT,EAAO,CAAEO,WAAYP,EAAMjkB,OAAO3qE,UASrDwuF,EAAApvF,UAAAmwF,sBAAA,SAAsBX,GACpB1vF,KAAKmwF,YAAYT,EAAO,CAAEO,WAAYP,EAAMY,iBAOpChB,EAAApvF,UAAA01B,WAAV,SAAqB85D,GACd1vF,KAAKuwF,SAASb,IACjB1vF,KAAKwvF,WAAWzmF,IACd2mF,EAAMpiD,KACN,IAAIpmC,EAAAA,gBAAgB,CAClBgpF,WAAYR,EAAMY,eAAiB,EACnCL,WAAYP,EAAMY,eAAiB,MASjChB,EAAApvF,UAAAiwF,YAAV,SAAsBT,EAAcc,GAClC,IAAM/1D,EAAKl6B,EAAAA,EAAA,GAAQP,KAAK4vF,iBAAiBF,IAAWc,GACpDxwF,KAAKwvF,WAAW9mF,IAAIgnF,EAAMpiD,MAAMlrC,KAAKq4B,IAG7B60D,EAAApvF,UAAAqwF,SAAV,SAAmBb,GACjB,OAAO1vF,KAAKwvF,WAAWxmF,IAAI0mF,EAAMpiD,OAGnCgiD,EAAApvF,UAAAuwF,cAAA,SAAcz8E,GACZ,MAAO,CAILA,OAAO,IAAI08E,EAAAA,sBAAuBC,YAAY38E,GAAOu0B,QAAQ,MAAO,gDA3G7BgmD,uHANhCe,EAAYruF,EAAA,CAHxB+B,EAAAA,WAAW,CACVC,WAAY,UAEDqsF,GAAb,GCJAsB,GAAA,WAOE,SAAAA,EAAsBC,GAAA7wF,KAAA6wF,aAAAA,EALtB7wF,KAAA4uF,WAAoC5uF,KAAK6wF,aAAajC,WAG7C5uF,KAAA8wF,UAAYlpF,EAAAA,UAAU2T,MAiBjC,OAbEq1E,EAAA1wF,UAAAuwF,cAAA,SAAcf,WACZ,OAAO1vF,KAAK6wF,aAAaJ,cAAsC,QAAzB73E,EAAkB,QAAlBtT,EAACoqF,EAAMqB,mBAAW,IAAAzrF,OAAA,EAAAA,EAAE0O,aAAK,IAAA4E,OAAA,EAAAA,EAAEvW,QASnEuuF,EAAA1wF,UAAA8wF,YAAA,SAAYvB,EAAsBC,SAChC,OAAwB,QAAjBpqF,EAACmqF,EAAUZ,cAAM,IAAAvpF,OAAA,EAAAA,EAAExE,QAAgC,GAAvB4uF,EAAMuB,yDAbP3B,MAF3BruF,EAAA,CAAR0I,EAAAA,yCALUinF,EAAqB3vF,EAAA,CALjCkZ,EAAAA,UAAU,CACTtQ,SAAU,mBACV5D,SAAA,keACAoiB,gBAAiBC,EAAAA,wBAAwB4oE,WAE9BN,GAAb,iBCGA,SAAAO,KAAiC,OAApBA,EAAkBlwF,EAAA,CAX9B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aACAtL,EAAAA,WACAvC,GACAvF,IAEFnP,aAAc,CAAC0mF,IACfzmF,QAAS,CAACymF,OAECO,oBCyCX,SAAAC,EACYP,EACAp/E,EACA7N,GAFA5D,KAAA6wF,aAAAA,EACA7wF,KAAAyR,WAAAA,EACAzR,KAAA4D,SAAAA,EArBF5D,KAAAqxF,UAAY,IAAI5jF,EAAAA,aAG1BzN,KAAA4uF,WAAoC5uF,KAAK6wF,aAAajC,WAEtD5uF,KAAAkf,UAAYtX,EAAAA,UAEZ5H,KAAAsxF,kBAAiC,CAC/B15E,MAAM,EACN7E,OAAO,EACPgC,eAAe,EACfX,UAAW,YAoDf,OA3EE5U,OAAAmC,eAAIyvF,EAAAlxF,UAAA,WAAQ,KAOZ,WACE,OAAOF,KAAKuxF,eARd,SAAalvF,GACXrC,KAAKuxF,UAAYlvF,EACbA,GACFrC,KAAK4D,SAASc,SAASrB,SAASsB,KAAM,+CAuBnBysF,EAAAlxF,UAAAsY,YAAA,WACrBxY,KAAKmR,SAYPigF,EAAAlxF,UAAAsxF,iBAAA,SAAiB9B,EAAc3H,GACxBA,EAAIt1B,YACPzyD,KAAK6wF,aAAaj+B,OAAO88B,EAAO3H,EAAIt1B,aAOxC2+B,EAAAlxF,UAAAuyD,WAAA,SAAWi9B,GACT,OAAO1vF,KAAK6wF,aACTlB,SAASD,GACT/kF,KACCC,EAAAA,KAAI,SAACvI,GAAU,OAAAA,EAAMytF,UAAYxD,EAAAA,yBAAyB0D,cAOhEoB,EAAAlxF,UAAAuxF,YAAA,SAAY/B,GACV,OAAO1vF,KAAK6wF,aACTlB,SAASD,GACT/kF,KACCC,EAAAA,KAAI,SAACvI,GAAU,OAAAA,EAAMytF,UAAYxD,EAAAA,yBAAyByD,eAIhEqB,EAAAlxF,UAAAiR,MAAA,SAAMmC,GACJtT,KAAK4D,SAAS2B,YAAYlC,SAASsB,KAAM,cACzC3E,KAAKqxF,UAAUpjF,KAAKqF,IAGtB89E,EAAAlxF,UAAA6S,MAAA,SAAMO,GACJA,EAAME,4DA1CkB87E,UACFj9E,EAAAA,kBACF4G,EAAAA,aAjCtBhY,EAAA,CADC0I,EAAAA,sCAaS1I,EAAA,CAATsO,EAAAA,0CAcsBtO,EAAA,CAAtB4R,EAAAA,aAAa,0CAhCHu+E,EAAkBnwF,EAAA,CAL9BkZ,EAAAA,UAAU,CACTtQ,SAAU,gBACV5D,SAAA,o4BACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B6oE,oBCyBX,SAAAM,EACYb,EACAp/E,EACAugC,GAFAhyC,KAAA6wF,aAAAA,EACA7wF,KAAAyR,WAAAA,EACAzR,KAAAgyC,GAAAA,EAvBHhyC,KAAA2xF,WAAwB/pF,EAAAA,UAAUkU,OAClC9b,KAAA4xF,aAA0BhqF,EAAAA,UAAUiU,SAwE/C,OA/DErc,OAAAmC,eAAI+vF,EAAAxxF,UAAA,QAAK,KAMT,WACE,OAAOF,KAAK6xF,YAPd,SAAUxvF,GACRrC,KAAK6xF,OAASxvF,EACdrC,KAAK8xF,gBAAkBzvF,EAAM0vF,YAC7B/xF,KAAKgyF,OAAShyF,KAAK6wF,aAAalB,SAASttF,oCAkB3CqvF,EAAAxxF,UAAA+xF,YAAA,SAAY3+E,SACJrB,EAAoBjS,KAAKyR,WAAWtM,cACpCsT,EAA6B,QAArBnT,EAAGtF,KAAKkyF,qBAAa,IAAA5sF,OAAA,EAAAA,EAAEmT,SAErCzY,KAAK6wF,aAAaj+B,OAAO5yD,KAAK0vF,MAAO1vF,KAAKyyD,YAErCh6C,IAAYzY,KAAKyyD,aACpBxgD,EAAKZ,QAGLiC,EAAME,oBAIVhU,OAAAmC,eAAI+vF,EAAAxxF,UAAA,aAAU,KAAd,WACE,OAAwD,OAAjDF,KAAKyrE,OAAOxgE,MAAM9F,cAAcwP,8CAGzC+8E,EAAAxxF,UAAAiyF,SAAA,SAAS7+E,GACNA,EAAMnS,OAAuBopF,QAC9Bj3E,EAAMC,kBAORm+E,EAAAxxF,UAAAkwF,sBAAA,WACEpwF,KAAK6wF,aAAaT,sBAAsBpwF,KAAK0vF,QAO/CgC,EAAAxxF,UAAAmwF,sBAAA,WACErwF,KAAK6wF,aAAaR,sBAAsBrwF,KAAK0vF,QAG/CgC,EAAAxxF,UAAAuwF,cAAA,SAAcpuF,SACZ,OAAOrC,KAAK6wF,aAAaJ,cAAyB,QAAZnrF,EAACjD,EAAM2R,aAAK,IAAA1O,OAAA,EAAAA,EAAE0O,MAAM3R,iDAlDlCitF,UACFj9E,EAAAA,kBACR06B,EAAAA,qBAvBP9rC,EAAA,CAAR0I,EAAAA,0CACQ1I,EAAA,CAAR0I,EAAAA,4CAEkC1I,EAAA,CAAlCqR,EAAAA,YAAY,2DAEerR,EAAA,CAA3BgnE,EAAAA,aAAa,4CAEahnE,EAAA,CAA1BggB,EAAAA,UAAU9H,yCAGXlY,EAAA,CADC0I,EAAAA,mCAfU+nF,EAAczwF,EAAA,CAL1BkZ,EAAAA,UAAU,CACTtQ,SAAU,WACV5D,SAAA,wqDACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BmpE,oBCJb,SAAAU,KAA0B,OAAbA,EAAWnxF,EAAA,CAZvB8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aACAC,EAAAA,UACAvL,EAAAA,WACAvC,GACAvF,IAEFnP,aAAc,CAACwnF,IACfvnF,QAAS,CAACunF,OAECU,oBCAb,SAAAC,KAA8B,OAAjBA,EAAepxF,EAAA,CAX3B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAkX,EAAAA,WACAvC,GACAwzE,GACA/4E,IAEFnP,aAAc,CAACknF,IACfjnF,QAAS,CAACinF,OAECiB,oBC6CX,SAAAC,EAAsBvoE,GAAtB,IAAAlkB,EAAA7F,KAAsBA,KAAA+pB,kBAAAA,EA/CtB/pB,KAAAkf,UAAYtX,EAAAA,UAOF5H,KAAAuyF,YAAc,IAUdvyF,KAAAwyF,MAAQ,IAAItrF,EAAAA,iBAAgB,GAWtClH,KAAAyyF,QAA+BzyF,KAAK+pB,kBAAkBT,YAAY3e,KAGhEs0E,EAAAA,UAAUyT,EAAAA,eACVt8D,EAAAA,WAAU,WAAM,OAACvwB,EAAK8sF,WAAa9sF,EAAK2sF,MAAQnsF,EAAAA,IAAG,MACnDusF,EAAAA,WAAU,SAACC,GAAa,OAAA1mD,EAAAA,SAAS0mD,EAAW,EAAIhtF,EAAK0sF,iBAQvDvyF,KAAA8yF,UAAY9yF,KAAKwyF,MAAM7nF,KAGrBs0E,EAAAA,UAAUyT,EAAAA,gBAsBd,OAjBEJ,EAAApyF,UAAAkH,OAAA,WACEpH,KAAKwyF,MAAMpwF,MAAK,IAGlBkwF,EAAApyF,UAAAiR,MAAA,WACEnR,KAAKwyF,MAAMpwF,MAAK,GAChBpC,KAAK+yF,QAAQ5tF,cAAckM,SAQ7B7R,OAAAmC,eAAI2wF,EAAApyF,UAAA,aAAU,KAAd,WACE,OAAmD,OAA5CF,KAAK+yF,QAAQ5tF,cAAcwP,uFAjBKkU,MAhCnB5nB,EAAA,CAArBggB,EAAAA,UAAU,0CAhBAqxE,EAA+BrxF,EAAA,CAL3CkZ,EAAAA,UAAU,CACTtQ,SAAU,8BACV5D,SAAA,wbACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B+pE,oBCSb,SAAAU,KAA2C,OAA9BA,EAA4B/xF,EAAA,CAlBxC8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAooF,GACAlB,GACAvyE,GACAuC,EAAAA,WACAkxC,EAAAA,aAAaC,WAAsB,CACjChxC,cAAe,CACb2xE,2BAA4B,CAC1B/uF,UAAWouF,QAKnBpoF,aAAc,CAACooF,IACfnoF,QAAS,CAACmoF,OAECU,oBClBb,SAAAE,KAEA,OADWjyF,EAAA,CAAR0I,EAAAA,uCADUupF,EAAwBjyF,EAAA,CALpCkZ,EAAAA,UAAU,CACTtQ,SAAU,uBACV5D,SAAA,gqCACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B2qE,oBCAb,SAAAC,KAEA,OADWlyF,EAAA,CAAR0I,EAAAA,uCADUwpF,EAAwBlyF,EAAA,CALpCkZ,EAAAA,UAAU,CACTtQ,SAAU,uBACV5D,SAAA,4iDACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B4qE,oBCKX,SAAAC,EAAoBrhD,GAAA/xC,KAAA+xC,sBAAAA,EAEpB/xC,KAAAqzF,SAAyB,GACzBrzF,KAAAszF,YAAcC,EAAAA,YAgBhB,OAbEH,EAAAlzF,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAKy6C,SAAWz6C,KAAK+xC,sBAAsB1B,aAAa1lC,KACtDtF,EAAAA,QAAO,SAACo/B,GAAY,SAAGA,IAAWA,EAAQ+uD,gBAC1CvnF,EAAAA,uBACA+D,EAAAA,KAAI,SAACy0B,GACHA,EAAQ+uD,YAAY9kF,SAAQ,SAAC+kF,GACvBA,GAAUA,EAAOH,cACnBztF,EAAKwtF,SAASI,EAAOH,aAAeG,oDAbHzjD,MADhCojD,EAAwBnyF,EAAA,CALpCkZ,EAAAA,UAAU,CACTtQ,SAAU,sBACV5D,SAAA,mqBACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B6qE,oBCQX,SAAAM,EACU1vF,EACAisC,EACA//B,GAFAlQ,KAAAgE,OAAAA,EACAhE,KAAAiwC,eAAAA,EACAjwC,KAAAkQ,eAAAA,EAGVlQ,KAAA2zF,iBAAmBC,EAAAA,iBAsCrB,OAjCEF,EAAAxzF,UAAA2zF,sBAAA,SAAsBC,GACpB,IAAMnlF,EAAMmlF,EAAWhkF,MAAK,SAACikF,GAAM,OAAAA,EAAEC,YAAcJ,EAAAA,iBAAiBK,SACpE,OAAOtlF,EAAMA,EAAItM,MAAQ,IAG3BqxF,EAAAxzF,UAAAg0F,uBAAA,SACEC,GAEA,IAAMH,EAAYG,EAAwBrkF,MAAK,SAACqjB,GAAS,OAAAA,EAAK2lC,SAC9D,OAAOk7B,EACH,GAAGh0F,KAAKgE,OAAO0nB,QAAQE,IAAID,QAAUqoE,EAAUl7B,MAAMx8C,IACrD,IAGNo3E,EAAAxzF,UAAAk0F,YAAA,SAAYzvE,GAAZ,IAAA9e,EAAA7F,KAiBE,OAhBI2kB,GACF3kB,KAAKiwC,eACFvnC,IAAIic,EAAMwrB,EAAAA,aAAan1B,MACvBrQ,KAGCtF,EAAAA,OAAOpB,SACP6b,EAAAA,KAAK,IAEN1R,WAAU,SAACq2B,GACV5+B,EAAKqK,eAAeE,GAAG,CACrBC,QAAS,UACTqqB,OAAQ+J,OAIT,+CAzCS4vD,EAAAA,iBACQnuD,EAAAA,sBACA51B,EAAAA,kBAM1BrP,EAAA,CADC0I,EAAAA,wCATU+pF,EAA6BzyF,EAAA,CALzCkZ,EAAAA,UAAU,CACTtQ,SAAU,4BACV5D,SAAA,+zBACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BmrE,oBCNb,SAAAY,KAAyC,OAA5BA,EAA0BrzF,EAAA,CANtC8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcwiB,EAAAA,aAAcC,EAAAA,UAAWvL,EAAAA,YACjDjX,aAAc,CAACwpF,IACfnyE,gBAAiB,CAACmyE,IAClBvpF,QAAS,CAACupF,OAECY,oBCMX,SAAAC,EACUtkD,EACA//B,GADAlQ,KAAAiwC,eAAAA,EACAjwC,KAAAkQ,eAAAA,EAgCZ,OAvBEqkF,EAAAr0F,UAAAs0F,WAAA,SAAW7vE,GAAX,IAAA9e,EAAA7F,KAiBE,OAhBI2kB,GACF3kB,KAAKiwC,eACFvnC,IAAIic,EAAMwrB,EAAAA,aAAan1B,MACvBrQ,KAGCtF,EAAAA,OAAOpB,SACP6b,EAAAA,KAAK,IAEN1R,WAAU,SAACq2B,GACV5+B,EAAKqK,eAAeE,GAAG,CACrBC,QAAS,UACTqqB,OAAQ+J,OAIT,MAET8vD,EAAAr0F,UAAA2zF,sBAAA,SAAsBC,GACpB,IAAMnlF,EAAMmlF,EAAWhkF,MAAK,SAACikF,GAAM,OAAAA,EAAEC,YAAcJ,EAAAA,iBAAiBa,QACpE,OAAO9lF,EAAMA,EAAItM,MAAQ,6CA/BD6jC,EAAAA,sBACA51B,EAAAA,kBAI1BrP,EAAA,CADC0I,EAAAA,uCAID1I,EAAA,CADC0I,EAAAA,wCATU4qF,EAA4BtzF,EAAA,CALxCkZ,EAAAA,UAAU,CACTtQ,SAAU,2BACV5D,SAAA,6qBACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BgsE,oBCLb,SAAAG,KAAwC,OAA3BA,EAAyBzzF,EAAA,CANrC8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcwiB,EAAAA,aAAcC,EAAAA,UAAWvL,EAAAA,YACjDjX,aAAc,CAACqqF,IACfhzE,gBAAiB,CAACgzE,IAClBpqF,QAAS,CAACoqF,OAECG,oBCGX,SAAAC,EAAoBzkF,GAAAlQ,KAAAkQ,eAAAA,EAqBtB,OAbEykF,EAAAz0F,UAAA00F,YAAA,SAAYjwE,EAAc2oB,GAOxB,OANI3oB,GACF3kB,KAAKkQ,eAAeE,GAAG,CACrBC,QAAS,UACTqqB,OAAQ,CAAE/V,KAAIA,EAAE2oB,KAAIA,KAGjB,MAETqnD,EAAAz0F,UAAA2zF,sBAAA,SAAsBC,GACpB,IAAMnlF,EAAMmlF,EAAWhkF,MAAK,SAACikF,GAAM,OAAAA,EAAEC,YAAcJ,EAAAA,iBAAiBiB,SACpE,OAAOlmF,EAAMA,EAAItM,MAAQ,6CAnBSiO,EAAAA,kBAGpCrP,EAAA,CADC0I,EAAAA,uCAID1I,EAAA,CADC0I,EAAAA,wCANUgrF,EAA6B1zF,EAAA,CALzCkZ,EAAAA,UAAU,CACTtQ,SAAU,4BACV5D,SAAA,ygBACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BosE,oBCFb,SAAAG,KAAyC,OAA5BA,EAA0B7zF,EAAA,CANtC8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcwiB,EAAAA,aAAcC,EAAAA,UAAWvL,EAAAA,YACjDjX,aAAc,CAACyqF,IACfpzE,gBAAiB,CAACozE,IAClBxqF,QAAS,CAACwqF,OAECG,oBCSX,SAAAC,EAAoB/wF,GAAAhE,KAAAgE,OAAAA,EAKpBhE,KAAAg1F,aAA0C,GAkC5C,OAhCED,EAAA70F,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAKqzF,SAAS3kF,SAAQ,SAACumF,GACrBpvF,EAAKmvF,aAAaC,EAAQtwE,MAAQ9e,EAAKqvF,eACrCD,EAAQd,6BAKdY,EAAA70F,UAAAg0F,uBAAA,SACEC,GAEA,IAAM/K,EAAY+K,EAAwBrkF,MACxC,SAACqjB,GAAS,OAAAA,EAAK6gE,YAAcJ,EAAAA,iBAAiBuB,aAEhD,OAAO/L,EACH,GAAGppF,KAAKgE,OAAO0nB,QAAQE,IAAID,QAAUy9D,EAAUtwB,MAAMx8C,IACrD,IAGEy4E,EAAA70F,UAAAg1F,eAAR,SACEf,GAEA,IAAMiB,EAAiBjB,EAAwBrkF,MAC7C,SAACqjB,GAAS,OAAAA,EAAK6gE,YAAcJ,EAAAA,iBAAiByB,mBAE1C7E,EAAW4E,EACbjB,EAAwBrkF,MACtB,SAACqjB,GAAS,OAAAA,EAAK6gE,YAAcoB,EAAe/yF,SAE9C,KACJ,OAAOmuF,EAAWA,EAASnuF,MAAQ,6CArCTgyF,EAAAA,aAG5BpzF,EAAA,CADC0I,EAAAA,wCAHUorF,EAA0B9zF,EAAA,CANtCkZ,EAAAA,UAAU,CACTtQ,SAAU,yBACV5D,SAAA,6PAEAoiB,gBAAiBC,EAAAA,wBAAwBC,gHAE9BwsE,oBCRb,SAAAO,KAAsC,OAAzBA,EAAuBr0F,EAAA,CANnC8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcwiB,EAAAA,aAAcC,EAAAA,UAAWvL,EAAAA,YACjDjX,aAAc,CAAC6qF,IACfxzE,gBAAiB,CAACwzE,IAClB5qF,QAAS,CAAC4qF,OAECO,oBCIX,SAAAC,EACUtlD,EACA//B,GADAlQ,KAAAiwC,eAAAA,EACAjwC,KAAAkQ,eAAAA,SAGVqlF,EAAAr1F,UAAA04C,YAAA,WAAA,IAAA/yC,EAAA7F,KACE,OAAOA,KAAKkQ,eAAeqqB,iBAAiB5vB,KAC1CC,EAAAA,KAAI,SAAC6vB,GAAU,OAAAA,EAAM+6D,UAAU96D,OAAO6V,eACtCna,EAAAA,WAAU,SAACma,GAET,OAAKA,EAIE1qC,EAAKoqC,eAAevnC,IAAI6nC,EAAaJ,EAAAA,aAAaslD,UAAU9qF,KACjEtF,EAAAA,OAAOpB,SACP2G,EAAAA,KAAI,SAAC65B,GACH,GAAKA,EAAQixD,YAeX,OAAO,EAdP,IAAMT,EAAUpvF,EAAK8vF,YAAYlxD,EAAQmxD,gBAYzC,OATA/vF,EAAKoqC,eACFvnC,IAAIusF,EAAQtwE,KAAMwrB,EAAAA,aAAan1B,MAC/BrQ,KAAKtF,EAAAA,OAAOpB,SAAU6b,EAAAA,KAAK,IAC3B1R,WAAU,SAACynF,GACVhwF,EAAKqK,eAAeE,GAAG,CACrBC,QAAS,UACTqqB,OAAQm7D,QAGP,MAnBJxvF,EAAAA,IAAG,QA6BlBkvF,EAAAr1F,UAAAy1F,YAAA,SAAYtC,GACV,IAAMjrC,EAA2BirC,EAAShuF,QAAO,SAAC4vF,GAChD,SAAOA,EAAQ1iD,QAAS0iD,EAAQ1iD,MAAME,aAAawiD,KAErD,OAAQ7sC,EAAQtnD,QAAUuyF,EAASvyF,OAASuyF,EAAS,GAAKjrC,EAAQ,6CA3C1CliB,EAAAA,sBACA51B,EAAAA,iLAHfilF,EAAmBt0F,EAAA,CAH/B+B,EAAAA,WAAW,CACVC,WAAY,UAEDsyF,oBC2Bb,SAAAO,KAAoC,OAAvBA,EAAqB70F,EAAA,CAzBjC8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aACAC,EAAAA,UACAvL,EAAAA,WACAmzE,GACAI,GACAI,GACAQ,IAEF7lF,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACby0E,gCAAiC,CAC/B7xF,UAAWkvF,GACXttE,OAAQ,CAACyvE,SAKjBrrF,aAAc,CAACkpF,IACf7xE,gBAAiB,CAAC6xE,IAClBjpF,QAAS,CAAC4qF,OAECe,oBCuCb,SAAAE,KAAgC,OAAnBA,EAAiB/0F,EAAA,CAlD7B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAwiB,EAAAA,aACAH,GACAsrB,GACAjpB,GACAuF,GACAxH,EAAAA,UACAvL,EAAAA,WACA6Y,GACApb,GACA6C,GACAw0E,EAAAA,qBACA/7D,GACA47D,GACA10E,EAAAA,sBAEF3R,UAAW,CACToP,EAAAA,qBAAiC6pE,IACjC7pE,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb40E,wBAAyB,CACvBhyF,UAAW2oF,IAEbsJ,qBAAsB,CACpBjyF,UAAW2oF,IAEbuJ,2BAA4B,CAC1BlyF,UAAW2oF,QAKnB3iF,aAAc,CACZ2iF,GACAsG,GACAD,GACA3G,GACAY,IAEFhjF,QAAS,CACP0iF,GACAsG,GACAD,GACA3G,GACAY,IAEF5rE,gBAAiB,CAACsrE,GAAsByF,OAE7B0D,OvBjFD1H,GAAAA,EAAAA,uBAAAA,EAAAA,qBAAoB,KAC9B,MAAA,YACAA,GAAA,MAAA,YACAA,GAAA,MAAA,YACAA,GAAA,QAAA,gCwBYA,SAAA+H,EAAsBtkD,GAAA/xC,KAAA+xC,sBAAAA,EAJtB/xC,KAAAs2F,QAAUhI,EAAAA,qBAEVtuF,KAAAy6C,SAAgCz6C,KAAK+xC,sBAAsB1B,aAG7D,gDAD+CL,MALlCqmD,EAAuBp1F,EAAA,CALnCkZ,EAAAA,UAAU,CACTtQ,SAAU,qBACV5D,SAAA,yxBACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9B8tE,oBCUb,SAAAE,KAAmC,OAAtBA,EAAoBt1F,EAAA,CAfhC8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcuF,EAAc2R,EAAAA,YACtC1R,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb+0E,wBAAyB,CACvBnyF,UAAWmyF,QAKnBnsF,aAAc,CAACmsF,IACf90E,gBAAiB,CAAC80E,IAClBlsF,QAAS,CAACksF,OAECE,oBCNX,SAAAC,EAAsBzkD,GAAA/xC,KAAA+xC,sBAAAA,EAJtB/xC,KAAAy6C,SAAgCz6C,KAAK+xC,sBAAsB1B,WACzDF,EAAAA,aAAasmD,YAIjB,gDAD+CzmD,MALlCwmD,EAA0Bv1F,EAAA,CALtCkZ,EAAAA,UAAU,CACTtQ,SAAU,wBACV5D,SAAA,2lBACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BiuE,oBCWb,SAAAE,KAAsC,OAAzBA,EAAuBz1F,EAAA,CAfnC8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAckX,EAAAA,YACxB1R,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbq1E,yBAA0B,CACxBzyF,UAAWsyF,QAKnBtsF,aAAc,CAACssF,IACfj1E,gBAAiB,CAACi1E,IAClBrsF,QAAS,CAACqsF,OAECE,oBCRX,SAAAE,EAAsB7kD,GAAA/xC,KAAA+xC,sBAAAA,EAKxB,OAHE6kD,EAAA12F,UAAAqJ,SAAA,WACEvJ,KAAKy6C,SAAWz6C,KAAK+xC,sBAAsB1B,uDAHAL,MAHlC4mD,EAA0B31F,EAAA,CALtCkZ,EAAAA,UAAU,CACTtQ,SAAU,yBACV5D,SAAA,4IACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BquE,oBCWb,SAAAC,KAAsC,OAAzBA,EAAuB51F,EAAA,CAfnC8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,cACVwF,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbs1E,2BAA4B,CAC1B1yF,UAAW0yF,QAKnB1sF,aAAc,CAAC0sF,IACfr1E,gBAAiB,CAACq1E,IAClBzsF,QAAS,CAACysF,OAECC,oBC+BX,SAAAC,EACYvyB,EACAxyB,EACFvE,EACEwE,GAJZ,IAAAnsC,EAAA7F,KACYA,KAAAukE,cAAAA,EACAvkE,KAAA+xC,sBAAAA,EACF/xC,KAAAwtC,GAAAA,EACExtC,KAAAgyC,GAAAA,EA1BZhyC,KAAA+2F,iBAAkB,EAGlB/2F,KAAAg3F,oBAAsB,EAItBh3F,KAAAy6C,SAAgCz6C,KAAK+xC,sBAAsB1B,aAE3DrwC,KAAAi3F,SAAiCj3F,KAAKy6C,SAAS9vC,KAC7CtF,EAAAA,QAAO,SAACzF,GAAM,QAAEA,KAChBgL,EAAAA,KAAI,SAAChL,GAAM,OAAAA,EAAE+kB,QACb1Y,EAAAA,uBACAmqB,EAAAA,WAAU,SAACma,GACT,OAAA1qC,EAAK0+D,cAAcC,iBAAiBj0B,MAEtCvgC,EAAAA,KAAI,WACFnK,EAAKqxF,kBACLrxF,EAAKsxF,aAAetxF,EAAKmxF,wBAyE/B,OA9DEF,EAAA52F,UAAAk3F,oBAAA,WACEp3F,KAAK+2F,iBAAkB,EAEvB/2F,KAAKgyC,GAAGqlD,gBAEJr3F,KAAKs3F,YAAct3F,KAAKs3F,WAAWnyF,eACrCnF,KAAKs3F,WAAWnyF,cAAckM,SAIlCylF,EAAA52F,UAAAq3F,kBAAA,WACEv3F,KAAK+2F,iBAAkB,EACvB/2F,KAAKk3F,kBAELl3F,KAAKgyC,GAAGqlD,gBAEJr3F,KAAKw3F,mBAAqBx3F,KAAKw3F,kBAAkBryF,eACnDnF,KAAKw3F,kBAAkBryF,cAAckM,SAIzCylF,EAAA52F,UAAAu3F,UAAA,SAAU79D,GACR55B,KAAK03F,WAAWv4D,SAASvF,OAAO1L,SAAS0L,IAG3Ck9D,EAAA52F,UAAAy3F,aAAA,SAAalzD,GACPzkC,KAAK03F,WAAW3pD,MAClB/tC,KAAK43F,UAAUnzD,GAEfzkC,KAAK03F,WAAW1pD,oBAIpB8oD,EAAA52F,UAAA03F,UAAA,SAAUnzD,GACR,IAAMozD,EAAqB73F,KAAK03F,WAAWv4D,SACrCylC,EAAiB,CACrBe,SAAUkyB,EAAmB3rC,MAAM7pD,MACnC8iE,QAAS0yB,EAAmB1yB,QAAQ9iE,MACpCu3B,OAAQi+D,EAAmBj+D,OAAOv3B,MAClCy1F,MAAOD,EAAmBE,aAAa11F,OAGzCrC,KAAKukE,cAAcr8D,IAAIu8B,EAAQ9f,KAAMigD,GAErC5kE,KAAK+2F,iBAAkB,EACvB/2F,KAAKk3F,kBAELl3F,KAAKgyC,GAAGqlD,gBAEJr3F,KAAKw3F,mBAAqBx3F,KAAKw3F,kBAAkBryF,eACnDnF,KAAKw3F,kBAAkBryF,cAAckM,SAIjCylF,EAAA52F,UAAAg3F,gBAAR,WACEl3F,KAAK03F,WAAa13F,KAAKwtC,GAAGv6B,MAAM,CAC9Bi5C,MAAO,CAAC,GAAIte,EAAAA,WAAWC,UACvBs3B,QAAS,CAAC,GAAIv3B,EAAAA,WAAWC,UACzBjU,OAAQ,CAAC,KAAMiE,GAAqBU,iBACpCw5D,aAAc,+CAjES3xD,EAAAA,4BACQ4J,UACrB/B,EAAAA,mBACElB,EAAAA,qBA9B4B9rC,EAAA,CAA3CggB,EAAAA,UAAU,aAAc,CAAE+2E,QAAQ,sCAEnC/2F,EAAA,CADCggB,EAAAA,UAAU,oBAAqB,CAAE+2E,QAAQ,6CAF/BlB,EAAuB71F,EAAA,CALnCkZ,EAAAA,UAAU,CACTtQ,SAAU,qBACV5D,SAAA,07IACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BuuE,oBCKb,SAAAmB,KAAmC,OAAtBA,EAAoBh3F,EAAA,CAtBhC8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACA4b,EAAAA,oBACAD,EAAAA,YACAzE,EAAAA,WACA6Y,GACA3M,IAEF5d,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACb42E,2BAA4B,CAC1Bh0F,UAAW4yF,QAKnB5sF,aAAc,CAAC4sF,IACfv1E,gBAAiB,CAACu1E,IAClB3sF,QAAS,CAAC2sF,OAECmB,oBClBb,SAAAE,KAAgC,OAAnBA,EAAiBl3F,EAAA,CAP7B8I,EAAAA,SAAS,CACRC,QAAS,CACP0sF,GACAG,GACAoB,OAGSE,oBCCX,SAAAC,EACU1nD,EACA2nD,GADAr4F,KAAA0wC,aAAAA,EACA1wC,KAAAq4F,iBAAAA,EAJVr4F,KAAAs4F,aAAyC,GAsB3C,OAfEF,EAAAl4F,UAAAiR,MAAA,WACEnR,KAAK0wC,aAAa5b,sBAGpBsjE,EAAAl4F,UAAAmP,YAAA,WAAA,IAAAxJ,EAAA7F,KACMA,KAAKu4F,mBACPv4F,KAAKu4F,kBACFnqF,WAAU,SAAC+V,GACNA,GACFte,EAAKwyF,iBAAiBG,2BAGzB5qF,wDAhBiB2mB,UACIuS,EAAAA,wBANjBsxD,EAAgCn3F,EAAA,CAJ5CkZ,EAAAA,UAAU,CACTtQ,SAAU,+BACV5D,SAAA,mxFAEWmyF,oBCgCX,SAAAK,EACUh2E,EACAsvB,EACAxvB,EACA4nD,EACAkuB,EACA3nD,EACAgoD,GANA14F,KAAAyiB,YAAAA,EACAziB,KAAA+xC,sBAAAA,EACA/xC,KAAAuiB,qBAAAA,EACAviB,KAAAmqE,mBAAAA,EACAnqE,KAAAq4F,iBAAAA,EACAr4F,KAAA0wC,aAAAA,EACA1wC,KAAA04F,wBAAAA,EAdV14F,KAAA24F,WAAY,EAEJ34F,KAAAs4F,aAAyC,GAGzCt4F,KAAAyZ,cAAgB,IAAI9L,EAAAA,aAiI9B,OArHE8qF,EAAAv4F,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAK44F,YAAc3nF,EAAAA,cAAc,CAC/BjR,KAAK+xC,sBAAsB1B,aAAa1lC,KAAKtF,EAAAA,OAAOpB,UACpDjE,KAAKyiB,YAAYiqB,iBAChB/hC,KACDqF,EAAAA,KAAI,SAAC1K,OAAAsT,EAAArW,EAAA+C,EAAA,GAACm/B,EAAA7rB,EAAA,GAASyyB,EAAAzyB,EAAA,GACb/S,EAAK0qC,YAAc9L,EAAQ9f,KACvB0mB,IAAWiU,EAAAA,wBACbz5C,EAAK8yF,WAAY,EACjB9yF,EAAK6yF,wBAAwB/b,kBAC7B92E,EAAKwyF,iBAAiB7Z,qBACpB,KACA,KACA,KACA/5C,EAAQ9f,KACRk0E,EAAAA,iBAAiBC,mBAIvBluF,EAAAA,KACE,SAACtF,OAACm/B,EAADliC,EAAA+C,EAAA,GAAC,GACA,QAAEm/B,EAAQ8N,OAA4C,eAAnC9N,EAAQ8N,MAAMC,qBAIvCxyC,KAAK+4F,qBAAuB/4F,KAAKq4F,iBAC9BW,sBACAruF,KACCC,EAAAA,KACE,SAACizE,GAAc,QAAEA,EAAUz1B,SAAwC,IAA7By1B,EAAUz1B,QAAQtnD,WAG9Dd,KAAKu4F,kBAAoBv4F,KAAKq4F,iBAAiBY,+BAC/Cj5F,KAAKk5F,yBAA2Bl5F,KAAKq4F,iBAAiBna,iCACtDl+E,KAAKm5F,cAAgBn5F,KAAK04F,wBACvBU,wBACAzuF,KACCqF,EAAAA,KAAI,SAACqpF,GAAU,OAACxzF,EAAKyyF,aAAee,KACpCzuF,EAAAA,KAAI,SAACyuF,GAAU,OAAAA,EAAMv4F,OAAS,MAGlCd,KAAKyZ,cAAcvR,IACjBlI,KAAKq4F,iBAAiBiB,6BAA6BlrF,WAAU,SAACzL,GACxDA,GACFkD,EAAK0zF,4BAIXv5F,KAAKyZ,cAAcvR,IACjBlI,KAAKq4F,iBACFmB,iCACAprF,WAAU,SAAC+V,GACNA,GACFte,EAAK4zF,iCAMfhB,EAAAv4F,UAAAkO,UAAA,WACEpO,KAAK8Q,aACL9Q,KAAKq4F,iBAAiBqB,mBACpB15F,KAAKuwC,YACLsoD,EAAAA,iBAAiBC,gBAIrBL,EAAAv4F,UAAA0N,YAAA,WACE5N,KAAKq4F,iBAAiB/Z,qBACpB,CACE75C,QAAS,CACP9f,KAAM3kB,KAAKuwC,aAEbguC,qBAAsB,CACpB,CACEob,aAAcd,EAAAA,iBAAiBC,kBAIrC,IAIIL,EAAAv4F,UAAAu5F,0BAAR,WAAA,IAAA5zF,EAAA7F,KACEA,KAAKyZ,cAAcvR,IACjBlI,KAAKmqE,mBACFxf,UAAU,wCACVhgD,KAAKM,EAAAA,SACLmD,WAAU,SAACg7C,GACV,OAAAvjD,EAAK0c,qBAAqBra,IAAIkhD,EAAMxkC,EAAAA,kBAAkBg1E,mBAG5D55F,KAAKq4F,iBAAiB3Z,4BAGhB+Z,EAAAv4F,UAAAq5F,sBAAR,WACEv5F,KAAK0wC,aAAa5b,qBAClB90B,KAAKq4F,iBAAiBG,yBAGhBC,EAAAv4F,UAAA4Q,WAAR,WACE,IAAMiiC,EAAgB/yC,KAAK0wC,aAAahc,KACtC0jE,GACA,CACEnlD,UAAU,EACV3oC,KAAM,OAER4oC,kBACFH,EAAcwlD,kBAAoBv4F,KAAKu4F,kBACvCxlD,EAAculD,aAAet4F,KAAKs4F,cAGpCG,EAAAv4F,UAAAmP,YAAA,WACErP,KAAKyZ,cAAc7L,cACnB5N,KAAKq4F,iBAAiB5Z,wBACtBz+E,KAAK04F,wBAAwBmB,6DA5HRn0E,EAAAA,mBACUsqB,UACDvqB,EAAAA,4BACFsgB,EAAAA,0BACFe,EAAAA,4BACJvS,UACWsS,EAAAA,qCAnBxB4xD,EAA0Bx3F,EAAA,CALtCkZ,EAAAA,UAAU,CACTtQ,SAAU,wBACV5D,SAAA,0tEACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9BkwE,oBCEb,SAAAqB,KAAsC,OAAzBA,EAAuB74F,EAAA,CAlBnC8I,EAAAA,SAAS,CACRG,aAAc,CAACuuF,GAA4BL,IAC3CpuF,QAAS,CAACC,EAAAA,aAAcwiB,EAAAA,aAActL,EAAAA,WAAYM,GAAeiL,EAAAA,WACjEjd,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbm3E,2BAA4B,CAC1Bv0F,UAAWu0F,QAKnBl3E,gBAAiB,CACfk3E,GACAL,IAEFjuF,QAAS,CAACsuF,GAA4BL,OAE3B0B,MCtBbC,GAAA,WAKE,SAAAA,EAAoBC,GAAAh6F,KAAAg6F,iBAAAA,EAFpBh6F,KAAAi6F,YAAsB,KA0CxB,OAtCEF,EAAA75F,UAAA6N,YAAA,SAAYC,GACV,GAAIA,EAAQ9I,UAAYlF,KAAKkF,SAAU,CACrC,IAAMg1F,EAAcl6F,KAAKm6F,iBACzBn6F,KAAKi6F,YAAc,GAEnB,IAAK,IAAIt5F,EAAI,EAAGA,EAlBG,EAkBmBA,IAAK,CACzC,IAAM4kE,EAAO,IAAI1c,KAAKqxC,EAAYE,WAClC70B,EAAK80B,QAAQ90B,EAAKG,UAAY/kE,GAC9BX,KAAKi6F,YAAYv3F,KAAK6iE,MAS5Bw0B,EAAA75F,UAAAo6F,oBAAA,SAAoB/0B,GAClB,OAAOvlE,KAAKg6F,iBAAiBM,oBAAoBt6F,KAAKkF,SAAUqgE,IAOlEw0B,EAAA75F,UAAAq6F,oBAAA,SAAoBh1B,GAClB,OAAOvlE,KAAKg6F,iBAAiBO,oBAAoBv6F,KAAKkF,SAAUqgE,IAM1Dw0B,EAAA75F,UAAAi6F,eAAR,WACE,IAAMK,EAAc,IAAI3xC,KAGxB,OAFA2xC,EAAYH,QAAQG,EAAY90B,UAAY80B,EAAYC,UAEjDD,4CAtC6BE,EAAAA,oBAHtCz5F,EAAA,CADC0I,EAAAA,wCADUowF,EAAiB94F,EAAA,CAJ7BkZ,EAAAA,UAAU,CACTtQ,SAAU,cACV5D,SAAA,ukBAEW8zF,GAAb,iBCOE,SAAAY,EACUC,EACA1+B,GADAl8D,KAAA46F,mBAAAA,EACA56F,KAAAk8D,MAAAA,EAqBZ,OAlBEy+B,EAAAz6F,UAAAqJ,SAAA,WACEvJ,KAAKiqD,WAAajqD,KAAK46F,mBAAmBC,0BAC1C76F,KAAK86F,WAAa96F,KAAK46F,mBAAmBG,2BAC1C/6F,KAAKg7F,gBAAkB,GAEnBh7F,KAAKk8D,MAAM3oC,SAASmH,OAAO0sB,SAC7BpnD,KAAK46F,mBAAmBK,iBACtB,GACA,CACE7rD,UAAW,QAEbjoC,EACAnH,KAAKk8D,MAAM3oC,SAASmH,OAAO0sB,UAKjCuzC,EAAAz6F,UAAAmP,YAAA,sDArB8B6rF,EAAAA,0BACbtnE,EAAAA,kBATN+mE,EAAwB15F,EAAA,CAJpCkZ,EAAAA,UAAU,CACTtQ,SAAU,uBACV5D,SAAA,6iBAEW00F,oBCHb,SAAAQ,KAAyC,OAA5BA,EAA0Bl6F,EAAA,CAJtCkZ,EAAAA,UAAU,CACTtQ,SAAU,yBACV5D,SAAA,4FAEWk1F,MCDbC,GAAA,WAIE,SAAAA,EAAsBpB,GAAAh6F,KAAAg6F,iBAAAA,EAYxB,OAVEoB,EAAAl7F,UAAAm7F,cAAA,SAAcn2F,GAIZ,MAHuB,oDACNlF,KAAKg6F,iBAAiBsB,iBAAiBp2F,GAErB,IADjBlF,KAAKg6F,iBAAiBuB,kBAAkBr2F,IAI5Dk2F,EAAAl7F,UAAAs7F,yBAAA,SAAyBC,GACvB,OAAOA,EAAap2F,OAAOpB,SAASyQ,KAAK,gDAVHgmF,EAAAA,oBAFxCz5F,EAAA,CADC0I,EAAAA,wCADUyxF,EAA0Bn6F,EAAA,CADtC2I,EAAAA,aACYwxF,GAAb,kBCeE,SAAAM,EAAsB1B,GAAtB,IAAAn0F,EACEC,EAAA/E,KAAAf,KAAMg6F,IAAiBh6F,YADH6F,EAAAm0F,iBAAAA,EAVtBn0F,EAAA81F,cAAwB,KAQxB91F,EAAA+1F,eAAuC,IAAInuF,EAAAA,eAiB7C,OA3BkD3N,EAAA47F,EAAA51F,GAgBhD41F,EAAAx7F,UAAA27F,qBAAA,WAC6B,OAAvB77F,KAAK27F,eACP37F,KAAK47F,eAAe3tF,KAAKjO,KAAK27F,gBAIlCD,EAAAx7F,UAAA47F,MAAA,SAAMxoF,GACc,UAAdA,EAAMlS,KACRpB,KAAK67F,iEAZ+BnB,EAAAA,oBAVxCz5F,EAAA,CADC0I,EAAAA,6CAGD1I,EAAA,CADC0I,EAAAA,8CAGD1I,EAAA,CADC0I,EAAAA,+CAGD1I,EAAA,CADC0I,EAAAA,6CAGD1I,EAAA,CADCsO,EAAAA,+CATUmsF,EAA4Bz6F,EAAA,CAJxCkZ,EAAAA,UAAU,CACTtQ,SAAU,4BACV5D,SAAA,gyCAEWy1F,IAAqCN,kBCgBhD,SAAAW,EAAoBC,GAAAh8F,KAAAg8F,yBAAAA,EAFpBh8F,KAAAi8F,kBAA0C,IAAIxuF,EAAAA,aAgChD,OA5BEsuF,EAAA77F,UAAA6N,YAAA,SAAYC,GACNA,EAAQkuF,WAAal8F,KAAKk8F,WAC5Bl8F,KAAKm8F,aASTJ,EAAA77F,UAAAk8F,UAAA,SAAUC,EAAkBC,GAC1Bt8F,KAAKg8F,yBAAyBI,UAAUC,EAAUC,IAGpDP,EAAA77F,UAAAi8F,UAAA,WAAA,IAAAt2F,EAAA7F,KACEA,KAAKg8F,yBAAyBG,UAC5Bn8F,KAAKu8F,WAAWp3F,cAChBnF,KAAKk8F,WACL,SAAC35B,GACC18D,EAAK22F,2BAA2Bj6B,OAK9Bw5B,EAAA77F,UAAAs8F,2BAAR,SAAmCj6B,GACjCviE,KAAKi8F,kBAAkBhuF,KAAKs0D,6CA5BgBk6B,EAAAA,4BAN9Cx7F,EAAA,CADCggB,EAAAA,UAAU,aAAc,CAAE+2E,QAAQ,sCAGnC/2F,EAAA,CADC0I,EAAAA,yCAGD1I,EAAA,CADCsO,EAAAA,kDALUwsF,EAAuB96F,EAAA,CAJnCkZ,EAAAA,UAAU,CACTtQ,SAAU,sBACV5D,SAAA,oDAEW81F,oBCLX,SAAAW,KAmBF,OAjBEA,EAAAx8F,UAAAy8F,kBAAA,WACE,GAAI38F,KAAK6uB,WAAWqkD,aAAelzE,KAAK6uB,WAAWugB,SAAU,CAC3D,IAAMwtD,EACJ58F,KAAK6uB,WAAWoE,YAAcjzB,KAAK6uB,WAAWugB,SAAW,EAEvDytD,GACD78F,KAAK6uB,WAAWoE,YAAc,GAAKjzB,KAAK6uB,WAAWugB,SAMtD,OAJIytD,EAAiB78F,KAAK6uB,WAAWqkD,eACnC2pB,EAAiB78F,KAAK6uB,WAAWqkD,cAGzB0pB,EAAS,MAAMC,EAEzB,MAAO,OAAO78F,KAAK6uB,WAAWqkD,cAlBlCjyE,EAAA,CADC0I,EAAAA,0CADU+yF,EAAqCz7F,EAAA,CAJjDkZ,EAAAA,UAAU,CACTtQ,SAAU,qCACV5D,SAAA,4LAEWy2F,oBCiBX,SAAAI,EACU9C,EACkB32F,GADlBrD,KAAAg6F,iBAAAA,EACkBh6F,KAAAqD,SAAAA,EAJ5BrD,KAAAkf,UAAYtX,EAAAA,UAMV5H,KAAK+8F,sBAAuB,EAiChC,OA9BED,EAAA58F,UAAA88F,wBAAA,SAAwBhmF,EAAe9R,GACrClF,KAAKi9F,iBAAiB/3F,GACtBlF,KAAKk9F,mBAAqBlmF,EAC1BhX,KAAKm9F,cAAgBj4F,EACrBlF,KAAKo9F,SAAShB,UACZp8F,KAAKg6F,iBAAiBsB,iBAAiBt7F,KAAKk8F,UAAUmB,OAAOrmF,IAC7DhX,KAAKg6F,iBAAiBuB,kBAAkBv7F,KAAKk8F,UAAUmB,OAAOrmF,MAIlE8lF,EAAA58F,UAAAo9F,oBAAA,SAAoBtmF,GAClBhX,KAAKk9F,mBAAqBlmF,EACJhX,KAAKqD,SAAS22D,eAAe,QAAUhjD,GAC/CqzE,eAAe,CAC3BC,SAAU,SACVv3E,MAAO,YAIX+pF,EAAA58F,UAAA+8F,iBAAA,SAAiB/3F,GACflF,KAAK+8F,sBAAuB,EAC5B/8F,KAAKu9F,aAAer4F,GAGtB43F,EAAA58F,UAAAs9F,iBAAA,WACEx9F,KAAK+8F,sBAAuB,EAC5B/8F,KAAKk9F,wBAAqB/1F,EAC1BnH,KAAKm9F,mBAAgBh2F,EACrBnH,KAAKo9F,SAASjB,sDAlCYzB,EAAAA,iDACzBj1F,EAAAA,OAAMkB,KAAA,CAACjB,EAAAA,eAdVzE,EAAA,CADC0I,EAAAA,yCAGD1I,EAAA,CADC0I,EAAAA,6CAGD1I,EAAA,CADCggB,EAAAA,UAAU,4CALA67E,EAAwB77F,EAAA,CAJpCkZ,EAAAA,UAAU,CACTtQ,SAAU,uBACV5D,SAAA,gpJAkBGrE,EAAA,EAAA6D,EAAAA,OAAOC,EAAAA,YAhBCo3F,oBCmBX,SAAAW,EACU7C,EACA1+B,EACEl4D,GAFFhE,KAAA46F,mBAAAA,EACA56F,KAAAk8D,MAAAA,EACEl8D,KAAAgE,OAAAA,EAbZhE,KAAA09F,YAAsB,KACtB19F,KAAA2rF,aAA6B,CAC3B14D,YAAa,GAyEjB,OA3DEwqE,EAAAv9F,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAK0N,aAAe1N,KAAKk8D,MAAM5oC,YAAYllB,WAAU,SAACssB,GACpD,OAAA70B,EAAK+vB,WAAW8E,OAIpB+iE,EAAAv9F,UAAAmP,YAAA,WACMrP,KAAK0N,cACP1N,KAAK0N,aAAaE,eAItB6vF,EAAAv9F,UAAA6rF,SAAA,SAASC,GACPhsF,KAAK2rF,aAAYprF,EAAAA,EAAA,GAAQP,KAAK2rF,cAAY,CAAE14D,YAAa+4D,IACzDhsF,KAAK46F,mBAAmBK,iBACtBj7F,KAAK29F,YAAYC,UACjB59F,KAAK2rF,aACL3rF,KAAK69F,YACL79F,KAAK09F,YACL19F,KAAK89F,cACL99F,KAAK+9F,SAIDN,EAAAv9F,UAAA01B,WAAR,SAAmB8E,GACjB16B,KAAK29F,YAAc39F,KAAKg+F,gBAAgBtjE,GACxC16B,KAAK89F,iBAAgBpjE,IAAUA,EAAOojE,eACtC99F,KAAK2rF,aAAYprF,EAAAA,EAAA,GAAQP,KAAK2rF,cAAY,CAAE14D,YAAa,IACzDjzB,KAAK+9F,OAAS/9F,KAAKgE,OAAOi6F,WAAWF,OACrC/9F,KAAK46F,mBAAmBK,iBACtBj7F,KAAK29F,YAAYC,UACjB59F,KAAK2rF,aACL3rF,KAAK69F,YACL79F,KAAK09F,YACL19F,KAAK89F,cACL99F,KAAK+9F,QAGP/9F,KAAKiqD,WAAajqD,KAAK46F,mBAAmBsD,mBAC1Cl+F,KAAK86F,WAAa96F,KAAK46F,mBAAmBuD,yBAGpCV,EAAAv9F,UAAA89F,gBAAR,SAAwB1qE,GAGtB,IAAIqqE,EAYJ,OATEA,EADErqE,EAAYtf,MACA,CAAE4pF,UAAWtqE,EAAYtf,OAEzB,CAAE4pF,UAAW,KAGjBE,cACmB,MAA7BxqE,EAAYwqE,eACgC,SAA5CxqE,EAAYwqE,cAAcM,cAErBT,4CA9DqBzC,EAAAA,0BACbtnE,EAAAA,sBACGyqE,EAAAA,qBAjBTZ,EAAgCx8F,EAAA,CAJ5CkZ,EAAAA,UAAU,CACTtQ,SAAU,gCACV5D,SAAA,o0BAEWw3F,oBCFX,SAAAa,EAAoBpuF,GAAAlQ,KAAAkQ,eAAAA,EAHpBlQ,KAAAu+F,UAAyB,IAAI7sD,EAAAA,YAC7B1xC,KAAAkf,UAAYtX,EAAAA,UAqBd,OAjBE02F,EAAAp+F,UAAAs+F,WAAA,SAAW39C,GACT7gD,KAAKkQ,eAAeE,GAAG,CAAC,qBAAsB,CAAE4D,MAAO6sC,KAGzDy9C,EAAAp+F,UAAAu+F,oBAAA,WACEz+F,KAAKkQ,eAAeE,GAAG,CAAC,qBAAsB,CAAE0tF,eAAe,KAGjEQ,EAAAp+F,UAAA47F,MAAA,SAAMxoF,GAEFtT,KAAKu+F,UAAUl8F,OACfrC,KAAKu+F,UAAUl8F,MAAMvB,QACP,UAAdwS,EAAMlS,KAENpB,KAAKw+F,WAAWx+F,KAAKu+F,UAAUl8F,iDAhBCiO,EAAAA,kBAJzBguF,EAA0Br9F,EAAA,CAJtCkZ,EAAAA,UAAU,CACTtQ,SAAU,yBACV5D,SAAA,26CAEWq4F,qBCGX,SAAAI,EAAsB1E,GAAtB,IAAAn0F,EACEC,EAAA/E,KAAAf,KAAMg6F,IAAiBh6F,YADH6F,EAAAm0F,iBAAAA,IAGxB,OAP0Dl6F,EAAA4+F,EAAA54F,4CAIhB40F,EAAAA,oBAH/Bz5F,EAAA,CAAR0I,EAAAA,wCACQ1I,EAAA,CAAR0I,EAAAA,0CAFU+0F,EAAoCz9F,EAAA,CAJhDkZ,EAAAA,UAAU,CACTtQ,SAAU,oCACV5D,SAAA,0qEAEWy4F,IAA6CtD,kBCIxD,SAAAuD,EAAoB/D,GAAA56F,KAAA46F,mBAAAA,EAOtB,OALE+D,EAAAz+F,UAAAqJ,SAAA,WACEvJ,KAAK46F,mBAAmBgE,gBACxB5+F,KAAK86F,WAAa96F,KAAK46F,mBAAmBG,2BAC1C/6F,KAAKiqD,WAAajqD,KAAK46F,mBAAmBC,oEALJK,EAAAA,sBAJ7ByD,EAA+B19F,EAAA,CAJ3CkZ,EAAAA,UAAU,CACTtQ,SAAU,+BACV5D,SAAA,s5CAEW04F,oBCFb,SAAAE,KAAmC,OAAtBA,EAAoB59F,EAAA,CAJhCkZ,EAAAA,UAAU,CACTtQ,SAAU,kBACV5D,SAAA,sLAEW44F,oBCgBX,SAAAC,EACUlE,EACA1+B,EACAhsD,GAFAlQ,KAAA46F,mBAAAA,EACA56F,KAAAk8D,MAAAA,EACAl8D,KAAAkQ,eAAAA,EARVlQ,KAAAkf,UAAYtX,EAAAA,UA4Bd,OAjBEk3F,EAAA5+F,UAAAqJ,SAAA,WACOvJ,KAAKkF,WACRlF,KAAK++F,oBACL/+F,KAAKg/F,UAAYh/F,KAAK46F,mBAAmBuD,wBACzCn+F,KAAKiqD,WAAajqD,KAAK46F,mBAAmBsD,qBAI9CY,EAAA5+F,UAAA6+F,kBAAA,WACE/+F,KAAK46F,mBAAmBqE,cAAcj/F,KAAKk8D,MAAM3oC,SAASmH,OAAOlyB,QAGnEs2F,EAAA5+F,UAAAimD,OAAA,WACEnmD,KAAKkQ,eAAeE,GAAG,CACrB,wBAAwBpQ,KAAKk8D,MAAM3oC,SAASmH,OAAO0sB,oDAnBzB8zC,EAAAA,0BACbtnE,EAAAA,sBACStjB,EAAAA,kBANjBrP,EAAA,CAAR0I,EAAAA,wCACQ1I,EAAA,CAAR0I,EAAAA,0CANUm1F,EAAyB79F,EAAA,CAJrCkZ,EAAAA,UAAU,CACTtQ,SAAU,wBACV5D,SAAA,kxBAEW64F,oBC2Gb,SAAAI,KAAgC,OAAnBA,EAAiBj+F,EAAA,CA3F7B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACA4b,EAAAA,oBACA4G,EAAAA,aACAyH,GACAirE,EAAAA,gBACA19E,GACAiL,EAAAA,UACA0yE,EAAAA,sBACAj+E,EAAAA,WACAvC,IAEFnP,UAAW,CACToP,EAAAA,qBAA+C,CAC7CyC,cAAe,CACbu9E,qBAAsB,CACpB36F,UAAW26F,GACXj+D,YAAa,CACX,CACEiH,KAAM,OACN3jC,UAAWu5F,IAEb,CACE51D,KAAM,WACN3jC,UAAWy6F,IAEb,CACE92D,KAAM,mBACN3jC,UAAWy2F,IAEb,CACE9yD,KAAM,kCACN3jC,UAAWy2F,IAEb,CACE9yD,KAAM,yCACN3jC,UAAW46F,IAEb,CACEj3D,KAAM,0BACN3jC,UAAW46F,OAKnBhqC,YAAa,CACXuqC,wBAAyB,CACvB/lD,MAAO,CAAC,gBAAiB,oBAKjCpvC,aAAc,CACZo0F,GACAxB,GACAf,GACAL,GACAiD,GACAhE,GACA+D,GACA3E,GACAoB,GACAsC,GACAoB,GACAnC,GACAoC,IAEF30F,QAAS,CACP4vF,GACA8E,GACAlE,GACAQ,GACAO,GACAK,GACAW,GACA4B,GACAb,GACAX,GACA4B,GACAC,GACAG,IAEFv9E,gBAAiB,CACfs9E,GACApB,GACAkB,GACAhE,GACAmE,OAGSI,oBChGX,SAAAI,EACYprD,EACAwK,EACAnjB,GAFAv7B,KAAAk0C,YAAAA,EACAl0C,KAAA0+C,oBAAAA,EACA1+C,KAAAu7B,kBAAAA,EAjBZv7B,KAAAu/F,kBAA+Bv/F,KAAKk0C,YAAYjhC,MAC9C,CACE8qB,MAAO,CAAC,GAAI,CAAC6P,EAAAA,WAAWC,SAAUhQ,GAAqBC,iBACvDgB,kBAAmB,CAAC,GAAI,CAAC8O,EAAAA,WAAWC,YAEtC,CACEq+B,WAAYruC,GAAqBgB,gBAC/B,QACA,uBAkCR,OAtBEygE,EAAAp/F,UAAA4tC,SAAA,WAAA,IAAAjoC,EAAA7F,KACE,GAAIA,KAAKu/F,kBAAkBxxD,MAAO,CAChC,IAAMhQ,EAAQ/9B,KAAKu/F,kBAAkB72F,IAAI,SAASrG,MAClDrC,KAAKu7B,kBAAkBikE,SAASzhE,GAE3B/9B,KAAKy/F,MACRz/F,KAAKy/F,IAAMz/F,KAAKu7B,kBAAkBqjB,kBAAkBxwC,WAAU,WACxDvI,EAAK01B,kBAAkBsjB,eACzBh5C,EAAK64C,oBAAoBghD,oBAK/B1/F,KAAKu/F,kBAAkBvxD,oBAI3BsxD,EAAAp/F,UAAAmP,YAAA,WACMrP,KAAKy/F,KACPz/F,KAAKy/F,IAAI7xF,wDAxBYqgC,EAAAA,mBACQ+Q,EAAAA,2BACFphB,EAAAA,qBAlBpB0hE,EAAsBr+F,EAAA,CAJlCkZ,EAAAA,UAAU,CACTtQ,SAAU,oBACV5D,SAAA,owCAEWq5F,oBCsBb,SAAAK,KAAkC,OAArBA,EAAmB1+F,EAAA,CAxB/B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAkX,EAAAA,WACAyE,EAAAA,YACAC,EAAAA,oBACAD,EAAAA,YACAC,EAAAA,oBACAwH,IAEF5d,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbs+E,4BAA6B,CAC3B17F,UAAWo7F,GACXx5E,OAAQ,CAACgrC,SAKjB5mD,aAAc,CAACo1F,IACfn1F,QAAS,CAACm1F,IACV/9E,gBAAiB,CAAC+9E,OAEPK,oBCTX,SAAAE,EACY/7D,EACAvhB,EACAirB,EACAkR,EACAliC,EACAqW,EACA8rB,GANA3+C,KAAA8jC,KAAAA,EACA9jC,KAAAuiB,qBAAAA,EACAviB,KAAAwtC,GAAAA,EACAxtC,KAAA0+C,oBAAAA,EACA1+C,KAAAwc,OAAAA,EACAxc,KAAA6yB,eAAAA,EACA7yB,KAAA2+C,sBAAAA,EATZ3+C,KAAA8/F,cAAe,EA6DjB,OAjDED,EAAA3/F,UAAAqJ,SAAA,yBACQw2F,EAA8C,QAApCnnF,EAA2B,QAA3BtT,EAAGtF,KAAKwc,OAAOqN,oBAAY,IAAAvkB,OAAA,EAAAA,EAAEqiE,eAAO,IAAA/uD,OAAA,EAAAA,EAAE6hB,MAChDulE,EAAiBD,MAAAA,OAAU,EAAVA,EAAqB,OAE5C//F,KAAKigG,UAAYjgG,KAAKwtC,GAAGv6B,MAAM,CAC7Bo4B,OAAQ,EACN20D,MAAAA,OAAc,EAAdA,EAAgBl/F,QAASk/F,EAAiB,GAC1C,CAACpyD,EAAAA,WAAWC,SAAUhQ,GAAqBC,iBAE7CM,SAAU,CAAC,GAAIwP,EAAAA,WAAWC,YAGxB7tC,KAAK2+C,sBAAsBP,oBAC7Bp+C,KAAK8/F,aAAyD,QAA7CI,EAAgC,QAAhC7iE,EAAsB,QAAtBF,EAAGn9B,KAAK6yB,sBAAc,IAAAsK,OAAA,EAAAA,EAAE5J,gBAAQ,IAAA8J,OAAA,EAAAA,EAAE/J,mBAAW,IAAA4sE,OAAA,EAAAA,EACpD,SAKdL,EAAA3/F,UAAA4sD,WAAA,WACM9sD,KAAKigG,UAAUlyD,MACjB/tC,KAAKmgG,YAELngG,KAAKigG,UAAUjyD,oBAInB6xD,EAAA3/F,UAAAmP,YAAA,WACMrP,KAAKy/F,KACPz/F,KAAKy/F,IAAI7xF,eAIHiyF,EAAA3/F,UAAAigG,UAAV,WAAA,IAAAt6F,EAAA7F,KACQsF,EAAAtF,KAAAigG,UAAA9gE,SAAEkM,EAAA/lC,EAAA+lC,OAAQjN,EAAA94B,EAAA84B,SAChBp+B,KAAK8jC,KAAKs8D,UACR/0D,EAAOhpC,MAAM8P,cACbisB,EAAS/7B,OAGNrC,KAAKy/F,MACRz/F,KAAKy/F,IAAMz/F,KAAK8jC,KAAK+F,eAAez7B,WAAU,SAACoqB,GACzCA,GAAQA,EAAKyS,eACfplC,EAAK0c,qBAAqBnd,OAAOwf,EAAAA,kBAAkBumB,gBACnDtlC,EAAK64C,oBAAoBghD,0DArDfh6E,EAAAA,mBACgBD,EAAAA,4BAClBwoB,EAAAA,mBACiB+Q,EAAAA,2BACb7gC,EAAAA,iBACQyV,EAAAA,sBACO4oB,MAZxBqjD,EAAkB5+F,EAAA,CAJ9BkZ,EAAAA,UAAU,CACTtQ,SAAU,gBACV5D,SAAA,g4DAEW45F,oBCoBb,SAAAQ,KAA8B,OAAjBA,EAAep/F,EAAA,CAxB3B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACA2b,EAAAA,YACAC,EAAAA,oBACA4G,EAAAA,aACAC,EAAAA,UACAvL,EAAAA,WACAkM,IAEF5d,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbg/E,gCAAiC,CAC/Bp8F,UAAW27F,GACX/5E,OAAQ,CAACmlD,EAAAA,mBAKjB/gE,aAAc,CAAC21F,IACf11F,QAAS,CAAC01F,IACVt+E,gBAAiB,CAACs+E,OAEPQ,oBC1BX,SAAAE,EAAoBz8D,EAA2B2G,GAA3BzqC,KAAA8jC,KAAAA,EAA2B9jC,KAAAyqC,YAAAA,EAajD,OAXE81D,EAAArgG,UAAAqJ,SAAA,WAAA,IAAA1D,EAAA7F,KACEA,KAAKg5E,MAAQh5E,KAAK8jC,KAAKhhB,iBAAiBnY,KACtCyrB,EAAAA,WAAU,SAACtT,GACT,OAAIA,EACKjd,EAAK4kC,YAAY/hC,MAEjBrC,EAAAA,QAAGc,iDARQue,EAAAA,mBAAkCghB,EAAAA,eAHjD65D,EAAct/F,EAAA,CAJ1BkZ,EAAAA,UAAU,CACTtQ,SAAU,WACV5D,SAAA,iaAEWs6F,oBCkBb,SAAAC,KAA0B,OAAbA,EAAWv/F,EAAA,CAfvB8I,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcwiB,EAAAA,aAAcC,EAAAA,UAAW4nC,GAAgBnzC,EAAAA,YACjE1R,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbi/E,eAAgB,CACdr8F,UAAWq8F,QAKnBr2F,aAAc,CAACq2F,IACfh/E,gBAAiB,CAACg/E,IAClBp2F,QAAS,CAACo2F,OAECC,MCJbC,GAAA,WACE,SAAAA,EACY38D,EACAI,EACAY,EACAw5B,EACAoiC,GAJA1gG,KAAA8jC,KAAAA,EACA9jC,KAAAkkC,IAAAA,EACAlkC,KAAA8kC,QAAAA,EACA9kC,KAAAs+D,oBAAAA,EACAt+D,KAAA0gG,gBAAAA,SAGZD,EAAAvgG,UAAA04C,YAAA,WAAA,IAAA/yC,EAAA7F,KAGE,OAFAA,KAAKkqC,SAEElqC,KAAKkkC,IACTy8D,QAAQ,CACPtgF,GAAIrgB,KAAKs+D,oBAAoB51D,IAAI,UACjCuE,KAAM+wD,EAAAA,SAASC,eAEhBtzD,KACCqF,EAAAA,KAAI,SAAC2wF,GACEA,GACH96F,EAAK65F,gBAaLe,EAAAvgG,UAAAw/F,SAAV,WACE,IAAMrvF,EAAUrQ,KAAK0gG,gBAAgBE,cAAgB,QAAU,OAC/D5gG,KAAK8kC,QAAQ10B,GAAG,CAAEC,QAAOA,KAQjBowF,EAAAvgG,UAAAgqC,OAAV,WACElqC,KAAK8jC,KAAKoG,mDA1CMxkB,EAAAA,mBACDkc,EAAAA,kBACItxB,EAAAA,sBACY8uD,EAAAA,2BACJyhC,EAAAA,+RANlBJ,EAAWx/F,EAAA,CAHvB+B,EAAAA,WAAW,CACVC,WAAY,UAEDw9F,GAAb,MCPc,CAAEpwF,QAAS,UAKzBywF,GAAA,WAAA,SAAAA,KAA2B,OAAdA,EAAY7/F,EAAA,CAbxB8I,EAAAA,SAAS,CACRC,QAAS,CACPysD,GACAhqC,EAAAA,aAAa0hD,SAAS,CACpB,CACEtmC,KAAM,KACN+Q,YAAa,CAAC6nD,IACdv8F,UAAW8xD,GACXx9B,KAAIuoE,UAKCD,GAAb,iBC0CE,SAAAE,EACYv2D,EACAloB,EACAirB,EACAqV,EACAtpC,EACAiJ,GALAxiB,KAAAyqC,YAAAA,EACAzqC,KAAAuiB,qBAAAA,EACAviB,KAAAwtC,GAAAA,EACAxtC,KAAA6iD,OAAAA,EACA7iD,KAAAuZ,yBAAAA,EACAvZ,KAAAwiB,wBAAAA,EAtCJxiB,KAAA0N,aAAe,IAAIC,EAAAA,aAO3B3N,KAAAihG,aAA0BjhG,KAAKwtC,GAAGv6B,MAChC,CACE27C,UAAW,CAAC,IACZ/H,UAAW,CAAC,GAAIjZ,EAAAA,WAAWC,UAC3BiZ,SAAU,CAAC,GAAIlZ,EAAAA,WAAWC,UAC1B9P,MAAO,CAAC,GAAI,CAAC6P,EAAAA,WAAWC,SAAUhQ,GAAqBC,iBACvDM,SAAU,CACR,GACA,CAACwP,EAAAA,WAAWC,SAAUhQ,GAAqBM,oBAE7C6oD,aAAc,CAAC,GAAIp5C,EAAAA,WAAWC,UAC9BqzD,WAAY,IAAIxvD,EAAAA,YAAY,CAC1BrvC,OAAO,EACPm3B,SAAUx5B,KAAKmhG,sBAEjBC,mBAAoB,EAAC,EAAOxzD,EAAAA,WAAWif,eAEzC,CACEqf,WAAYruC,GAAqBY,mBAC/B,WACA,kBAyJR,OA3IEuiE,EAAA9gG,UAAAqJ,SAAA,WAAA,MAAA1D,EAAA7F,KACEA,KAAK8uD,QAAU9uD,KAAKyqC,YAAYskB,YAAYpkD,KAC1CqF,EAAAA,KAAI,SAACg/C,GACgC,IAA/BxvD,OAAOorB,KAAKokC,GAAQluD,QACtB+E,EAAK4kC,YAAYwkB,gBAGrBrkD,EAAAA,KAAI,SAACokD,GACH,OAAOA,EAAOlkC,KAAK+U,QAIvB7/B,KAAK2f,SAAW3f,KAAKyqC,YAAY42D,+BACjCrhG,KAAKshG,0BAGLthG,KAAK0N,aAAaxF,IAChBlI,KAAKuiB,qBACF7Z,MACAiC,KAAKtF,EAAAA,QAAO,SAACk8F,GAAa,QAAE/hG,OAAOorB,KAAK22E,GAAUzgG,WAClDsN,WAAU,SAACozF,GACV,IAAMD,EACJC,GACAA,EAAsB58E,EAAAA,kBAAkBumB,gBAGxCo2D,GACAA,EAASp9F,MAAK,SAACkgF,GAAY,MAAY,4BAAZA,OAE3Bx+E,EAAK0c,qBAAqBnd,OAAOwf,EAAAA,kBAAkBumB,gBACnDtlC,EAAK0c,qBAAqBra,IACxB,CAAE9G,IAAK,0BACPwjB,EAAAA,kBAAkBumB,qBAMpB,IAAAs2D,GAAA,QAAAn8F,EAAAtF,KAAAwiB,+BAAA,IAAAld,OAAA,EAAAA,EAAA+Z,mBAAAoiF,gBAERzhG,KAAK0hG,kBAAoBzwF,EAAAA,cAAc,CACrCjR,KAAKuZ,yBAAyBooF,WAAWF,GACzCzhG,KAAKuZ,yBAAyBqoF,YAAYH,KACzC92F,KACDC,EAAAA,KAAI,SAACtF,OAAAsT,EAAArW,EAAA+C,EAAA,GAAC0a,EAAApH,EAAA,GAAS3S,EAAA2S,EAAA,GACb,MAAO,CACLoH,QAAOA,EACP/Z,SAAUA,EAAWA,EAASg3B,YAAc,QAKlDj9B,KAAK0N,aAAaxF,IAChBlI,KAAKihG,aAAav4F,IAAI,cAAc6lB,aAAangB,WAAU,WACzDvI,EAAKg8F,8BAKXb,EAAA9gG,UAAA4sD,WAAA,WACM9sD,KAAKihG,aAAalzD,MACpB/tC,KAAK8hG,eAEL9hG,KAAKihG,aAAajzD,oBAItBgzD,EAAA9gG,UAAA4hG,aAAA,WACE9hG,KAAKyqC,YAAYlgC,SACfvK,KAAK+hG,4BAA4B/hG,KAAKihG,aAAa5+F,SAIvD2+F,EAAA9gG,UAAA8hG,cAAA,SAAc91C,GACZlsD,KAAKihG,aAAuB,SAAEryC,UAAU1gC,SAASg+B,EAAMvnC,OAGzDq8E,EAAA9gG,UAAA6hG,4BAAA,SAA4BE,GAClB,IAAAp7C,EAAAo7C,EAAAp7C,UAAWC,EAAAm7C,EAAAn7C,SAAU/oB,EAAAkkE,EAAAlkE,MAAOK,EAAA6jE,EAAA7jE,SAAUwwB,EAAAqzC,EAAArzC,UAE9C,MAAO,CACL/H,UAASA,EACTC,SAAQA,EACRplB,IAAK3D,EAAM5rB,cACXisB,SAAQA,EACRwwB,UAASA,IAIboyC,EAAA9gG,UAAAggB,eAAA,SAAeF,GACb,OAAOhgB,KAAKuZ,yBAAyB2G,eAAeF,IAG9CghF,EAAA9gG,UAAAihG,kBAAR,iBACQvoF,EAAA,QAAAtT,EAAAtF,KAAAwiB,+BAAA,IAAAld,OAAA,EAAAA,EAAA+Z,kBACJF,EAAAvG,EAAAuG,iBACAsiF,EAAA7oF,EAAA6oF,gBAGF,SAAItiF,IAAoBsiF,IACftiF,EAAiB5Q,SAASkzF,IAM7BT,EAAA9gG,UAAAgiG,sBAAR,SAA8B/9E,GACxBA,IACFnkB,KAAK6iD,OAAOzyC,GAAG,SACfpQ,KAAKuiB,qBAAqBra,IACxB,CAAE9G,IAAK,gCACPwjB,EAAAA,kBAAkBC,yBAKxBm8E,EAAA9gG,UAAA2hG,uBAAA,WACU,IAAAJ,EAAAzhG,KAAAwiB,wBAAAnD,kBAAAoiF,gBAEJx9F,QAAQjE,KAAKihG,aAAav4F,IAAI,cAAcrG,OAC9CrC,KAAKuZ,yBAAyBiH,YAAYihF,GAE1CzhG,KAAKuZ,yBAAyB6G,gBAAgBqhF,IAI1CT,EAAA9gG,UAAAohG,wBAAR,WAAA,IAAAz7F,EAAA7F,KACEA,KAAKyqC,YAAY03D,gCACjBniG,KAAK0N,aAAaxF,IAChBlI,KAAKyqC,YAAY23D,+BAA+Bh0F,WAAU,SAAC+V,GACzDte,EAAKq8F,sBAAsB/9E,QAKjC68E,EAAA9gG,UAAAmP,YAAA,WACErP,KAAK0N,aAAaE,cAClB5N,KAAKyqC,YAAY03D,0EAjJMz7D,EAAAA,mBACSjhB,EAAAA,4BAClBwoB,EAAAA,mBACI39B,EAAAA,sBACkB4J,EAAAA,gCACD4G,EAAAA,2BAzC1BkgF,EAAiB//F,EAAA,CAJ7BkZ,EAAAA,UAAU,CACTtQ,SAAU,cACV5D,SAAA,6mMAEW+6F,oBCYb,SAAAqB,KAAsC,OAAzBA,EAAuBphG,EAAA,CAzBnC8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAu2F,GACA36E,EAAAA,oBACA4G,EAAAA,aACAC,EAAAA,UACAvL,EAAAA,WACAM,GACA4L,IAEF5d,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbghF,0BAA2B,CACzBp+F,UAAW88F,GACXl7E,OAAQ,CAACmlD,EAAAA,mBAKjB/gE,aAAc,CAAC82F,IACf72F,QAAS,CAAC62F,IACVz/E,gBAAiB,CAACy/E,OAEPqB,oBChBb,SAAAE,KAAkC,OAArBA,EAAmBthG,EAAA,CAb/B8I,EAAAA,SAAS,CACRC,QAAS,CACPC,EAAAA,aACAu2F,GACAH,GACAS,GACAnB,GACA95E,EAAAA,oBACA4G,EAAAA,aACAC,EAAAA,UACA21E,OAGSE,oBCVb,SAAAC,IAEExiG,KAAAgsB,WAAY,EAIZhsB,KAAAoF,OAAS,IAAIqI,EAAAA,aAKf,OAHE+0F,EAAAtiG,UAAAg3C,YAAA,SAAY/jB,GACVnzB,KAAKoF,OAAO6I,KAAKklB,IAPnBlyB,EAAA,CADC0I,EAAAA,yCAEQ1I,EAAA,CAAR0I,EAAAA,yCAGD1I,EAAA,CADCsO,EAAAA,uCALUizF,EAAqBvhG,EAAA,CALjCkZ,EAAAA,UAAU,CACTtQ,SAAU,oBACV5D,SAAA,0rFACAoiB,gBAAiBC,EAAAA,wBAAwBC,UAE9Bi6E,oBCFX,SAAAC,EAAsBjoD,GAAAx6C,KAAAw6C,gBAAAA,EAHtBx6C,KAAA0iG,UAA8B1iG,KAAKw6C,gBAAgBG,cACnD36C,KAAA2f,SAAgC3f,KAAKw6C,gBAAgBO,qBAOvD,OAHE0nD,EAAAviG,UAAAg3C,YAAA,SAAY/jB,GACVnzB,KAAKw6C,gBAAgBtD,YAAY/jB,6CAHI8nB,EAAAA,mBAJ5BwnD,EAAiBxhG,EAAA,CAJ7BkZ,EAAAA,UAAU,CACTtQ,SAAU,eACV5D,SAAA,olCAEWw8F,oBCoCb,SAAAE,KAA6B,OAAhBA,EAAc1hG,EAAA,CAzB1B8I,EAAAA,SAAS,CACRC,QAAS,CACP4tC,GACA3tC,EAAAA,aACAkX,EAAAA,WACAmL,GACAG,EAAAA,aACAuN,GACAtN,EAAAA,UACAiC,IAEFlf,UAAW,CACToP,EAAAA,qBAAgC,CAC9ByC,cAAe,CACbmhF,kBAAmB,CACjBv+F,UAAWu+F,GACX38E,OAAQ,CAACC,EAAAA,gBAKjB7b,aAAc,CAACu4F,GAAmBD,IAClCjhF,gBAAiB,CAACkhF,IAClBt4F,QAAS,CAACs4F,GAAmBD,OAElBG,oBCmEb,SAAAC,KAA2B,OAAdA,EAAY3hG,EAAA,CArDxB8I,EAAAA,SAAS,CACRC,QAAS,CACPkX,GACA4uB,GACAkjB,GACAiU,GACAH,GACAJ,GACAyc,GACAD,GACAG,GACAjE,GACA+G,GACAjtD,GACAnC,GACAizC,GACA2J,GACAnF,GACAkB,GACAqG,GACAX,GACA4gB,GACAhD,GACAmF,GACA/P,GACAK,GACAvW,GACAuE,GACAoB,GACAa,GACAU,GACAzzD,GACAglD,GACAlvB,GACAysB,GACAkf,GACA8X,GACA1V,GACA+M,GACAT,GACApL,GACA75B,GACAma,GACA+L,GACAxQ,GACAg8B,GACApmB,GACAwmB,GACAtlB,GACAsB,GACAmb,OAGS8I,MC5Eb,IAAaC,GAA8B,IAAI9oD,EAAAA,eAE7C,8BAA+B,CAC/B92C,WAAY,OACZ0gC,QAAS,WACP,OA9BFjyB,EA+BIoxF,EAAAA,OAAOC,EAAAA,mBA9BXC,EA+BIF,EAAAA,OAAOG,EAAAA,qBA7BK,SAAC/mC,GACf,IAAMgnC,EAAiBF,EAAsB9mC,GACvCinC,EAAmBlhC,GAAoB,CAC3CC,OAAQ,IACRC,UAAW,gBAEb,OAAOzwD,EAAQ0xF,YAAY,CAACF,EAAgBC,SAT9CzxF,EACAsxF,QCGY,CAAE3yF,QAAS,WAgBzBgzF,GAAA,WAAA,SAAAA,KAAuC,OAA1BA,EAAwBpiG,EAAA,CAvBpC8I,EAAAA,SAAS,CACRC,QAAS,CACPyiB,EAAAA,aAAa0hD,SAAS,CACpB,CACEtmC,KAAM,KACN+Q,YAAa,CAACymB,IACdn7D,UAAW8xD,GACXx9B,KAAI8qE,OAIV7zF,UAAW,CACToP,EAAAA,qBAAoC,CAClCimB,QAAS,CACPrE,OAAQ,CACNgE,QAAS,CACP8+D,SAAU,CAACV,aAOVQ,GAAb,GCKA,IAAaG,GAA8B,IAAIzpD,EAAAA,eAE7C,8BAA+B,CAC/B92C,WAAY,OACZ0gC,QAAS,WACP,OA9BFjyB,EA+BIoxF,EAAAA,OAAOC,EAAAA,mBA9BXC,EA+BIF,EAAAA,OAAOG,EAAAA,qBA7BK,SAAC/mC,GACf,IAAMgnC,EAAiBF,EAAsB9mC,GACvCunC,EAAmBxhC,GAAoB,CAC3CC,OAAQ,IACRC,UAAW,iBAEb,OAAOzwD,EAAQ0xF,YAAY,CAACF,EAAgBO,SAT9C/xF,EACAsxF,QCEY,CAAEjlC,UAAW,SAAU1tD,QAAS,UAAUqzF,GAM1C,CAAErzF,QAAS,SAASszF,GAQpB,CAAEtzF,QAAS,YAgBzBuzF,GAAA,WAAA,SAAAA,KAAuC,OAA1BA,EAAwB3iG,EAAA,CArCpC8I,EAAAA,SAAS,CACRC,QAAS,CACPyiB,EAAAA,aAAa0hD,SAAS,CACpB,CACEtmC,KAAM,KACN+Q,YAAa,CAACymB,IACdn7D,UAAW8xD,GACXx9B,KAAIqrE,IAEN,CACEh8D,KAAM,KACN+Q,YAAa,CAACymB,IACdn7D,UAAW8xD,GACXx9B,KAAIkrE,IAEN,CAGE77D,KAAM,KACN+Q,YAAa,CAACymB,IACdn7D,UAAW8xD,GACXx9B,KAAImrE,OAIVl0F,UAAW,CACToP,EAAAA,qBAAoC,CAClCimB,QAAS,CACPrE,OAAQ,CACNsgC,SAAU,CACRwiC,SAAU,CAACC,aAOVI,GAAb,GCzCaE,GAAgC,CAK3ChvC,YAAa,CACXzI,OAAQ,CACNzjC,GAAI,CACF0wB,MAAO,CACL,cACA,YACA,WACA,YACA,YACA,WACA,kBAGJA,MAAO,CAAC,YAAa,WAAY,YAAa,aAEhDomC,WAAY,CACV92D,GAAI,CAAE0wB,MAAO,IACbA,MAAO,CAAC,YAAa,gBAAiB,cAAe,cAEvDyqD,OAAQ,CACNzqD,MAAO,CAAC,WAEV0qD,qBAAsB,CACpB/uC,SAAU,YACV3b,MAAO,CACL,WACA,YACA,YACA,YACA,WACA,WACA,aAIJ2qD,qBAAsB,CACpB3qD,MAAO,CAAC,YAAa,cAEvB4qD,qBAAsB,CACpBjvC,SAAU,WACV3b,MAAO,CAAC,WAAY,WAAY,aAElC6qD,wBAAyB,CACvB7qD,MAAO,CAAC,yBAA0B,oBAEpC8qD,wBAAyB,CACvB9qD,MAAO,CAAC,yBAA0B,oBAEpC+qD,8BAA+B,CAC7B/qD,MAAO,CACL,WACA,yBACA,wBACA,aAGJgrD,8BAA+B,CAC7BhrD,MAAO,CACL,WACA,yBACA,wBACA,aAGJirD,2BAA4B,CAC1B37E,GAAI,CACFqsC,SAAU,aAGZA,SAAU,UAEV3b,MAAO,CACL,UACA,YACA,eACA,OACA,2BAGJkrD,iBAAkB,CAChBlrD,MAAO,CAAC,aAAc,yBAA0B,2BAElDmrD,oBAAqB,CACnBnrD,MAAO,CAAC,cAAe,gBAEzBorD,kBAAmB,CACjBprD,MAAO,CAAC,kBAAmB,qBAE7BqrD,kBAAmB,CACjBrrD,MAAO,CAAC,aAAc,gBAAiB,kBAEzCsrD,8BAA+B,CAC7BtrD,MAAO,CAAC,cAAe,gBAEzBurD,qCAAsC,CACpCvrD,MAAO,CAAC,aAAc,cAAe,cAAe,kBAEtDwrD,0BAA2B,CACzBxrD,MAAO,CAAC,uBCvGDyrD,GAA2B,CACtCl6E,aAAc,CACZm6E,OAAQ,CACNh6E,MAAO,KAETi6E,OAAQ,CACNj6E,MAAO,KAETk6E,QAAS,CACPl6E,MAAO,MAETm6E,WAAY,CACVn6E,MAAO,MAGTo6E,SAAU,CACRp6E,MAAO,IAETo+D,UAAW,CACTp+D,MAAO,IAETyZ,QAAS,CACPzZ,MAAO,KAETq+D,KAAM,CACJr+D,MAAO,OCzBAq6E,GAET,CACFvyC,uBAAwB,CACtB0U,SAAU,yBACVtkC,SAAU,0BAEZq9D,eAAgB,CACd/4B,SAAU,iBACVtkC,SAAU,iBACVxB,IAAK,mBAII4jE,GAA8C,CACzDC,UAAW,CACTC,aAAc,CAAC,2BAEjBC,UAAW,CACTD,aAAc,CAAC,6BCfHE,KACd,MAAO,CACLC,aAAc,CACZl3F,WAAUlO,EAAA,GACL8kG,IAEL/rD,MAAK/4C,EAAA,GACA+kG,IAELx1E,MAAO,uBCkCb,SAAA81E,KAAyC,OAA5BA,EAA0B3kG,EAAA,CAzBtC8I,EAAAA,SAAS,CACRC,QAAS,CACP67F,EAAAA,YAAYr1F,UACZs1F,EAAAA,WAAWt1F,UACXu1F,EAAAA,wBAAwBv1F,UACxB6hD,EAAAA,aAAa7hD,UACbw1F,EAAAA,wBAAwBx1F,UACxBy1F,EAAAA,sBAAsBz1F,UACtBsxD,GAActxD,UACd2Q,EAAAA,WAAW3Q,UACX01F,EAAAA,UAAU11F,UACV21F,EAAAA,oBAAoB31F,UACpB41F,EAAAA,cAAc51F,UACdkrC,EAAAA,WAAWlrC,UACX61F,EAAAA,eAAe71F,UACf81F,EAAAA,WAAW91F,UACX+1F,EAAAA,cAAc/1F,UACd0pB,GAAiB1pB,UACjB4Q,EAAAA,qBAAqB5Q,QAAQ,OAC7ByiD,GACA3mC,GAAY9b,WAEdrG,QAAS,CAAC8oD,IACVxjD,UAAS7M,EAAM4jG,EAAAA,gCAEJZ,oBCDb,SAAAa,WASA,SATaA,EACJA,EAAAn0C,WAAP,SACEtuD,GAEA,MAAO,CACLyM,SAAUi2F,EACVj3F,UAAW,CAAC4R,EAAAA,cAAcrd,MANnByiG,EAAgBC,EAAAzlG,EAAA,CA7B5B8I,EAAAA,SAAS,CACRC,QAAS,CACPyiB,EAAAA,aAAajc,QAAQ,GAAI,CACvBm2F,0BAA2B,UAC3BC,gBAAiB,YAGnBC,EAAAA,YAAYr2F,QAAQ,IACpBs2F,EAAAA,cAAct2F,QAAQ,IAItBs/B,GAEA81D,GACA7pC,GACA5iC,EAAAA,kBAAkB3oB,UAElBu2F,EAAAA,gBAAgBv2F,UAChBw2F,EAAAA,sBAAsBx2F,UAGtBy2F,EAAAA,UAAUz2F,UACV6yF,GACAO,GACAsD,EAAAA,qBAAqB12F,WAEvBrG,QAAS,CAAC4xD,GAAY6pC,OAEXa,oBChBb,SAAAU,WASA,SATaA,EACJA,EAAA70C,WAAP,SACEtuD,GAEA,MAAO,CACLyM,SAAU22F,EACV33F,UAAW,CAAC4R,EAAAA,cAAcrd,MANnBmjG,EAAmBC,EAAAnmG,EAAA,CApB/B8I,EAAAA,SAAS,CACRC,QAAS,CACPy8F,GAGA7D,IAEFnzF,UAAW,CACToP,EAAAA,qBAAqB,CACnB+3C,IAAK,CACHC,SAAS,EACTC,iBAAiB,KAGrBj4C,EAAAA,qBAAqBilF,IACrBjlF,EAAAA,qBAAqBkmF,IACrBsC,EAAAA,4BAA4B3B,KAE9Bv7F,QAAS,CAACs8F,OAECU,+B9a1BwB,woSACF,4tCsBNT","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\n\nexport interface LaunchConfig {\n  [key: string]: LaunchOptions;\n}\n\nexport type LaunchOptions =\n  | LaunchOutletDialog\n  | LaunchInlineDialog\n  | LaunchRoute;\n\n/**\n * Parent type for configurations that render components\n */\nexport interface LaunchDialog {\n  component: any;\n  /**\n   * Can the element be rendered multiple times\n   */\n  multi?: boolean;\n  /**\n   * Dialog type is used to apply CSS classes\n   */\n  dialogType?: DIALOG_TYPE;\n}\n\n/**\n * Configuration type to render a component in an outlet\n */\nexport interface LaunchOutletDialog extends LaunchDialog {\n  /**\n   * The outlet to render the element in\n   */\n  outlet: string;\n  /**\n   * Default: OutletPosition.BEFORE\n   */\n  position?: OutletPosition;\n}\n\n/**\n * Configuration type to render a component inline (next to the trigger)\n */\nexport interface LaunchInlineDialog extends LaunchDialog {\n  inline: boolean;\n}\n\n/**\n * Configuration type to render as link\n */\nexport interface LaunchRoute {\n  /**\n   * The route for the url\n   */\n  cxRoute: string;\n  /**\n   * The parameters for the route\n   */\n  params?: { [param: string]: any };\n}\n\n/**\n * Types of dialog openings supported\n */\nexport enum DIALOG_TYPE {\n  POPOVER = 'POPOVER',\n  DIALOG = 'DIALOG',\n  SIDEBAR_START = 'SIDEBAR_START',\n  SIDEBAR_END = 'SIDEBAR_END',\n}\n\n/**\n * List of available callers\n */\nexport enum LAUNCH_CALLER {\n  ASM = 'ASM',\n  SKIP_LINKS = 'SKIP_LINKS',\n  ANONYMOUS_CONSENT = 'ANONYMOUS_CONSENT',\n}\n","import { Injectable } from '@angular/core';\nimport { Config, DeferLoadingStrategy } from '@spartacus/core';\nimport { LaunchConfig } from '../launch-dialog/index';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n\n  launch?: LaunchConfig;\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Renderer2,\n  RendererFactory2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Applicable, Priority } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  DIALOG_TYPE,\n  LaunchDialog,\n  LaunchOptions,\n  LAUNCH_CALLER,\n} from '../config';\n\nexport abstract class LaunchRenderStrategy implements Applicable {\n  // List of called references; only used for rendered elements\n  protected renderedCallers: Array<{\n    caller: LAUNCH_CALLER | string;\n    element?: any;\n    component?: ComponentRef<any>;\n  }> = [];\n\n  /**\n   * Classes to apply to the component when the dialog is a DIALOG\n   */\n  protected dialogClasses = ['d-block', 'fade', 'modal', 'show'];\n  /**\n   * Classes to apply to the component when the dialog is a POPOVER\n   */\n  protected popoverClasses = [];\n  /**\n   * Classes to apply to the component when the dialog is a SIDEBAR_END\n   */\n  protected sidebarEndClasses = [];\n  /**\n   * Classes to apply to the component when the dialog is a SIDEBAR_START\n   */\n  protected sidebarStartClasses = [];\n\n  protected renderer: Renderer2;\n\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2\n  ) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n  }\n\n  /**\n   * Render method to implement based on the strategy\n   *\n   * @param config Launch configuration\n   */\n  abstract render(\n    config: LaunchOptions,\n    caller: LAUNCH_CALLER | string,\n    vcr?: ViewContainerRef\n  ): void | Observable<ComponentRef<any>>;\n\n  /**\n   * Determines if the strategy is the right one for the provided configuration\n   *\n   * @param config\n   */\n  abstract hasMatch(config: LaunchOptions): boolean;\n\n  /**\n   * Determines if element should render\n   *\n   * @param caller\n   * @param config\n   */\n  protected shouldRender(\n    caller: LAUNCH_CALLER | string,\n    config: LaunchDialog\n  ): boolean {\n    return (\n      Boolean(config.component) &&\n      (this.renderedCallers.some((el) => el.caller === caller)\n        ? !!config.multi\n        : true)\n    );\n  }\n\n  protected applyClasses(\n    component: ComponentRef<any>,\n    dialogType: DIALOG_TYPE\n  ): void {\n    let classes = [];\n\n    // TODO: make classes configurable\n    switch (dialogType) {\n      case DIALOG_TYPE.DIALOG:\n        classes = this.dialogClasses;\n        this.renderer.addClass(this.document.body, 'modal-open');\n        break;\n      case DIALOG_TYPE.POPOVER:\n        classes = this.popoverClasses;\n        break;\n      case DIALOG_TYPE.SIDEBAR_END:\n        classes = this.sidebarEndClasses;\n        break;\n      case DIALOG_TYPE.SIDEBAR_START:\n        classes = this.sidebarStartClasses;\n        break;\n    }\n\n    for (const newClass of classes) {\n      this.renderer.addClass(component.location.nativeElement, newClass);\n    }\n  }\n\n  /**\n   * Method to call when rendered element is destroyed\n   * The element will be removed from the list of rendered elements\n   *\n   * @param caller\n   * @param _config optional parameters used in children strategies\n   */\n  public remove(caller: LAUNCH_CALLER | string, config: LaunchOptions): void {\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller !== caller\n    );\n\n    if ((config as LaunchDialog)?.dialogType === DIALOG_TYPE.DIALOG) {\n      this.renderer.removeClass(this.document.body, 'modal-open');\n    }\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW; // low, as it's a default matcher\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injectable,\n  isDevMode,\n  RendererFactory2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { LaunchInlineDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class InlineRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    super(document, rendererFactory);\n  }\n\n  /**\n   * Renders the component from the configuration in the view container ref\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchInlineDialog,\n    caller: LAUNCH_CALLER | string,\n    vcr: ViewContainerRef\n  ): Observable<ComponentRef<any>> {\n    // Only render if a ViewContainerRef is provided\n    if (vcr && this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n\n      const component = vcr.createComponent(template);\n\n      if (config?.dialogType) {\n        this.applyClasses(component, config?.dialogType);\n      }\n\n      this.renderedCallers.push({ caller, element: vcr.element, component });\n\n      return of(component);\n    } else if (isDevMode()) {\n      if (!vcr) {\n        console.warn(`No view container ref provided for ${caller}`);\n      } else {\n        console.warn(\n          `Element for ${caller} already rendered. To allow multi rendering add property multi: true.`\n        );\n      }\n    }\n  }\n\n  hasMatch(config: LaunchInlineDialog) {\n    return Boolean(config.inline);\n  }\n}\n","import {\n  ComponentRef,\n  Inject,\n  Injectable,\n  isDevMode,\n  ViewContainerRef,\n} from '@angular/core';\nimport { resolveApplicable } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { LayoutConfig } from '../../config/layout-config';\nimport { LaunchOptions, LAUNCH_CALLER } from '../config/launch-config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class LaunchDialogService {\n  private _dialogClose = new BehaviorSubject<string>(undefined);\n\n  constructor(\n    @Inject(LaunchRenderStrategy)\n    protected renderStrategies: LaunchRenderStrategy[],\n    protected layoutConfig: LayoutConfig\n  ) {\n    this.renderStrategies = this.renderStrategies || [];\n  }\n\n  /**\n   * Render the element based on the strategy from the launch configuration\n   *\n   * @param caller LAUNCH_CALLER\n   * @param vcr View Container Ref of the container for inline rendering\n   */\n  launch(\n    caller: LAUNCH_CALLER | string,\n    vcr?: ViewContainerRef\n  ): void | Observable<ComponentRef<any>> {\n    const config = this.findConfiguration(caller);\n    if (config) {\n      const renderer = this.getStrategy(config);\n\n      // Render if the strategy exists\n      if (renderer) {\n        this._dialogClose.next(undefined);\n        return renderer.render(config, caller, vcr);\n      }\n    } else if (isDevMode()) {\n      console.warn('No configuration provided for caller ' + caller);\n    }\n  }\n\n  /**\n   * Util method to remove element from rendered elements list\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  clear(caller: LAUNCH_CALLER | string): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.remove(caller, config);\n    }\n  }\n\n  get dialogClose(): Observable<string> {\n    return this._dialogClose.asObservable();\n  }\n\n  closeDialog(reason: string) {\n    this._dialogClose.next(reason);\n  }\n\n  /**\n   * Returns the configuration for the caller\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  protected findConfiguration(caller: LAUNCH_CALLER | string): LaunchOptions {\n    if (this.layoutConfig?.launch) {\n      return this.layoutConfig.launch[caller];\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns the render strategy based on the configuration\n   *\n   * @param config Configuration for launch\n   */\n  protected getStrategy(config: LaunchOptions): LaunchRenderStrategy {\n    return resolveApplicable(this.renderStrategies, [config]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\nexport enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n  FILTER = 'FILTER',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, T[]>();\n  private templatesRefsBefore = new Map<string, T[]>();\n  private templatesRefsAfter = new Map<string, T[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  remove(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    value?: T\n  ): void {\n    switch (position) {\n      case OutletPosition.BEFORE:\n        this.removeValueOrAll(this.templatesRefsBefore, outlet, value);\n        break;\n      case OutletPosition.AFTER:\n        this.removeValueOrAll(this.templatesRefsAfter, outlet, value);\n        break;\n      default:\n        this.removeValueOrAll(this.templatesRefs, outlet, value);\n    }\n  }\n\n  private store(store: Map<string, T[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n\n  protected removeValueOrAll(\n    store: Map<string, T[]>,\n    outlet: string,\n    value?: T\n  ): void {\n    if (!value && store.has(outlet)) {\n      store.delete(outlet);\n    } else if (value && store.has(outlet)) {\n      let existing = store.get(outlet);\n      existing = existing.filter((val) => val === value);\n      store.set(outlet, existing);\n    }\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { OutletDirective } from './outlet.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletRendererService {\n  private outletRefs = new BehaviorSubject(new Map<string, OutletDirective>());\n\n  /**\n   * Dynamically render the templates in the specified array\n   *\n   * @param outlet\n   */\n  render(outlet: string): void {\n    if (this.outletRefs.value.size !== 0) {\n      this.outletRefs.value.get(outlet).render();\n    }\n  }\n\n  /**\n   * Register outlet to be available to render dynamically\n   *\n   * @param cxOutlet\n   * @param context\n   */\n  register(cxOutlet: string, context: OutletDirective): void {\n    this.outletRefs.next(this.outletRefs.value.set(cxOutlet, context));\n  }\n  /**\n   * Returns map of outlets\n   *\n   */\n  getOutletRef(outlet: string): Observable<OutletDirective> {\n    return this.outletRefs.asObservable().pipe(\n      map((val) => val.get(outlet)),\n      filter((val) => Boolean(val))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned observable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first((v) => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options: IntersectionOptions = {}\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable((observer) => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin, threshold: options.threshold };\n      const intersectionObserver = new IntersectionObserver((entries) => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options: IntersectionOptions = {}): string {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evaluate whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import {\n  ComponentFactory,\n  ComponentRef,\n  Directive,\n  EmbeddedViewRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletRendererService } from './outlet-renderer.service';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  private renderedTemplate = [];\n  public renderedComponents = new Map<\n    OutletPosition,\n    Array<ComponentRef<any> | EmbeddedViewRef<any>>\n  >();\n\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService: DeferLoaderService,\n    private outletRendererService: OutletRendererService\n  ) {}\n\n  public render(): void {\n    this.vcr.clear();\n    this.renderedTemplate = [];\n    this.renderedComponents.clear();\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.build();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.render();\n      this.outletRendererService.register(this.cxOutlet, this);\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.build();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private build() {\n    this.buildOutlet(OutletPosition.BEFORE);\n    this.buildOutlet(OutletPosition.REPLACE);\n    this.buildOutlet(OutletPosition.AFTER);\n  }\n\n  private buildOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    templates = templates?.filter((el) => !this.renderedTemplate.includes(el));\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    const components = [];\n    templates.forEach((obj) => {\n      const component = this.create(obj);\n      components.push(component);\n    });\n\n    this.renderedComponents.set(position, components);\n  }\n\n  private create(tmplOrFactory: any): ComponentRef<any> | EmbeddedViewRef<any> {\n    this.renderedTemplate.push(tmplOrFactory);\n\n    if (tmplOrFactory instanceof ComponentFactory) {\n      const component = this.vcr.createComponent(tmplOrFactory);\n      return component;\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n      return view;\n    }\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent nodes of the given element.\n   *\n   * We avoid traversing the parent _elements_, as this is blocking\n   * ie11 implementations. One of the spare exclusions we make to not\n   * supporting ie11.\n   *\n   * @param element\n   */\n  private getHostElement(element: Node): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentNode);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injectable,\n  RendererFactory2,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';\nimport { LaunchOutletDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class OutletRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected outletService: OutletService<ComponentFactory<any>>,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletRendererService: OutletRendererService\n  ) {\n    super(document, rendererFactory);\n  }\n\n  /**\n   * Renders the element in the configured outlet\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchOutletDialog,\n    caller: LAUNCH_CALLER | string\n  ): Observable<ComponentRef<any>> {\n    if (this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      this.outletService.add(\n        config.outlet,\n        template,\n        config.position ? config.position : OutletPosition.BEFORE\n      );\n      this.outletRendererService.render(config.outlet);\n      this.renderedCallers.push({ caller });\n\n      return this.outletRendererService.getOutletRef(config.outlet).pipe(\n        map((outletDirective) => {\n          const components = outletDirective.renderedComponents.get(\n            config.position ? config.position : OutletPosition.BEFORE\n          ) as ComponentRef<any>[];\n\n          return components\n            .reverse()\n            .find(\n              (component) => component.componentType === template.componentType\n            );\n        }),\n        tap((component) => {\n          if (config?.dialogType) {\n            this.applyClasses(component, config?.dialogType);\n          }\n        })\n      );\n    }\n  }\n\n  hasMatch(config: LaunchOutletDialog) {\n    return Boolean(config.outlet);\n  }\n\n  remove(caller: LAUNCH_CALLER | string, config: LaunchOutletDialog): void {\n    const template = this.componentFactoryResolver.resolveComponentFactory(\n      config.component\n    );\n\n    this.outletService.remove(\n      config.outlet,\n      config.position ? config.position : OutletPosition.BEFORE,\n      template\n    );\n\n    super.remove(caller, config);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, RendererFactory2 } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { LaunchRoute, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected routingService: RoutingService\n  ) {\n    super(document, rendererFactory);\n  }\n  /**\n   * Navigates to the route configured for the caller\n   */\n  render(config: LaunchRoute, _caller: LAUNCH_CALLER | string) {\n    this.routingService.go(config);\n  }\n\n  hasMatch(config: LaunchRoute) {\n    return Boolean(config.cxRoute);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { LayoutConfig } from '../config/layout-config';\nimport {\n  InlineRenderStrategy,\n  LaunchRenderStrategy,\n  OutletRenderStrategy,\n  RoutingRenderStrategy,\n} from './services/index';\n\n@NgModule({\n  providers: [\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: OutletRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: InlineRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: RoutingRenderStrategy,\n      multi: true,\n    },\n  ],\n})\nexport class LaunchDialogModule {\n  static forRoot(): ModuleWithProviders<LaunchDialogModule> {\n    return {\n      ngModule: LaunchDialogModule,\n      providers: [{ provide: LayoutConfig, useExisting: Config }],\n    };\n  }\n}\n","import { ElementRef, Injectable, ViewContainerRef } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport {\n  LaunchDialogService,\n  LAUNCH_CALLER,\n} from '../../layout/launch-dialog/index';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentLaunchDialogService {\n  constructor(protected launchDialogService: LaunchDialogService) {}\n\n  openDialog(\n    openElement?: ElementRef,\n    vcr?: ViewContainerRef\n  ): Observable<any> | undefined {\n    const component = this.launchDialogService.launch(\n      LAUNCH_CALLER.ANONYMOUS_CONSENT,\n      vcr\n    );\n\n    if (component) {\n      return combineLatest([\n        component,\n        this.launchDialogService.dialogClose,\n      ]).pipe(\n        filter(([, close]) => close && close !== undefined),\n        tap(([comp]) => {\n          openElement?.nativeElement.focus();\n          this.launchDialogService.clear(LAUNCH_CALLER.ANONYMOUS_CONSENT);\n          comp.destroy();\n        }),\n        map(([comp]) => comp)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class BaseFocusService {}\n","import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseFocusConfig } from '../keyboard-focus.model';\nimport { BaseFocusService } from './base-focus.service';\n\n/**\n * Abstract directive that provides a common interface for all focus directives:\n * - Block Focus\n * - Persist Focus\n * - Escape Focus\n * - Auto Focus\n * - Tab Focus\n * - Trap Focus\n * - Lock Focus\n */\n@Directive()\nexport abstract class BaseFocusDirective implements OnInit {\n  /**\n   * Optional configuration for the focus directive drives the behaviour of the keyboard\n   * focus directive.\n   */\n  protected config: BaseFocusConfig;\n\n  /**\n   * A default config can be provided for each directive if a specific focus directive\n   * is used directly. i.e. `<div cxAutoFocus></div>`\n   */\n  protected defaultConfig: BaseFocusConfig = {};\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected service: BaseFocusService\n  ) {}\n\n  ngOnInit() {\n    this.setDefaultConfiguration();\n    this.requiredTabindex = -1;\n  }\n\n  /**\n   * Override the (input) config if it undefined or an empty string, with the\n   * `defaultConfig`. The `defaultConfig` might be specified for each directive\n   * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\n   * specific (inherited) defaultConfig will be used.\n   */\n  protected setDefaultConfiguration(): void {\n    if ((!this.config || this.config === '') && this.defaultConfig) {\n      this.config = this.defaultConfig;\n    }\n  }\n\n  /**\n   * Helper method to return the host element for the directive\n   * given by the `elementRef`.\n   */\n  protected get host(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /**\n   * Force a tabindex on the host element if it is _requried_ to make the element\n   * focusable. If the element is focusable by nature or by a given tabindex, the\n   * `tabindex` is not applied.\n   *\n   * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\n   */\n  protected set requiredTabindex(tabindex: number) {\n    if (this.requiresExplicitTabIndex) {\n      this.tabindex = tabindex;\n    }\n  }\n\n  /**\n   * Returns true if the host element does not have a tabindex defined\n   * and it also doesn't get focus by browsers nature (i.e. button or\n   * active link).\n   */\n  protected get requiresExplicitTabIndex(): boolean {\n    return (\n      this.tabindex === undefined &&\n      ['button', 'input', 'select', 'textarea'].indexOf(\n        this.host.tagName.toLowerCase()\n      ) === -1 &&\n      !(\n        this.host.tagName === 'A' &&\n        (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))\n      )\n    );\n  }\n}\n","import { Directive, HostBinding, HostListener } from '@angular/core';\nimport { BaseFocusDirective } from '../base/base-focus.directive';\nimport { VisibleFocusConfig } from '../keyboard-focus.model';\n\n/**\n * Directive implementation that adds a CSS class to the host element\n * when the moused is used to focus an element. As soon as the keyboard\n * is used, the class is removed.\n */\n@Directive() // selector: '[cxVisibleFocus]'\nexport class VisibleFocusDirective extends BaseFocusDirective {\n  protected defaultConfig: VisibleFocusConfig = { disableMouseFocus: true };\n\n  // @Input('cxVisibleFocus')\n  protected config: VisibleFocusConfig;\n\n  /** controls a polyfill class for the lacking focus-visible feature */\n  @HostBinding('class.mouse-focus') mouseFocus = false;\n\n  @HostListener('mousedown') handleMousedown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = true;\n    }\n  }\n\n  @HostListener('keydown') handleKeydown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = false;\n    }\n  }\n\n  protected get shouldFocusVisible(): boolean {\n    return this.config?.disableMouseFocus;\n  }\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { BlockFocusConfig } from '../keyboard-focus.model';\nimport { VisibleFocusDirective } from '../visible/visible-focus.directive';\n\n@Directive()\n// { selector: '[cxBlockFocus]' }\nexport class BlockFocusDirective extends VisibleFocusDirective\n  implements OnInit {\n  protected defaultConfig: BlockFocusConfig = { block: true };\n\n  // @Input('cxBlockFocus')\n  protected config: BlockFocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: BaseFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.config.block) {\n      this.tabindex = -1;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { FOCUS_GROUP_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\n\nconst GLOBAL_GROUP = '_g_';\n\n/**\n * Shared service to persist the focus for an element or a group\n * of elements. The persisted element focus can be used to persist\n * the focus for a DOM tree, so that the focus remains after a repaint\n * or reoccurs when a DOM tree is \"unlocked\".\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersistFocusService extends BaseFocusService {\n  // this is going to fail as we have sub services. They will al have their own map.\n  // We must bring this to a singlton map.\n  protected focus = new Map<string, string>();\n\n  get(group?: string): string {\n    return this.focus.get(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Persist the keyboard focus state for the given key. The focus is stored globally\n   * or for the given group.\n   */\n  set(key: string, group?: string) {\n    if (key) {\n      this.focus.set(group || GLOBAL_GROUP, key);\n    }\n  }\n\n  /**\n   * Clears the persisted keyboard focus state globally or for the given group.\n   */\n  clear(group?: string) {\n    this.focus.delete(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Returns the group for the host element based on the configured group or\n   * by the `data-cx-focus-group` attribute stored on the host.\n   */\n  getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string {\n    return config?.group ? config.group : host.getAttribute(FOCUS_GROUP_ATTR);\n  }\n}\n","/** The element attribute used to store the focus state */\nexport const FOCUS_ATTR = 'data-cx-focus';\n/** The element attribute used to store the focus group state */\nexport const FOCUS_GROUP_ATTR = 'data-cx-focus-group';\n\nexport const enum MOVE_FOCUS {\n  NEXT = 1,\n  PREV = -1,\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseFocusConfig {}\n\nexport interface VisibleFocusConfig {\n  /**\n   * When set to true, the mouse-focus class is added to the host element,\n   * indicating that the element focus was not caused by the keyboard.\n   */\n  disableMouseFocus?: boolean;\n}\n\nexport interface BlockFocusConfig extends VisibleFocusConfig {\n  block?: boolean;\n}\n\nexport interface PersistFocusConfig extends BlockFocusConfig {\n  /**\n   * A key to maintain the focus of an element in case the component is\n   * recreated (which often is the case when an `*ngIf` or `*ngFor` is used).\n   */\n  key?: string;\n\n  /**\n   * Optional group identifier that can be used to persist the focus. This allows\n   * to have separate persisted focus available when the DOM is partially rebuild.\n   */\n  group?: string;\n}\n\nexport interface EscapeFocusConfig extends PersistFocusConfig {\n  focusOnEscape?: boolean;\n  /**\n   * Force an autofocus in case of double-escape\n   */\n  focusOnDoubleEscape?: boolean;\n}\n\nexport interface AutoFocusConfig extends EscapeFocusConfig {\n  /**\n   * Autofocus is enabled by default, and will try to focus an _autofocus_ element.\n   * In case the focus is explicitly set to `true`, the first accessible element\n   * is focussed in case there is no _autofocus_ element found.\n   * If the focus is set to false, autofocus will be disabled completely.\n   *\n   * If a string value is given, the autofocus will be restored based on the persisted\n   * focus group, which is driven by `PersistFocusConfig.key` and `PersistFocusConfig.group`.\n   *\n   * Defaults to `true`.\n   */\n  autofocus?: boolean | string;\n\n  // whenever the target autofocus element is selected by the `skipFocus` selector,\n  // autofocus is ignored.\n  skipFocus?: string;\n}\n\nexport interface TabFocusConfig extends AutoFocusConfig {\n  tab?: boolean | 'scroll' | string;\n}\n\n/**\n * The keyboard navigation (tab, shift-tab and up down keys) is _trapped_\n * for the nested focusable elements. This means that the focus can not\n * \"leave\" the elements. If the last element is focused, the keyboard will\n * navigate to the first element and visa versa.\n */\nexport interface TrapFocusConfig extends TabFocusConfig {\n  /** traps the focus */\n  trap?: boolean | 'start' | 'end';\n}\n\nexport interface LockFocusConfig extends TrapFocusConfig {\n  /**\n   * Indicates that the nested DOM is locked for keyboarding (`TAB`).\n   */\n  lock?: boolean;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface FocusConfig extends LockFocusConfig {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { BlockFocusDirective } from '../block/block-focus.directive';\nimport { FOCUS_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from './persist-focus.service';\n\n/**\n * Directive that provides persistence of the focused state. This is useful\n * when a group of focusable elements got refocused or even recreated. That\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\n *\n * The focus state is based on a configured _key_, which can be passed in the\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\n *\n * ```html\n * <button cxPersistFocus=\"myKey\"></button>\n * <button cxFocus=\"myKey\"></button>\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\n * ```\n *\n * The focus state can be part of a focus _group_, so that the state is shared\n * and remember for the given group. In order to detect the persistence for a\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\n *\n * ```html\n * <button data-cx-focus=\"myKey\"></button>\n * ```\n *\n * Other keyboard focus directives can read the key to understand whether the element\n * should retrieve focus.\n *\n */\n@Directive() // selector: '[cxPersistFocus]',\nexport class PersistFocusDirective extends BlockFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: PersistFocusConfig = {};\n\n  /**\n   * The persistence key can be passed directly or through the `FocusConfig.key`.\n   * While this could be considered a global key, the likeliness of conflicts\n   * is very small since the key is cleared when the focus is changed.\n   */\n  // @Input('cxPersistFocus')\n  protected config: PersistFocusConfig = {};\n\n  /**\n   * The persistence key is maintained in an element attribute for other\n   * implementations. This is needed to ensure that we can resolve the focus\n   * state in case of a repaint.\n   */\n  @HostBinding(`attr.${FOCUS_ATTR}`) attr: string;\n\n  @HostListener('focus', ['$event'])\n  handleFocus(event?: KeyboardEvent) {\n    this.service.set(this.key, this.group);\n\n    event?.preventDefault();\n    event?.stopPropagation();\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: PersistFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.attr = this.key ? this.key : undefined;\n  }\n\n  protected setDefaultConfiguration() {\n    if (typeof this.config === 'string' && this.config !== '') {\n      this.config = { key: this.config };\n    }\n    super.setDefaultConfiguration();\n  }\n\n  /**\n   * Focus the element explicitly if it was focused before.\n   */\n  ngAfterViewInit() {\n    if (this.isPersisted) {\n      this.host.focus({ preventScroll: true });\n    }\n  }\n\n  protected get isPersisted(): boolean {\n    return !!this.key && this.service.get(this.group) === this.key;\n  }\n\n  /**\n   * Returns the key for the host element, which is used to persist the\n   * focus state. This is useful in cases where the DOM is rebuild.\n   */\n  protected get key(): string {\n    return (this.config as PersistFocusConfig)?.key;\n  }\n\n  /**\n   * returns the persistence group (if any) for the focusable elements.\n   */\n  protected get group(): string {\n    return this.service.getPersistenceGroup(\n      this.host,\n      this.config as PersistFocusConfig\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectFocusUtility {\n  /**\n   * Query selectors used to query focusable child elements of the host element.\n   * The selectors are supplemented with `:not([disabled])` and `:not([hidden])`.\n   */\n  protected focusableSelectors: string[] = [\n    'a[href]',\n    'button',\n    '[tabindex]',\n    'input',\n    'select',\n    'textarea',\n  ];\n\n  // like to leave out the following as we don't use it, and make this list exensible.\n  //   `[contentEditable=true]`, // very unlikely to suport as we're not a business tool\n  //   `iframe`, // we really don't like iframes...\n  //   `area[href]`, // very debatable!\n\n  protected focusableSelectorSuffix = ':not([disabled]):not([hidden])';\n\n  query(host: HTMLElement, selector: string): HTMLElement[] {\n    if (!selector || selector === '') {\n      return [];\n    }\n    return Array.from(\n      host.querySelectorAll(selector) as NodeListOf<HTMLElement>\n    );\n  }\n\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    const selector =\n      typeof config?.autofocus === 'string' ? config.autofocus : '[autofocus]';\n    // fallback to first focusable\n    return (\n      this.query(host, selector).find((el) => !this.isHidden(el)) ||\n      this.findFocusable(host).find((el) => Boolean(el))\n    );\n  }\n\n  /**\n   * returns all focusable child elements of the host element. The element selectors\n   * are build from the `focusableSelectors`.\n   *\n   * @param host the `HTMLElement` used to query focusable elements\n   * @param locked indicates whether inactive (`tabindex=\"-1\"`) focusable elements should be returned\n   * @param invisible indicates whether hidden focusable elements should be returned\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    let suffix = this.focusableSelectorSuffix;\n    if (!locked) {\n      suffix += `:not([tabindex='-1'])`;\n    }\n    const selector = this.focusableSelectors\n      .map((s) => (s += suffix))\n      .join(',');\n    return this.query(host, selector).filter((el) =>\n      !invisible ? !this.isHidden(el) : Boolean(el)\n    );\n  }\n\n  /**\n   * Indicates whether the element is hidden by CSS. There are various CSS rules and\n   * HTML structures which can lead to an hidden or invisible element. An `offsetParent`\n   * of null indicates that the element or any of it's decendants is hidden (`display:none`).\n   *\n   * Oother techniques use the visibility (`visibility: hidden`), opacity (`opacity`) or\n   * phyisical location on the element itself or any of it's anchestor elements. Those\n   * technique require to work with the _computed styles_, which will cause a performance\n   * downgrade. We don't do this in the standard implementaton.\n   */\n  protected isHidden(el: HTMLElement): boolean {\n    return el.offsetParent === null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from '../persist/persist-focus.service';\nimport { SelectFocusUtility } from '../services/select-focus.util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EscapeFocusService extends PersistFocusService {\n  constructor(protected selectFocusUtil: SelectFocusUtility) {\n    super();\n  }\n\n  shouldFocus(config: EscapeFocusConfig): boolean {\n    return !!config?.focusOnEscape;\n  }\n\n  handleEscape(\n    host: HTMLElement,\n    config: EscapeFocusConfig,\n    event: KeyboardEvent\n  ): void {\n    if (this.shouldFocus(config)) {\n      if (host !== event.target) {\n        host.focus({ preventScroll: true });\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        if (config?.focusOnDoubleEscape) {\n          this.selectFocusUtil\n            .findFirstFocusable(host, { autofocus: true })\n            ?.focus();\n        }\n      }\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusDirective } from '../persist/persist-focus.directive';\nimport { EscapeFocusService } from './escape-focus.service';\n\n/**\n * Directive to focus the host element whenever the `escape` key is captured.\n * UiEvents bubble up by nature, which is why the `cxEscGroup` can be used\n * on a tree of elements. Each time the escape key is used, the focus will\n * move up in the DOM tree.\n *\n */\n@Directive() // selector: '[cxEscFocus]',\nexport class EscapeFocusDirective extends PersistFocusDirective\n  implements OnInit {\n  protected defaultConfig: EscapeFocusConfig = { focusOnEscape: true };\n\n  // @Input('cxEscFocus')\n  protected config: EscapeFocusConfig;\n\n  @Output() esc = new EventEmitter<boolean>();\n\n  /**\n   * Handles the escape key event.\n   * @param event the native keyboard event which contains the escape keydown event\n   */\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    if (this.service.shouldFocus(this.config)) {\n      this.service.handleEscape(this.host, this.config, event);\n    }\n    this.esc.emit(this.service.shouldFocus(this.config));\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: EscapeFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    if (this.service.shouldFocus(this.config)) {\n      this.requiredTabindex = -1;\n    }\n    super.ngOnInit();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusService } from '../escape/escape-focus.service';\nimport {\n  AutoFocusConfig,\n  FOCUS_ATTR,\n  PersistFocusConfig,\n} from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AutoFocusService extends EscapeFocusService {\n  /**\n   * Returns the first focusable child element of the host element.\n   */\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    if (config?.autofocus === ':host') {\n      return host;\n    } else if (this.hasPersistedFocus(host, config)) {\n      return this.getPersisted(host, this.getPersistenceGroup(host, config));\n    } else {\n      return this.selectFocusUtil.findFirstFocusable(host, config) || host;\n    }\n  }\n\n  /**\n   * Indicates whether any of the focusabe child elements is focused.\n   */\n  hasPersistedFocus(host: HTMLElement, config: PersistFocusConfig): boolean {\n    return !!this.getPersisted(host, this.getPersistenceGroup(host, config));\n  }\n\n  /**\n   * Returns the element that has a persisted focus state.\n   *\n   * @param host the `HTMLElement` used to query for focusable children\n   * @param group the optional group for the persistent state, to separate different focus\n   *   groups and remain the persistence\n   */\n  protected getPersisted(host: HTMLElement, group?: string): HTMLElement {\n    if (!this.get(group)) {\n      return;\n    }\n    const focussed = Array.from(\n      host.querySelectorAll(\n        `[${FOCUS_ATTR}='${this.get(group)}']`\n      ) as NodeListOf<HTMLElement>\n    );\n    return focussed.length > 0 ? focussed[0] : null;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\nimport { AutoFocusService } from './auto-focus.service';\n\n/**\n * Directive that focus the first nested _focusable_ element based on state and configuration:\n *\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\n * 4. first focusable element\n * 5. the host element, in case the configured CSS selector is `:host`.\n *\n * Example configurations:\n *\n * `<div cxAutoFocus>[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\n *\n */\n@Directive() // selector: '[cxAutoFocus]'\nexport class AutoFocusDirective extends EscapeFocusDirective\n  implements AfterViewInit {\n  /** The AutoFocusDirective will be using autofocus by default  */\n  protected defaultConfig: AutoFocusConfig = { autofocus: true };\n\n  // @Input('cxAutoFocus')\n  protected config: AutoFocusConfig;\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: AutoFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Focus the element explicitly if it was focussed before.\n   */\n  ngAfterViewInit(): void {\n    if (this.shouldAutofocus) {\n      this.handleFocus();\n    }\n    if (!this.shouldAutofocus || this.hasPersistedFocus) {\n      super.ngAfterViewInit();\n    }\n  }\n\n  /**\n   * Mimic the focus without setting the actual focus on the host. The first\n   * focusable child element will be focussed.\n   */\n  handleFocus(event?: KeyboardEvent) {\n    if (this.shouldAutofocus) {\n      if (!event?.target || event.target === this.host) {\n        this.firstFocusable?.focus();\n      } else {\n        (event.target as HTMLElement).focus();\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  /**\n   * Helper function to get the first focusable child element\n   */\n  protected get hasPersistedFocus() {\n    return this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Helper function to indicate whether we should use autofocus for the\n   * child elements.\n   */\n  protected get shouldAutofocus(): boolean {\n    return !!this.config?.autofocus;\n  }\n\n  /**\n   * Helper function to get the first focusable child element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get firstFocusable(): HTMLElement {\n    return this.service.findFirstFocusable(this.host, this.config);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusService } from '../autofocus/auto-focus.service';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TabFocusService extends AutoFocusService {\n  /**\n   * Moves to the next (or previous) tab.\n   */\n  moveTab(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS,\n    event: KeyboardEvent\n  ): void {\n    if (config?.tab) {\n      const next =\n        config.tab === 'scroll'\n          ? this.findNextScrollable(host, config, increment)\n          : this.findNext(host, config, increment);\n\n      next?.focus();\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * builds out virtual slides out of the full scrollable area, to allow\n   * for maximum flexibility for the underlying layout without using hardcoded\n   * slide sizes.\n   */\n  protected findNextScrollable(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const active = this.getActiveChild(host, config);\n\n    if (!active) {\n      return;\n    }\n    // slide count\n    const virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);\n\n    // find current virtual slide\n    const currentVirtualSlide = Math.round(\n      active.offsetLeft / (host.scrollWidth / virtualSlideCount)\n    );\n\n    let nextVirtualSlide = currentVirtualSlide + increment;\n    if (\n      increment === MOVE_FOCUS.NEXT &&\n      nextVirtualSlide >= virtualSlideCount\n    ) {\n      nextVirtualSlide = 0;\n    }\n    if (increment === MOVE_FOCUS.PREV && nextVirtualSlide < 0) {\n      nextVirtualSlide = virtualSlideCount - 1;\n    }\n\n    const firstItemOnNextSlide = this.getChildren(host, config)?.find(\n      (tab) =>\n        tab.offsetLeft >=\n        (host.scrollWidth / virtualSlideCount) * nextVirtualSlide\n    );\n\n    return firstItemOnNextSlide;\n  }\n\n  protected findNext(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const childs = this.getChildren(host, config);\n    let activeIndex = childs?.findIndex(\n      (c) => c === this.getActiveChild(host, config)\n    );\n\n    if (!activeIndex || activeIndex === -1) {\n      activeIndex = 0;\n    }\n    activeIndex += increment;\n\n    if (increment === MOVE_FOCUS.NEXT && activeIndex >= childs?.length) {\n      activeIndex = childs.length - 1;\n    }\n    if (increment === MOVE_FOCUS.PREV && activeIndex < 0) {\n      activeIndex = 0;\n    }\n    return childs ? childs[activeIndex] : undefined;\n  }\n\n  /**\n   * Returns the active focusable child element. If there's no active\n   * focusable child element, the first focusable child is returned.\n   */\n  protected getActiveChild(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement {\n    const persisted = this.getPersisted(host, config?.group);\n    if (persisted) {\n      return persisted;\n    }\n    const children = this.getChildren(host, config);\n    let index = children.findIndex((tab) => this.isActive(tab));\n    if (!index || index === -1) {\n      index = 0;\n    }\n    return children[index];\n  }\n\n  protected getChildren(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement[] {\n    if (typeof config.tab === 'string' && config.tab !== 'scroll') {\n      return this.selectFocusUtil.query(host, config.tab);\n    } else {\n      return this.findFocusable(host, true);\n    }\n  }\n\n  /**\n   * Returns all focusable child elements of the host element.\n   *\n   * @param host The host element is used to query child focusable elements.\n   * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.\n   * @param invisible Indicates if invisible child elements should be returned, defaults to false.\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    return this.selectFocusUtil.findFocusable(host, locked, invisible);\n  }\n\n  protected isActive(el: HTMLElement): boolean {\n    const child = document.activeElement;\n    const selector = child.tagName;\n\n    return (\n      el === child ||\n      !!Array.from(el.querySelectorAll(selector)).find((e) => e === child)\n    );\n  }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { AutoFocusDirective } from '../autofocus/auto-focus.directive';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from './tab-focus.service';\n\n/**\n * Directive to move the focus of (\"locked\") child elements. This is useful\n * for a nested list of tabs, carousel slides or any group of elements that\n * requires horizontal navigation.\n */\n@Directive() // selector: '[cxTabFocus]'\nexport class TabFocusDirective extends AutoFocusDirective {\n  /** `tab` defaults to true if the directive `cxTabFocus` is used. */\n  protected defaultConfig: TabFocusConfig = { tab: true };\n\n  // @Input('cxTabFocus')\n  protected config: TabFocusConfig = {};\n\n  @HostListener('keydown.arrowRight', ['$event'])\n  handleNextTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.NEXT, event);\n    }\n  }\n\n  @HostListener('keydown.arrowLeft', ['$event'])\n  handlePreviousTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.PREV, event);\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TabFocusService\n  ) {\n    super(elementRef, service);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from '../tab/tab-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrapFocusService extends TabFocusService {\n  /**\n   * Indicates whether any of the child elements of the host are focusable.\n   *\n   * @param host `HTMLElement` that is used to query the focusable elements.\n   */\n  hasFocusableChildren(host: HTMLElement): boolean {\n    return this.findFocusable(host).length > 0;\n  }\n\n  /**\n   * Focus the next or previous element of all available focusable elements.\n   * The focus is _trapped_ in case there's no next or previous available element.\n   * The focus will automatically move the start or end of the list.\n   */\n  moveFocus(\n    host: HTMLElement,\n    config: TrapFocusConfig,\n    increment: MOVE_FOCUS,\n    event: UIEvent\n  ): void {\n    const focusable: HTMLElement[] = this.findFocusable(host);\n\n    let index = focusable.findIndex((v) => v === event.target) + increment;\n\n    const shouldMoveFocus =\n      (index >= 0 && index < focusable.length) ||\n      (index < 0 && this.getTrapStart(config.trap)) ||\n      (index >= focusable.length && this.getTrapEnd(config.trap));\n\n    if (shouldMoveFocus) {\n      if (index >= focusable.length) {\n        index = 0;\n      }\n      if (index < 0) {\n        index = focusable.length - 1;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const el = focusable[index];\n\n      el.focus();\n    }\n  }\n\n  protected getTrapStart(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'start';\n  }\n\n  protected getTrapEnd(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'end';\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\nimport { TrapFocusService } from './trap-focus.service';\n\n/**\n * Directive that keeps the focus inside the focussable child elements,\n * also known as a _focus trap_.\n */\n@Directive() // selector: '[cxTrapFocus]'\nexport class TrapFocusDirective extends TabFocusDirective implements OnInit {\n  protected defaultConfig: TrapFocusConfig = { trap: true };\n\n  // @Input('cxTrapFocus')\n  protected config: TrapFocusConfig = {};\n\n  @HostListener('keydown.arrowdown', ['$event'])\n  @HostListener('keydown.tab', ['$event'])\n  handleTrapDown = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.NEXT);\n    }\n  };\n\n  @HostListener('keydown.arrowup', ['$event'])\n  @HostListener('keydown.shift.tab', ['$event'])\n  handleTrapUp = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.PREV);\n    }\n  };\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TrapFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Moves the focus of the element reference up or down, depending on the increment.\n   * The focus of the element is trapped to avoid it from going out of the group.\n   *\n   * @param event UIEvent that is used to get the target element. The event is blocked\n   *   from standard execution and further bubbling.\n   * @param increment indicates whether the next or previous is focussed.\n   */\n  protected moveFocus(event: UIEvent, increment: number) {\n    if (this.service.hasFocusableChildren(this.host)) {\n      this.service.moveFocus(\n        this.host,\n        this.config,\n        increment,\n        event as UIEvent\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TrapFocusService } from '../trap/trap-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LockFocusService extends TrapFocusService {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { FOCUS_GROUP_ATTR, LockFocusConfig } from '../keyboard-focus.model';\nimport { TrapFocusDirective } from '../trap/trap-focus.directive';\nimport { LockFocusService } from './lock-focus.service';\n\n/**\n * Focusable elements exclude hidden elements by default, but this contradicts with\n * unlocking (hidden) elements.\n */\nconst UNLOCK_HIDDEN_ELEMENTS = true;\n/**\n * Directive that adds persistence for focussed element in case\n * the elements are being rebuild. This happens often when change\n * detection kicks in because of new data set from the backend.\n */\n@Directive() // selector: '[cxLockFocus]'\nexport class LockFocusDirective extends TrapFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: LockFocusConfig = { lock: true };\n\n  // @Input('cxLockFocus')\n  protected config: LockFocusConfig = {};\n\n  /**\n   * Indicates that the host is configured to use locking. This is available as a\n   * CSS class `focus-lock`.\n   */\n  @HostBinding('class.focus-lock') shouldLock: boolean;\n\n  /**\n   * Indicates that the host is locked. This is available as a CSS class `is-locked`.\n   */\n  @HostBinding('class.is-locked') isLocked: boolean;\n\n  /**\n   * Emits an event when the host is unlocked.\n   */\n  @Output() unlock = new EventEmitter<boolean>();\n\n  /**\n   * When the user selects enter or space, the focusable childs are\n   * unlocked, which means that the tabindex is set to 0.\n   */\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  handleEnter(event: KeyboardEvent) {\n    if (this.shouldLock && this.host === (event.target as HTMLElement)) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * In case any of the children elements is touched by the mouse,\n   * we unlock the group to not break the mouse-experience.\n   */\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    if (this.shouldLock && this.isLocked) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: LockFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service);\n  }\n\n  protected lockFocus() {\n    this.addTabindexToChildren(-1);\n  }\n\n  protected unlockFocus(event?: UIEvent) {\n    this.unlock.emit(true);\n    this.addTabindexToChildren(0);\n    // we focus the host if the event was triggered from a child\n    if (event?.target === this.host) {\n      super.handleFocus(event as KeyboardEvent);\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.shouldLock = this.config?.lock;\n\n    if (this.shouldLock) {\n      this.tabindex = 0;\n\n      // Locked elements will be set to `autofocus` by default if it's not\n      // been configured. This will ensure that autofocus kicks in upon unlock.\n      if (!this.config.hasOwnProperty('autofocus')) {\n        this.config.autofocus = true;\n      }\n      // Locked elements will be set to `focusOnEscape` by default if it's not\n      // been configured. This will ensure that  the host gets locked again when\n      // `escape` is pressed.\n      if (!this.config.hasOwnProperty('focusOnEscape')) {\n        this.config.focusOnEscape = !(this.config?.focusOnEscape === false);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.shouldLock) {\n      /**\n       * If the component hosts a group of focusable children elmenents,\n       * we persist the group key to the children, so that they can taken this\n       * into account when they persist their focus state.\n       */\n      if (!!this.group) {\n        this.service.findFocusable(this.host).forEach((el) =>\n          // we must do this in after view init as\n          this.renderer.setAttribute(el, FOCUS_GROUP_ATTR, this.group)\n        );\n      }\n\n      if (this.shouldAutofocus) {\n        this.handleFocus();\n      }\n    }\n    super.ngAfterViewInit();\n  }\n\n  handleFocus(event?: KeyboardEvent): void {\n    if (this.shouldLock) {\n      if (this.shouldUnlockAfterAutofocus(event)) {\n        // Delay unlocking in case the host is using `ChangeDetectionStrategy.Default`\n        setTimeout(() => this.unlockFocus(event));\n      } else {\n        setTimeout(() => this.lockFocus());\n        event?.stopPropagation();\n        return;\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  handleEscape(event: KeyboardEvent): void {\n    if (this.shouldLock) {\n      this.service.clear(this.config.group);\n    }\n    super.handleEscape(event);\n  }\n\n  /**\n   * When the handleFocus is called without an actual event, it's coming from Autofocus.\n   * In this case we unlock the focusable children in case there's a focusable child that\n   * was unlocked before.\n   *\n   * We keep this private to not polute the API.\n   */\n  private shouldUnlockAfterAutofocus(event?: KeyboardEvent) {\n    return !event && this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Add the tabindex attribute to the focusable children elements\n   */\n  protected addTabindexToChildren(i = 0): void {\n    if (this.shouldLock) {\n      this.isLocked = i === -1;\n      if (!(this.hasFocusableChildren && i === 0) || i === 0) {\n        this.focusable.forEach((el) =>\n          this.renderer.setAttribute(el, 'tabindex', i.toString())\n        );\n      }\n    }\n  }\n\n  /**\n   * Utility method, returns all focusable children for the host element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get hasFocusableChildren(): boolean {\n    return this.service.hasFocusableChildren(this.host);\n  }\n\n  /**\n   * Returns the focusable children of the host element. If the host element\n   * is configured to be locked, the query is restricted to child elements\n   * with a tabindex !== `-1`.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get focusable(): HTMLElement[] {\n    return this.service.findFocusable(\n      this.host,\n      this.shouldLock,\n      UNLOCK_HIDDEN_ELEMENTS\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { LockFocusService } from '../lock/lock-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeyboardFocusService extends LockFocusService {}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { FocusConfig } from './keyboard-focus.model';\nimport { LockFocusDirective } from './lock/lock-focus.directive';\nimport { KeyboardFocusService } from './services/keyboard-focus.service';\n\n@Directive({\n  selector: '[cxFocus]',\n})\nexport class FocusDirective extends LockFocusDirective {\n  protected defaultConfig: FocusConfig = {};\n  // tslint:disable-next-line: no-input-rename\n  @Input('cxFocus') protected config: FocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: KeyboardFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service, renderer);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusDirective } from './focus.directive';\n\nconst directives = [\n  // PersistFocusDirective,\n  // VisibleFocusDirective,\n  // BlockFocusDirective,\n  // AutoFocusDirective,\n  // EscapeFocusDirective,\n  // LockFocusDirective,\n  // TrapFocusDirective,\n  // TabFocusDirective,\n  FocusDirective,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...directives],\n  exports: [...directives],\n})\nexport class KeyboardFocusModule {}\n","import { Component, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentLaunchDialogService: AnonymousConsentLaunchDialogService,\n    protected vcr: ViewContainerRef\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    const dialog = this.anonymousConsentLaunchDialogService.openDialog(\n      null,\n      this.vcr\n    );\n    if (dialog) {\n      this.subscriptions.add(dialog.subscribe());\n    }\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(() => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n      FILTER: 'fas fa-filter',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        (res) =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      (res) =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      (res) =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        (res) => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach((cls) =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach((cls) => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [provideDefaultConfig(fontawesomeIconConfig)],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { FocusConfig } from '../../../layout/a11y/keyboard-focus/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  @HostBinding('attr.role') role = 'dialog';\n  @HostBinding('attr.aria-modal') modal = true;\n\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  focusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    autofocus: 'input[type=\"checkbox\"]',\n    focusOnEscape: true,\n  };\n\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    // Close on click outside the dialog window\n    if ((event.target as any).tagName === this.el.nativeElement.tagName) {\n      this.close('Cross click');\n    }\n  }\n\n  constructor(\n    protected config: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected el: ElementRef,\n    protected launchDialogService: LaunchDialogService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  close(reason?: any): void {\n    this.launchDialogService.closeDialog(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.close('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.close('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\nimport { DIALOG_TYPE } from '../../layout/launch-dialog/index';\nimport { AnonymousConsentDialogComponent } from '../../shared/components/anonymous-consents-dialog/anonymous-consent-dialog.component';\n\nexport const defaultAnonymousConsentLayoutConfig: LayoutConfig = {\n  launch: {\n    ANONYMOUS_CONSENT: {\n      inline: true,\n      component: AnonymousConsentDialogComponent,\n      dialogType: DIALOG_TYPE.DIALOG,\n    },\n  },\n};\n","import {\n  Component,\n  ElementRef,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\nimport { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  @ViewChild('open') openElement: ElementRef;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected anonymousConsentLaunchDialogService: AnonymousConsentLaunchDialogService\n  ) {}\n\n  openDialog(): void {\n    const dialog = this.anonymousConsentLaunchDialogService.openDialog(\n      this.openElement,\n      this.vcr\n    );\n    if (dialog) {\n      dialog.pipe(take(1)).subscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideConfig,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../layout/a11y/keyboard-focus/index';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { defaultAnonymousConsentLayoutConfig } from './default-anonymous-consent-layout.config';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideConfig(defaultAnonymousConsentLayoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  consent: AnonymousConsent;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.requiredConsents.includes(templateId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  constructor(\n    protected userConsentService: UserConsentService,\n    protected globalMessageService: GlobalMessageService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map((template) => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe((success) => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap((withdrawalSuccess) => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe((withdrawalSuccess) =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/index';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsDialogModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { CardComponent } from './card.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map((totalWidth) => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return this.winRef.resize$.pipe(\n      map((event) => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\n   * configuration. If no configuration is available for the given breakpoint, the\n   * method will return the default values:\n   * - xs: 567\n   * - sm: 768\n   * - md: 992\n   * - lg: 1200\n   */\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints?.hasOwnProperty(breakpoint)\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  /**\n   * Returns all available breakpoints for the system.\n   */\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  /**\n   * Indicates whether the current screen size is smaller than the maximum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n   */\n  isDown(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(0, this.breakpoints.indexOf(breakpoint) + 1)\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size is larger than the minimum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n   */\n  isUp(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(this.breakpoints.indexOf(breakpoint))\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size fits to the given breakpoint\n   */\n  isEqual(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(map((br) => br === breakpoint));\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth > this.getSize(BREAKPOINT.lg)\n      ? BREAKPOINT.xl\n      : this.breakpoints.find((br) => windowWidth <= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Config, Image, OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { StorefrontConfig } from '../../../storefront-config';\nimport { MediaConfig } from './media.config';\nimport { Media, MediaContainer, MediaFormatSize } from './media.model';\n\n/**\n * Service which generates media URLs. It leverage the MediaContainer and MediaFormats so\n * that URLs and sizes are generated for the same media. This helps to improve performance\n * across difference devices and layouts.\n *\n * Media formats are optional, but highly recommended. The format will help the browser to\n * identify the right media for the right experience.\n *\n * The MediaService will generate absolute URLs in case relative URLs are provided for the Media.\n * The baseUrl is read from the `occConfig.backend.media.baseUrl` or\n * `occConfig.backend.occ.baseUrl`.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  /**\n   * The media formats sorted by size. The media format representing the smallest\n   * size is sorted on top.\n   */\n  private _sortedFormats: { code: string; size: MediaFormatSize }[];\n  private _reversedFormats: { code: string; size: MediaFormatSize }[];\n\n  constructor(\n    @Inject(Config) protected config: StorefrontConfig,\n    /**\n     * The BreakpointService is no longer used in version 2.0 as the different size formats are\n     * driven by configuration only. There's however a change that this service will play a role\n     * in the near future, which is why we keep the constructor as-is.\n     */\n    protected breakpointService: BreakpointService\n  ) {}\n\n  /**\n   * Returns a `Media` object with the main media (`src`) and various media (`src`)\n   * for specific formats.\n   */\n  getMedia(\n    mediaContainer: MediaContainer | Image,\n    format?: string,\n    alt?: string\n  ): Media {\n    if (!mediaContainer) {\n      return;\n    }\n\n    const mainMedia: Image = mediaContainer.url\n      ? mediaContainer\n      : this.resolveMedia(mediaContainer as MediaContainer, format);\n\n    return {\n      src: this.resolveAbsoluteUrl(mainMedia?.url),\n      alt: alt || mainMedia?.altText,\n      srcset: this.resolveSrcSet(mediaContainer),\n    };\n  }\n\n  /**\n   * Creates the media formats in a logical sorted order. The map contains the\n   * format key and the format size information. We do this only once for performance\n   * benefits.\n   */\n  protected get sortedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._sortedFormats) {\n      this._sortedFormats = Object.keys(\n        (this.config as MediaConfig).mediaFormats\n      )\n        .map((key) => ({\n          code: key,\n          size: (this.config as MediaConfig).mediaFormats[key],\n        }))\n        .sort((a, b) => (a.size.width > b.size.width ? 1 : -1));\n    }\n    return this._sortedFormats;\n  }\n\n  /**\n   * Creates the media formats in a reversed sorted order.\n   */\n  protected get reversedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._reversedFormats) {\n      this._reversedFormats = this.sortedFormats.slice().reverse();\n    }\n    return this._reversedFormats;\n  }\n\n  /**\n   * Resolves the right media for the given format. The fo\n   */\n  protected resolveMedia(media: MediaContainer, format?: string): Image {\n    return media[this.resolveFormat(media, format)];\n  }\n\n  /**\n   * Validates the format against the given mediaContainer. If there is no format available,\n   * or if the mediaContainer doesn't contain a media for the given media, the most optimal\n   * format is resolved. If even that is not possible, the first format is returned.\n   */\n  protected resolveFormat(\n    mediaContainer: MediaContainer,\n    format?: string\n  ): string {\n    if (format && mediaContainer[format]) {\n      return format;\n    }\n    return (\n      this.resolveBestFormat(mediaContainer) || Object.keys(mediaContainer)[0]\n    );\n  }\n\n  /**\n   * Returns the media format code with the best size.\n   */\n  protected resolveBestFormat(media: MediaContainer | Image): string {\n    return this.reversedFormats.find((format) =>\n      media.hasOwnProperty(format.code)\n    )?.code;\n  }\n\n  /**\n   * Returns a set of media for the available media formats. Additionally, the congiured media\n   * format width is added to the srcset, so that browsers can select the appropriate media.\n   */\n  protected resolveSrcSet(media: MediaContainer | Image): string {\n    if (!media) {\n      return undefined;\n    }\n\n    const srcset = this.sortedFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.resolveAbsoluteUrl(media[format.code].url)} ${\n          format.size.width\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  /**\n   * Resolves the absolute URL for the given url. In most cases, this URL represents\n   * the relative URL on the backend. In that case, we prefix the url with the baseUrl.\n   */\n  protected resolveAbsoluteUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  /**\n   * The base URL is either driven by a specific `backend.media.baseUrl`, or by the\n   * `backend.occ.baseUrl`.\n   *\n   * The `backend.media.baseUrl` can be used to load media from a different location.\n   *\n   * In Commerce Cloud, a differnt location could mean a different \"aspect\".\n   */\n  protected getBaseUrl(): string {\n    return (\n      (this.config as OccConfig).backend.media.baseUrl ||\n      (this.config as OccConfig).backend.occ.baseUrl ||\n      ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media, MediaContainer } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: MediaContainer;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  protected create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media?.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  protected handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {\n  static forRoot(): ModuleWithProviders<MediaModule> {\n    return {\n      ngModule: MediaModule,\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  HostBinding,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { startWith, map } from 'rxjs/operators';\n\n/**\n * This component renders form errors.\n */\n@Component({\n  selector: 'cx-form-errors',\n  templateUrl: './form-errors.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormErrorsComponent {\n  _control: FormControl;\n  errors$: Observable<string[]>;\n\n  @Input()\n  set control(control: FormControl) {\n    this._control = control;\n\n    this.errors$ = control?.statusChanges.pipe(\n      startWith({}),\n      map(() => control.errors || {}),\n      map((errors) =>\n        Object.entries(errors)\n          .filter((error) => error[1])\n          .map((error) => error[0])\n      )\n    );\n  }\n\n  get control(): FormControl {\n    return this._control;\n  }\n\n  @HostBinding('class.control-invalid') get invalid() {\n    return this.control.invalid;\n  }\n  @HostBinding('class.control-dirty') get dirty() {\n    return this.control.dirty;\n  }\n  @HostBinding('class.control-touched') get touched() {\n    return this.control.touched;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormErrorsComponent } from './form-errors.component';\nimport { I18nModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [FormErrorsComponent],\n  exports: [FormErrorsComponent],\n})\nexport class FormErrorsModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functinality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive inteteger or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Inidicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  private _control$: Observable<FormControl>;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Returns an observable with the control. The value changes of the\n   * control are intercepted in order to suppress invalid values.\n   */\n  getControl(): Observable<FormControl> {\n    if (!this._control$) {\n      this._control$ = this.control.valueChanges.pipe(\n        startWith(this.control.value),\n        tap((value) =>\n          this.control.setValue(this.getValidCount(value), { emitEvent: false })\n        ),\n        map(() => this.control)\n      );\n    }\n    return this._control$;\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [provideDefaultConfig(defaultPaginationConfig)],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { MediaFormatSize } from './media.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n/**\n * Provides configuration specific to Media, such as images. This is used to optimize\n * rendering of the media, SEO and performance.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class MediaConfig {\n  /**\n   * Media _format_ configuration holds the size of the media's assigned to\n   * a format.\n   */\n  mediaFormats?: {\n    /**\n     * Represents the media format code, that is the key to distinguish different\n     * media in a container.\n     */\n    [format: string]: MediaFormatSize;\n  };\n}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(() =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter((loaded) => loaded),\n      switchMap(() => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap((dataLoaded) => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: ` <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container> `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap((items) =>\n        this.getContext(context).pipe(\n          switchMap((ctx) => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map((ctx) => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe((service) => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => (ctx ? this.getInjectedService(ctx) : undefined)),\n      filter((s) => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map((data) => data?.context),\n        map((ctx) => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  // tslint:disable-next-line:no-output-native\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(protected el: ElementRef, protected renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'style',\n        `--star-fill:${value || this.initialRate};`\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map((routingData) => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap((orderCode) => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map((cart) => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map((cart) =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { AbstractControl, ValidationErrors, FormGroup } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  /**\n   * Checks control's value with predefined email regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidEmail' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return !email.length || email.match(EMAIL_PATTERN)\n      ? null\n      : { cxInvalidEmail: true };\n  }\n\n  /**\n   * Checks control's value with predefined password regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidPassword' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n\n    return !password.length || password.match(PASSWORD_PATTERN)\n      ? null\n      : { cxInvalidPassword: true };\n  }\n\n  /**\n   * Checks if control's value is between 1 and 5\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxStarRatingEmpty' validator error\n   * @memberof CustomFormValidators\n   */\n  static starRatingEmpty(control: AbstractControl): ValidationErrors | null {\n    const rating = control.value as number;\n\n    return rating >= 1 && rating <= 5 ? null : { cxStarRatingEmpty: true };\n  }\n\n  /**\n   * Checks if two password controls match\n   *\n   * NOTE: Use it as a form validator and pass password control names as parameters\n   *\n   * @static\n   * @param {string} password First password control name\n   * @param {string} passwordConfirmation Second password control name\n   * @returns Uses 'cxPasswordsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordsMustMatch(\n    password: string,\n    passwordConfirmation: string\n  ): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        password,\n        passwordConfirmation,\n        'cxPasswordsMustMatch'\n      );\n\n    return validator;\n  }\n\n  /**\n   * Checks if two email controls match\n   *\n   * NOTE: Use it as a form validator and pass email control names as parameters\n   *\n   * @static\n   * @param {string} email First email control name\n   * @param {string} emailConfirmation Second email control name\n   * @returns Uses 'cxEmailsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailsMustMatch(email: string, emailConfirmation: string): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        email,\n        emailConfirmation,\n        'cxEmailsMustMatch'\n      );\n\n    return validator;\n  }\n}\n\n/**\n * Generic function for validators, which checks if two passed controls match.\n *\n * @param formGroup\n * @param firstControlName First control to check\n * @param secondControlName Second control to check\n * @param errorName Error which will be returned by validator\n */\nexport function controlsMustMatch(\n  formGroup: FormGroup,\n  firstControlName: string,\n  secondControlName: string,\n  errorName: string\n): void {\n  const firstControl = formGroup.controls[firstControlName];\n  const secondControl = formGroup.controls[secondControlName];\n\n  if (secondControl.errors && !secondControl.errors[errorName]) {\n    return;\n  }\n\n  secondControl.setErrors(\n    firstControl.value !== secondControl.value ? { [errorName]: true } : null\n  );\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  CmsComponentMapping,\n  CmsConfig,\n  DeferLoadingStrategy,\n} from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentsService {\n  private missingComponents: string[] = [];\n\n  constructor(\n    protected config: CmsConfig,\n    @Inject(PLATFORM_ID) protected platformId: Object\n  ) {}\n\n  /**\n   * Should be called to make sure all component mappings are determined,\n   * especially lazy loaded ones.\n   *\n   * It's recommended way to make sure all other methods of CmsComponentService\n   * will be able to work synchronously for asked component types and avoid risk\n   * of potential errors that could be thrown otherwise.\n   */\n  determineMappings(componentTypes: string[]): Observable<string[]> {\n    return of(componentTypes);\n  }\n\n  /**\n   * Return collection of component mapping configuration for specified list of\n   * component types.\n   *\n   * If component mapping can't be determined synchronously, for example, lazy\n   * loaded one, it will throw an error.\n   *\n   * To make sure component mapping is available, determineMappings()\n   * should be called and completed first.\n   */\n  getMapping(componentType: string): CmsComponentMapping {\n    const componentConfig = this.config.cmsComponents?.[componentType];\n\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(componentType)) {\n        this.missingComponents.push(componentType);\n        console.warn(\n          `No component implementation found for the CMS component type '${componentType}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n\n    return componentConfig;\n  }\n\n  /**\n   * Checks, if component should be rendered as some components\n   * could be disabled for server side renderings\n   */\n  shouldRender(componentType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    return !(isSSR && this.getMapping(componentType)?.disableSSR);\n  }\n\n  /**\n   * Return DeferLoadingStrategy for component type.\n   */\n  getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    return this.config.cmsComponents?.[componentType]?.deferLoading;\n  }\n\n  /**\n   * Get cms driven child routes for components\n   */\n  getChildRoutes(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        routes.push(...(this.getMapping(componentType)?.childRoutes ?? []));\n      }\n    }\n    return routes;\n  }\n\n  /**\n   * Get cms driven guards for components\n   */\n  getGuards(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getMapping(componentType)?.guards?.forEach((guard) =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  /**\n   * Get i18n keys associated with components\n   */\n  getI18nKeys(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        this.getMapping(componentType)?.i18nKeys?.forEach((key) =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { CmsComponentData } from '../../model';\nimport { CmsComponent, CmsService } from '@spartacus/core';\nimport { CmsComponentsService } from '../../../services/cms-components.service';\n\n/**\n * Used to prepare injector for CMS components.\n *\n * Injector will take into account configured providers and provides CmsComponentData\n * for specified component's uid\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsInjectorService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  private getCmsData<T extends CmsComponent>(\n    uid: string,\n    parentInjector?: Injector\n  ): CmsComponentData<T> {\n    return {\n      uid: uid,\n      data$: (parentInjector ?? this.injector)\n        .get(CmsService)\n        .getComponentData<T>(uid),\n    };\n  }\n\n  public getInjector(\n    type: string,\n    uid: string,\n    parentInjector?: Injector\n  ): Injector {\n    const configProviders =\n      this.cmsComponentsService.getMapping(type)?.providers ?? [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsData(uid),\n        },\n        ...configProviders,\n      ],\n      parent: parentInjector ?? this.injector,\n    });\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Applicable, CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * ComponentHandler implementations can be used for instantiating and launching\n * different types of CMS mapped components\n */\nexport abstract class ComponentHandler implements Applicable {\n  /**\n   * Returns component resource - an observable stream used to launch and dispose\n   * component.\n   *\n   * Instantiate and launch component by subscribing to launcher.\n   * Successful component launch will be followed by emission of ElementRef\n   * (and in case of native Angular component, also ComponentRef).\n   * Unsubscribing from the launcher will remove and tear down the component.\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  abstract launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }>;\n\n  abstract hasMatch(componentMapping: CmsComponentMapping): boolean;\n  abstract getPriority?(): Priority;\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  isDevMode,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from '../handlers/component-handler';\nimport { CmsComponentMapping, resolveApplicable } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n/**\n * Responsible for obtaining component handler for specified component mapping\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ComponentHandlerService {\n  constructor(\n    @Optional()\n    @Inject(ComponentHandler)\n    protected handlers: ComponentHandler[]\n  ) {}\n\n  protected invalidMappings = new Set<CmsComponentMapping>();\n\n  /**\n   * Get best matching component handler\n   *\n   * @param componentMapping\n   */\n  protected resolve(componentMapping: CmsComponentMapping): ComponentHandler {\n    const handler = resolveApplicable(this.handlers, [componentMapping]);\n\n    if (isDevMode() && !handler) {\n      if (!this.invalidMappings.has(componentMapping)) {\n        this.invalidMappings.add(componentMapping);\n        console.warn(\n          \"Can't resolve handler for component mapping: \",\n          componentMapping\n        );\n      }\n    }\n\n    return handler;\n  }\n\n  /**\n   * Get launcher for specified component mapping\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  getLauncher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return this.resolve(componentMapping)?.launcher(\n      componentMapping,\n      viewContainerRef,\n      elementInjector\n    );\n  }\n}\n","import {\n  ComponentRef,\n  Directive,\n  ElementRef,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CmsComponentsService } from '../../services/cms-components.service';\nimport { CmsInjectorService } from './services/cms-injector.service';\nimport { ComponentHandlerService } from './services/component-handler.service';\n\n/**\n * Directive used to facilitate instantiation of CMS driven dynamic components\n */\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  /**\n   * @deprecated since 2.0\n   *\n   * This property in unsafe, i.e.\n   * - cmpRef can be set later because of lazy loading or deferred loading\n   * - cmpRef can be not set at all if for example, web components are used as cms components\n   */\n  cmpRef?: ComponentRef<any>;\n\n  private launcherResource?: Subscription;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected componentHandler: ComponentHandlerService,\n    protected cmsInjector: CmsInjectorService\n  ) {}\n\n  ngOnInit() {\n    this.cmsComponentsService\n      .determineMappings([this.cxComponentWrapper.flexType])\n      .subscribe(() => {\n        if (\n          this.cmsComponentsService.shouldRender(\n            this.cxComponentWrapper.flexType\n          )\n        ) {\n          this.launchComponent();\n        }\n      });\n  }\n\n  private launchComponent() {\n    const componentMapping = this.cmsComponentsService.getMapping(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (!componentMapping) {\n      return;\n    }\n\n    this.launcherResource = this.componentHandler\n      .getLauncher(\n        componentMapping,\n        this.vcr,\n        this.cmsInjector.getInjector(\n          this.cxComponentWrapper.flexType,\n          this.cxComponentWrapper.uid,\n          this.injector\n        )\n      )\n      ?.subscribe(({ elementRef, componentRef }) => {\n        this.cmpRef = componentRef;\n        this.decorate(elementRef);\n      });\n  }\n\n  private decorate(elementRef: ElementRef): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      elementRef.nativeElement,\n      this.renderer,\n      { componentData: this.cxComponentWrapper }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.launcherResource) {\n      this.launcherResource.unsubscribe();\n    }\n  }\n}\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from './component-handler';\nimport { Observable } from 'rxjs';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * Default component handler used for dynamically launching cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DefaultComponentHandler implements ComponentHandler {\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return typeof componentMapping.component === 'function';\n  }\n\n  getPriority(): Priority {\n    return Priority.FALLBACK;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return new Observable<{\n      elementRef: ElementRef;\n      componentRef?: ComponentRef<any>;\n    }>((subscriber) => {\n      let componentRef: ComponentRef<any>;\n\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const dispose = () => {\n        if (componentRef) {\n          componentRef.destroy();\n        }\n      };\n\n      const factory = this.getComponentFactory(\n        injector,\n        componentMapping.component\n      );\n\n      if (factory) {\n        componentRef = viewContainerRef.createComponent(\n          factory,\n          undefined,\n          injector\n        );\n        subscriber.next({ elementRef: componentRef.location, componentRef });\n      }\n\n      return dispose;\n    });\n  }\n\n  protected getComponentFactory(injector: Injector, component: any): any {\n    if (!component) {\n      return null;\n    }\n    const factory = injector\n      .get(ComponentFactoryResolver)\n      .resolveComponentFactory(component);\n\n    return factory;\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  BaseSiteService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  SelectiveCartService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: ActiveCartService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    @Optional() public selectiveCartService: SelectiveCartService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import {\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ComponentHandler } from './component-handler';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CxApiService } from '../services/cx-api.service';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\nimport { CmsComponentData } from '../../model';\n\n/**\n * Component handler responsible for launching cms web components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class WebComponentHandler implements ComponentHandler {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'string' &&\n      componentMapping.component.includes('#')\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW; // low, as it's a default matcher\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef }> {\n    return new Observable<{ elementRef: ElementRef }>((subscriber) => {\n      let webElement;\n      let active = true;\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const renderer = injector.get(Renderer2);\n\n      const disposeFunc = () => {\n        active = false;\n        if (webElement) {\n          webElement.remove();\n        }\n      };\n\n      this.initWebComponent(componentMapping.component, renderer).then(\n        (elementName) => {\n          if (elementName) {\n            webElement = renderer.createElement(elementName);\n\n            const cmsComponentData = injector.get(CmsComponentData, null);\n\n            webElement.cxApi = {\n              ...injector.get(CxApiService),\n              cmsComponentData,\n            };\n\n            renderer.appendChild(\n              viewContainerRef.element.nativeElement.parentElement,\n              webElement\n            );\n\n            subscriber.next({ elementRef: new ElementRef(webElement) });\n\n            if (!active) {\n              disposeFunc();\n            }\n          }\n        }\n      );\n\n      return disposeFunc;\n    });\n  }\n\n  private initWebComponent(\n    component: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise((resolve) => {\n      const [path, selector] = component.split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\nimport { from, Observable } from 'rxjs';\nimport { DefaultComponentHandler } from './default-component.handler';\nimport { switchMap } from 'rxjs/operators';\nimport { ComponentHandler } from './component-handler';\n\n/**\n * Lazy component handler used for launching lazy loaded cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LazyComponentHandler implements ComponentHandler {\n  constructor(protected defaultHandler: DefaultComponentHandler) {}\n\n  /**\n   * We want to mach dynamic import signature () => import('')\n   */\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'function' &&\n      this.isNotClass(componentMapping.component)\n    );\n  }\n\n  private isNotClass(symbol: any): boolean {\n    const signature = symbol.toString().substr(0, 20).replace(' ', '');\n    return signature.startsWith('function()') || signature.startsWith('()=>');\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return from(componentMapping.component()).pipe(\n      switchMap((component) =>\n        this.defaultHandler.launcher(\n          { ...componentMapping, component },\n          viewContainerRef,\n          elementInjector\n        )\n      )\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\nimport { ComponentHandler } from './handlers/component-handler';\nimport { DefaultComponentHandler } from './handlers/default-component.handler';\nimport { WebComponentHandler } from './handlers/web-component.handler';\nimport { LazyComponentHandler } from './handlers/lazy-component.handler';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    {\n      provide: ComponentHandler,\n      useExisting: DefaultComponentHandler,\n      multi: true,\n    },\n    {\n      provide: ComponentHandler,\n      useExisting: LazyComponentHandler,\n      multi: true,\n    },\n    {\n      provide: ComponentHandler,\n      useExisting: WebComponentHandler,\n      multi: true,\n    },\n  ],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { LAUNCH_CALLER } from '../../../layout/launch-dialog/config/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected launchDialogService: LaunchDialogService\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  protected isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  protected isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  protected addUi(): void {\n    this.launchDialogService.launch(LAUNCH_CALLER.ASM);\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe((token) => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap((userToken) =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap((token) => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((customerSupportAgentToken) =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe((isNavigating) => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(() => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  csAgentLoginForm: FormGroup;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.csAgentLoginForm = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.csAgentLoginForm.valid) {\n      this.submitEvent.emit({\n        userId: this.csAgentLoginForm.get('userId').value,\n        password: this.csAgentLoginForm.get('password').value,\n      });\n    } else {\n      this.csAgentLoginForm.markAllAsTouched();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe((user) => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:no-host-metadata-property\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  customerSelectionForm: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.customerSelectionForm = this.fb.group({\n      searchTerm: ['', Validators.required],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.customerSelectionForm.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe((searchTermValue) => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.customerSelectionForm.controls.searchTerm.setValue(\n      this.selectedCustomer.name\n    );\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (this.customerSelectionForm.valid && Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    } else {\n      this.customerSelectionForm.markAllAsTouched();\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\n\nexport const defaultAsmLayoutConfig: LayoutConfig = {\n  launch: {\n    ASM: {\n      outlet: 'cx-storefront',\n      component: AsmMainUiComponent,\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  AsmModule as AsmCoreModule,\n  I18nModule,\n  provideConfig,\n} from '@spartacus/core';\nimport { FormErrorsModule } from '../../shared/index';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\nimport { defaultAsmLayoutConfig } from './default-asm-layout.config';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n    FormErrorsModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  providers: [provideConfig(defaultAsmLayoutConfig)],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE = ProductScope.DETAILS;\n\n  /**\n   * Will emit current product or null, if there is no current product (i.e. we are not on PDP)\n   *\n   * @param scopes\n   */\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product | null> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.state.params['productCode']),\n      switchMap((productCode: string) => {\n        return productCode\n          ? this.productService.get(\n              productCode,\n              scopes || this.DEFAULT_PRODUCT_SCOPE\n            )\n          : of(null);\n      }),\n      filter((x) => x !== undefined),\n      distinctUntilChanged()\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  ActiveCartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter((e) => !!e),\n        map((entry) => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap((valueChange) => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe((entry) => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.isStable();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\nimport { FeaturesConfigModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, FeaturesConfigModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveCartService,\n  Cart,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  couponForm: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    protected cartVoucherService: CartVoucherService,\n    protected formBuilder: FormBuilder,\n    protected customerCouponService: CustomerCouponService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n\n    this.cart$ = combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.getActiveCartId(),\n      this.customerCouponService.getCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      ),\n    ]).pipe(\n      tap(\n        ([cart, activeCardId, customerCoupons]: [\n          Cart,\n          string,\n          CustomerCouponSearchResult\n        ]) => {\n          this.cartId = activeCardId;\n          this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n        }\n      ),\n      map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n    );\n\n    this.cartIsLoading$ = this.activeCartService\n      .isStable()\n      .pipe(map((loaded) => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.couponForm = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe((success) => {\n          this.onSuccess(success);\n        })\n    );\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe((error) => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.couponForm.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach((appliedVoucher) => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          (coupon) => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (this.couponForm.valid) {\n      this.cartVoucherService.addVoucher(\n        this.couponForm.value.couponCode,\n        this.cartId\n      );\n    } else {\n      this.couponForm.markAllAsTouched();\n    }\n  }\n\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  ConsignmentEntry,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every((item) => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map((consignmentEntry) => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach((item) => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.activeCartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map((value) => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { PromotionLocation, PromotionResult } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(protected promotionService: PromotionService) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n  selectiveCartEnabled: boolean;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n\n    this.selectiveCartEnabled = this.selectiveCartService.isEnabled();\n\n    this.cartLoaded$ = combineLatest([\n      this.activeCartService.isStable(),\n      this.selectiveCartEnabled\n        ? this.selectiveCartService.getLoaded()\n        : of(false),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n      map(([cartLoaded, sflLoaded, loggedIn]) =>\n        loggedIn && this.selectiveCartEnabled\n          ? cartLoaded && sflLoaded\n          : cartLoaded\n      )\n    );\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, Cart, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.isEnabled()\n          ? this.selectiveCartService.getCart()\n          : of({} as Cart),\n        this.activeCartService.getLoading(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart, loadingCart]) => {\n          const exclude = (arr, args) =>\n            arr.filter((item) => args.every((arg) => arg !== item));\n          return Object.keys(cart).length === 0 && loadingCart\n            ? exclude(slots, [\n                'TopContent',\n                'CenterRightContentSlot',\n                'EmptyCartMiddleContent',\n              ])\n            : cart.totalItems\n            ? exclude(slots, ['EmptyCartMiddleContent'])\n            : selectiveCart.totalItems\n            ? exclude(slots, [\n                'EmptyCartMiddleContent',\n                'CenterRightContentSlot',\n              ])\n            : exclude(slots, ['TopContent', 'CenterRightContentSlot']);\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map((cart) => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter((cart) => !!cart.totalPrice),\n    map((cart) => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter((product) => Boolean(product)),\n    tap((product) => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter((wishlist) => Boolean(wishlist)),\n    map((wishList) => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find((entry) => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CmsParagraphComponent,\n  CmsService,\n  OrderEntry,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map((cart) => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { SaveForLaterComponent } from './save-for-later.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          (deliveryMode) => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          (deliveryMode) =>\n            deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map((cartData) => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter((cartId) => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap((cartId) => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile((loaded) => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  StateUtils,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find((address) => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setDeliveryAddressProcessState.success ||\n                      setDeliveryAddressProcessState.error) &&\n                    !setDeliveryAddressProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setDeliveryAddressProcessState.success) {\n                    return this.checkoutDetailsService.getDeliveryAddress();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find((address) => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setPaymentDetailsProcessState.success ||\n                      setPaymentDetailsProcessState.error) &&\n                    !setPaymentDetailsProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setPaymentDetailsProcessState.success) {\n                    return this.checkoutDetailsService.getPaymentDetails();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [\n          boolean,\n          DeliveryMode[],\n          StateUtils.LoaderState<void>,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map((data) => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutConfigService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.activeCartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  StateUtils,\n  UserAddressService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: string[] = [];\n  years: number[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<StateUtils.LoaderState<void>>;\n  sameAsShippingAddress = true;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  showSameAsShippingAddressCheckbox$: Observable<boolean>;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  paymentForm: FormGroup = this.fb.group({\n    cardType: this.fb.group({\n      code: [null, Validators.required],\n    }),\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    expiryMonth: [null, Validators.required],\n    expiryYear: [null, Validators.required],\n    cvn: ['', Validators.required],\n    defaultPayment: [false],\n  });\n\n  billingAddressForm: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected modalService: ModalService,\n    protected userAddressService: UserAddressService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap((countries) => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap((cardTypes) => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.showSameAsShippingAddressCheckbox$ = combineLatest([\n      this.countries$,\n      this.shippingAddress$,\n    ]).pipe(\n      map(([countries, address]) => {\n        return (\n          address?.country &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      }),\n      tap((shouldShowCheckbox) => {\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.billingAddressForm.get(\n          'region.isocodeShort'\n        );\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n\n    for (let i = 0; i < 10; i++) {\n      this.years.push(year + i);\n    }\n\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push(`0${j}`);\n      } else {\n        this.months.push(j.toString());\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.paymentForm.value.defaultPayment = !this.paymentForm.value\n      .defaultPayment;\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddressForm.value);\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddressForm.get('country.isocode').setValue(country.isocode);\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  next(): void {\n    if (this.paymentForm.valid) {\n      if (this.sameAsShippingAddress) {\n        this.setPaymentDetails.emit({\n          paymentDetails: this.paymentForm.value,\n          billingAddress: null,\n        });\n      } else {\n        if (this.billingAddressForm.valid) {\n          this.setPaymentDetails.emit({\n            paymentDetails: this.paymentForm.value,\n            billingAddress: this.billingAddressForm.value,\n          });\n        } else {\n          this.billingAddressForm.markAllAsTouched();\n        }\n      }\n    } else {\n      this.paymentForm.markAllAsTouched();\n\n      if (!this.sameAsShippingAddress) {\n        this.billingAddressForm.markAllAsTouched();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { PaymentFormComponent } from './payment-form.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<{ content: Card; paymentMethod: PaymentDetails }[]>;\n  selectedMethod$: Observable<PaymentDetails>;\n  isGuestCheckout = false;\n  newPaymentFormManuallyOpened = false;\n\n  protected shouldRedirect: boolean;\n  protected deliveryAddress: Address;\n  protected checkoutStepUrlNext: string;\n  protected checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.shouldRedirect = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n\n    this.selectedMethod$ = this.checkoutPaymentService.getPaymentDetails().pipe(\n      tap((paymentInfo) => {\n        if (paymentInfo && !!Object.keys(paymentInfo).length) {\n          if (paymentInfo['hasError']) {\n            Object.keys(paymentInfo).forEach((key) => {\n              if (key.startsWith('InvalidField')) {\n                this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n              }\n            });\n            this.checkoutService.clearCheckoutStep(3);\n          } else if (this.shouldRedirect) {\n            this.routingService.go(this.checkoutStepUrlNext);\n          }\n        }\n      })\n    );\n\n    this.cards$ = combineLatest([\n      this.existingPaymentMethods$.pipe(\n        switchMap((methods) => {\n          return !methods?.length\n            ? of([])\n            : combineLatest(\n                methods.map((method) =>\n                  combineLatest([\n                    of(method),\n                    this.translation.translate('paymentCard.expires', {\n                      month: method.expiryMonth,\n                      year: method.expiryYear,\n                    }),\n                  ]).pipe(\n                    map(([payment, translation]) => ({\n                      payment,\n                      expiryTranslation: translation,\n                    }))\n                  )\n                )\n              );\n        })\n      ),\n      this.selectedMethod$,\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          paymentMethods,\n          selectedMethod,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          if (\n            paymentMethods.length &&\n            (!selectedMethod || Object.keys(selectedMethod).length === 0)\n          ) {\n            const defaultPaymentMethod = paymentMethods.find(\n              (paymentMethod) => paymentMethod.payment.defaultPayment\n            );\n            if (defaultPaymentMethod) {\n              selectedMethod = defaultPaymentMethod.payment;\n              this.checkoutPaymentService.setPaymentDetails(selectedMethod);\n            }\n          }\n          return paymentMethods.map((payment) => ({\n            content: this.createCard(\n              payment.payment,\n              {\n                textExpires: payment.expiryTranslation,\n                textUseThisPayment,\n                textDefaultPaymentMethod,\n                textSelected,\n              },\n              selectedMethod\n            ),\n            paymentMethod: payment.payment,\n          }));\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.checkoutPaymentService.setPaymentDetails(paymentDetails);\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n    this.checkoutPaymentService.createPaymentDetails(details);\n    this.shouldRedirect = true;\n  }\n\n  ngOnDestroy(): void {\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(field: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(\n    paymentDetails: PaymentDetails,\n    cardLabels: {\n      textDefaultPaymentMethod: string;\n      textExpires: string;\n      textUseThisPayment: string;\n      textSelected: string;\n    },\n    selected: PaymentDetails\n  ): Card {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        selected?.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\nimport { FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  placeOrderSubscription: Subscription;\n\n  checkoutSubmitForm = this.fb.group({\n    termsAndConditions: [false, Validators.requiredTrue],\n  });\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected routingService: RoutingService,\n    protected fb: FormBuilder\n  ) {}\n\n  submitForm(): void {\n    if (this.checkoutSubmitForm.valid) {\n      this.checkoutService.placeOrder();\n    } else {\n      this.checkoutSubmitForm.markAllAsTouched();\n    }\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter((order) => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\nimport { FormErrorsModule } from '../../../../shared/index';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  ActiveCartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutConfigService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  ErrorModel,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField = true;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  addressForm: FormGroup = this.fb.group({\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n    defaultAddress: [false],\n  });\n\n  constructor(\n    protected fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    protected modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap((countries: Country[]) => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles: Title[]) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions: Region[]) => {\n        const regionControl = this.addressForm.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.addressForm.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(\n              (error: ErrorModel) => error.subject === 'titleCode'\n            )\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.addressForm.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.addressForm['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.addressForm['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.addressForm['controls'].defaultAddress.setValue(\n      this.addressForm.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.addressForm.valid) {\n      if (this.addressForm.get('region').value.isocode) {\n        this.regionsSub = this.regions$.pipe(take(1)).subscribe((regions) => {\n          const obj = regions.find(\n            (region) =>\n              region.isocode ===\n              this.addressForm.controls['region'].value.isocode\n          );\n          Object.assign(this.addressForm.value.region, {\n            isocodeShort: obj.isocodeShort,\n          });\n        });\n      }\n\n      if (this.addressForm.dirty) {\n        this.checkoutDeliveryService.verifyAddress(this.addressForm.value);\n      } else {\n        // address form value not changed\n        // ignore duplicate address\n        this.submitAddress.emit(undefined);\n      }\n    } else {\n      this.addressForm.markAllAsTouched();\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.addressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then((address) => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.addressForm.value.titleCode,\n                phone: this.addressForm.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.addressForm.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n  isGuestCheckout = false;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected || Object.keys(selected).length === 0)\n          ) {\n            const defaultAddress = addresses.find(\n              (address) => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map((address) => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  addAddress(address: Address): void {\n    const selectedSub = this.selectedAddress$.subscribe((selected) => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    this.existingAddresses$.pipe(take(1)).subscribe((addresses) => {\n      addresses.includes(address)\n        ? this.selectAddress(address)\n        : this.checkoutDeliveryService.createAndSetAddress(address);\n    });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { KeyboardFocusService } from '../../keyboard-focus/services/keyboard-focus.service';\nimport { SkipLink, SkipLinkConfig } from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(\n    protected config: SkipLinkConfig,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter((skipLink) => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(skipLink: SkipLink): void {\n    const target =\n      skipLink.target instanceof HTMLElement\n        ? skipLink.target\n        : (skipLink.target as Element).parentElement;\n\n    // focus first focusable element in the\n    const firstFocusable =\n      this.keyboardFocusService.findFirstFocusable(target) || target;\n\n    // we force a tabindex if not available, to ensure we can focus into the element\n    const hasTabindex = firstFocusable.hasAttribute('tabindex');\n    if (!hasTabindex) {\n      firstFocusable.setAttribute('tabindex', '-1');\n    }\n\n    firstFocusable.focus();\n\n    // drop the tmp tabindex\n    if (!hasTabindex) {\n      firstFocusable.removeAttribute('tabindex');\n    }\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      (skipLink) => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          (skipLink) => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService.getSkipLinks();\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink): void {\n    this.skipLinkService.scrollToTarget(skipLink);\n  }\n}\n","import { SkipLinkConfig } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'cx-header',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'cx-main',\n      i18nKey: 'skipLink.labels.main',\n    },\n    { key: 'cx-footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport {\n  ConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n    KeyboardFocusModule,\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter((event) => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import { NgModule } from '@angular/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LaunchDialogModule } from './launch-dialog/index';\n\n@NgModule({\n  imports: [OutletRefModule, LaunchDialogModule.forRoot()],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\nimport { CmsComponentsService } from '../../services/cms-components.service';\n\n/**\n * The `PageSlotComponent` is used to render the CMS page slot and it's components.\n *\n * The Page slot host element will be supplemented with css classes so that the layout\n * can be fully controlled by customers:\n * - The page slot _position_ is added as a css class by default.\n * - The `cx-pending` is added for as long as the slot hasn't start loading.\n * - The `page-fold` style class is added for the page slot which is configured as the page fold.\n */\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position represents the unique key for a page slot on a single page, but can\n   * be reused cross pages.\n   *\n   * The position is used to find the CMS components for the page slot. It is also\n   * added as an additional CSS class so that layoutt can be applied.\n   */\n  @Input() set position(value: string) {\n    this.position$.next(value);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  /**\n   * Maintains css classes introduced by the host and adds additional classes.\n   */\n  @Input() @HostBinding() class: string;\n\n  /**\n   * Indicates that the page slot is the last page slot above the fold.\n   */\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  /**\n   * Indicates that the components of the page slot haven't been loaded as long\n   * as the isPending state is true.\n   */\n  @HostBinding('class.cx-pending') isPending = true;\n\n  /**\n   * Indicates that the page slot doesn't contain any components. This is no\n   * longer used in spartacus, but kept for backwards compatibility.\n   */\n  @HostBinding('class.has-components') @Input() hasComponents = false;\n\n  protected position$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  components: ContentSlotComponentData[];\n\n  protected slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap((position) => this.cmsService.getContentSlot(position)),\n    distinctUntilChanged(this.isDistinct)\n  );\n\n  /** Observes the components for the given page slot. */\n  components$: Observable<ContentSlotComponentData[]> = this.slot$.pipe(\n    map((slot) => slot?.components ?? [])\n  );\n\n  protected subscription: Subscription = new Subscription();\n\n  /** Keeps track of the pending components that must be loaded for the page slot */\n  private pendingComponentCount = 0;\n\n  /** Tracks the last used position, in case the page slot is used dynamically */\n  private lastPosition: string;\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected elementRef: ElementRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.slot$.pipe(tap((slot) => this.decorate(slot))).subscribe((value) => {\n        this.components = value?.components || [];\n        this.cd.markForCheck();\n      })\n    );\n  }\n\n  protected decorate(slot: ContentSlotData): void {\n    let cls = this.class || '';\n\n    if (this.lastPosition && cls.indexOf(this.lastPosition) > -1) {\n      cls = cls.replace(this.lastPosition, '');\n    }\n    if (this.position$.value) {\n      cls += ` ${this.position$.value}`;\n      this.lastPosition = this.position$.value;\n    }\n\n    // host bindings\n    this.pending = slot?.components?.length || 0;\n    this.hasComponents = slot?.components?.length > 0;\n    if (cls && cls !== this.class) {\n      this.class = cls;\n    }\n\n    this.addSmartEditSlotClass(slot);\n  }\n\n  /**\n   * Sets the pending count for the page slot components. Once all pending components are\n   * loaded, the `isPending` flag is updated, so that the associated class can be updated\n   */\n  protected set pending(count: number) {\n    this.pendingComponentCount = count;\n    this.isPending = this.pendingComponentCount > 0;\n  }\n\n  protected get pending(): number {\n    return this.pendingComponentCount;\n  }\n\n  /*\n   * Is triggered when a component is added to the view. This is used to\n   * update the pending count\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pending--;\n      this.cd.markForCheck();\n    }\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether the component should be\n   * rendered instantly or whether it should be deferred.\n   */\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.cmsComponentsService.getDeferLoadingStrategy(\n      componentType\n    );\n    return { deferLoading };\n  }\n\n  protected isDistinct(old: ContentSlotData, current: ContentSlotData) {\n    return (\n      current.components &&\n      old.components?.length === current.components.length &&\n      !old.components.find(\n        (el, index) => el.uid !== current.components[index].uid\n      )\n    );\n  }\n\n  private addSmartEditSlotClass(slot: ContentSlotData): void {\n    if (slot) {\n      this.dynamicAttributeService.addDynamicAttributes(\n        this.elementRef.nativeElement,\n        this.renderer,\n        { slotData: slot }\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter((slot) => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter((page) => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter((page) => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap((section) => (section ? of(section) : this.templateName$)),\n    tap((name) => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap((section) => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap((templateName) =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        (event) => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { LanguageService, WindowRef } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe((lang) => {\n      winRef.document.documentElement.lang = lang.replace(/_/g, '-');\n    });\n  };\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(\n      this.builders.map((builder) => builder.build())\n    ).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  FocusConfig,\n  KeyboardFocusService,\n} from '../a11y/keyboard-focus/index';\nimport { SkipLinkComponent } from '../a11y/skip-link/index';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  // required by esc focus\n  @HostBinding('tabindex') tabindex = '0';\n\n  @ViewChild(SkipLinkComponent) child: SkipLinkComponent;\n\n  private keyboardFocusConfig: FocusConfig = {\n    focusOnEscape: true,\n    focusOnDoubleEscape: true,\n  };\n\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    this.keyboardFocusService.handleEscape(\n      this.elementRef.nativeElement,\n      this.keyboardFocusConfig,\n      event\n    );\n  }\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe((val) => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsDialogModule } from '../../shared/components/anonymous-consents-dialog/anonymous-consents-dialog.module';\nimport { KeyboardFocusModule } from '../a11y/keyboard-focus/keyboard-focus.module';\nimport { SkipLinkModule } from '../a11y/skip-link/skip-link.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsDialogModule,\n    FeaturesConfigModule,\n\n    SkipLinkModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Injectable, Injector } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsComponentsService.getGuards(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map((guardClass) => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { TranslationChunkService, TranslationService } from '@spartacus/core';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected translation: TranslationService,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  loadForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsComponentsService.getI18nKeys(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsComponentsService } from './cms-components.service';\n\n// This service should be exposed in public API only after the refactor planned in https://github.com/SAP/spartacus/issues/7070\n@Injectable({ providedIn: 'root' })\nexport class CmsRoutesImplService {\n  constructor(\n    private router: Router,\n    private cmsComponentsService: CmsComponentsService\n  ) {}\n\n  private cmsRouteExists(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    if (this.cmsRouteExists(currentPageLabel)) {\n      return true;\n    }\n\n    const componentRoutes = this.cmsComponentsService.getChildRoutes(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PageContext } from '@spartacus/core';\nimport { CmsRoutesImplService } from './cms-routes-impl.service';\n\n// Public injection token for the private implementation of the service `CmsRoutesImplService`.\n// After #7070, this class should be replaced with a real implementation.\n@Injectable({\n  providedIn: 'root',\n  useExisting: CmsRoutesImplService,\n})\nexport abstract class CmsRoutesService {\n  abstract handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean;\n}\n","import { Injectable } from '@angular/core';\nimport { RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\nimport { CmsComponentsService } from '../services';\n\n/**\n * Helper service for `CmsPageGuard`\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuardService {\n  constructor(\n    protected semanticPathService: SemanticPathService,\n    protected cmsService: CmsService,\n    protected cmsRoutes: CmsRoutesService,\n    protected cmsI18n: CmsI18nService,\n    protected cmsGuards: CmsGuardsService,\n    protected cmsComponentsService: CmsComponentsService\n  ) {}\n\n  /**\n   * Takes CMS components types in the current CMS page, triggers (configurable) side effects and returns a boolean - whether the route can be activated.\n   *\n   * Based on `cmsComponents` config for the components in the page:\n   * - Evaluates components' guards; if one of them emits false or UrlTree - the route cannot be activated or redirects to the given UrlTree, respectively.\n   * - If all components' guards emitted true, then the route can be activated\n   * - Then we trigger loading of configured i18n chunks in parallel\n   * - And we register the configured children routes of cms components\n   *\n   * @param pageContext current cms page context\n   * @param pageData cms page data\n   * @param route activated route snapshot\n   * @param state router state snapshot\n   *\n   * @returns boolean observable - whether the route can be activated\n   */\n  canActivatePage(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap((componentTypes) =>\n        this.cmsComponentsService.determineMappings(componentTypes)\n      ),\n      switchMap((componentTypes) =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (canActivate === true && !route?.data?.cxCmsRouteContext) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  /**\n   * Activates the \"NOT FOUND\" cms page.\n   *\n   * It loads cms page data for the \"NOT FOUND\" page and puts it in the state of the the requested page label.\n   * Then it processes its CMS components with the method `canActivatePage()` of this service. For more, see its docs.\n   */\n  canActivateNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap((notFoundPage) => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap((notFoundIndex) => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap((notFoundIndex) =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter((index) => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.canActivatePage(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  ProtectedRoutesGuard,\n  RouteLoadStrategy,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { first, switchMap } from 'rxjs/operators';\nimport { CmsPageGuardService } from './cms-page-guard.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    protected protectedRoutesGuard: ProtectedRoutesGuard,\n    protected service: CmsPageGuardService,\n    protected routingConfig: RoutingConfigService\n  ) {}\n\n  /**\n   * Tries to load the CMS page data for the anticipated route and returns:\n   * - `true` - if it can be activated\n   * - `false` - if it cannot be activated\n   * - `UrlTree` - if user should be redirected to a given `UrlTree`\n   *\n   * If the route can be activated, it fires additional calculations on the CMS components present on this CMS page,\n   * based on their configuration (`cmsComponents` config).\n   *\n   * For more, see docs of the `CmsPageGuardService.canActivatePage`.\n   */\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.protectedRoutesGuard.canActivate(route).pipe(\n      switchMap((canActivate) =>\n        canActivate\n          ? this.routingService.getNextPageContext().pipe(\n              switchMap((pageContext) =>\n                this.cmsService.getPage(pageContext, this.shouldReload()).pipe(\n                  first(),\n                  switchMap((pageData) =>\n                    pageData\n                      ? this.service.canActivatePage(\n                          pageContext,\n                          pageData,\n                          route,\n                          state\n                        )\n                      : this.service.canActivateNotFoundPage(\n                          pageContext,\n                          route,\n                          state\n                        )\n                  )\n                )\n              )\n            )\n          : of(false)\n      )\n    );\n  }\n\n  /**\n   * Returns whether we should reload the CMS page data, even when it was loaded before.\n   */\n  private shouldReload(): boolean {\n    return this.routingConfig.getLoadStrategy() !== RouteLoadStrategy.ONCE;\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map((review) => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter((rev) => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter((rev) => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${\n        date.getMonth() + 1\n      }-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map((builder) => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map((data) => data.banners.trim().split(' ')),\n    map((codes) => codes.map((code) => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap } from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    protected cmsService: CmsService,\n    protected winRef: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilChanged((x, y) => x?.components === y?.components),\n    switchMap((data) =>\n      combineLatest(\n        (data?.components ?? '').split(' ').map((component) =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map((tab) => {\n              if (!tab) {\n                return undefined;\n              }\n\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    this.activeTabNum =\n      this.winRef.nativeWindow.history?.state?.activeTab ?? this.activeTabNum;\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach((comp) => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n    AddressBookComponentService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe((error) => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotPasswordForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.forgotPasswordForm = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    if (this.forgotPasswordForm.valid) {\n      this.userService.requestForgotPasswordEmail(\n        this.forgotPasswordForm.value.userEmail\n      );\n      this.routingService.go({ cxRoute: 'login' });\n    } else {\n      this.forgotPasswordForm.markAllAsTouched();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() amendOrderForm: FormGroup;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n\n  constructor(protected routingService: RoutingService) {}\n\n  continue(event: Event): void {\n    if (this.amendOrderForm.valid) {\n      this.routingService.go({\n        cxRoute: this.forwardRoute,\n        params: { code: this.orderCode },\n      });\n    } else {\n      this.amendOrderForm.markAllAsTouched();\n      event.stopPropagation();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantityToCancel(control: FormControl) {\n  if (!control.value) {\n    return null;\n  }\n  const quantity = Object.values(control.value).reduce(\n    (acc: number, val: number) => acc + val,\n    0\n  );\n  return quantity > 0 ? null : { cxNoSelectedItemToCancel: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap((form) => {\n        return this.getEntries().pipe(\n          map((entries) =>\n            entries.filter(\n              (entry) => this.getFormControl(form, entry).value > 0\n            )\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap((order) => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup(\n      {},\n      { validators: [ValidateQuantityToCancel] }\n    );\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach((entry) => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach((entry) =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport {\n  FormErrorsModule,\n  ItemCounterModule,\n  MediaModule,\n} from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup) {\n    if (form.valid) {\n      this.orderAmendService.save();\n    } else {\n      form.markAllAsTouched();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order?.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\nimport { FormErrorsModule } from '../../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first((r) => !!r))\n      .subscribe((returnRequest) => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter((consignment) =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            (consignment) => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach((element) => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map((order) => order.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap((returnRequest) => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      (success) => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map((returnRequests) => returnRequests.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap((paymentDetails) => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find((paymentDetail) => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n\n  resetPasswordForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'repassword'\n      ),\n    }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe((state) => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe((reset) => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  resetPassword() {\n    if (this.resetPasswordForm.valid) {\n      const password = this.resetPasswordForm.get('password').value;\n      this.userService.resetPassword(this.token, password);\n    } else {\n      this.resetPasswordForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  updateEmailForm: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n    }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit(): void {\n    if (this.updateEmailForm.valid) {\n      const newUid = this.updateEmailForm.get('confirmEmail').value;\n      const password = this.updateEmailForm.get('password').value;\n\n      this.saveEmail.emit({ newUid, password });\n    } else {\n      this.updateEmailForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  updatePasswordForm: FormGroup;\n\n  @Output()\n  submitted = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.updatePasswordForm = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      {\n        validators: CustomFormValidators.passwordsMustMatch(\n          'newPassword',\n          'newPasswordConfirm'\n        ),\n      }\n    );\n  }\n\n  onSubmit(): void {\n    if (this.updatePasswordForm.valid) {\n      this.submitted.emit({\n        oldPassword: this.updatePasswordForm.value.oldPassword,\n        newPassword: this.updatePasswordForm.value.newPassword,\n      });\n    } else {\n      this.updatePasswordForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submitted = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  updateProfileForm = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.updateProfileForm.patchValue(this.user);\n    }\n  }\n\n  onSubmit(): void {\n    if (this.updateProfileForm.valid) {\n      this.submitted.emit({\n        userUpdates: { ...this.updateProfileForm.value },\n      });\n    } else {\n      this.updateProfileForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  PaginationModel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          (coupons) =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe((k) => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe((success) => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap((preferences) => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach((p) => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          (interests) =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map((interest) => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map((result) => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { asyncScheduler, combineLatest, Observable } from 'rxjs';\nimport { filter, map, observeOn } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home').pipe(observeOn(asyncScheduler)),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return data\n          ? {\n              title: data.name,\n              children: [nav],\n            }\n          : undefined;\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter((data) => !!data),\n      switchMap((data) => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap((items) => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                (key) => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                (it) => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map((items) => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach((entry) => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach((child) =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map((child) => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navigation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter((event) => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (event.type === 'keydown') {\n      event.preventDefault();\n    }\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter((n) => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getTotalDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(\n        ...node.children.map((n) => this.getTotalDepth(n, depth + 1))\n      );\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    const wrapper = <HTMLElement>node.querySelector('.wrapper');\n    const body = <HTMLElement>node.closest('body');\n    if (wrapper) {\n      this.renderer.removeStyle(wrapper, 'margin-left');\n      if (\n        wrapper.offsetLeft + wrapper.offsetWidth >\n        body.offsetLeft + body.offsetWidth\n      ) {\n        this.renderer.setStyle(\n          wrapper,\n          'margin-left',\n          `${node.offsetWidth - wrapper.offsetWidth}px`\n        );\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter((node) => node.tagName === 'NAV')\n      .forEach((nav) => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d?.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d?.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap((results) =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map((res) => res.map((suggestion) => suggestion.value)),\n        switchMap((suggestions) => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map((match) => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap((productResult) => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap((c) => (this.config = c)),\n    switchMap((config) => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map((c) => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c?.displayProducts === 'true' || c?.displayProducts === true,\n            displayProductImages:\n              <any>c?.displayProductImages === 'true' ||\n              c?.displayProductImages === true,\n            displaySuggestions:\n              <any>c?.displaySuggestions === 'true' ||\n              c?.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(() => Boolean(deliveryAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(() => Boolean(deliveryMode)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(() => Boolean(billingAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(() => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap((order) => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    if (this.guestRegisterForm.valid) {\n      this.userService.registerGuest(\n        this.guid,\n        this.guestRegisterForm.value.password\n      );\n      if (!this.subscription) {\n        this.subscription = this.authService\n          .getUserToken()\n          .subscribe((token) => {\n            if (token.access_token) {\n              this.routingService.go({ cxRoute: 'home' });\n            }\n          });\n      }\n    } else {\n      this.guestRegisterForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map((orderDetails) => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\nimport { FormErrorsModule } from '../../shared/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map((product) => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map((ref) =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE = ProductScope.LIST;\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map((data) => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map((data) => data.productCodes.trim().split(' ')),\n    map((codes) =>\n      codes.map((code) => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map((d) => d?.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data?.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map((ref) => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map((p: Product) => this.createThumbs(p))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          (t) =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map((c) => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe((reviewsTabLabel) => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter((searchResult) => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach((key) => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe((route) => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","import { Breadcrumb, Facet } from '@spartacus/core';\n\n/**\n * UI model that holds the full list of facet and active facets for\n * the product list.\n */\nexport interface FacetList {\n  facets: Facet[];\n  activeFacets?: Breadcrumb[];\n}\n\nexport interface FacetCollapseState {\n  /**\n   * Indicates whether the facet is toggled to expand or collapse the facet values.\n   * Whether the toggle results in an expanded or collapsed state, depends on the\n   * experience, which is controlled in CSS.\n   */\n  toggled?: FacetGroupCollapsedState;\n\n  /**\n   * The top number of facet values that will be visible.\n   */\n  topVisible?: number;\n\n  /**\n   * The max number of facet values which will be visible. This includes\n   * the top visible number.\n   */\n  maxVisible?: number;\n}\n\nexport enum FacetGroupCollapsedState {\n  EXPANDED = 'EXPANDED',\n  COLLAPSED = 'COLLAPSED',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(take(1))\n        .subscribe((template) => {\n          this.viewMode$.next(\n            template === 'ProductGridPageTemplate'\n              ? ViewModes.Grid\n              : ViewModes.List\n          );\n        })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Params } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  Breadcrumb,\n  PageType,\n  ProductSearchPage,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, pluck, switchMap } from 'rxjs/operators';\nimport { ProductListComponentService } from '../../container/product-list-component.service';\nimport { FacetList } from '../facet.model';\n\n/**\n * Provides access to all the facets and active facets for the Product Listing Page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductFacetService {\n  protected readonly routeState$ = this.routing\n    .getRouterState()\n    .pipe(pluck('state'));\n\n  protected readonly searchResult$: Observable<\n    ProductSearchPage\n  > = this.routeState$.pipe(\n    switchMap((state) =>\n      this.productListComponentService.model$.pipe(\n        filter((page) => this.filterForPage(state, page)),\n        map((page) => this.mapResults(state, page))\n      )\n    )\n  );\n\n  constructor(\n    protected routing: RoutingService,\n    protected productListComponentService: ProductListComponentService\n  ) {}\n\n  /**\n   * Observes the facets and active facets for the given page. The facet data\n   * is provided in a `FacetList`.\n   */\n  readonly facetList$: Observable<FacetList> = this.searchResult$.pipe(\n    map(\n      (result: ProductSearchPage) =>\n        ({\n          facets: result.facets,\n          activeFacets: result.breadcrumbs,\n        } as FacetList)\n    )\n  );\n\n  /**\n   * Filters the current result by verifying if the result is related to the page.\n   * This is done to avoid a combination of the next page and the current search results.\n   */\n  protected filterForPage(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): boolean {\n    if (state.context.type === PageType.CATEGORY_PAGE) {\n      return (\n        page.currentQuery?.query?.value?.indexOf(\n          `allCategories:${state.context.id}`\n        ) > -1\n      );\n    }\n\n    if (\n      state.context.type === PageType.CONTENT_PAGE &&\n      state.context.id === 'search'\n    ) {\n      return page.currentQuery.query.value.startsWith(`${state.params.query}:`);\n    }\n    return false;\n  }\n\n  private mapResults(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): ProductSearchPage {\n    return {\n      ...page,\n      breadcrumbs: this.filterBreadcrumbs(page.breadcrumbs, state.params),\n    };\n  }\n\n  /**\n   * filter breadcrumbs which are not actively selected\n   * but coming from the route navigation\n   */\n  private filterBreadcrumbs(\n    breadcrumbs: Breadcrumb[],\n    params: Params\n  ): Breadcrumb[] {\n    return breadcrumbs\n      ? breadcrumbs.filter(\n          (breadcrumb) => !this.hasBreadcrumb(breadcrumb, params)\n        )\n      : [];\n  }\n\n  /**\n   * Indicates whether the breadcrumb is related to navigation parameters,\n   * since either the category or brand code should match those codes.\n   */\n  private hasBreadcrumb(breadcrumb: Breadcrumb, params: Params): boolean {\n    return (\n      breadcrumb.facetCode === 'allCategories' &&\n      breadcrumb.facetValueCode === params.categoryCode\n    );\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport {\n  FacetCollapseState,\n  FacetGroupCollapsedState,\n  FacetList,\n} from '../facet.model';\nimport { ProductFacetService } from './product-facet.service';\n\n/**\n * Provides access to the facets as well as their UI state. The UI state\n * represents user related changes on the facets, such as expanding or\n * collapsing a facet group or expanding the number of _visible_ facet values.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class FacetService {\n  /**\n   * An internal map where we keep the UI state of the facets.\n   */\n  protected facetState = new Map<string, BehaviorSubject<FacetCollapseState>>();\n\n  constructor(protected productFacetService: ProductFacetService) {}\n\n  /**\n   * Observes the facets for the given page and configures the initial UI state.\n   *\n   * Facets are configured on each emission so that we keep the facet UI state.\n   * This is mainly done to keep the state during usage of the facet, but also\n   * benefitial when the facets are rebuild while using them.\n   */\n  facetList$: Observable<FacetList> = this.productFacetService.facetList$.pipe(\n    tap((facetList) => {\n      facetList.facets.forEach((facet) => this.initialize(facet));\n    })\n  );\n\n  /**\n   * Returns the observed UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  getState(facet: Facet): Observable<FacetCollapseState> {\n    this.initialize(facet);\n    return this.facetState.get(facet.name);\n  }\n\n  /**\n   * Returns the UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  protected getStateSnapshot(facet: Facet): FacetCollapseState {\n    return (this.getState(facet) as BehaviorSubject<FacetCollapseState>).value;\n  }\n\n  /**\n   * Toggles the facet expanded state. If the expanded state becomes false,\n   * the visible values will decrease to the top values only.\n   *\n   * If the optional value argument is provided the expanded state will be set\n   * to this value, regardless of the current `expanded` state.\n   */\n  toggle(facet: Facet, isExpanded: boolean): void {\n    const state = this.getStateSnapshot(facet);\n\n    const toggledState = {\n      toggled: isExpanded\n        ? FacetGroupCollapsedState.COLLAPSED\n        : FacetGroupCollapsedState.EXPANDED,\n    } as FacetCollapseState;\n\n    if (toggledState.toggled === FacetGroupCollapsedState.COLLAPSED) {\n      toggledState.maxVisible = state.topVisible;\n    }\n\n    this.updateState(facet, toggledState);\n  }\n\n  /**\n   * Increases the visible values to the maximum values of the facet.\n   */\n  increaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.values.length });\n  }\n\n  /**\n   * Decreases the visible values to the topValueCount.\n   *\n   * The topValueCount defaults to 6, but can be controlled in\n   * the backend as well.\n   */\n  decreaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.topValueCount });\n  }\n\n  /**\n   * Persists the facet state and initializes the default values for the top\n   * and max visible values.\n   */\n  protected initialize(facet: Facet): void {\n    if (!this.hasState(facet)) {\n      this.facetState.set(\n        facet.name,\n        new BehaviorSubject({\n          topVisible: facet.topValueCount || 0,\n          maxVisible: facet.topValueCount || 0,\n        } as FacetCollapseState)\n      );\n    }\n  }\n\n  /**\n   * Updates the state of the facet in the local facet map.\n   */\n  protected updateState(facet: Facet, property: FacetCollapseState): void {\n    const state = { ...this.getStateSnapshot(facet), ...property };\n    this.facetState.get(facet.name).next(state);\n  }\n\n  protected hasState(facet: Facet): boolean {\n    return this.facetState.has(facet.name);\n  }\n\n  getLinkParams(query: string): { [key: string]: string } {\n    return {\n      // to avoid encoding issues with facets that have space (' ') in their name,\n      // we replace the decoded '+' back to empty space ' '.\n      // For more, see https://github.com/SAP/spartacus/issues/7348\n      query: new HttpUrlEncodingCodec().decodeValue(query).replace(/\\+/g, ' '),\n    };\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Breadcrumb } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FacetList } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n/**\n * Active facets render the applied facet values as a list of focusable buttons\n * which can be used to remove the applied facet value.\n */\n@Component({\n  selector: 'cx-active-facets',\n  templateUrl: './active-facets.component.html',\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class ActiveFacetsComponent {\n  /** Active facets which are applied to the product results. */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  /** Configurable icon which is used for the active facet close button */\n  @Input() closeIcon = ICON_TYPE.CLOSE;\n\n  constructor(protected facetService: FacetService) {}\n\n  getLinkParams(facet: Breadcrumb) {\n    return this.facetService.getLinkParams(facet.removeQuery?.query?.value);\n  }\n\n  /**\n   * The focus key is used to persist the focus on the facet when the DOM is being\n   * recreated. We only apply the focus key for the given facet when there are no\n   * facets available. This is a great experience for the keyboard user, who keep the\n   * focus on the activated facet all the time.\n   */\n  getFocusKey(facetList: FacetList, facet: Breadcrumb) {\n    return !facetList.facets?.length ? facet.facetValueName : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ActiveFacetsComponent } from './active-facets.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [ActiveFacetsComponent],\n  exports: [ActiveFacetsComponent],\n})\nexport class ActiveFacetsModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FocusConfig } from '../../../../../layout/a11y/keyboard-focus/index';\nimport { ICON_TYPE } from '../../../../misc/icon/icon.model';\nimport { FacetGroupCollapsedState, FacetList } from '../facet.model';\nimport { FacetComponent } from '../facet/facet.component';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet-list',\n  templateUrl: './facet-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetListComponent {\n  private _isDialog: boolean;\n  /**\n   * Indicates that the facet navigation is rendered in dialog.\n   */\n  @Input()\n  set isDialog(value: boolean) {\n    this._isDialog = value;\n    if (value) {\n      this.renderer.addClass(document.body, 'modal-open');\n    }\n  }\n\n  get isDialog(): boolean {\n    return this._isDialog;\n  }\n\n  /** Emits when the list must close */\n  @Output() closeList = new EventEmitter();\n\n  /** The list of all facet and values related to the products in the list */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  iconTypes = ICON_TYPE;\n\n  dialogFocusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    focusOnEscape: true,\n    autofocus: 'cx-facet',\n  };\n\n  @HostListener('click') handleClick() {\n    this.close();\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef,\n    protected renderer: Renderer2\n  ) {}\n\n  /**\n   * Toggles the facet group in case it is not expanded.\n   */\n  expandFacetGroup(facet: Facet, ref: FacetComponent) {\n    if (!ref.isExpanded) {\n      this.facetService.toggle(facet, ref.isExpanded);\n    }\n  }\n\n  /**\n   * Indicates that the facet group has been expanded.\n   */\n  isExpanded(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.EXPANDED)\n      );\n  }\n\n  /**\n   * Indicates that the facet group has been collapsed.\n   */\n  isCollapsed(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.COLLAPSED)\n      );\n  }\n\n  close(event?: boolean): void {\n    this.renderer.removeClass(document.body, 'modal-open');\n    this.closeList.emit(event);\n  }\n\n  block(event?: MouseEvent) {\n    event.stopPropagation();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n} from '@angular/core';\nimport { Facet, FacetValue } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';\nimport { FacetCollapseState } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet',\n  templateUrl: './facet.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetComponent {\n  protected _facet: Facet;\n\n  state$: Observable<FacetCollapseState>;\n\n  /** configurable icon that is used to collapse the facet group  */\n  @Input() expandIcon: ICON_TYPE = ICON_TYPE.EXPAND;\n  @Input() collapseIcon: ICON_TYPE = ICON_TYPE.COLLAPSE;\n\n  @HostBinding('class.multi-select') isMultiSelect: boolean;\n\n  @ViewChildren('facetValue') values: QueryList<ElementRef<HTMLElement>>;\n\n  @ViewChild(FocusDirective) keyboardFocus: FocusDirective;\n\n  @Input()\n  set facet(value: Facet) {\n    this._facet = value;\n    this.isMultiSelect = !!value.multiSelect;\n    this.state$ = this.facetService.getState(value);\n  }\n\n  get facet(): Facet {\n    return this._facet;\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  /**\n   * Handles clicking the heading of the facet group, which means toggling\n   * the visibility of the group (collapse / expand) and optionally focusing\n   * the group.\n   */\n  toggleGroup(event: UIEvent) {\n    const host: HTMLElement = this.elementRef.nativeElement;\n    const isLocked = this.keyboardFocus?.isLocked;\n\n    this.facetService.toggle(this.facet, this.isExpanded);\n\n    if (!isLocked || this.isExpanded) {\n      host.focus();\n      // we stop propagating the event as otherwise the focus on the host will trigger\n      // an unlock event from the LockFocus directive.\n      event.stopPropagation();\n    }\n  }\n\n  get isExpanded(): boolean {\n    return this.values.first.nativeElement.offsetParent !== null;\n  }\n\n  openLink(event: KeyboardEvent) {\n    (event.target as HTMLElement).click();\n    event.preventDefault();\n  }\n\n  /**\n   * Increases the number of visible values for the facet. This is delegated\n   * to `facetService.increaseVisibleValues`.\n   */\n  increaseVisibleValues(): void {\n    this.facetService.increaseVisibleValues(this.facet);\n  }\n\n  /**\n   * Decreases the number of visible values for the facet. This is delegated\n   * to `facetService.decreaseVisibleValues`.\n   */\n  decreaseVisibleValues(): void {\n    this.facetService.decreaseVisibleValues(this.facet);\n  }\n\n  getLinkParams(value: FacetValue) {\n    return this.facetService.getLinkParams(value.query?.query.value);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/index';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { FacetComponent } from './facet.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetComponent],\n  exports: [FacetComponent],\n})\nexport class FacetModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { FacetModule } from '../facet/facet.module';\nimport { FacetListComponent } from './facet-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    FacetModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetListComponent],\n  exports: [FacetListComponent],\n})\nexport class FacetListModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n} from '@angular/core';\nimport { asapScheduler, BehaviorSubject, interval, Observable, of } from 'rxjs';\nimport { delayWhen, observeOn, switchMap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { BreakpointService } from '../../../../layout/breakpoint/breakpoint.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent {\n  iconTypes = ICON_TYPE;\n\n  /**\n   * We delay the removal of DOM so that animations can finish playing before the\n   * DOM is removed. Removing the DOM, as hidding is not enough to stop elements\n   * to be focused.\n   */\n  protected CLOSE_DELAY = 300;\n\n  /**\n   * Used to open the facet navigation in a dialog. The usage of the dialog depends\n   * on the availability of the trigger element, which is driven by CSS.\n   *\n   * The reference is also used to refocus the trigger after the dialog is closed.\n   */\n  @ViewChild('trigger') trigger: ElementRef<HTMLElement>;\n\n  protected open$ = new BehaviorSubject(false);\n\n  /**\n   * Emits the open state that indicates whether the facet list should be rendered.\n   * This is either done instantly, or after the user triggers this by using the trigger\n   * button. This driven by the visiibility of the trigger, so that the CSS drives\n   * the behaviour. This can differ per breakpoint.\n   *\n   * There's a configurable delay for the closed state, so that the DOM is not removed\n   * before some CSS animations are done.\n   */\n  isOpen$: Observable<boolean> = this.breakpointService.breakpoint$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure that the `hasTrigger`\n    // method represents the actual UI state.\n    observeOn(asapScheduler),\n    switchMap(() => (this.hasTrigger ? this.open$ : of(true))),\n    delayWhen((launched) => interval(launched ? 0 : this.CLOSE_DELAY))\n  );\n\n  /**\n   * Emits the active state that indicates whether the facet list is activated. Activation\n   * is related to the css, so that a animation or transition can visualize opening/closing\n   * the list (i.e. dialog).\n   */\n  isActive$ = this.open$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure the active class is\n    //  applied after the DOM is created\n    observeOn(asapScheduler)\n  );\n\n  constructor(protected breakpointService: BreakpointService) {}\n\n  launch() {\n    this.open$.next(true);\n  }\n\n  close() {\n    this.open$.next(false);\n    this.trigger.nativeElement.focus();\n  }\n\n  /**\n   * Indicates that the facet navigation should be open explicitely by a trigger.\n   * This is fully controlled by CSS, where the trigger button can be hidden\n   * (display:none) for certain screen sizes.\n   */\n  get hasTrigger() {\n    return this.trigger.nativeElement.offsetParent !== null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../misc/icon/icon.module';\nimport { ActiveFacetsModule } from './active-facets/active-facets.module';\nimport { FacetListModule } from './facet-list/facet-list.module';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    FacetListModule,\n    ActiveFacetsModule,\n    IconModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductFacetNavigationComponent],\n  exports: [ProductFacetNavigationComponent],\n})\nexport class ProductFacetNavigationModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter((product) => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap((product) => {\n        product.baseOptions.forEach((option) => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find((item) => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach((variant) => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          (item) => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter((variant) => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\nimport { CustomFormValidators } from '../../../../shared/index';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter((p) => !!p),\n    map((p) => p.code),\n    distinctUntilChanged(),\n    switchMap((productCode) =>\n      this.reviewService.getByProductCode(productCode)\n    ),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating: number): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.reviewForm.markAllAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [null, CustomFormValidators.starRatingEmpty],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductReviewsComponent } from './product-reviews.component';\nimport { StarRatingModule, FormErrorsModule } from '../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe((success) => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(\n          (interests) => !!interests.results && interests.results.length === 1\n        )\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap((prefs) => (this.enabledPrefs = prefs)),\n        map((prefs) => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe((error) => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe((success) => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe((text) =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      (markerIndex) => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n  StoreFinderConfig,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n  radius: number;\n  searchQuery: StoreFinderSearchQuery;\n  geolocation: GeoPoint;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    protected config: StoreFinderConfig\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe((params) =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.radius = this.config.googleMaps.radius;\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  checkoutLoginForm: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch(\n        'email',\n        'emailConfirmation'\n      ),\n    }\n  );\n  sub: Subscription;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  onSubmit() {\n    if (this.checkoutLoginForm.valid) {\n      const email = this.checkoutLoginForm.get('email').value;\n      this.activeCartService.addEmail(email);\n\n      if (!this.sub) {\n        this.sub = this.activeCartService.getAssignedUser().subscribe(() => {\n          if (this.activeCartService.isGuestCart()) {\n            this.authRedirectService.redirect();\n          }\n        });\n      }\n    } else {\n      this.checkoutLoginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\nimport { CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  loginForm: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    protected auth: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected winRef: WindowRef,\n    protected activatedRoute: ActivatedRoute,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    const routeState = this.winRef.nativeWindow?.history?.state;\n    const prefilledEmail = routeState?.['newUid'];\n\n    this.loginForm = this.fb.group({\n      userId: [\n        prefilledEmail?.length ? prefilledEmail : '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n      password: ['', Validators.required],\n    });\n\n    if (this.checkoutConfigService.isGuestCheckout()) {\n      this.loginAsGuest = this.activatedRoute?.snapshot?.queryParams?.[\n        'forced'\n      ];\n    }\n  }\n\n  submitForm(): void {\n    if (this.loginForm.valid) {\n      this.loginUser();\n    } else {\n      this.loginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  protected loginUser(): void {\n    const { userId, password } = this.loginForm.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe((data) => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap((isUserLoggedIn) => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  ProtectedRoutesService,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n/**\n * Guards the _logout_ route.\n *\n * Takes care of routing the user to a logout page (if available) or redirects to\n * the homepage. If the homepage is protected, the user is redirected\n * to the login route instead.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes: ProtectedRoutesService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap((hasPage) => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  /**\n   * Whenever there is no specific \"logout\" page configured in the CMS,\n   * we redirect after the user is logged out.\n   *\n   * The user gets redirected to the homepage, unless the homepage is protected\n   * (in case of a closed shop). We'll redirect to the login page instead.\n   */\n  protected redirect(): void {\n    const cxRoute = this.protectedRoutes.shouldProtect ? 'login' : 'home';\n    this.routing.go({ cxRoute });\n  }\n\n  /**\n   * Log user out.\n   *\n   * This is delegated to the `AuthService`.\n   */\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles, CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  registerForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    this.loading$ = this.userService.getRegisterUserResultLoading();\n    this.registerUserProcessInit();\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some((message) => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const { registerConsent } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n        return {\n          consent,\n          template: template ? template.description : '',\n        };\n      })\n    );\n\n    this.subscription.add(\n      this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submitForm(): void {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.registerForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const {\n      requiredConsents,\n      registerConsent,\n    } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    const { registerConsent } = this.anonymousConsentsConfig.anonymousConsents;\n\n    if (Boolean(this.registerForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(registerConsent);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(registerConsent);\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe((success) => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule, FormErrorsModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyCouponsModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductFacetNavigationModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductFacetNavigationModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      lg: {\n        slots: [\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n    },\n    navigation: {\n      lg: { slots: [] },\n      slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      lg: {\n        pageFold: 'UpSelling',\n      },\n\n      pageFold: 'Summary',\n\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { MediaConfig } from '../../shared/components/media/media.config';\n\nexport const mediaConfig: MediaConfig = {\n  mediaFormats: {\n    mobile: {\n      width: 400,\n    },\n    tablet: {\n      width: 770,\n    },\n    desktop: {\n      width: 1140,\n    },\n    widescreen: {\n      width: 1400,\n    },\n    // product media\n    cartIcon: {\n      width: 65,\n    },\n    thumbnail: {\n      width: 96,\n    },\n    product: {\n      width: 284,\n    },\n    zoom: {\n      width: 515,\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { MediaModule } from '../shared/components/media/media.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n    MediaModule.forRoot(),\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig, mediaConfig } from './config/index';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2cLayoutConfig),\n    provideDefaultConfig(mediaConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n"]}