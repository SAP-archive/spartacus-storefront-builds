{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/visible/visible-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/block/block-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.model.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/select-focus.util.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/keyboard-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/recipes/config/optional-layouts/plp-accessibility-layout-config.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","ICON_TYPE","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","ar","error","__spread","concat","IconResourceType","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","resources","type","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getStyleClasses","iconType","resourceType","config","find","res","types","includes","svgResource","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","IconConfig","DomSanitizer","Injectable","providedIn","IconComponent","iconLoader","elementRef","renderer","setIcon","addStyleClasses","_this","addClass","host","styleClasses","forEach","cls","removeClass","split","nativeElement","ElementRef","Renderer2","Input","Component","selector","template","IconModule","NgModule","declarations","imports","CommonModule","providers","provideDefaultConfig","provide","useExisting","Config","exports","ModalRef","_super","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","requiredConsents","isLevel13","isFeatureLevel","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","cmsComponents","component","deferLoading","DeferLoadingStrategy","INSTANT","entryComponents","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","console","warn","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","componentType","Promise","resolve","path","script","setAttribute","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","CmsConfig","Inject","args","DOCUMENT","PLATFORM_ID","CxApiService","auth","cart","checkout","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","translation","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","selectiveCartService","ngZone","AuthService","Optional","ActiveCartService","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","CmsService","PageMetaService","FeatureConfigService","GlobalMessageService","TranslationService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","RoutingService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserConsentService","UserOrderService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","SelectiveCartService","NgZone","ComponentWrapperDirective","vcr","componentMapper","injector","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","cmpRef","createComponent","undefined","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","get","element","parentElement","P","reject","fulfilled","rejected","result","then","uid","data$","getComponentData","configProviders","Injector","CmsComponentData","useValue","parent","addDynamicAttributes","properties","destroy","remove","ViewContainerRef","DynamicAttributeService","Directive","PageComponentModule","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","guards","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","state","canActivateObservables","map","guardClass","canActivate","isCanActivate","isObservable","obj","of","wrapIntoObservable","first","Error","skipWhile","endWith","BREAKPOINT","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","OutletPosition","LayoutConfig","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","window","resize$","event","getBreakpoint","innerWidth","getSize","breakpoint","breakpoints","xl","isDown","breakpoint$","br","slice","indexOf","isUp","isEqual","windowWidth","getClosest","nativeWindow","PAGE_LAYOUT_HANDLER","InjectionToken","PageLayoutService","breakpointService","handlers","warnLogMessages","logSlots","getSlots","section","page$","page","pageTemplate","slots","resolveSlots","switchMap","_c","_d","handle","a","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","keys","filter","slot","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","isDevMode","info","join","cacheKey","PageLayoutComponent","el","pageLayoutService","section$","BehaviorSubject","templateName$","layoutName$","name","styleClass","slots$","pageFoldSlot$","templateName","currentClass","changeDetection","ChangeDetectionStrategy","OnPush","CmsRoutesService","router","cmsRouteExist","isCmsDrivenRoute","startsWith","routePath","substr","data","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","children","resetConfig","Router","CmsPageGuard","routingService","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","protectedRoutesGuard","getCmsPage","getNextPageContext","getPage","withLatestFrom","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","index","guardName","SemanticPathService","ProtectedRoutesGuard","OutletService","templatesRefs","Map","templatesRefsBefore","templatesRefsAfter","outlet","templateOrFactory","position","REPLACE","BEFORE","store","AFTER","stacked","templateRef","newValue","set","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","IntersectionService","isIntersected","intersects","Observable","observer","rootMargin","getRootMargin","intersectionObserver","IntersectionObserver","entries","observe","disconnect","flatMap","entry","isIntersecting","layoutConfig","deferredLoading","intersectionMargin","DeferLoaderService","intersectionService","globalLoadStrategy","strategy","load","shouldLoadInstantly","elementLoadingStrategy","DEFER","OutletDirective","deferLoaderService","loaded","EventEmitter","subscription","initializeOutlet","clear","cxOutletDefer","render","ngOnChanges","changes","cxOutlet","emit","hostElement","getHostElement","renderOutlet","isArray","tmplOrFactory","ComponentFactory","createEmbeddedView","$implicit","cxOutletContext","markForCheck","HTMLElement","Output","OutletModule","PageSlotComponent","isPending","hasComponents","isPageFold","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","pendingComponentCount","isLoaded","loadState","getComponentDeferOptions","getDeferLoadingStrategy","HostBinding","PageSlotModule","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","globalMessageService","canPrompt","canPrompt$","asObservable","init","addEventListener","preventDefault","deferredEvent","enableAddToHomeScreen","GlobalMessageType","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","useFactory","deps","APP_INITIALIZER","multi","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","paths","notFound","login","protected","forgotPassword","resetPassword","logout","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","productCode","termsAndConditions","orders","orderDetails","orderCode","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","coupons","couponClaim","couponCode","defaultRoutingConfig","RoutingModule","forRoot","ngModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","title","description","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","htmlLangProvider","setHtmlLangAttribute","languageService","getActive","lang","documentElement","JsonLdScriptFactory","rendererFactory","build","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","createRenderer","JSON","stringify","_key","SecurityContext","HTML","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","item","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","code","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","stock","stockLevelStatus","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","rev","rating","reviewCount","comment","reviewSchema","principal","author","date","Date","datePublished","getFullYear","getMonth","getDate","headline","reviewRating","toString","CurrentProductService","productService","DEFAULT_PRODUCT_SCOPE","ProductScope","DETAILS","getProduct","scopes","getRouterState","params","x","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","AsmComponentService","authService","asmAuthService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","go","cxRoute","isCustomerEmulationSessionInProgress","mergeMap","userToken","unload","localStorage","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","disabled","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","password","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","encapsulation","ViewEncapsulation","None","AsmEnablerService","isUiAdded","isEnabled","addUi","isLaunched","isUsedBefore","setItem","getItem","Location","AsmLoaderModule","asmFactory","asmEnablerService","PaginationItemType","PaginationNavigationPosition","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","Math","floor","seconds","Pipe","FormUtils","isNotValidField","form","formControlName","submitted","control","invalid","touched","dirty","CSAgentLoginFormComponent","fb","submitClicked","csAgentTokenLoading","submitEvent","group","Validators","required","onSubmit","controls","isNotValid","FormBuilder","CustomerEmulationComponent","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","valueChanges","debounceTime","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","query","pageSize","maxResults","selectCustomerFromList","setValue","onDocumentClick","resultList","contains","closeResults","AsmService","ViewChild","(document:click)","AsmModule","ReactiveFormsModule","AsmCoreModule","OrderDetailsService","userOrderService","orderCode$","routingData","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","consumedEntries","e_2","consumedEntry","isConsumedByEntry","consumedEntryNumber","orderEntryNumber","entryNumber","AddedToCartDialogComponent","cartService","promotionService","quantity","modalIsOpen","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","startWith","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","increment","addToCartForm","cartEntry$","getEntry","setStockInfo","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","getLoaded","BaseFocusService","BaseFocusDirective","service","defaultConfig","setDefaultConfiguration","requiredTabindex","tabindex","requiresExplicitTabIndex","tagName","toLowerCase","hasAttribute","VisibleFocusDirective","disableMouseFocus","mouseFocus","handleMousedown","shouldFocusVisible","handleKeydown","HostListener","BlockFocusDirective","block","PersistFocusService","focus","getPersistenceGroup","getAttribute","PersistFocusDirective","handleFocus","stopPropagation","attr","ngAfterViewInit","isPersisted","preventScroll","SelectFocusUtility","focusableSelectors","focusableSelectorSuffix","querySelectorAll","findFirstFocusable","autofocus","findFocusable","locked","suffix","EscapeFocusService","selectFocusUtil","shouldFocus","focusOnEscape","handleEscape","focusOnDoubleEscape","EscapeFocusDirective","esc","AutoFocusService","hasPersistedFocus","getPersisted","focussed","AutoFocusDirective","shouldAutofocus","firstFocusable","TabFocusService","moveTab","tab","findNextScrollable","findNext","active","getActiveChild","virtualSlideCount","round","scrollWidth","clientWidth","nextVirtualSlide","offsetLeft","getChildren","childs","activeIndex","findIndex","persisted","isActive","child","activeElement","TabFocusDirective","handleNextTab","handlePreviousTab","TrapFocusService","hasFocusableChildren","moveFocus","focusable","getTrapStart","trap","getTrapEnd","TrapFocusDirective","handleTrapDown","handleTrapUp","LockFocusService","LockFocusDirective","lock","unlock","handleEnter","shouldLock","unlockFocus","handleClick","isLocked","lockFocus","addTabindexToChildren","ngAfterContentInit","shouldUnlockAfterAutofocus","setTimeout","KeyboardFocusService","FocusDirective","directives","KeyboardFocusModule","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","delete","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","CarouselComponent","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","MediaService","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","getHighestAvailableFormat","mediaFormat_1","mediaFormats","altText","reduce","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","isInitialized","isLoading","isMissing","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","ItemCounterComponent","min","allowZero","readonly","input","markAsDirty","decrement","getControl","_control$","getValidCount","emitEvent","max","ItemCounterModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","test","GenericLinkModule","defaultPaginationConfig","pagination","addStart","addEnd","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","number","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","minStart","maxStart","PaginationConfig","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","isInactive","getQueryParams","queryParams","snapshot","queryParam","defaultPage","pageChange","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","FormsModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","isQualtricsConfigured","initialize","setup","fromEvent","qualtricsScript","defer","idScript","qualtrics","projectId","qsi","isDataLoaded","dataLoaded","API","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getLabel","setActive","getInjectedService","nativeName","symbol","isocode","ContextServiceMap","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","StarRatingComponent","change","initialRate","setRate","force","saveRate","setRateOnEvent","StarRatingModule","ViewConfigModule","ViewConfigModule_1","view","ViewConfig","CustomFormValidators","emailDomainValidator","match","InvalidEmail","emailValidator","EMAIL_PATTERN","passwordValidator","PASSWORD_PATTERN","InvalidPassword","matchPassword","NotEqual","titleScores","mr","mrs","miss","ms","dr","sortTitles","title1","title2","DeliveryModePreferences","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","sort","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","isLevel","getCustomerCoupons","customerCoupons","cartId","OCC_USER_ID_ANONYMOUS","guid","getApplicableCustomerCoupons","cartIsLoading$","resetAddVoucherProcessingState","getAddVoucherResultSuccess","success","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","valid","addVoucher","markAsTouched","applyCustomerCoupon","blur","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","isSaveForLaterEnabled","every","consignmentEntry","orderEntry","updateable","removeEntry","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","cartLoaded$","isUserLoggedIn","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","isEmpty","totalItems","CartPageLayoutHandler","getCart","selectiveCart","CartTotalsComponent","CartTotalsModule","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","features","CartComponentModule","CartModule","CheckoutStepType","CheckoutConfig","SkipLinkScrollPosition","defaultCheckoutConfig","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","selectedCountry$","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","goBack","closeForm","payment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","year","j","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","catch","verifyAddress","paymentDetails","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","msg","field","cardLabels","img","actions","header","goNext","goPrevious","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","SkipLinkService","keyboardFocusService","skipLinks$","getSkipLinks","found","skipLinks","skipLink","existing","getSkipLinkIndexInArray","i18nKey","scrollToTarget","hasTabindex","removeAttribute","previous","this_1","SkipLinkConfig","SkipLinkComponent","skipLinkService","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","SkipLinkModule","ConfigModule","withConfig","skipLinkFactory","AmendOrderType","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","LayoutModule","ConsentManagementFormComponent","consentGiven","isAnonymousConsentsEnabled","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","isFeatureEnabled","ANONYMOUS_CONSENTS_FEATURE","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","keyboardFocusConfig","navigateSubscription","val","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","distinctUntilKeyChanged","select","tabNum","routeState","history","getTitleParams","tabComps","comp","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","AmendOrderActionsModule","ValidateQuantity","q","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","activeTab","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","paymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","validator","isPasswordReset","ac","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","getLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","observeOn","asyncScheduler","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","node","populateLink","itemType","linkName","getLink","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","matches","wrapper","querySelector","navBar","removeStyle","offsetWidth","setStyle","navs","childNodes","isTabbable","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","classList","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","replace","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","scrollIntoView","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","ProductDetailOutlets","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","ProductFacetNavigationComponent","collapsedFacets","showAllPerFacetMap","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","visible","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","topValueCount","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","property","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductRefinementComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","markFormAsTouched","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","viewStore","prepareRouteUrl","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","emailConfirmation","emailsMatch","isEmailConfirmInvalid","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","prefillForm","submitLogin","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","isNewRegisterFlowEnabled","isAnonymousConsentEnabled","userRegistrationForm","newsletter","isConsentRequired","termsandconditions","requiredTrue","getRegisterUserResultLoading","registerUserProcessInit","getRegisterUserResultSuccess","collectDataFromRegisterForm","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","formData","onRegisterUserSuccess","resetRegisterUserProcessState","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","StorefrontFoundationModule","StateModule","AuthModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","provideConfig","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory"],"mappings":";;;;;;;;;;;;;;oFAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAG5E,IC7BKK,ED6BDC,EAAW,WAQlB,OAPAA,EAAWb,OAAOc,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIb,KADTY,EAAIG,UAAUF,GACOjB,OAAOU,UAAUL,eAAegB,KAAKL,EAAGZ,KAAIW,EAAEX,GAAKY,EAAEZ,IAE9E,OAAOW,IAEKO,MAAMd,KAAMW,YAezB,SAASI,EAAWC,EAAYC,EAAQC,EAAKC,GAChD,IAA2H7B,EAAvH8B,EAAIT,UAAUC,OAAQS,EAAID,EAAI,EAAIH,EAAkB,OAATE,EAAgBA,EAAO3B,OAAO8B,yBAAyBL,EAAQC,GAAOC,EACrH,GAAuB,iBAAZI,SAAoD,mBAArBA,QAAQC,SAAyBH,EAAIE,QAAQC,SAASR,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAIV,EAAIO,EAAWJ,OAAS,EAAGH,GAAK,EAAGA,KAASnB,EAAI0B,EAAWP,MAAIY,GAAKD,EAAI,EAAI9B,EAAE+B,GAAKD,EAAI,EAAI9B,EAAE2B,EAAQC,EAAKG,GAAK/B,EAAE2B,EAAQC,KAASG,GAChJ,OAAOD,EAAI,GAAKC,GAAK7B,OAAOiC,eAAeR,EAAQC,EAAKG,GAAIA,EAGzD,SAASK,EAAQC,EAAYC,GAChC,OAAO,SAAUX,EAAQC,GAAOU,EAAUX,EAAQC,EAAKS,IAgBpD,SAASE,EAAYC,EAASC,GACjC,IAAsGC,EAAGC,EAAG1B,EAAG2B,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAP9B,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAO+B,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAEM,KAAMC,EAAK,GAAIC,MAASD,EAAK,GAAIE,OAAUF,EAAK,IAAwB,mBAAXG,SAA0BV,EAAEU,OAAOC,UAAY,WAAa,OAAO7C,OAAUkC,EACvJ,SAASO,EAAK/B,GAAK,OAAO,SAAUoC,GAAK,OACzC,SAAcC,GACV,GAAIf,EAAG,MAAM,IAAIgB,UAAU,mCAC3B,KAAOb,GAAG,IACN,GAAIH,EAAI,EAAGC,IAAM1B,EAAY,EAARwC,EAAG,GAASd,EAAU,OAAIc,EAAG,GAAKd,EAAS,SAAO1B,EAAI0B,EAAU,SAAM1B,EAAEM,KAAKoB,GAAI,GAAKA,EAAEO,SAAWjC,EAAIA,EAAEM,KAAKoB,EAAGc,EAAG,KAAKE,KAAM,OAAO1C,EAE3J,OADI0B,EAAI,EAAG1B,IAAGwC,EAAK,CAAS,EAARA,EAAG,GAAQxC,EAAE2C,QACzBH,EAAG,IACP,KAAK,EAAG,KAAK,EAAGxC,EAAIwC,EAAI,MACxB,KAAK,EAAc,OAAXZ,EAAEC,QAAgB,CAAEc,MAAOH,EAAG,GAAIE,MAAM,GAChD,KAAK,EAAGd,EAAEC,QAASH,EAAIc,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKZ,EAAEI,IAAIY,MAAOhB,EAAEG,KAAKa,MAAO,SACxC,QACI,KAAkB5C,GAAZA,EAAI4B,EAAEG,MAAY1B,OAAS,GAAKL,EAAEA,EAAEK,OAAS,MAAkB,IAAVmC,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEZ,EAAI,EAAG,SACjG,GAAc,IAAVY,EAAG,MAAcxC,GAAMwC,EAAG,GAAKxC,EAAE,IAAMwC,EAAG,GAAKxC,EAAE,IAAM,CAAE4B,EAAEC,MAAQW,EAAG,GAAI,MAC9E,GAAc,IAAVA,EAAG,IAAYZ,EAAEC,MAAQ7B,EAAE,GAAI,CAAE4B,EAAEC,MAAQ7B,EAAE,GAAIA,EAAIwC,EAAI,MAC7D,GAAIxC,GAAK4B,EAAEC,MAAQ7B,EAAE,GAAI,CAAE4B,EAAEC,MAAQ7B,EAAE,GAAI4B,EAAEI,IAAIa,KAAKL,GAAK,MACvDxC,EAAE,IAAI4B,EAAEI,IAAIY,MAChBhB,EAAEG,KAAKa,MAAO,SAEtBJ,EAAKhB,EAAKlB,KAAKiB,EAASK,GAC1B,MAAOkB,GAAKN,EAAK,CAAC,EAAGM,GAAIpB,EAAI,EAAI,QAAWD,EAAIzB,EAAI,EACtD,GAAY,EAARwC,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAEG,MAAOH,EAAG,GAAKA,EAAG,QAAK,EAAQE,MAAM,GArB9BK,CAAK,CAAC5C,EAAGoC,MA6BtD,SAASS,EAASC,GACrB,IAAIC,EAAsB,mBAAXb,QAAyBY,EAAEZ,OAAOC,UAAWpC,EAAI,EAChE,OAAIgD,EAAUA,EAAE5C,KAAK2C,GACd,CACHhB,KAAM,WAEF,OADIgB,GAAK/C,GAAK+C,EAAE5C,SAAQ4C,OAAI,GACrB,CAAEN,MAAOM,GAAKA,EAAE/C,KAAMwC,MAAOO,KAKzC,SAASE,EAAOF,EAAG9C,GACtB,IAAI+C,EAAsB,mBAAXb,QAAyBY,EAAEZ,OAAOC,UACjD,IAAKY,EAAG,OAAOD,EACf,IAAmBnC,EAAYgC,EAA3B5C,EAAIgD,EAAE5C,KAAK2C,GAAOG,EAAK,GAC3B,IACI,WAAc,IAANjD,GAAgBA,KAAM,MAAQW,EAAIZ,EAAE+B,QAAQS,MAAMU,EAAGP,KAAK/B,EAAE6B,OAExE,MAAOU,GAASP,EAAI,CAAEO,MAAOA,GACjC,QACQ,IACQvC,IAAMA,EAAE4B,OAASQ,EAAIhD,EAAU,SAAIgD,EAAE5C,KAAKJ,GAE1D,QAAkB,GAAI4C,EAAG,MAAMA,EAAEO,OAE7B,OAAOD,EAGJ,SAASE,IACZ,IAAK,IAAIF,EAAK,GAAIlD,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3CkD,EAAKA,EAAGG,OAAOJ,EAAO/C,UAAUF,KACpC,OAAOkD,GC3ICvD,EAAAA,EAAAA,YAAAA,EAAAA,UAAS,KACnB,KAAA,OACAA,EAAA,OAAA,SACAA,EAAA,KAAA,OACAA,EAAA,KAAA,OACAA,EAAA,KAAA,OACAA,EAAA,KAAA,OACAA,EAAA,WAAA,aACAA,EAAA,WAAA,aACAA,EAAA,YAAA,cACAA,EAAA,MAAA,QACAA,EAAA,MAAA,QACAA,EAAA,QAAA,UACAA,EAAA,QAAA,UACAA,EAAA,KAAA,OACAA,EAAA,YAAA,cACAA,EAAA,KAAA,OACAA,EAAA,YAAA,cACAA,EAAA,YAAA,cACAA,EAAA,OAAA,SACAA,EAAA,SAAA,WACAA,EAAA,MAAA,QACAA,EAAA,OAAA,SACAA,EAAA,MAAA,QACAA,EAAA,YAAA,kBA0CU2D,IAvCZ,cAuCYA,EAAAA,EAAAA,mBAAAA,EAAAA,iBAAgB,KAK1B,IAAA,MAKAA,EAAA,KAAA,OAKAA,EAAA,KAAA,WC/EWC,EAAoC,CAC/CC,KAAM,CACJC,QAAS,CACPC,OAAQ,gBACRC,KAAM,uBACNC,KAAM,qBACNC,KAAM,cACNC,KAAM,kBACNC,KAAM,cACNC,WAAY,oBACZC,YAAa,qBACbC,WAAY,oBACZC,MAAO,4BACPC,QAAS,8BACTC,QAAS,sBACTC,MAAO,eACPC,KAAM,iBACNC,YAAa,uBACbC,KAAM,iBACNC,YAAa,wBACbC,YAAa,qBACbC,SAAU,eACVC,OAAQ,cACRC,MAAO,sBACPC,OAAQ,gBACRC,MAAO,eACPC,YAAa,gBAEfC,UAAW,CACT,CACEC,KAAM7B,EAAAA,iBAAiB8B,KACvBC,IAAK,2ECjBX,SAAAC,EACYC,EACAC,EACAC,GAFAlG,KAAAgG,OAAAA,EACAhG,KAAAiG,WAAAA,EACAjG,KAAAkG,UAAAA,EAJJlG,KAAAmG,gBAAkB,UAU1BJ,EAAA7F,UAAAkG,QAAA,SAAQR,GACN,OAAI5F,KAAKqG,eAAeT,EAAM7B,EAAAA,iBAAiBuC,KACtCtG,KAAKkG,UAAUK,wBACpB,yBAAyBvG,KAAKwG,WAAWZ,GAAK,kBAG9C5F,KAAKqG,eAAeT,EAAM7B,EAAAA,iBAAiB0C,MACtCzG,KAAKkG,UAAUK,wBAAwBvG,KAAK0G,UAAUd,SAD/D,GASFG,EAAA7F,UAAAyG,gBAAA,SAAgBC,GACd,OAAO5G,KAAK0G,UAAUE,IAAa,IAO7Bb,EAAA7F,UAAAmG,eAAR,SACEO,EACAC,GAEA,OACE7G,KAAK8G,OAAOnB,aACV3F,KAAK8G,OAAOnB,UAAUoB,MACtB,SAAAC,GACE,OAAAA,EAAIC,OAASD,EAAIpB,OAASiB,GAAgBG,EAAIC,MAAMC,SAASN,OAW7Db,EAAA7F,UAAAsG,WAAR,SAAmBI,GACjB,IAAMO,EAAcnH,KAAK8G,OAAOnB,UAAUoB,MACxC,SAAAC,GACE,OAAAA,EAAIpB,OAAS7B,EAAAA,iBAAiBuC,KAC9BU,EAAIC,OACJD,EAAIC,MAAMC,SAASN,MAEvB,GAAIO,EACF,OAAOA,EAAYrB,IACZqB,EAAYrB,IAAG,IAAI9F,KAAK0G,UAAUE,GACrC,IAAI5G,KAAK0G,UAAUE,IAY3Bb,EAAA7F,UAAAkH,gBAAA,SAAgBR,GACd,IAAMS,EAA+BrH,KAAKsH,aACxCV,EACA7C,EAAAA,iBAAiB8B,MAEnB,GACEwB,GACAA,EAASvB,MACR9F,KAAKmG,gBAAgBe,SAASG,EAASvB,KACxC,CACA9F,KAAKmG,gBAAgB/C,KAAKiE,EAASvB,KACnC,IAAMyB,EAAOvH,KAAKgG,OAAOwB,SAASC,qBAAqB,QAAQ,GACzDC,EAAO1H,KAAKgG,OAAOwB,SAASG,cAAc,QAChDD,EAAKE,IAAM,aACXF,EAAK9B,KAAO,WACZ8B,EAAKG,KAAOR,EAASvB,IACrByB,EAAKO,YAAYJ,KAIb3B,EAAA7F,UAAAoH,aAAR,SACEV,EACAC,GAEA,GAAK7G,KAAK8G,OAAOnB,UAAjB,CAIA,IAAI0B,EAAWrH,KAAK8G,OAAOnB,UAAUoB,MACnC,SAAAC,GACE,OAAAA,EAAIpB,OAASiB,GAAgBG,EAAIC,OAASD,EAAIC,MAAMC,SAASN,MAQjE,OALKS,IACHA,EAAWrH,KAAK8G,OAAOnB,UAAUoB,MAC/B,SAAAC,GAAO,OAACA,EAAIpB,OAASiB,IAAiBG,EAAIC,OAAUD,EAAIC,QAAU,OAG/DI,IAGTtB,EAAA7F,UAAAwG,UAAA,SAAUE,GACR,GAAI5G,KAAK8G,QAAU9G,KAAK8G,OAAO5C,SAAWlE,KAAK8G,OAAO5C,QAAQ0C,GAC5D,OAAO5G,KAAK8G,OAAO5C,QAAQ0C,IAI/BpH,OAAAiC,eAAYsE,EAAA7F,UAAA,SAAM,KAAlB,WACE,OAAOF,KAAKiG,WAAWhC,+EAxHL8D,EAAAA,iBACIC,SACDC,EAAAA,yLALZlC,EAAiBhF,EAAA,CAH7BmH,EAAAA,WAAW,CACVC,WAAY,UAEDpC,MCebqC,EAAA,WA4BE,SAAAA,EACYC,EACAC,EACAC,GAFAvI,KAAAqI,WAAAA,EACArI,KAAAsI,WAAAA,EACAtI,KAAAuI,SAAAA,EAoCd,OA9DW/I,OAAAiC,eAAI2G,EAAAlI,UAAA,SAAM,KAAV,SAAW0F,GAClB5F,KAAKwI,QAAQ5C,oCAONpG,OAAAiC,eAAI2G,EAAAlI,UAAA,OAAI,KAAR,SAAS0F,GAChB5F,KAAKwI,QAAQ5C,oCAoBLwC,EAAAlI,UAAAsI,QAAV,SAAkB5C,GACXA,GAAyB,KAATA,IAGrB5F,KAAKiE,KAAOjE,KAAKqI,WAAWjC,QAAQR,GACpC5F,KAAKyI,gBAAgB7C,GACrB5F,KAAKqI,WAAWjB,gBAAgBxB,KAMxBwC,EAAAlI,UAAAuI,gBAAV,SAA0B7C,GAA1B,IAAA8C,EAAA1I,KACEA,KAAKuI,SAASI,SAAS3I,KAAK4I,KAAM,WAE9B5I,KAAK6I,cACP7I,KAAK6I,aAAaC,SAAQ,SAAAC,GACxB,OAAAL,EAAKH,SAASS,YAAYN,EAAKE,KAAMG,MAIzC/I,KAAK6I,aAAe7I,KAAKqI,WAAW1B,gBAAgBf,GAAMqD,MAAM,KAEhEjJ,KAAK6I,aAAaC,SAAQ,SAAAC,GACZ,KAARA,GACFL,EAAKH,SAASI,SAASD,EAAKE,KAAMG,OAKxCvJ,OAAAiC,eAAc2G,EAAAlI,UAAA,OAAI,KAAlB,WACE,OAAOF,KAAKsI,WAAWY,wFApCDnD,SACAoD,EAAAA,kBACFC,EAAAA,aA1BbrI,EAAA,CAARsI,EAAAA,oCAQQtI,EAAA,CAARsI,EAAAA,kCAbUjB,EAAarH,EAAA,CAJzBuI,EAAAA,UAAU,CACTC,SAAU,mBACVC,SAAA,2DAEWpB,GAAb,gBCbA,SAAAqB,KAAyB,OAAZA,EAAU1I,EAAA,CATtB2I,EAAAA,SAAS,CACRC,aAAc,CAACvB,GACfwB,QAAS,CAACC,EAAAA,cACVC,UAAW,CACTC,EAAAA,qBAAqB/F,GACrB,CAAEgG,QAAShC,EAAYiC,YAAaC,EAAAA,SAEtCC,QAAS,CAAC/B,MAECqB,MCTbW,EAAA,SAAAC,GAAA,SAAAD,mDAA2C,OAAbtK,EAAAsK,EAAAC,GAAaD,EAA3C,CAA8BE,EAAAA,aCI9BC,EAAA,WAEE,SAAAA,EAAoBC,GAAAxK,KAAAwK,gBAAAA,EADZxK,KAAAyK,OAAqB,UAG7BF,EAAArK,UAAAwK,KAAA,SAAKC,EAAcC,GACjB,IAAIC,EAKJ,OAHAA,EAAc7K,KAAKwK,gBAAgBE,KAAKC,EAASC,GACjD5K,KAAKyK,OAAOrH,KAAKyH,GAEVA,GAGTN,EAAArK,UAAA4K,eAAA,WACE,IAAMC,EAAQ/K,KAAKyK,OAAOzK,KAAKyK,OAAO7J,OAAS,GAC/C,OAAOmK,GAAgB,MAGzBR,EAAArK,UAAA8K,mBAAA,SAAmBC,GACjB,IAAMF,EAAkB/K,KAAK8K,iBAEzBC,IACFA,EAAMG,QAAQD,GACdjL,KAAKyK,OAAOtH,QAIhBoH,EAAArK,UAAAiL,iBAAA,SAAiBF,GACf,IAAMF,EAAkB/K,KAAK8K,iBAEzBC,IACFA,EAAMK,MAAMH,GACZjL,KAAKyK,OAAOtH,iDA9BqBkI,EAAAA,qIAF1Bd,EAAYxJ,EAAA,CAHxBmH,EAAAA,WAAW,CACVC,WAAY,UAEDoC,GAAb,gBCoBE,SAAAe,EACUxE,EACAyE,EACAC,GAFAxL,KAAA8G,OAAAA,EACA9G,KAAAuL,aAAAA,EACAvL,KAAAwL,yBAAAA,EAhBFxL,KAAAyL,cAAgB,IAAIC,EAAAA,aAE5B1L,KAAA2L,sBAAuB,EACvB3L,KAAA4L,UAAYxL,EAAAA,UACZJ,KAAA6L,iBAA6B,GAO7B7L,KAAA8L,UAAYC,EAAAA,eAAe/L,KAAK8G,OAAQ,OAOlCkF,QAAQhM,KAAK8G,OAAOmF,qBACtBjM,KAAK2L,qBAAuB3L,KAAK8G,OAAOmF,kBAAkBC,6BACtDF,QAAQhM,KAAK8G,OAAOmF,kBAAkBJ,oBACxC7L,KAAK6L,iBAAmB7L,KAAK8G,OAAOmF,kBAAkBJ,mBAuG9D,OAlGEP,EAAApL,UAAAiM,SAAA,WACEnM,KAAKoM,WAAapM,KAAKwL,yBAAyBa,eAChDrM,KAAKsM,UAAYtM,KAAKwL,yBAAyBe,cAC/CvM,KAAKwM,SAAWxM,KAAKwL,yBAAyBiB,2BAGhDnB,EAAApL,UAAAwM,WAAA,SAAWzB,GACTjL,KAAKuL,aAAaJ,iBAAiBF,IAGrCK,EAAApL,UAAAyM,UAAA,WAAA,IAAAjE,EAAA1I,KACEA,KAAKyL,cAAcmB,IACjBC,EAAAA,cAAc,CAAC7M,KAAKoM,WAAYpM,KAAKsM,YAClCQ,KACCC,EAAAA,KAAK,GACLC,EAAAA,uBACAC,EAAAA,KAAI,SAACC,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACE,EAAAD,EAAA,GAAWE,EAAAF,EAAA,GACf,OAAAC,EAAUtE,SAAQ,SAAAU,GAChB,IAAM8D,EAAU5E,EAAK6E,wBAAwB/D,EAAU6D,GACvD,GAAI3E,EAAK8C,yBAAyBgC,eAAeF,GAAU,CACzD,GAAI5E,EAAK+E,kBAAkBjE,GACzB,OAGFd,EAAK8C,yBAAyBkC,gBAAgBlE,EAASmE,YAK9DC,aAEL5N,KAAK0M,WAAW,cAGlBpB,EAAApL,UAAA2N,SAAA,WAAA,IAAAnF,EAAA1I,KACEA,KAAKyL,cAAcmB,IACjBC,EAAAA,cAAc,CAAC7M,KAAKoM,WAAYpM,KAAKsM,YAClCQ,KACCC,EAAAA,KAAK,GACLC,EAAAA,uBACAC,EAAAA,KAAI,SAACC,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACE,EAAAD,EAAA,GAAWE,EAAAF,EAAA,GACf,OAAAC,EAAUtE,SAAQ,SAAAU,GAChB,IAAM8D,EAAU5E,EAAK6E,wBAAwB/D,EAAU6D,GACvD,GACGC,GAAmC,MAAxBA,EAAQQ,cACpBpF,EAAK8C,yBAAyBuC,mBAAmBT,GACjD,CACA,GAAI5E,EAAK+E,kBAAkBjE,GACzB,OAGFd,EAAK8C,yBAAyBwC,YAAYxE,EAASmE,YAK1DC,aAEL5N,KAAK0M,WAAW,aAGVpB,EAAApL,UAAAuN,kBAAR,SAA0BjE,GACxB,OACEwC,QAAQhM,KAAK8G,OAAOmF,oBACpBD,QAAQhM,KAAK8G,OAAOmF,kBAAkBJ,mBACtC7L,KAAK8G,OAAOmF,kBAAkBJ,iBAAiB3E,SAASsC,EAASmE,KAIrErC,EAAApL,UAAA+N,gBAAA,SAAgBf,OACdgB,EAAAhB,EAAAgB,MACA1E,EAAA0D,EAAA1D,SAKI0E,EACFlO,KAAKwL,yBAAyBwC,YAAYxE,EAASmE,IAEnD3N,KAAKwL,yBAAyBkC,gBAAgBlE,EAASmE,KAI3DrC,EAAApL,UAAAqN,wBAAA,SACE/D,EACA6D,gBAAA,IAAAA,IAAAA,EAAA,QAEA,IAAsB,IAAAc,EAAA5K,EAAA8J,GAAQe,EAAAD,EAAA3L,QAAA4L,EAAAnL,KAAAmL,EAAAD,EAAA3L,OAAE,CAA3B,IAAM8K,EAAOc,EAAAlL,MAChB,GAAIsG,EAASmE,KAAOL,EAAQe,aAC1B,OAAOf,oGAGX,OAAO,MAGThC,EAAApL,UAAAoO,YAAA,WACEtO,KAAKyL,cAAc8C,wDA5GHC,EAAAA,+BACMjE,SACYkE,EAAAA,4BAjBzBnD,EAA+BvK,EAAA,CAJ3CuI,EAAAA,UAAU,CACTC,SAAU,8BACVC,SAAA,0qEAEW8B,mBCCX,SAAAoD,EACUnD,EACAC,GADAxL,KAAAuL,aAAAA,EACAvL,KAAAwL,yBAAAA,EARFxL,KAAAyL,cAAgB,IAAIC,EAAAA,aAE5B1L,KAAA2O,eAEI3O,KAAKwL,yBAAyBoD,kBA+BpC,OAxBEF,EAAAxO,UAAA2O,YAAA,WACE7O,KAAK8O,aACL9O,KAAKuL,aAAab,KAAKY,EAAiC,CACtDyD,UAAU,EACVC,KAAM,QAIVN,EAAAxO,UAAA2N,SAAA,WAAA,IAAAnF,EAAA1I,KACEA,KAAKyL,cAAcmB,IACjB5M,KAAKwL,yBACFyD,kBACAnC,KAAKG,EAAAA,KAAI,SAAA9K,GAAK,OAAAuG,EAAKoG,iBACnBlB,cAIPc,EAAAxO,UAAA4O,WAAA,WACE9O,KAAKwL,yBAAyB0D,uBAAsB,IAGtDR,EAAAxO,UAAAoO,YAAA,WACEtO,KAAKyL,cAAc8C,wDA1BGhE,SACYkE,EAAAA,4BATzBC,EAAyC3N,EAAA,CAJrDuI,EAAAA,UAAU,CACTC,SAAU,yCACVC,SAAA,8/BAEWkF,mBCFX,SAAAS,EAAsB5D,GAAAvL,KAAAuL,aAAAA,EAQxB,OANE4D,EAAAjP,UAAAkP,WAAA,WACEpP,KAAKuL,aAAab,KAAKY,EAAiC,CACtDyD,UAAU,EACVC,KAAM,iDAL0BzE,KADzB4E,EAAmCpO,EAAA,CAJ/CuI,EAAAA,UAAU,CACTC,SAAU,mCACVC,SAAA,gLAEW2F,mBCgCb,SAAAE,KAAqD,OAAxCA,EAAsCtO,EAAA,CA5BlD2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcyF,EAAAA,WAAYC,EAAAA,sBACpCzF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbd,0CAA2C,CACzCe,UAAWf,EACXgB,aAAcC,EAAAA,qBAAqBC,SAErCT,oCAAqC,CACnCM,UAAWN,OAKnBxF,aAAc,CACZ+E,EACAS,GAEFhF,QAAS,CACPuE,EACAS,GAEFU,gBAAiB,CACfnB,EACAS,MAGSE,QCrCb,0BCaE,SAAAS,EACYC,EACAjJ,EACkBU,EACGwI,GAHrBhQ,KAAA+P,yBAAAA,EACA/P,KAAA8G,OAAAA,EACkB9G,KAAAwH,SAAAA,EACGxH,KAAAgQ,SAAAA,EARjChQ,KAAAiQ,kBAA8B,GAEtBjQ,KAAAkQ,oBAA+C,UA6B7CJ,EAAA5P,UAAAiQ,aAAV,SAAuBC,GACrB,IAAMC,EAAkBrQ,KAAK8G,OAAO0I,cAAcY,GAUlD,OATKC,GACErQ,KAAKiQ,kBAAkB/I,SAASkJ,KACnCpQ,KAAKiQ,kBAAkB7M,KAAKgN,GAC5BE,QAAQC,KACN,iEAAiEH,EAAQ,OACzE,uEAICC,EAAkBA,EAAgBZ,UAAY,MAGvDK,EAAA5P,UAAAsQ,0BAAA,SAA0BJ,GACxB,IAAMX,EAAYzP,KAAKmQ,aAAaC,GACpC,IAAKX,EACH,OAAO,KAET,IAAMgB,EAAUzQ,KAAK+P,yBAAyBW,wBAC5CjB,GAGF,OAAKgB,IACHH,QAAQC,KACN,0DAA0DH,EAAQ,OAClE,iFAEK,OAKXN,EAAA5P,UAAAyQ,eAAA,SAAeP,GACb,IAAMX,EAAYzP,KAAKmQ,aAAaC,GACpC,MAA4B,iBAAdX,IAA2BA,GAAa,IAAIvI,SAAS,MAGrE4I,EAAA5P,UAAA0Q,iBAAA,SACEC,EACAtI,GAFF,IAAAG,EAAA1I,KAIE,OAAO,IAAI8Q,SAAQ,SAAAC,GACX,IAAA7D,EAAAxJ,EAAAgF,EAAAyH,aAAAU,GAAA5H,MAAA,KAAA,GAAC+H,EAAA9D,EAAA,GAAM3D,EAAA2D,EAAA,GAET+D,EAASvI,EAAKwH,oBAAoBc,GAkBtC,GAhBKC,IACCD,GACFC,EAAS1I,EAASZ,cAAc,UAChCe,EAAKwH,oBAAoBc,GAAQC,EACjCA,EAAOC,aAAa,MAAOF,GAC3BzI,EAAST,YAAYY,EAAKlB,SAASzF,KAAMkP,GACrCE,EAAAA,kBAAkBzI,EAAKsH,YACzBiB,EAAOG,OAAS,WACdH,EAAOG,OAAS,QAIpBH,EAAS,IAITA,EAAOG,OAAQ,CAIjB,IAAMC,EAAgBJ,EAAOG,OAC7BH,EAAOG,OAAS,WACdC,IACAN,EAAQxH,SAGVwH,EAAQxH,gDAnGwB+H,EAAAA,gCAClBC,EAAAA,0CACjBC,EAAAA,OAAMC,KAAA,CAACC,EAAAA,4CACPF,EAAAA,OAAMC,KAAA,CAACE,EAAAA,6OATC7B,EAAsB/O,EAAA,CADlCmH,EAAAA,WAAW,CAAEC,WAAY,SASrBzG,EAAA,EAAA8P,EAAAA,OAAOE,EAAAA,WACPhQ,EAAA,EAAA8P,EAAAA,OAAOG,EAAAA,eATC7B,MC0Bb8B,EAAA,WAGE,SAAAA,EAEqBC,EAEAC,EAEAC,EACAC,EACAC,EAEAC,EACAC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EAEAC,EAEAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EAEZC,EAEAC,EACYC,EAEZC,GA5CY1T,KAAA6R,KAAAA,EAEA7R,KAAA8R,KAAAA,EAEA9R,KAAA+R,SAAAA,EACA/R,KAAAgS,iBAAAA,EACAhS,KAAAiS,gBAAAA,EAEAjS,KAAAkS,IAAAA,EACAlS,KAAAmS,SAAAA,EAEAnS,KAAAoS,cAAAA,EAEApS,KAAAqS,cAAAA,EAEArS,KAAAsS,YAAAA,EAEAtS,KAAAuS,KAAAA,EAEAvS,KAAAwS,aAAAA,EAEAxS,KAAAyS,QAAAA,EACAzS,KAAA0S,cAAAA,EACA1S,KAAA2S,cAAAA,EACA3S,KAAA4S,iBAAAA,EACA5S,KAAA6S,UAAAA,EAEA7S,KAAA8S,QAAAA,EAEA9S,KAAA+S,SAAAA,EACA/S,KAAAgT,SAAAA,EACAhT,KAAAiT,SAAAA,EAEAjT,KAAAkT,KAAAA,EACAlT,KAAAmT,YAAAA,EACAnT,KAAAoT,YAAAA,EACApT,KAAAqT,UAAAA,EACArT,KAAAsT,YAAAA,EAEZtT,KAAAuT,kCAAAA,EAEAvT,KAAAwT,qBAAAA,EACYxT,KAAAyT,qBAAAA,EAEZzT,KAAA0T,OAAAA,kDA5CkBC,EAAAA,YAAW3S,WAAA,CAAA,CAAA4E,KAAnCgO,EAAAA,kBAEwBC,EAAAA,kBAAiB7S,WAAA,CAAA,CAAA4E,KAAzCgO,EAAAA,kBAE4BE,EAAAA,gBAAe9S,WAAA,CAAA,CAAA4E,KAA3CgO,EAAAA,kBACoCG,EAAAA,wBAAuB/S,WAAA,CAAA,CAAA4E,KAA3DgO,EAAAA,kBACmCI,EAAAA,uBAAsBhT,WAAA,CAAA,CAAA4E,KAAzDgO,EAAAA,kBAEuBK,EAAAA,WAAUjT,WAAA,CAAA,CAAA4E,KAAjCgO,EAAAA,kBAC4BM,EAAAA,gBAAelT,WAAA,CAAA,CAAA4E,KAA3CgO,EAAAA,kBAEiCO,EAAAA,qBAAoBnT,WAAA,CAAA,CAAA4E,KAArDgO,EAAAA,kBAEiCQ,EAAAA,qBAAoBpT,WAAA,CAAA,CAAA4E,KAArDgO,EAAAA,kBAE+BS,EAAAA,mBAAkBrT,WAAA,CAAA,CAAA4E,KAAjDgO,EAAAA,kBAEwBU,EAAAA,YAAWtT,WAAA,CAAA,CAAA4E,KAAnCgO,EAAAA,kBAEgCW,EAAAA,oBAAmBvT,WAAA,CAAA,CAAA4E,KAAnDgO,EAAAA,kBAE2BY,EAAAA,eAAcxT,WAAA,CAAA,CAAA4E,KAAzCgO,EAAAA,kBACiCa,EAAAA,qBAAoBzT,WAAA,CAAA,CAAA4E,KAArDgO,EAAAA,kBACiCc,EAAAA,qBAAoB1T,WAAA,CAAA,CAAA4E,KAArDgO,EAAAA,kBACoCe,EAAAA,wBAAuB3T,WAAA,CAAA,CAAA4E,KAA3DgO,EAAAA,kBAC6BgB,EAAAA,iBAAgB5T,WAAA,CAAA,CAAA4E,KAA7CgO,EAAAA,kBAE2BiB,EAAAA,eAAc7T,WAAA,CAAA,CAAA4E,KAAzCgO,EAAAA,kBAE4BkB,EAAAA,gBAAe9T,WAAA,CAAA,CAAA4E,KAA3CgO,EAAAA,kBAC4BmB,EAAAA,gBAAe/T,WAAA,CAAA,CAAA4E,KAA3CgO,EAAAA,kBAC4BoB,EAAAA,gBAAehU,WAAA,CAAA,CAAA4E,KAA3CgO,EAAAA,kBAEwBqB,EAAAA,YAAWjU,WAAA,CAAA,CAAA4E,KAAnCgO,EAAAA,kBAC+BsB,EAAAA,mBAAkBlU,WAAA,CAAA,CAAA4E,KAAjDgO,EAAAA,kBAC+BuB,EAAAA,mBAAkBnU,WAAA,CAAA,CAAA4E,KAAjDgO,EAAAA,kBAC6BwB,EAAAA,iBAAgBpU,WAAA,CAAA,CAAA4E,KAA7CgO,EAAAA,kBAC+ByB,EAAAA,mBAAkBrU,WAAA,CAAA,CAAA4E,KAAjDgO,EAAAA,kBAEyC0B,EAAAA,kCAAiCtU,WAAA,CAAA,CAAA4E,KAD1EgO,EAAAA,kBAG4B2B,EAAAA,qBAAoBvU,WAAA,CAAA,CAAA4E,KADhDgO,EAAAA,kBAEwC4B,EAAAA,qBAAoBxU,WAAA,CAAA,CAAA4E,KAA5DgO,EAAAA,kBAEc6B,EAAAA,gsCAjDN7D,EAAY7Q,EAAA,CAHxBmH,EAAAA,WAAW,CACVC,WAAY,SAOTzG,EAAA,EAAAkS,EAAAA,YAEAlS,EAAA,EAAAkS,EAAAA,YAEAlS,EAAA,EAAAkS,EAAAA,YACAlS,EAAA,EAAAkS,EAAAA,YACAlS,EAAA,EAAAkS,EAAAA,YAEAlS,EAAA,EAAAkS,EAAAA,YACAlS,EAAA,EAAAkS,EAAAA,YAEAlS,EAAA,EAAAkS,EAAAA,YAEAlS,EAAA,EAAAkS,EAAAA,YAEAlS,EAAA,EAAAkS,EAAAA,YAEAlS,EAAA,GAAAkS,EAAAA,YAEAlS,EAAA,GAAAkS,EAAAA,YAEAlS,EAAA,GAAAkS,EAAAA,YACAlS,EAAA,GAAAkS,EAAAA,YACAlS,EAAA,GAAAkS,EAAAA,YACAlS,EAAA,GAAAkS,EAAAA,YACAlS,EAAA,GAAAkS,EAAAA,YAEAlS,EAAA,GAAAkS,EAAAA,YAEAlS,EAAA,GAAAkS,EAAAA,YACAlS,EAAA,GAAAkS,EAAAA,YACAlS,EAAA,GAAAkS,EAAAA,YAEAlS,EAAA,GAAAkS,EAAAA,YACAlS,EAAA,GAAAkS,EAAAA,YACAlS,EAAA,GAAAkS,EAAAA,YACAlS,EAAA,GAAAkS,EAAAA,YACAlS,EAAA,GAAAkS,EAAAA,YACAlS,EAAA,GAAAkS,EAAAA,YAEAlS,EAAA,GAAAkS,EAAAA,YAEAlS,EAAA,GAAAkS,EAAAA,aA/CQhC,GAAb,gBCJE,SAAA8D,EACUC,EACAC,EACAC,EACAC,EACAC,EACAxN,EACAzB,EACqBkP,GAPrBhW,KAAA2V,IAAAA,EACA3V,KAAA4V,gBAAAA,EACA5V,KAAA6V,SAAAA,EACA7V,KAAA8V,WAAAA,EACA9V,KAAA+V,wBAAAA,EACA/V,KAAAuI,SAAAA,EACAvI,KAAA8G,OAAAA,EACqB9G,KAAAgW,WAAAA,EA4GjC,OAzGEN,EAAAxV,UAAAiM,SAAA,WACOnM,KAAKiW,0BAGNjW,KAAK4V,gBAAgBjF,eAAe3Q,KAAKkW,mBAAmBC,UAC9DnW,KAAKoW,qBAELpW,KAAKqW,oBAIDX,EAAAxV,UAAA+V,sBAAR,WACE,IAAMK,EAAQC,EAAAA,iBAAiBvW,KAAKgW,YAC9BQ,GACJxW,KAAK8G,OAAO0I,cAAcxP,KAAKkW,mBAAmBC,WAAa,IAC/DM,WACF,QAASH,GAASE,IAGZd,EAAAxV,UAAAmW,gBAAR,WACE,IAAM5F,EAAUzQ,KAAK4V,gBAAgBpF,0BACnCxQ,KAAKkW,mBAAmBC,UAGtB1F,IACFzQ,KAAK0W,OAAS1W,KAAK2V,IAAIgB,gBACrBlG,OACAmG,EACA5W,KAAK6W,2BAGH7W,KAAK8V,WAAWgB,uBAClB9W,KAAK+W,qBAAqB/W,KAAK0W,OAAOM,SAAS9N,iBAKvCwM,EAAAxV,UAAAkW,mBAAd,kBfdwBtU,OAASmV,SAAeC,uEee1B,MAAA,CAAA,EAAMlX,KAAK4V,gBAAgBhF,iBAC7C5Q,KAAKkW,mBAAmBC,SACxBnW,KAAKuI,yBAFD4O,EAAcjK,EAAA7K,UAMlBrC,KAAKoX,WAAapX,KAAKuI,SAASZ,cAAcwP,GAExCE,EAAmBrX,KAAKsX,yBAE9BtX,KAAKoX,WAAWG,MAAKlX,EAAAA,EAAA,GAChBL,KAAK6V,SAAS2B,IAAI5F,IAAa,CAClCyF,iBAAgBA,IAGlBrX,KAAKuI,SAAST,YACZ9H,KAAK2V,IAAI8B,QAAQvO,cAAcwO,cAC/B1X,KAAKoX,YAGHpX,KAAK8V,WAAWgB,uBAClB9W,KAAK+W,qBAAqB/W,KAAKoX,sBfnC5B,KADoCO,YACzBA,EAAI7G,WAAU,SAAUC,EAAS6G,GAC/C,SAASC,EAAU3U,GAAS,IAAMI,EAAK4T,EAAU1U,KAAKU,IAAW,MAAOG,GAAKuU,EAAOvU,IACpF,SAASyU,EAAS5U,GAAS,IAAMI,EAAK4T,EAAiB,MAAEhU,IAAW,MAAOG,GAAKuU,EAAOvU,IACvF,SAASC,EAAKyU,GAAUA,EAAO9U,KAAO8N,EAAQgH,EAAO7U,OAAS,IAAIyU,GAAE,SAAU5G,GAAWA,EAAQgH,EAAO7U,UAAW8U,KAAKH,EAAWC,GACnIxU,GAAM4T,EAAYA,EAAUpW,MAAMgB,EAASmV,GAAc,KAAKzU,WAL/D,IAAmBV,EAASmV,EAAYU,EAAGT,GeyCxCxB,EAAAxV,UAAAoX,uBAAR,WAGE,MAAO,CACLW,IAAKjY,KAAKkW,mBAAmB+B,IAC7BC,MAAOlY,KAAK8V,WAAWqC,iBAAiBnY,KAAKkW,mBAAmB+B,OAI5DvC,EAAAxV,UAAA2W,wBAAR,WACE,IAAMuB,GACHpY,KAAK8G,OAAO0I,cAAcxP,KAAKkW,mBAAmBC,WAAa,IAC7DrM,WAAa,GAClB,OAAOuO,EAAAA,SAASlY,OAAO,CACrB2J,UAASjG,EAAA,CACP,CACEmG,QAASsO,EACTC,SAAUvY,KAAKsX,2BAEdc,GAELI,OAAQxY,KAAK6V,YAITH,EAAAxV,UAAA6W,qBAAR,SAA6BU,GAC3BzX,KAAK+V,wBAAwB0C,qBAC3BzY,KAAKkW,mBAAmBwC,WACxBjB,EACAzX,KAAKuI,WAITmN,EAAAxV,UAAAoO,YAAA,WACMtO,KAAK0W,QACP1W,KAAK0W,OAAOiC,UAEV3Y,KAAKoX,YACPpX,KAAKoX,WAAWwB,mDAhHLC,EAAAA,wBACY/I,SACPuI,EAAAA,gBACEpE,EAAAA,kBACa6E,EAAAA,+BACf1P,EAAAA,iBACFmI,EAAAA,iBACyB/R,OAAMwB,WAAA,CAAA,CAAA4E,KAA9C4L,EAAAA,OAAMC,KAAA,CAACE,EAAAA,kBAbD5Q,EAAA,CAARsI,EAAAA,kDADUqM,EAAyB3U,EAAA,CAHrCgY,EAAAA,UAAU,CACTxP,SAAU,yBAgBP7H,EAAA,EAAA8P,EAAAA,OAAOG,EAAAA,eAdC+D,mBCjBb,SAAAsD,KAAkC,OAArBA,EAAmBjY,EAAA,CAN/B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,cACVC,UAAW,GACXH,aAAc,CAAC+L,GACfvL,QAAS,CAACuL,MAECsD,MCCbC,EAAA,WACE,SAAAA,EACUnS,EACqBkP,GADrBhW,KAAA8G,OAAAA,EACqB9G,KAAAgW,WAAAA,SAG/BiD,EAAA/Y,UAAAgZ,mBAAA,SAAmB/C,GACjB,IAAMG,EAAQC,EAAAA,iBAAiBvW,KAAKgW,YAC9BQ,GAA4BxW,KAAK8G,OAAO0I,cAAc2G,IAAa,IACtEM,WACH,QAASH,GAASE,IAGpByC,EAAA/Y,UAAAiZ,uBAAA,SAAuBC,WACfC,EAAS,OACf,IAA4B,IAAAC,EAAA/V,EAAA6V,GAAcG,EAAAD,EAAA9W,QAAA+W,EAAAtW,KAAAsW,EAAAD,EAAA9W,OAAE,CAAvC,IAAMqO,EAAa0I,EAAArW,MAClBlD,KAAKkZ,mBAAmBrI,IAC1BwI,EAAOjW,KAAItC,MAAXuY,EAAMxV,EAAS7D,KAAKwZ,sBAAsB3I,uGAG9C,OAAOwI,GAGTJ,EAAA/Y,UAAAuZ,uBAAA,SAAuBL,WACfM,EAAS,IAAIC,QACnB,IAA4B,IAAAC,EAAArW,EAAA6V,GAAcS,EAAAD,EAAApX,QAAAqX,EAAA5W,KAAA4W,EAAAD,EAAApX,OAAE,CAAvC,IAAMqO,EAAagJ,EAAA3W,MACtBlD,KAAK8Z,sBAAsBjJ,GAAe/H,SAAQ,SAAAiR,GAChD,OAAAL,EAAO9M,IAAImN,wGAGf,OAAOpa,MAAMqa,KAAKN,IAGpBT,EAAA/Y,UAAA+Z,yBAAA,SAAyBb,WACjBc,EAAW,IAAIP,QACrB,IAA4B,IAAAQ,EAAA5W,EAAA6V,GAAcgB,EAAAD,EAAA3X,QAAA4X,EAAAnX,KAAAmX,EAAAD,EAAA3X,OAAE,CAAvC,IAAMqO,EAAauJ,EAAAlX,MAClBlD,KAAKkZ,mBAAmBrI,IAC1B7Q,KAAKqa,wBAAwBxJ,GAAe/H,SAAQ,SAAA5H,GAClD,OAAAgZ,EAAStN,IAAI1L,wGAInB,OAAOvB,MAAMqa,KAAKE,IAGZjB,EAAA/Y,UAAAsZ,sBAAR,SAA8B3I,GAC5B,IAAMyJ,EAAgBta,KAAK8G,OAAO0I,cAAcqB,GAChD,OAAQyJ,GAAiBA,EAAcC,aAAgB,IAGjDtB,EAAA/Y,UAAA4Z,sBAAR,SAA8BjJ,GAC5B,IAAMyJ,EAAgBta,KAAK8G,OAAO0I,cAAcqB,GAChD,OAAQyJ,GAAiBA,EAAcZ,QAAW,IAG5CT,EAAA/Y,UAAAma,wBAAR,SAAgCxJ,GAC9B,IAAMyJ,EAAgBta,KAAK8G,OAAO0I,cAAcqB,GAChD,OAAQyJ,GAAiBA,EAAcJ,UAAa,6CAvDpC3I,EAAAA,iBACyB/R,OAAMwB,WAAA,CAAA,CAAA4E,KAA9C4L,EAAAA,OAAMC,KAAA,CAACE,EAAAA,yKAHCsH,EAAiBlY,EAAA,CAH7BmH,EAAAA,WAAW,CACVC,WAAY,SAKTzG,EAAA,EAAA8P,EAAAA,OAAOG,EAAAA,eAHCsH,GAAb,GCEAuB,EAAA,WACE,SAAAA,EACUC,EACA5E,GADA7V,KAAAya,WAAAA,EACAza,KAAA6V,SAAAA,SAGV2E,EAAAta,UAAAwa,mBAAA,SACEtB,EACAuB,EACAC,GAHF,IAAAlS,EAAA1I,KAKQ0Z,EAAS1Z,KAAKya,WAAWhB,uBAAuBL,GAEtD,GAAIM,EAAO9Y,OAAQ,CACjB,IAAMia,EAAyBnB,EAAOoB,KAAI,SAAAC,GACxC,IAAMhB,EAAQrR,EAAKmN,SAAS2B,IAAiBuD,EAAY,MACzD,GAsCR,SAAuBhB,GACrB,OAAOA,IAGcjX,EAHmBiX,EAAMiB,YAI1B,mBAANlY,GADhB,IAAuBA,EA1CXmY,CAAclB,GAChB,OAmBV,SACE7W,GAEA,GAAIgY,EAAAA,aAAahY,GACf,OAAOA,EAGT,GAOiBiY,EAPHjY,EAQLiY,GAA2B,mBAAbA,EAAInD,KAPzB,OAAOgC,EAAAA,KAAKlJ,QAAQC,QAAQ7N,IAMhC,IAAmBiY,EAHjB,OAAOC,EAAAA,GAAGlY,GA9BKmY,CAAmBtB,EAAMiB,YAAYL,EAAOC,IAAQ9N,KACzDwO,EAAAA,SAGF,MAAM,IAAIC,MAAM,8CAIpB,OAAOzX,EAAAA,OAAMhD,WAAA,EAAA+C,EAAIgX,IAAwB/N,KACvC0O,EAAAA,WAAU,SAACR,GAAmC,OAAgB,IAAhBA,KAC9CS,EAAAA,SAAQ,GACRH,EAAAA,SAGF,OAAOF,EAAAA,IAAG,6CA7BQnC,SACFZ,EAAAA,sJAHTmC,EAAgBzZ,EAAA,CAH5BmH,EAAAA,WAAW,CACVC,WAAY,UAEDqS,GAAb,GCHA,ICRYkB,EDQZC,EAAA,WACE,SAAAA,EACUlB,EACAnI,EACAsJ,GAFA5b,KAAAya,WAAAA,EACAza,KAAAsS,YAAAA,EACAtS,KAAA4b,iBAAAA,SAGVD,EAAAzb,UAAA2b,wBAAA,SAAwBzC,WAChBc,EAAWla,KAAKya,WAAWR,yBAAyBb,GACpD0C,EAAa,IAAInC,QACvB,IAAkB,IAAAoC,EAAAxY,EAAA2W,GAAQ8B,EAAAD,EAAAvZ,QAAAwZ,EAAA/Y,KAAA+Y,EAAAD,EAAAvZ,OAAE,CAAvB,IAAMtB,EAAG8a,EAAA9Y,MACZ4Y,EAAWlP,IAAI5M,KAAK4b,iBAAiBK,mBAAmB/a,sGAE1DlB,KAAKsS,YAAY4J,WAAWvc,MAAMqa,KAAK8B,8CAXnB7C,SACC5E,EAAAA,0BACK8H,EAAAA,wNAJjBR,EAAc5a,EAAA,CAH1BmH,EAAAA,WAAW,CACVC,WAAY,UAEDwT,GAAb,ICRYD,EAAAA,EAAAA,aAAAA,EAAAA,WAAU,KACpB,GAAA,KACAA,EAAA,GAAA,KACAA,EAAA,GAAA,KACAA,EAAA,GAAA,KACAA,EAAA,GAAA,KA0CF,MCjDYU,EDiDZC,EAAA,aE3CMC,IAAmBpP,EAAA,IACtBwO,EAAAA,WAAWa,IAAK,IACjBrP,EAACwO,EAAAA,WAAWc,IAAK,IACjBtP,EAACwO,EAAAA,WAAWe,IAAK,IACjBvP,EAACwO,EAAAA,WAAWgB,IAAK,QAMnBC,EAAA,WACE,SAAAA,EAAoB3W,EAA2Bc,GAA3B9G,KAAAgG,OAAAA,EAA2BhG,KAAA8G,OAAAA,SAE/CtH,OAAAiC,eAAIkb,EAAAzc,UAAA,cAAW,KAAf,WAAA,IAAAwI,EAAA1I,KACE,OAAKA,KAAK4c,OAGH5c,KAAKgG,OAAO6W,QAAQ/P,KACzBgO,EAAAA,KAAI,SAAAgC,GAAS,OAAApU,EAAKqU,cAAuBD,EAAM7b,OAAQ+b,eACvDhQ,EAAAA,wBAJOoO,EAAAA,GAAGM,EAAAA,WAAWa,qCAiBzBI,EAAAzc,UAAA+c,QAAA,SAAQC,SACN,OAA8B,QAAvBhQ,EAAAlN,KAAK8G,OAAOqW,mBAAW,IAAAjQ,OAAA,EAAAA,EAAErN,eAAeqd,IAC3Cld,KAAK8G,OAAOqW,YAAYD,GACxBZ,EAAoBY,IAM1B1d,OAAAiC,eAAIkb,EAAAzc,UAAA,cAAW,KAAf,WACE,MAAO,CACLwb,EAAAA,WAAWa,GACXb,EAAAA,WAAWc,GACXd,EAAAA,WAAWe,GACXf,EAAAA,WAAWgB,GACXhB,EAAAA,WAAW0B,qCAWfT,EAAAzc,UAAAmd,OAAA,SAAOH,GAAP,IAAAxU,EAAA1I,KACE,OAAOA,KAAKsd,YAAYxQ,KACtBgO,EAAAA,KAAI,SAAAyC,GACF,OAAA7U,EAAKyU,YACFK,MAAM,EAAG9U,EAAKyU,YAAYM,QAAQP,GAAc,GAChDhW,SAASqW,QAYlBZ,EAAAzc,UAAAwd,KAAA,SAAKR,GAAL,IAAAxU,EAAA1I,KACE,OAAOA,KAAKsd,YAAYxQ,KACtBgO,EAAAA,KAAI,SAAAyC,GACF,OAAA7U,EAAKyU,YACFK,MAAM9U,EAAKyU,YAAYM,QAAQP,IAC/BhW,SAASqW,QAQlBZ,EAAAzc,UAAAyd,QAAA,SAAQT,GACN,OAAOld,KAAKsd,YAAYxQ,KAAKgO,EAAAA,KAAI,SAAAyC,GAAM,OAAAA,IAAOL,OAGtCP,EAAAzc,UAAA6c,cAAV,SAAwBa,GACtB,IAAMV,EAAald,KAAK6d,WAAWD,GACnC,OAAOlC,EAAAA,WAAWwB,GAAcxB,EAAAA,WAAWgB,KAGnCC,EAAAzc,UAAA2d,WAAV,SAAqBD,GAArB,IAAAlV,EAAA1I,KAKE,OAJK4d,IACHA,EAAc5d,KAAK4c,OAAOI,YAGrBY,EAAc5d,KAAKid,QAAQvB,EAAAA,WAAWgB,IACzChB,EAAAA,WAAW0B,GACXpd,KAAKmd,YAAYpW,MAAK,SAAAwW,GAAM,OAAAK,GAAelV,EAAKuU,QAAQM,OAG9D/d,OAAAiC,eAAIkb,EAAAzc,UAAA,SAAM,KAAV,WACE,OAAOF,KAAKgG,OAAO8X,uFAjGO/V,EAAAA,iBAA2BsU,gJAD5CM,EAAiB5b,EAAA,CAH7BmH,EAAAA,WAAW,CACVC,WAAY,UAEDwU,GAAb,GCZaoB,EAAsB,IAAIC,EAAAA,eACrC,kCCUA,SAAAC,EACU/L,EACApL,EACAoX,EAGAC,GALAne,KAAAkS,IAAAA,EACAlS,KAAA8G,OAAAA,EACA9G,KAAAke,kBAAAA,EAGAle,KAAAme,SAAAA,EAMFne,KAAAoe,gBAAkB,GAClBpe,KAAAqe,SAAW,GA8NrB,OA5NEJ,EAAA/d,UAAAoe,SAAA,SAASC,GAAT,IAAA7V,EAAA1I,KACE,OAAO6M,EAAAA,cAAc,CAAC7M,KAAKwe,MAAOxe,KAAKke,kBAAkBZ,cAAcxQ,KACrEgO,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACuR,EAAAtR,EAAA,GAAM+P,EAAA/P,EAAA,GACJuR,EAAeD,EAAKjV,SAE1B,MAAO,CAAEmV,MADKjW,EAAKkW,aAAaH,EAAMF,EAASrB,GAC/BwB,aAAYA,EAAExB,WAAUA,MAE1C2B,EAAAA,WAAU,SAAC3R,WAAEyR,EAAAzR,EAAAyR,MAAOD,EAAAxR,EAAAwR,aAAcxB,EAAAhQ,EAAAgQ,WAC5BnF,EAASqD,EAAAA,GAAGuD,OAChB,IAAsB,IAAAG,EAAAvb,EAAAmF,EAAKyV,UAAY,IAAEY,EAAAD,EAAAtc,QAAAuc,EAAA9b,KAAA8b,EAAAD,EAAAtc,OAAE,CACzCuV,EADgBgH,EAAA7b,MACC8b,OAAOjH,EAAQ2G,EAAcH,EAASrB,qGAEzD,OAAOnF,KAET/K,EAAAA,sBAAqB,SAACiS,EAAG1f,GACvB,GAAI0f,EAAEre,SAAWrB,EAAEqB,OACjB,OAAO,EAET,IAAK,IAAIH,EAAI,EAAGA,EAAIwe,EAAEre,OAAQH,IAC5B,GAAIwe,EAAExe,KAAOlB,EAAEkB,GACb,OAAO,EAGX,OAAO,OAWbwd,EAAA/d,UAAAgf,gBAAA,SAAgBR,GAAhB,IAAAhW,EAAA1I,KACE,OAAOA,KAAKke,kBAAkBZ,YAAYxQ,KACxCgO,EAAAA,KAAI,SAAAoC,GACF,IAAKxU,EAAK5B,OAAOqY,YAEf,OAAO,KAET,IAAMC,EAAqB1W,EAAK5B,OAAOqY,YAAYT,GAC7C5X,EAAS4B,EAAK2W,wBACAD,EAClB,WACAlC,GAEF,OAAOpW,EAASA,EAAOwY,SAAW,UAKhCrB,EAAA/d,UAAA0e,aAAR,SAAqBH,EAAMF,EAASrB,GAClC,IAAMpW,EAAS9G,KAAKuf,cAClBd,EAAKjV,SACL,QACA+U,EACArB,GAEF,GAAIpW,GAAUA,EAAO6X,MAAO,CAC1B,IAAMa,EAAYhgB,OAAOigB,KAAKhB,EAAKE,OACnC,OAAO7X,EAAO6X,MAAMe,QAAO,SAAAC,GAAQ,OAAAH,EAAUtY,SAASyY,MACjD,OAAKpB,GAIVve,KAAK4f,uBAAuBnB,EAAMF,GAC3B,KAJPve,KAAK4f,uBAAuBnB,GACrBjf,OAAOigB,KAAKhB,EAAKE,SAO5Bnf,OAAAiC,eAAIwc,EAAA/d,UAAA,QAAK,KAAT,WACE,OAAOF,KAAKkS,IAAI2N,iBAAiB/S,KAAK4S,EAAAA,QAAO,SAAAjB,GAAQ,QAAEA,uCAGzDjf,OAAAiC,eAAIwc,EAAA/d,UAAA,gBAAa,KAAjB,WACE,OAAOF,KAAKwe,MAAM1R,KAChB4S,EAAAA,QAAO,SAAAjB,GAAQ,QAAEA,EAAKjV,YACtBsR,EAAAA,KAAI,SAAC2D,GAAe,OAAAA,EAAKjV,8CAUnByU,EAAA/d,UAAAqf,cAAV,SACEO,EACAC,EACAxB,EACArB,GAEA,IAAKld,KAAK8G,OAAOqY,YACf,OAAO,KAET,IAAMC,EAAqBpf,KAAK8G,OAAOqY,YAAYW,GAEnD,OAAIvB,EACKve,KAAKggB,wBACVF,EACAC,EACAxB,EACArB,GAIAkC,EACKpf,KAAKqf,wBACQD,EAClBW,EACA7C,QAJJ,GASQe,EAAA/d,UAAA8f,wBAAV,SACEF,EACAC,EACAxB,EACArB,GAEA,IAAMkC,EAAqBpf,KAAK8G,OAAOqY,YAAYW,GAEnD,IAAKV,EACH,OAAO,KAKT,IAAMa,EAAgBb,EAAmBb,GACrCa,EAAmBb,GACnBve,KAAK8G,OAAOqY,YAAYZ,GAE5B,IAAK0B,EACH,OAAO,KAGT,IAAMC,EAAmBlgB,KAAKqf,wBACVY,EAClBF,EACA7C,GAGF,OAAIgD,EAAiBrgB,eAAekgB,GAC3BG,EACEd,EAAmBb,GAAS1e,eAAekgB,GAC7CX,EAAmBb,GACjBve,KAAK8G,OAAOqY,YAAYZ,GACdve,KAAK8G,OAAOqY,YAAYZ,QADtC,GAUCN,EAAA/d,UAAAmf,wBAAV,SACEc,EACAJ,EACA7C,WAEIkD,EAAyBD,EAG7B,IAAKA,IAAqBjD,EACxB,OAAOkD,EAIT,GACED,EAAiBjD,IACjBiD,EAAiBjD,GAAYrd,eAAekgB,GAE5C,OAAmBI,EAAiBjD,GAItC,IAAMmD,EAAMrgB,KAAKke,kBAAkBf,gBAEnC,IAAiB,IAAAhQ,EAAA5J,EAAA8c,EAAIC,OAAO,EAAGD,EAAI5C,QAAQP,KAAY4B,EAAA3R,EAAA3K,QAAAsc,EAAA7b,KAAA6b,EAAA3R,EAAA3K,OAAE,CAApD,IAAM+a,EAAEuB,EAAA5b,MAETid,EAAiB5C,IACjB4C,EAAiB5C,GAAI1d,eAAekgB,KAEpCK,EAAyBD,EAAiB5C,sGAG9C,OAAO6C,GASDnC,EAAA/d,UAAA0f,uBAAR,SAA+BnB,EAAYF,GACzC,GAAKgC,EAAAA,YAAL,CAGKvgB,KAAKqe,SAASI,EAAKjV,YAGtB8G,QAAQkQ,KACN,8BAA8BhhB,OAAOigB,KAAKhB,EAAKE,OAAO8B,KAAK,OAAM,KAEnEzgB,KAAKqe,SAASI,EAAKjV,WAAY,GAGjC,IAAMkX,EAAWnC,GAAWE,EAAKjV,SAC5BxJ,KAAKoe,gBAAgBsC,KACxBpQ,QAAQC,KACN,8BAA8BmQ,EAAQ,gFAExC1gB,KAAKoe,gBAAgBsC,IAAY,8CAvOtBzM,EAAAA,kBACGoI,SACWM,iCAC1B/I,EAAAA,UAAQ,CAAAhO,KACR4L,EAAAA,OAAMC,KAAA,CAACsM,QANCE,EAAiBld,EAAA,CAD7BmH,EAAAA,aAMIxG,EAAA,EAAAkS,EAAAA,YACAlS,EAAA,EAAA8P,EAAAA,OAAOuM,KANCE,oBC8BX,SAAA0C,EACUC,EACArY,EACAsY,GAHV,IAAAnY,EAAA1I,KACUA,KAAA4gB,GAAAA,EACA5gB,KAAAuI,SAAAA,EACAvI,KAAA6gB,kBAAAA,EA3BD7gB,KAAA8gB,SAAoC,IAAIC,EAAAA,qBAAgBnK,GACxD5W,KAAAghB,cAAoChhB,KAAK6gB,kBAC/CG,cAEMhhB,KAAAihB,YAAkCjhB,KAAK8gB,SAAShU,KACvD+R,EAAAA,WAAU,SAAAN,GAAW,OAACA,EAAUnD,EAAAA,GAAGmD,GAAW7V,EAAKsY,iBACnD/T,EAAAA,KAAI,SAAAiU,GACFxY,EAAKyY,WAAaD,MAIblhB,KAAAohB,OAA+BphB,KAAK8gB,SAAShU,KACpD+R,EAAAA,WAAU,SAAAN,GAAW,OAAA7V,EAAKmY,kBAAkBvC,SAASC,OAG9Cve,KAAAqhB,cAAoCrhB,KAAKghB,cAAclU,KAC9D+R,EAAAA,WAAU,SAAAyC,GACR,OAAA5Y,EAAKmY,kBAAkB3B,gBAAgBoC,MAEzCtU,EAAAA,wBAkBJ,OAxCWxN,OAAAiC,eAAIkf,EAAAzgB,UAAA,UAAO,KAAX,SAAYgD,GACnBlD,KAAK8gB,SAASte,KAAKU,oCAgCrB1D,OAAAiC,eAAIkf,EAAAzgB,UAAA,aAAU,KAAd,SAAe6I,GACT/I,KAAKuhB,cACPvhB,KAAKuI,SAASS,YAAYhJ,KAAK4gB,GAAG1X,cAAelJ,KAAKuhB,cAExDvhB,KAAKuI,SAASI,SAAS3I,KAAK4gB,GAAG1X,cAAeH,GAC9C/I,KAAKuhB,aAAexY,4EAVRI,EAAAA,kBACMC,EAAAA,iBACS6U,KA9BpBld,EAAA,CAARsI,EAAAA,qCADUsX,EAAmB5f,EAAA,CAL/BuI,EAAAA,UAAU,CACTC,SAAU,iBACVC,SAAA,+WACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9Bf,MCJbgB,GAAA,WACE,SAAAA,EAAoBC,EAAwBnH,GAAxBza,KAAA4hB,OAAAA,EAAwB5hB,KAAAya,WAAAA,SAE5CkH,EAAAzhB,UAAA2hB,cAAA,SAAc/b,GACZ,IAAMgc,EAAmBhc,EAAIic,WAAW,KAExC,IAAKD,EACH,OAAO,EAGT,IAAME,EAAYlc,EAAImc,OAAO,GAE7B,OACEH,KACE9hB,KAAK4hB,OAAO9a,OAAOC,MACnB,SAAC4T,GACC,OAAAA,EAAMuH,MAAQvH,EAAMuH,KAAKC,mBAAqBxH,EAAM3J,OAASgR,MAcrEL,EAAAzhB,UAAAkiB,uBAAA,SACEC,EACAjJ,EACAkJ,EACAC,GAEA,IAAMC,EAAkBxiB,KAAKya,WAAWtB,uBACtCC,GAEF,OAAIoJ,EAAgB5hB,SACdZ,KAAKyiB,cAAcJ,EAAaE,EAAkBC,KACpDxiB,KAAK4hB,OAAOc,cAAcJ,IACnB,IAMLX,EAAAzhB,UAAAuiB,cAAR,SACEJ,EACAM,EACAtJ,GAEA,GACEgJ,EAAYzc,OAASgd,EAAAA,SAASC,cAC9BF,EAAUZ,WAAW,MACrBY,EAAU/hB,OAAS,EACnB,CACA,IAAMkiB,EAAqB,CACzB9R,KAAM2R,EAAUV,OAAO,GACvBxS,UAAWkR,GACXoC,SAAU1J,EACV6I,KAAM,CACJC,kBAAmB,CACjBvc,KAAMyc,EAAYzc,KAClB+H,GAAIgV,KAMV,OADA3iB,KAAK4hB,OAAOoB,YAAWnf,EAAA,CAAEif,GAAa9iB,KAAK4hB,OAAO9a,UAC3C,EAGT,OAAO,4CAzEmBmc,EAAAA,cAA4BhK,6IAD7C0I,EAAgB5gB,EAAA,CAH5BmH,EAAAA,WAAW,CACVC,WAAY,UAEDwZ,GAAb,iBC4CE,SAAAuB,EAEYC,EACArN,EACFsN,EACAC,EACAC,EACEC,EACAC,GANAxjB,KAAAmjB,eAAAA,EACAnjB,KAAA8V,WAAAA,EACF9V,KAAAojB,UAAAA,EACApjB,KAAAqjB,QAAAA,EACArjB,KAAAsjB,UAAAA,EACEtjB,KAAAujB,oBAAAA,EACAvjB,KAAAwjB,qBAAAA,SAGZN,EAAAhjB,UAAA8a,YAAA,SACEL,EACAC,GAFF,IAAAlS,EAAA1I,KAOE,OAAOA,KAAKwjB,qBACRxjB,KAAKwjB,qBACFxI,YAAYL,GACZ7N,KACC+R,EAAAA,WAAU,SAAA9G,GACR,OAAAA,EAASrP,EAAK+a,WAAW9I,EAAOC,GAASQ,EAAAA,GAAGrD,OAGlD/X,KAAKyjB,WAAW9I,EAAOC,IAGrBsI,EAAAhjB,UAAAujB,WAAR,SACE9I,EACAC,GAFF,IAAAlS,EAAA1I,KAIE,OAAOA,KAAKmjB,eAAeO,qBAAqB5W,KAC9C+R,EAAAA,WAAU,SAAAwD,GACR,OAAA3Z,EAAKoN,WACF6N,QAAQtB,GAAa,GACrBvV,KAAKwO,EAAAA,QAASsI,EAAAA,eAAexI,EAAAA,GAAGiH,QAErCxD,EAAAA,WAAU,SAAC3R,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAAC2W,EAAA1W,EAAA,GAAUkV,EAAAlV,EAAA,GACpB,OAAA0W,EACInb,EAAKob,oBAAoBzB,EAAawB,EAAUlJ,EAAOC,GACvDlS,EAAKqb,mBAAmB1B,EAAa1H,EAAOC,QAK9CsI,EAAAhjB,UAAA4jB,oBAAR,SACEzB,EACAwB,EACAlJ,EACAC,GAJF,IAAAlS,EAAA1I,KAME,OAAOA,KAAK8V,WAAWkO,sBAAsB3B,GAAavV,KACxDC,EAAAA,KAAK,GACL8R,EAAAA,WAAU,SAAAzF,GACR,OAAA1Q,EAAK4a,UACF5I,mBAAmBtB,EAAgBuB,EAAOC,GAC1C9N,KAAK8W,EAAAA,eAAexI,EAAAA,GAAGhC,QAE5BnM,EAAAA,KAAI,SAACC,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAAC8N,EAAA7N,EAAA,GAAaiM,EAAAjM,EAAA,IACG,IAAhB6N,GACFtS,EAAK2a,QAAQxH,wBAAwBzC,MAGzC0B,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAAC8N,EAAA7N,EAAA,GAAaiM,EAAAjM,EAAA,GACXwV,EAAYkB,EAASzhB,OAASigB,EAAY1U,GAChD,OACkB,IAAhBqN,GACCL,EAAMuH,KAAKC,mBACXzZ,EAAK0a,UAAUvB,cAAcc,GASzB3H,EAPEtS,EAAK0a,UAAUhB,uBACpBC,EACAjJ,EACAwB,EAAM9U,IACN6c,QAQFO,EAAAhjB,UAAA6jB,mBAAR,SACE1B,EACA1H,EACAC,GAHF,IAAAlS,EAAA1I,KAKQikB,EAAsC,CAC1Cre,KAAMgd,EAAAA,SAASC,aACflV,GAAI3N,KAAKujB,oBAAoB/L,IAAI,aAEnC,OAAOxX,KAAK8V,WAAW6N,QAAQM,GAAwBnX,KACrD+R,EAAAA,WAAU,SAAAqF,GACR,OAAIA,EACKxb,EAAKoN,WAAWqO,aAAaF,GAAwBnX,KAC1DG,EAAAA,KAAI,SAAAmX,GACF1b,EAAKoN,WAAWuO,iBAAiBhC,EAAa+B,MAEhDvF,EAAAA,WAAU,SAAAuF,GACR,OAAA1b,EAAKoN,WAAWqO,aAAa9B,GAAavV,KAExC4S,EAAAA,QAAO,SAAA4E,GAAS,OAAAA,IAAUF,SAG9BvF,EAAAA,WAAU,WACR,OAAAnW,EAAKob,oBAAoBzB,EAAa6B,EAAcvJ,EAAOC,OAI1DQ,EAAAA,IAAG,QAzIT8H,EAAAqB,UAAY,wDA4BS1P,EAAAA,sBACJZ,EAAAA,kBACH0N,UACFhG,SACEnB,SACYgK,EAAAA,2BACEC,EAAAA,kTAnCxBvB,EAAYniB,EAAA,CAHxBmH,EAAAA,WAAW,CACVC,WAAY,UAED+a,ON7BD9G,EAAAA,EAAAA,iBAAAA,EAAAA,eAAc,KACxB,QAAA,UACAA,EAAA,OAAA,SACAA,EAAA,MAAA,QAGF,kBOAA,SAAAsI,IACU1kB,KAAA2kB,cAAgB,IAAIC,IACpB5kB,KAAA6kB,oBAAsB,IAAID,IAC1B5kB,KAAA8kB,mBAAqB,IAAIF,WAyBjCF,EAAAxkB,UAAA0M,IAAA,SACEmY,EACAC,EACAC,QAAA,IAAAA,IAAAA,EAA2B7I,EAAAA,eAAe8I,SAEtCD,IAAa7I,EAAAA,eAAe+I,QAC9BnlB,KAAKolB,MAAMplB,KAAK6kB,oBAAqBE,EAAQC,GAE3CC,IAAa7I,EAAAA,eAAe8I,SAC9BllB,KAAKolB,MAAMplB,KAAK2kB,cAAeI,EAAQC,GAErCC,IAAa7I,EAAAA,eAAeiJ,OAC9BrlB,KAAKolB,MAAMplB,KAAK8kB,mBAAoBC,EAAQC,IAahDN,EAAAxkB,UAAAsX,IAAA,SACEuN,EACAE,EACAK,GAEA,IAAIC,EACJ,YAJA,IAAAN,IAAAA,EAA2B7I,EAAAA,eAAe8I,cAC1C,IAAAI,IAAAA,GPxDiC,GO2DzBL,GACN,KAAK7I,EAAAA,eAAe+I,OAClBI,EAAcvlB,KAAK6kB,oBAAoBrN,IAAIuN,GAC3C,MACF,KAAK3I,EAAAA,eAAeiJ,MAClBE,EAAcvlB,KAAK8kB,mBAAmBtN,IAAIuN,GAC1C,MACF,QACEQ,EAAcvlB,KAAK2kB,cAAcnN,IAAIuN,GAEzC,OAAIQ,IAAgBD,EACXC,EAAY,GAEdA,GAGDb,EAAAxkB,UAAAklB,MAAR,SAAcA,EAAyBL,EAAgB7hB,GACrD,IACMsiB,GADWJ,EAAM5N,IAAIuN,IAAW,IACPjhB,OAAO,CAACZ,IACvCkiB,EAAMK,IAAIV,EAAQS,kGA9ETd,EAAa3jB,EAAA,CAHzBmH,EAAAA,WAAW,CACVC,WAAY,UAEDuc,oBCQX,SAAAgB,EACUC,EACAC,GADA5lB,KAAA2lB,IAAAA,EACA3lB,KAAA4lB,cAAAA,EAMZ,OAHEF,EAAAxlB,UAAAiM,SAAA,WACEnM,KAAK4lB,cAAchZ,IAAI5M,KAAK6lB,YAAa7lB,KAAK2lB,IAAK3lB,KAAK8lB,uDAL3CC,EAAAA,mBACUrB,MANzB3jB,EAAA,CADCsI,EAAAA,2CAGDtI,EAAA,CADCsI,EAAAA,2CAHUqc,EAAkB3kB,EAAA,CAH9BgY,EAAAA,UAAU,CACTxP,SAAU,mBAECmc,oBCEb,SAAAM,KAA8B,OAAjBA,EAAejlB,EAAA,CAL3B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,cACVF,aAAc,CAAC+b,IACfvb,QAAS,CAACub,OAECM,MCIbC,GAAA,WACE,SAAAA,EAAsBnf,GAAA9G,KAAA8G,OAAAA,SAUtBmf,EAAA/lB,UAAAgmB,cAAA,SACEzO,EACA7M,GAEA,OAAO5K,KAAKmmB,WAAW1O,EAAS7M,GAASkC,KAAKwO,EAAAA,OAAM,SAAAxY,GAAK,OAAM,IAANA,OAWnDmjB,EAAA/lB,UAAAimB,WAAR,SACE1O,EACA7M,GAFF,IAAAlC,EAAA1I,KAoBE,OAhBwB,IAAIomB,EAAAA,YAAW,SAAAC,GACrC,IAAMC,EAAa5d,EAAK6d,cAAc3b,GAEhC4b,EAAuB,IAAIC,sBAAqB,SAAAC,GACpDL,EAAS7jB,KAAKkkB,KAFS,CAAEJ,WAAUA,IAKrC,OADAE,EAAqBG,QAAQlP,GACtB,WACL+O,EAAqBI,iBAEtB9Z,KACD+Z,EAAAA,SAAQ,SAACH,GAAyC,OAAAA,KAClD5L,EAAAA,KAAI,SAACgM,GAAqC,OAAAA,EAAMC,kBAChD/Z,EAAAA,yBAMIiZ,EAAA/lB,UAAAqmB,cAAR,SAAsB3b,GACpB,GAAIA,EAAQ0b,WACV,OAAO1b,EAAQ0b,WAEjB,IAAMU,EAAehnB,KAAK8G,OAC1B,OACEkgB,EAAaC,iBACbD,EAAaC,gBAAgBC,mBAEtBF,EAAaC,gBAAgBC,wBAJtC,4CArD4B7K,qHADnB4J,EAAmBllB,EAAA,CAH/BmH,EAAAA,WAAW,CACVC,WAAY,UAED8d,GAAb,GCCAkB,GAAA,WAGE,SAAAA,EAC+BnR,EACnBlP,EACAsgB,GAFmBpnB,KAAAgW,WAAAA,EACnBhW,KAAA8G,OAAAA,EACA9G,KAAAonB,oBAAAA,EAEVpnB,KAAKqnB,mBAAqBvgB,EAAOmgB,gBAC7BngB,EAAOmgB,gBAAgBK,SACvB3X,EAAAA,qBAAqBC,eAa3BuX,EAAAjnB,UAAAqnB,KAAA,SACE9P,EACA7M,GAEA,OAAI5K,KAAKwnB,qBAAqB5c,GAAW,IAAI8E,cACpC0L,EAAAA,IAAG,GAEHpb,KAAKonB,oBAAoBlB,cAAczO,EAAS7M,IAInDuc,EAAAjnB,UAAAsnB,oBAAR,SACEC,GAEA,OACElR,EAAAA,iBAAiBvW,KAAKgW,aACtByR,IAA2B9X,EAAAA,qBAAqBC,SAC/C6X,IAA2B9X,EAAAA,qBAAqB+X,OAC/C1nB,KAAKqnB,qBAAuB1X,EAAAA,qBAAqBC,kDArCZpQ,OAAMwB,WAAA,CAAA,CAAA4E,KAA9C4L,EAAAA,OAAMC,KAAA,CAACE,EAAAA,sBACU0K,SACa4J,qKANtBkB,EAAkBpmB,EAAA,CAH9BmH,EAAAA,WAAW,CACVC,WAAY,SAMTzG,EAAA,EAAA8P,EAAAA,OAAOG,EAAAA,eAJCwV,GAAb,iBCoCE,SAAAQ,EACUhS,EACA4P,EACAK,EAGAgC,GALA5nB,KAAA2V,IAAAA,EACA3V,KAAAulB,YAAAA,EACAvlB,KAAA4lB,cAAAA,EAGA5lB,KAAA4nB,mBAAAA,EA1BA5nB,KAAA6nB,OAAgC,IAAIC,EAAAA,cAAsB,GAEpE9nB,KAAA+nB,aAAe,IAAIrc,EAAAA,aAwHrB,OA7FUic,EAAAznB,UAAA8nB,iBAAR,WACEhoB,KAAK2V,IAAIsS,QACTjoB,KAAK+nB,aAAaxZ,cAClBvO,KAAK+nB,aAAe,IAAIrc,EAAAA,aAEpB1L,KAAKkoB,cACPloB,KAAK0P,eAEL1P,KAAKmoB,UAITR,EAAAznB,UAAAkoB,YAAA,SAAYC,GACNA,EAAQC,UACVtoB,KAAKgoB,oBAIDL,EAAAznB,UAAAwP,aAAR,WAAA,IAAAhH,EAAA1I,KACEA,KAAK6nB,OAAOU,MAAK,GACjB,IAAMC,EAAcxoB,KAAKyoB,eAAezoB,KAAK2V,IAAI8B,QAAQvO,eAIzDlJ,KAAK+nB,aAAanb,IAChB5M,KAAK4nB,mBACFL,KAAKiB,EAAaxoB,KAAKkoB,eACvBta,WAAU,WACTlF,EAAKyf,SACLzf,EAAKmf,OAAOU,MAAK,QAKjBZ,EAAAznB,UAAAioB,OAAR,WACEnoB,KAAK0oB,aAAatM,EAAAA,eAAe+I,QACjCnlB,KAAK0oB,aAAatM,EAAAA,eAAe8I,SACjCllB,KAAK0oB,aAAatM,EAAAA,eAAeiJ,QAG3BsC,EAAAznB,UAAAwoB,aAAR,SAAqBzD,GAArB,IAAAvc,EAAA1I,KACMoN,EACFpN,KAAK4lB,cAAcpO,IAAIxX,KAAKsoB,SAAUrD,GZ/FT,GYkG1B7X,GAAa6X,IAAa7I,EAAAA,eAAe8I,UAC5C9X,EAAY,CAACpN,KAAKulB,cAKf5lB,MAAMgpB,QAAQvb,KACjBA,EAAY,CAACA,IAGfA,EAAUtE,SAAQ,SAAAqS,GAChBzS,EAAKvI,OAAOgb,OAIRwM,EAAAznB,UAAAC,OAAR,SAAeyoB,GACb,GAAIA,aAAyBC,EAAAA,iBAC3B7oB,KAAK2V,IAAIgB,gBAAgBiS,QACpB,GAAIA,aAAyB7C,EAAAA,YAAa,CAClC/lB,KAAK2V,IAAImT,mBACFF,EAClB,CACEG,UAAW/oB,KAAKgpB,kBAMfC,iBAUDtB,EAAAznB,UAAAuoB,eAAR,SAAuBhR,GACrB,OAAIA,aAAmByR,YACdzR,EAEFzX,KAAKyoB,eAAehR,EAAQC,gBAGrCiQ,EAAAznB,UAAAoO,YAAA,WACEtO,KAAK+nB,aAAaxZ,wDAnGLsK,EAAAA,wBACQkN,EAAAA,mBACErB,UAGMyC,MAnCtBpmB,EAAA,CAARsI,EAAAA,wCAEQtI,EAAA,CAARsI,EAAAA,+CAKQtI,EAAA,CAARsI,EAAAA,6CAEStI,EAAA,CAATooB,EAAAA,uCAVUxB,EAAe5mB,EAAA,CAH3BgY,EAAAA,UAAU,CACTxP,SAAU,gBAECoe,oBCVb,SAAAyB,KAA2B,OAAdA,EAAYroB,EAAA,CANxB2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,cACVF,aAAc,CAACge,IACf7d,UAAW,CAAC4a,IACZva,QAAS,CAACwd,OAECyB,oBCgFX,SAAAC,EACYvT,EACAC,EACAxN,EACAigB,EACA1hB,GALZ,IAAA4B,EAAA1I,KACYA,KAAA8V,WAAAA,EACA9V,KAAA+V,wBAAAA,EACA/V,KAAAuI,SAAAA,EACAvI,KAAAwoB,YAAAA,EACAxoB,KAAA8G,OAAAA,EAtDqB9G,KAAAspB,WAAY,EACRtpB,KAAAupB,eAAgB,EACZvpB,KAAAwpB,YAAa,EAI7CxpB,KAAAypB,UAAY,IAAI1I,EAAAA,qBAAwBnK,GAQxC5W,KAAA0pB,MAAqC1pB,KAAKypB,UAAU3c,KAC3D+R,EAAAA,WAAU,SAAAoG,GAAY,OAAAvc,EAAKoN,WAAW6T,eAAe1E,MACrDhY,EAAAA,KAAI,SAAA0S,GAAQ,OAAAjX,EAAKkhB,sBAAsBjK,OAGhC3f,KAAA6pB,YAEL7pB,KAAK0pB,MAAM5c,KACbgO,EAAAA,KAAI,SAAA6E,GAAQ,OAACA,GAAQA,EAAKmK,WAAanK,EAAKmK,WAAa,MACzD9c,EAAAA,sBACE,SAACiS,EAAG1f,GACF,OAAA0f,EAAEre,SAAWrB,EAAEqB,SAAWqe,EAAElY,MAAK,SAAC6Z,EAAI0D,GAAU,OAAA1D,EAAG3I,MAAQ1Y,EAAE+kB,GAAOrM,WAIlEjY,KAAA+nB,aAAe,IAAIrc,EAAAA,aAmF7B,OAxHElM,OAAAiC,eAAI4nB,EAAAnpB,UAAA,WAAQ,KAIZ,WACE,OAAOF,KAAKypB,UAAUvmB,WALxB,SAAa+hB,GACXjlB,KAAKypB,UAAUjnB,KAAKyiB,GACpBjlB,KAAKuI,SAASI,SAAS3I,KAAKwoB,YAAYtf,cAAe+b,oCA+DzDoE,EAAAnpB,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAK+nB,aAAanb,IAChB5M,KAAK6pB,YAAYjc,WAAU,SAAAkc,GACzBphB,EAAK6gB,cAAgBO,GAAcA,EAAWlpB,OAAS,EACvD8H,EAAKqhB,sBAAwBD,EAAaA,EAAWlpB,OAAS,EAC9D8H,EAAK4gB,UAAY5gB,EAAKqhB,sBAAwB,OAKpDV,EAAAnpB,UAAAoO,YAAA,WACEtO,KAAK+nB,aAAaxZ,eAQpB8a,EAAAnpB,UAAA8pB,SAAA,SAASC,GACHA,GACFjqB,KAAK+pB,wBAEP/pB,KAAKspB,UAAYtpB,KAAK+pB,sBAAwB,GAGhDV,EAAAnpB,UAAAgqB,yBAAA,SAAyBrZ,GAEvB,MAAO,CAAEnB,aADY1P,KAAKmqB,wBAAwBtZ,KAQ5CwY,EAAAnpB,UAAAiqB,wBAAR,SAAgCtZ,GAC9B,GAAI7Q,KAAK8G,OACP,OAAS9G,KAAK8G,OAAqB0I,cAAcqB,IAAkB,IAChEnB,cAIC2Z,EAAAnpB,UAAA0pB,sBAAR,SAA8BjK,GACxBA,GAAQ3f,KAAK8V,WAAWgB,uBAC1B9W,KAAK+W,qBAAqB4I,IAItB0J,EAAAnpB,UAAA6W,qBAAR,SAA6B4I,GAC3B3f,KAAK+V,wBAAwB0C,qBAC3BkH,EAAKjH,WACL1Y,KAAKwoB,YAAYtf,cACjBlJ,KAAKuI,oDA3De0L,EAAAA,kBACa6E,EAAAA,+BACf1P,EAAAA,iBACGD,EAAAA,kBACJoI,EAAAA,aA9DrBxQ,EAAA,CADCsI,EAAAA,sCASgCtI,EAAA,CAAhCqpB,EAAAA,YAAY,qDACwBrpB,EAAA,CAApCqpB,EAAAA,YAAY,6DAC4BrpB,EAAA,CAAxCqpB,EAAAA,YAAY,mBAAoB/gB,EAAAA,0CAjBtBggB,EAAiBtoB,EAAA,CAL7BuI,EAAAA,UAAU,CACTC,SAAU,8BACVC,SAAA,2cACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B2H,oBCfb,SAAAgB,KAA6B,OAAhBA,EAActpB,EAAA,CAN1B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcuf,GAAcpQ,GACtClP,UAAW,GACXH,aAAc,CAAC0f,IACflf,QAAS,CAACkf,OAECgB,oBCCb,SAAAC,KAA+B,OAAlBA,EAAgBvpB,EAAA,CAN5B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcuf,GAAciB,IACtC1gB,aAAc,CAACgX,IACf7W,UAAW,CAACmU,GACZ9T,QAAS,CAACwW,OAEC2J,SCbb,aAOaC,GAA0C,CACrDC,IAAK,CACHC,SAAS,EACTC,iBAAiB,kBCOnB,SAAAC,EACU7jB,EACA8jB,EACA5kB,GAFAhG,KAAA8G,OAAAA,EACA9G,KAAA4qB,qBAAAA,EACA5qB,KAAAgG,OAAAA,EAPFhG,KAAA6qB,UAAY,IAAI9J,EAAAA,iBAAyB,GAEjD/gB,KAAA8qB,WAAkC9qB,KAAK6qB,UAAUE,eAO3C/qB,KAAK8G,OAAO0jB,IAAIE,iBAClB1qB,KAAKgrB,OAwCX,OApCEL,EAAAzqB,UAAA8qB,KAAA,WAAA,IAAAtiB,EAAA1I,KACMA,KAAKgG,OAAO8X,eACd9d,KAAKgG,OAAO8X,aAAamN,iBACvB,uBACA,SAAAnO,GACEA,EAAMoO,iBACNxiB,EAAKyiB,cAAgBrO,EACrBpU,EAAK0iB,2BAITprB,KAAKgG,OAAO8X,aAAamN,iBAAiB,gBAAgB,WACxDviB,EAAKkiB,qBAAqBhe,IACxB,CAAE1L,IAAK,yBACPmqB,EAAAA,kBAAkBC,uBAGpB5iB,EAAK6iB,yBACL7iB,EAAKyiB,cAAgB,UAK3BR,EAAAzqB,UAAAkrB,sBAAA,WACEprB,KAAK6qB,UAAUroB,MAAK,IAGtBmoB,EAAAzqB,UAAAqrB,uBAAA,WACEvrB,KAAK6qB,UAAUroB,MAAK,IAGtBmoB,EAAAzqB,UAAAsrB,WAAA,WACMxrB,KAAKmrB,eACPnrB,KAAKmrB,cAAcM,mDA1CLC,UACctX,EAAAA,4BACdrM,EAAAA,aAVP4iB,EAAsB5pB,EAAA,CADlCmH,EAAAA,cACYyiB,oBCJX,SAAAgB,EAAsBC,GAAA5rB,KAAA4rB,uBAAAA,EASxB,OAPED,EAAAzrB,UAAAiM,SAAA,WACEnM,KAAK8qB,WAAa9qB,KAAK4rB,uBAAuBd,YAGhDa,EAAAzrB,UAAAurB,OAAA,WACEzrB,KAAK4rB,uBAAuBJ,cAEhCG,oBCNE,SAAAE,EAAsBD,GAAtB,IAAAljB,EACE2B,EAAAxJ,KAAAb,KAAM4rB,IAAuB5rB,YADT0I,EAAAkjB,uBAAAA,IAGxB,OAJoD9rB,EAAA+rB,EAAAxhB,4CACJsgB,MADnCkB,EAA8B9qB,EAAA,CAJ1CuI,EAAAA,UAAU,CACTC,SAAU,+BACVC,SAAA,oiBAEWqiB,IAAuCF,mBCClD,SAAAG,EAAsBF,GAAtB,IAAAljB,EACE2B,EAAAxJ,KAAAb,KAAM4rB,IAAuB5rB,YADT0I,EAAAkjB,uBAAAA,IAGxB,OAJiD9rB,EAAAgsB,EAAAzhB,4CACDsgB,MADnCmB,EAA2B/qB,EAAA,CAJvCuI,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAA,kGAEWsiB,IAAoCH,aCIjCI,GACdC,GAEA,MAAO,CAAEvB,SAAWlK,EAAAA,aAAeyL,EAAUxB,IAAIC,UAAY,GAG/D,SAAgBwB,GAAWL,GAEzB,OADe,WAAM,OAAAA,GA6BvB,IAAAM,GAAA,WAAA,SAAAA,KAAwB,OAAXA,EAASnrB,EAAA,CAzBrB2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAsiB,EAAAA,oBAAoBC,SAAS,mBAC7B9c,EAAAA,YAEFxF,UAAW,CACTC,EAAAA,qBAAqBwgB,IACrB,CAAEvgB,QAAS0hB,GAAiBzhB,YAAaC,EAAAA,QACzC,CACEF,QAASqiB,EAAAA,sBACTC,WAAYP,GACZQ,KAAM,CAACriB,EAAAA,SAET,CACEF,QAASwiB,EAAAA,gBACTF,WAAYL,GACZM,KAAM,CAAC5B,IACP8B,OAAO,GAET9B,IAEFhhB,aAAc,CAACmiB,GAA6BD,IAC5C1hB,QAAS,CAAC2hB,GAA6BD,OAE5BK,GAAb,GC3CMQ,GAAkB,CACtB1b,KAAM,KACNgK,YAAa,CAACkI,IACdzT,UAAWkR,IAGb,SAAgBgM,GAAY9W,GAK1B,OAJe,WACEA,EAAS2B,IAAIyL,EAAAA,QACrBnc,OAAO1D,KAAKspB,YCLLC,GAIlBC,GAAA,WAAA,SAAAA,KAA6B,OAAhBA,EAAc7rB,EAAA,CAV1B2I,EAAAA,SAAS,CACRI,UAAW,CACT,CACEE,QAASwiB,EAAAA,gBACTC,OAAO,EACPF,KAAM,CAAClU,EAAAA,UACPiU,WAAUO,QAIHD,GAAb,GCXaE,GAA8C,CACzDC,KAAM,CAAEC,MAAO,CAAC,KAChBC,SAAU,CAAED,MAAO,CAAC,cACpBlb,KAAM,CAAEkb,MAAO,CAAC,SAGhBE,MAAO,CAAEF,MAAO,CAAC,SAAUG,WAAW,GACtCf,SAAU,CAAEY,MAAO,CAAC,kBAAmBG,WAAW,GAClDC,eAAgB,CAAEJ,MAAO,CAAC,yBAA0BG,WAAW,GAC/DE,cAAe,CAAEL,MAAO,CAAC,mBAAoBG,WAAW,GACxDG,OAAQ,CAAEN,MAAO,CAAC,WAClBO,cAAe,CAAEP,MAAO,CAAC,mBAEzBjb,SAAU,CAAEib,MAAO,CAAC,aACpBQ,wBAAyB,CAAER,MAAO,CAAC,8BACnCS,qBAAsB,CAAET,MAAO,CAAC,2BAChCU,uBAAwB,CAAEV,MAAO,CAAC,6BAClCW,oBAAqB,CAAEX,MAAO,CAAC,0BAC/BY,kBAAmB,CAAEZ,MAAO,CAAC,uBAG7Ba,OAAQ,CAAEb,MAAO,CAAC,kBAClBc,SAAU,CACRd,MAAO,CAAC,0BACRe,cAAe,CAAEC,aAAc,SAEjCC,MAAO,CAAEjB,MAAO,CAAC,mCAGjBva,QAAS,CACPua,MAAO,CAAC,8BACRe,cAAe,CAAEG,YAAa,SAGhCC,mBAAoB,CAAEnB,MAAO,CAAC,yBAC9BoB,OAAQ,CACNpB,MAAO,CAAC,sBAEVqB,aAAc,CACZrB,MAAO,CAAC,+BACRe,cAAe,CAAEO,UAAW,SAE9BC,WAAY,CACVvB,MAAO,CAAC,0BACRe,cAAe,CAAEO,UAAW,SAE9BE,YAAa,CACXxB,MAAO,CAAC,sCACRe,cAAe,CAAEO,UAAW,SAE9BG,wBAAyB,CACvBzB,MAAO,CAAC,mDACRe,cAAe,CAAEO,UAAW,SAE9BI,YAAa,CACX1B,MAAO,CAAC,sCACRe,cAAe,CAAEO,UAAW,SAE9BK,wBAAyB,CACvB3B,MAAO,CAAC,mDACRe,cAAe,CAAEO,UAAW,SAE9BM,qBAAsB,CACpB5B,MAAO,CAAC,yCACRe,cAAe,CAAEc,WAAY,QAE/BC,QAAS,CAAE9B,MAAO,CAAC,uBACnB+B,YAAa,CACX/B,MAAO,CAAC,uCACRe,cAAe,CAAEiB,WAAY,UAIpBC,GAAsC,CACjDnc,QAAS,CACPuG,OAAQyT,mBClEZ,SAAAoC,WAOA,SAPaA,EACJA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUC,EACVvlB,UAAW,CAACC,EAAAA,qBAAqBklB,OAJ1BC,EAAaG,EAAAtuB,EAAA,CAHzB2I,EAAAA,SAAS,CACRE,QAAS,CAAC0lB,EAAAA,cAAkBH,UAAWvC,OAE5BsC,MCAb,SAAgBK,GAAoBriB,OAClCsiB,EAAAtiB,EAAAsiB,OACAC,EAAAviB,EAAAuiB,UACAC,EAAAxiB,EAAAwiB,mBAMAA,EAAqBA,GAAsB,QAC3C,IAAMC,EAAU,SACdC,SAEMC,EA0BV,SAA0BC,EAAeC,GACvC,IAAK,IAAIzL,EAAQwL,EAASlvB,OAAS,EAAG0jB,GAAS,EAAGA,IAChD,GAAIyL,EAAUD,EAASxL,IACrB,OAAOA,EAGX,OAAQ,EAhCc0L,CAAcJ,GAAU,SAAC1iB,GAAa,OAAXA,EAAA8D,OAAoBwe,KAC7DS,EAAsBJ,IAAgBD,EAAShvB,OAAS,EAE9D,IAAqB,IAAjBivB,GAAsBI,EACxB,OAAO,KAQT,IALA,IAAMtuB,EAAakuB,EAAc,EAC3BK,IAAShjB,EAAA,IACZuiB,GAAYG,EAASjuB,MAGflB,EAAI,EAAGA,EAAIovB,EAAapvB,IAC/ByvB,EAAU,GAAGR,EAAqBjvB,GAAOmvB,EAASnvB,GAGpD,MAAO,CAAE0vB,SAAUP,EAASpS,MAAM,EAAG7b,EAAa,GAAIuuB,UAASA,IAOjE,OAJI3P,EAAAA,cACFoP,EAA4B,mBAAI,CAAEH,OAAMA,EAAEC,UAASA,EAAEC,mBAAkBA,IAGlEC,oBCtCP,SAAAS,EACYC,EACAC,EACAC,GAFAvwB,KAAAqwB,QAAAA,EACArwB,KAAAswB,OAAAA,EACAtwB,KAAAuwB,gBAAAA,SAGZH,EAAAlwB,UAAA8qB,KAAA,WAAA,IAAAtiB,EAAA1I,KACEA,KAAKuwB,gBACFC,UACA1jB,KAAK4S,EAAAA,OAAO1T,UACZ4B,WAAU,SAAC6iB,GAAmB,OAAC/nB,EAAK+nB,KAAOA,MAGhDjxB,OAAAiC,eAAc2uB,EAAAlwB,UAAA,OAAI,KAAlB,SAAmBuwB,GACjBzwB,KAAK0wB,MAAQD,EAAKC,MAClB1wB,KAAK2wB,YAAcF,EAAKE,YACxB3wB,KAAK4wB,MAAQH,EAAKG,MAClB5wB,KAAK6wB,OAASJ,EAAKI,QAAU,CAACC,EAAAA,eAAeC,MAAOD,EAAAA,eAAeE,yCAGrExxB,OAAAiC,eAAc2uB,EAAAlwB,UAAA,QAAK,KAAnB,SAAoBwwB,GAClB1wB,KAAKqwB,QAAQY,SAASP,GAAS,qCAGjClxB,OAAAiC,eAAc2uB,EAAAlwB,UAAA,cAAW,KAAzB,SAA0BgD,GACxBlD,KAAKkxB,OAAO,CAAEhQ,KAAM,cAAevW,QAASzH,qCAG9C1D,OAAAiC,eAAc2uB,EAAAlwB,UAAA,QAAK,KAAnB,SAAoBixB,GACdA,GACFnxB,KAAKkxB,OAAO,CAAEhQ,KAAM,WAAYvW,QAASwmB,qCAI7C3xB,OAAAiC,eAAc2uB,EAAAlwB,UAAA,SAAM,KAApB,SAAqBgD,GACfA,GACFlD,KAAKkxB,OAAO,CAAEhQ,KAAM,SAAUvW,QAASzH,EAAMud,KAAK,yCAI5C2P,EAAAlwB,UAAAgxB,OAAV,SAAiBT,GACXA,EAAK9lB,SACP3K,KAAKswB,OAAOc,UAAUX,6CAzCLY,EAAAA,aACDC,EAAAA,YACSpd,EAAAA,gMAJlBkc,EAAcrvB,EAAA,CAH1BmH,EAAAA,WAAW,CACVC,WAAY,UAEDioB,MCLAmB,GAA6B,CACxCvnB,QAASwiB,EAAAA,gBACTC,OAAO,EACPH,WAAYkF,GACZjF,KAAM,CAACxkB,EAAAA,UAAWgN,EAAAA,kBAMpB,SAAgByc,GACdxrB,EACAyrB,GAOA,OALe,WACbA,EAAgBC,YAAY9jB,WAAU,SAAA+jB,GACpC3rB,EAAOwB,SAASoqB,gBAAgBD,KAAOA,wBCF3C,SAAAE,EACiC7b,EACrBhQ,EACA8rB,EACA5rB,GAHqBlG,KAAAgW,WAAAA,EACrBhW,KAAAgG,OAAAA,EACAhG,KAAA8xB,gBAAAA,EACA9xB,KAAAkG,UAAAA,SAGZ2rB,EAAA3xB,UAAA6xB,MAAA,SAAMC,GACAA,GAAUhyB,KAAKiyB,qBACjBjyB,KAAKkyB,4BAA4BC,UAAYnyB,KAAKoyB,SAASJ,KAQ/DH,EAAA3xB,UAAA+xB,iBAAA,WACE,OAAQ9gB,EAAAA,kBAAkBnR,KAAKgW,aAAeuK,EAAAA,aAGxCsR,EAAA3xB,UAAAgyB,0BAAR,WACE,IAAMvkB,EAAK,UACP0kB,EACFryB,KAAKgG,OAAOwB,SAAS8qB,eAAe3kB,GAGtC,IAAK0kB,EAAe,CAClB,IAAM9pB,EAAsBvI,KAAK8xB,gBAAgBS,eAC/C,KACA,MAEIthB,EAA4B1I,EAASZ,cAAc,UACzDsJ,EAAOtD,GAAKA,EACZsD,EAAOrL,KAAO,sBACd2C,EAAST,YAAY9H,KAAKgG,OAAOwB,SAASzF,KAAMkP,GAChDohB,EAAgBphB,EAElB,OAAOohB,GASTR,EAAA3xB,UAAAkyB,SAAA,SAASJ,GAAT,IAAAtpB,EAAA1I,KACE,OAAOwyB,KAAKC,UAAUT,GAAQ,SAACU,EAAMxvB,GACnC,MAAiB,iBAAVA,EACHwF,EAAKxC,UAAUksB,SAASO,EAAAA,gBAAgBC,KAAM1vB,GAC9CA,wEAlDLsO,EAAAA,OAAMC,KAAA,CAACE,EAAAA,sBACU5J,EAAAA,iBACS8qB,EAAAA,wBACN5qB,EAAAA,uOALZ4pB,EAAmB9wB,EAAA,CAH/BmH,EAAAA,WAAW,CACVC,WAAY,SAITzG,EAAA,EAAA8P,EAAAA,OAAOG,EAAAA,eAFCkgB,MCJbiB,GAAA,WAOE,SAAAA,EACYC,EACA7sB,GADAlG,KAAA+yB,oBAAAA,EACA/yB,KAAAkG,UAAAA,EAUd,OAlBW1G,OAAAiC,eAAIqxB,EAAA5yB,UAAA,WAAQ,KAAZ,SAAa8xB,GACpBhyB,KAAKgzB,YAAYhB,oCAUXc,EAAA5yB,UAAA8yB,YAAR,SAAoBhB,GAClB,GAAIA,GAAUhyB,KAAK+yB,oBAAoBd,mBAAoB,CACzD,IACMgB,EAAO,sCADWjzB,KAAK+yB,oBAAoBX,SAASJ,GACQ,aAClEhyB,KAAKkzB,OAASlzB,KAAKkG,UAAUK,wBAAwB0sB,8CARxBpB,UACV5pB,EAAAA,gBARdlH,EAAA,CAARsI,EAAAA,sCAIyBtI,EAAA,CAAzBqpB,EAAAA,YAAY,2CALF0I,EAAe/xB,EAAA,CAH3BgY,EAAAA,UAAU,CACTxP,SAAU,gBAECupB,GAAb,GCJaK,GAAiB,IAAInV,EAAAA,eAAe,sBAMpCoV,GAAyB,IAAIpV,EAAAA,eACxC,6BCNFqV,GAAA,WACE,SAAAA,EACUC,EAGAC,GAHAvzB,KAAAszB,cAAAA,EAGAtzB,KAAAuzB,SAAAA,SAGVF,EAAAnzB,UAAA6xB,MAAA,WAAA,IAAArpB,EAAA1I,KACEA,KAAKwzB,iBAAiB5lB,WAAU,SAACokB,GAC/BtpB,EAAK4qB,cAAcvB,MAAMC,OAIrBqB,EAAAnzB,UAAAszB,eAAR,WACE,OAAKxzB,KAAKszB,cAAcrB,oBAAuBjyB,KAAKuzB,SAG7C1mB,EAAAA,cAAc7M,KAAKuzB,SAASzY,KAAI,SAAA2Y,GAAW,OAAAA,EAAQ1B,YAAUjlB,OAF3DsO,EAAAA,+CAdcyW,kCACtBje,EAAAA,UAAQ,CAAAhO,KACR4L,EAAAA,OAAMC,KAAA,CAAC0hB,8IAJCE,EAAqBtyB,EAAA,CAHjCmH,EAAAA,WAAW,CACVC,WAAY,SAKTzG,EAAA,EAAAkS,EAAAA,YACAlS,EAAA,EAAA8P,EAAAA,OAAO2hB,MAJCE,GAAb,GCAA,SAAgBK,GAAyB7d,GAKvC,OAJe,WACGA,EAAS2B,IAAI6b,IACrBtB,SAkBZ,IAAA4B,GAAA,WAAA,SAAAA,KAAmC,OAAtBA,EAAoB5yB,EAAA,CAbhC2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,cACVF,aAAc,CAACmpB,IACf3oB,QAAS,CAAC2oB,IACVhpB,UAAW,CACT,CACEE,QAASwiB,EAAAA,gBACTF,WAAYoH,GACZnH,KAAM,CAAClU,EAAAA,UACPoU,OAAO,OAIAkH,GAAb,YCzBgBC,GAAe/d,GAK7B,OAJe,WACGA,EAAS2B,IAAI4Y,IACrBpF,QAiBZ,IAAA6I,GAAA,WAAA,SAAAA,KAAwB,OAAXA,EAAS9yB,EAAA,CAZrB2I,EAAAA,SAAS,CACRE,QAAS,CAAC+pB,IACV7pB,UAAW,CACT,CACEE,QAASwiB,EAAAA,gBACTF,WAAYsH,GACZrH,KAAM,CAAClU,EAAAA,UACPoU,OAAO,GAET8E,OAGSsC,GAAb,iBCfE,SAAAC,EAAsBvD,GAAAvwB,KAAAuwB,gBAAAA,SAEtBuD,EAAA5zB,UAAA6xB,MAAA,WAAA,IAAArpB,EAAA1I,KACE,OAAOA,KAAKuwB,gBACTC,UACA1jB,KAAKgO,EAAAA,KAAI,SAAC3I,GAAuB,OAAAzJ,EAAKqrB,QAAQ5hB,QAGzC2hB,EAAA5zB,UAAA6zB,QAAV,SAAkB5hB,SAChB,GAAa,QAATjF,EAACiF,SAAQ,IAAAjF,OAAA,EAAAA,EAAE8mB,YAAf,CAGA,IAAMC,EAAS9hB,EAAS6hB,YAAYlZ,KAAI,SAACoZ,EAAO5P,GAC9C,MAAO,CACL6P,QAAS,WACTlP,SAAUX,EAAQ,EAClB8P,KAAM,CACJC,MAAOH,EAAMxsB,KACbwZ,KAAMgT,EAAM9xB,WAgBlB,OAXI+P,EAASue,OACXuD,EAAO7wB,KAAK,CACV+wB,QAAS,WACTlP,SAAUgP,EAAOrzB,OAAS,EAC1BwzB,KAAM,CACJC,MAAOliB,EAASue,MAChBxP,KAAM/O,EAASue,SAKd,CACL4D,WAAY,oBACZH,QAAS,iBACTI,gBAAiBN,8CArCkB/f,EAAAA,mJAD5B4f,EAAuB/yB,EAAA,CAHnCmH,EAAAA,WAAW,CACVC,WAAY,UAED2rB,MCGbU,GAAA,WAAA,SAAAA,YACEA,EAAAt0B,UAAA6xB,MAAA,SAAMtf,GACJ,OAAO2I,EAAAA,GAAE/a,EAAAA,EAAAA,EAAA,GACJL,KAAKy0B,eAAehiB,IACpBzS,KAAK00B,gBAAgBjiB,IACrBzS,KAAK20B,gBAAgBliB,MAIpB+hB,EAAAt0B,UAAAu0B,eAAR,SAAuBhiB,GACrB,IAAMsF,EAAc,CAAE6c,IAAKniB,EAAQoiB,MAOnC,OANIpiB,EAAQyO,OACVnJ,EAAOmJ,KAAOzO,EAAQyO,MAEpBzO,EAAQqiB,UACV/c,EAAO4Y,YAAcle,EAAQqiB,SAExB/c,GAGDyc,EAAAt0B,UAAAy0B,gBAAR,SAAwBliB,GACtB,OAAOA,EAAQsiB,QACbtiB,EAAQsiB,OAAOC,SACfviB,EAAQsiB,OAAOC,QAAc,MAC7BviB,EAAQsiB,OAAOC,QAAc,KAAElvB,IAC7B,CACE8qB,MAAOne,EAAQsiB,OAAOC,QAAc,KAAElvB,KAExC,IAGE0uB,EAAAt0B,UAAAw0B,gBAAR,SAAwBjiB,GACtB,OAAOA,EAAsB,aACzB,CACEwb,MAAOxb,EAAsB,cAE/B,oGApCK+hB,EAAwBzzB,EAAA,CAHpCmH,EAAAA,WAAW,CACVC,WAAY,UAEDqsB,GAAb,GCAAS,GAAA,WAAA,SAAAA,YACEA,EAAA/0B,UAAA6xB,MAAA,SAAMtf,GACJ,IAAMuf,EAAc,CAAEmC,QAAS,SAe/B,OAdI1hB,EAAQyiB,QACNziB,EAAQyiB,MAAMhyB,QAChB8uB,EAAOkD,MAAQziB,EAAQyiB,MAAMhyB,OAE3BuP,EAAQyiB,MAAMC,cAChBnD,EAAOoD,cAAgB3iB,EAAQyiB,MAAMC,cAIrC1iB,EAAQ4iB,OAAS5iB,EAAQ4iB,MAAMC,mBACjCtD,EAAOuD,aAC8B,YAAnC9iB,EAAQ4iB,MAAMC,iBAAiC,UAAY,cAGxDla,EAAAA,GAAG,CACRoa,OAAQxD,mGAlBDiD,EAAyBl0B,EAAA,CAHrCmH,EAAAA,WAAW,CACVC,WAAY,UAED8sB,GAAb,GCCAQ,GAAA,WACE,SAAAA,EAAoBC,GAAA11B,KAAA01B,cAAAA,SAEpBD,EAAAv1B,UAAA6xB,MAAA,SAAMtf,GAAN,IAAA/J,EAAA1I,KACE,OAAOA,KAAK01B,cAAcC,iBAAiBljB,EAAQoiB,MAAM/nB,KACvD4S,EAAAA,OAAO1T,SACP8O,EAAAA,KAAI,SAAC8a,GACH,MAAO,CACLC,gBAAiBntB,EAAKotB,uBAAuBrjB,EAASmjB,GACtDG,OAAQH,EAAQ9a,KAAI,SAAAib,GAAU,OAAArtB,EAAKstB,aAAaD,YAMhDN,EAAAv1B,UAAA41B,uBAAR,SAA+BrjB,EAAkBmjB,GAC/C,IAAMK,EAAkB,CACtB9B,QAAS,mBASX,OAPI1hB,EAAQyjB,gBACVD,EAAWE,YAAc1jB,EAAQyjB,eAE/BN,IACFK,EAAWG,YAAcR,EAAQlW,QAAO,SAAA2W,GAAO,QAAEA,EAAIC,UAAQ11B,OAC7Dq1B,EAAWM,YAAcX,EAAQlW,QAAO,SAAA2W,GAAO,QAAEA,EAAIG,WAAS51B,QAEzDq1B,GAGDR,EAAAv1B,UAAA81B,aAAR,SAAqBD,GACnB,IAAMU,EAAoB,CACxBtC,QAAS,UAMX,GAHI4B,EAAOW,WAAaX,EAAOW,UAAUxV,OACvCuV,EAAaE,OAASZ,EAAOW,UAAUxV,MAErC6U,EAAOa,KAAM,CACf,IAAMA,EAAO,IAAIC,KAAKd,EAAOa,MAC7BH,EAAaK,cAAmBF,EAAKG,cAAa,KAAIH,EAAKI,WACzD,GAAC,IAAIJ,EAAKK,UAed,OAbIlB,EAAOmB,WACTT,EAAavV,KAAO6U,EAAOmB,UAEzBnB,EAAOS,UACTC,EAAa9F,YAAcoF,EAAOS,SAEhCT,EAAOO,SACTG,EAAaU,aAAe,CAC1BhD,QAAS,SACTgC,YAAaJ,EAAOO,OAAOc,aAIxBX,4CAtD0B/hB,EAAAA,6JADxB+gB,EAA0B10B,EAAA,CAHtCmH,EAAAA,WAAW,CACVC,WAAY,UAEDstB,GAAb,iBCCE,SAAA4B,EACUlU,EACAmU,GADAt3B,KAAAmjB,eAAAA,EACAnjB,KAAAs3B,eAAAA,EAGSt3B,KAAAu3B,sBAAwBC,EAAAA,aAAaC,eAOxDJ,EAAAn3B,UAAAw3B,WAAA,SACEC,GADF,IAAAjvB,EAAA1I,KAGE,OAAOA,KAAKmjB,eAAeyU,iBAAiB9qB,KAC1CgO,EAAAA,KAAI,SAAAF,GAAS,OAAAA,EAAMA,MAAMid,OAAoB,eAC7ChZ,EAAAA,WAAU,SAACqP,GACT,OAAOA,EACHxlB,EAAK4uB,eAAe9f,IAClB0W,EACAyJ,GAAUjvB,EAAK6uB,uBAEjBnc,EAAAA,GAAG,SAETsE,EAAAA,QAAO,SAAAoY,GAAK,YAAMlhB,IAANkhB,KACZ9qB,EAAAA,kEAzBsB6H,EAAAA,sBACAL,EAAAA,iLAHf6iB,EAAqBt2B,EAAA,CAHjCmH,EAAAA,WAAW,CACVC,WAAY,UAEDkvB,MCGbU,GAAA,WACE,SAAAA,EACUC,EAGEzE,GAHFvzB,KAAAg4B,eAAAA,EAGEh4B,KAAAuzB,SAAAA,SAGZwE,EAAA73B,UAAA6xB,MAAA,WAAA,IAAArpB,EAAA1I,KACE,OAAOA,KAAKg4B,eAAeN,aAAa5qB,KACtC+R,EAAAA,WAAU,SAACpM,GACT,OAAIA,EACK5F,EAAAA,cAAcnE,EAAKqrB,QAAQthB,IAAU3F,KAC1CgO,EAAAA,KAAI,SAAC9T,GAAc,OAAAxH,OAAOc,OAAMQ,MAAbtB,OAAMqE,EAAA,CAAQ,IAAOmD,QAGrCoU,EAAAA,GAAG,SAKN2c,EAAA73B,UAAA6zB,QAAV,SAAkBthB,GAChB,IAAKA,IAAYA,EAAQoiB,KACvB,MAAO,GAET,IAAMtB,EAAWvzB,KAAKuzB,SAClBvzB,KAAKuzB,SAASzY,KAAI,SAAA2Y,GAAW,OAAAA,EAAQ1B,MAAMtf,MAC3C,GACJ,OAAA5O,EAAA,CACEuX,EAAAA,GAAG,CACDkZ,WAAY,oBACZH,QAAS,aAERZ,6CA/BmB8D,kCACvBzjB,EAAAA,UAAQ,CAAAhO,KACR4L,EAAAA,OAAMC,KAAA,CAAC2hB,8IAJC2E,EAAoBh3B,EAAA,CAHhCmH,EAAAA,WAAW,CACVC,WAAY,SAKTzG,EAAA,EAAAkS,EAAAA,YACAlS,EAAA,EAAA8P,EAAAA,OAAO4hB,MAJC2E,GAAb,GC6BAE,GAAA,WAAA,SAAAA,KAAkC,OAArBA,EAAmBl3B,EAAA,CA/B/B2I,EAAAA,SAAS,CACRI,UAAW,CACT,CACEE,QAASmpB,GACTlpB,YAAa8tB,GACbtL,OAAO,GAET,CACEziB,QAASmpB,GACTlpB,YAAa6pB,GACbrH,OAAO,GAIT,CACEziB,QAASopB,GACTnpB,YAAauqB,GACb/H,OAAO,GAET,CACEziB,QAASopB,GACTnpB,YAAagrB,GACbxI,OAAO,GAET,CACEziB,QAASopB,GACTnpB,YAAawrB,GACbhJ,OAAO,OAIAwL,GAAb,iBC9BE,SAAAC,EACYC,EACAC,EACAjV,EACAnd,GAHAhG,KAAAm4B,YAAAA,EACAn4B,KAAAo4B,eAAAA,EACAp4B,KAAAmjB,eAAAA,EACAnjB,KAAAgG,OAAAA,SAGZkyB,EAAAh4B,UAAAm4B,sCAAA,WAAA,IAAA3vB,EAAA1I,KACEA,KAAKm4B,YACFG,eACAxrB,KAAKC,EAAAA,KAAK,IACVa,WAAU,SAAA2qB,GACL7vB,EAAK0vB,eAAeI,yBAAyBD,IAC/C7vB,EAAK+vB,iBAEP/vB,EAAK0vB,eAAeM,iCAI1BR,EAAAh4B,UAAAu4B,eAAA,WACEz4B,KAAKm4B,YAAY7K,SACjBttB,KAAKmjB,eAAewV,GAAG,CAAEC,QAAS,UAGpCV,EAAAh4B,UAAA24B,qCAAA,WAAA,IAAAnwB,EAAA1I,KACE,OAAOA,KAAKm4B,YACTG,eACAxrB,KACCgsB,EAAAA,UAAS,SAAAC,GACP,OAAA3d,EAAAA,GAAG1S,EAAK0vB,eAAeI,yBAAyBO,SAYxDb,EAAAh4B,UAAA84B,OAAA,WACMh5B,KAAKgG,OAAOizB,cACdj5B,KAAKgG,OAAOizB,aAAaC,WC1Dc,yDDgBlBvlB,EAAAA,mBACGwlB,EAAAA,sBACAtkB,EAAAA,sBACR9M,EAAAA,oOALTmwB,EAAmBn3B,EAAA,CAH/BmH,EAAAA,WAAW,CACVC,WAAY,UAED+vB,oBEqBX,SAAAkB,EACYjB,EACAC,EACAiB,EACAC,EACA1O,EACAzH,GALAnjB,KAAAm4B,YAAAA,EACAn4B,KAAAo4B,eAAAA,EACAp4B,KAAAq5B,YAAAA,EACAr5B,KAAAs5B,oBAAAA,EACAt5B,KAAA4qB,qBAAAA,EACA5qB,KAAAmjB,eAAAA,EAViBnjB,KAAAu5B,UAAW,EAEhCv5B,KAAAw5B,yBAA0B,EAqEpC,OA1DEJ,EAAAl5B,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAKy5B,cAAgBz5B,KAAKo4B,eAAesB,+BACzC15B,KAAK25B,qBAAuB35B,KAAKo4B,eAAewB,sCAChD55B,KAAK65B,UAAY75B,KAAKm4B,YAAYG,eAAexrB,KAC/C+R,EAAAA,WAAU,SAAA0Z,GACR,OAAIA,GAAWA,EAAMuB,cACnBpxB,EAAKqxB,sCAAsCxB,GACpC7vB,EAAK2wB,YAAY7hB,OAEjB4D,EAAAA,QAAGxE,QAMVwiB,EAAAl5B,UAAA65B,sCAAR,SAA8CxB,GAE1Cv4B,KAAKw5B,yBACLx5B,KAAKo4B,eAAeI,yBAAyBD,KAE7Cv4B,KAAKw5B,yBAA0B,EAC/Bx5B,KAAK4qB,qBAAqBhS,OAAOyS,EAAAA,kBAAkB2O,gBACnDh6B,KAAKmjB,eAAewV,GAAG,OAI3BS,EAAAl5B,UAAA+5B,0BAAA,SAA0B/sB,OACxBgtB,EAAAhtB,EAAAgtB,OACAC,EAAAjtB,EAAAitB,SAKAn6B,KAAKo4B,eAAegC,8BAA8BF,EAAQC,IAG5Df,EAAAl5B,UAAAotB,OAAA,WACEttB,KAAKs5B,oBAAoBjB,yCAG3Be,EAAAl5B,UAAAm6B,8BAAA,SAA8BntB,GAA9B,IAAAxE,EAAA1I,KAAgCs6B,EAAAptB,EAAAotB,WAC9Bt6B,KAAKo4B,eACFsB,+BACA5sB,KAAKC,EAAAA,KAAK,IACVa,WAAU,SAAA2sB,GACT,OAAA7xB,EAAK0vB,eAAeiC,8BAClBE,EACAD,MAGH/rB,cACHvO,KAAKw5B,yBAA0B,GAGjCJ,EAAAl5B,UAAAs6B,OAAA,WACEx6B,KAAKu5B,UAAW,EAChBv5B,KAAKs5B,oBAAoBN,mDAhEFrlB,EAAAA,mBACGwlB,EAAAA,sBACHlkB,EAAAA,mBACQijB,UACC9jB,EAAAA,4BACNS,EAAAA,kBAVC9T,EAAA,CAA5BqpB,EAAAA,YAAY,gDALFgP,EAAkBr4B,EAAA,CAN9BuI,EAAAA,UAAU,CACTC,SAAU,iBACVC,SAAA,40NAEAixB,cAAeC,EAAAA,kBAAkBC,k6GAEtBvB,MCPbwB,GAAA,WAIE,SAAAA,EACY5jB,EACAhR,EACA+J,EACA6V,GAHA5lB,KAAAgX,SAAAA,EACAhX,KAAAgG,OAAAA,EACAhG,KAAA+P,yBAAAA,EACA/P,KAAA4lB,cAAAA,EANJ5lB,KAAA66B,WAAY,SAapBD,EAAA16B,UAAAqnB,KAAA,WACMvnB,KAAK86B,aACP96B,KAAK+6B,SAOTH,EAAA16B,UAAA46B,UAAA,WAME,OALI96B,KAAKg7B,eAAiBh7B,KAAKi7B,gBACzBj7B,KAAKgG,OAAOizB,cACdj5B,KAAKgG,OAAOizB,aAAaiC,QF9CY,cE8C2B,QAG7Dl7B,KAAKg7B,cAAgBh7B,KAAKi7B,gBAO3BL,EAAA16B,UAAA86B,WAAR,WACE,IAAMnD,EAAS73B,KAAKgX,SAAShG,OAAO/H,MAAM,KAAK,GAC/C,OAAO4uB,GAAUA,EAAO5uB,MAAM,KAAK/B,SAAS,aAMtC0zB,EAAA16B,UAAA+6B,aAAR,WACE,OACEj7B,KAAKgG,OAAOizB,cACwD,SAApEj5B,KAAKgG,OAAOizB,aAAakC,QFnEc,gBE0EnCP,EAAA16B,UAAA66B,MAAR,WACE,IAAI/6B,KAAK66B,UAAT,CAGA,IAAMpqB,EAAUzQ,KAAK+P,yBAAyBW,wBAC5C0oB,IAEFp5B,KAAK4lB,cAAchZ,IAAI,gBAAiB6D,EAAS2L,EAAAA,eAAe+I,QAChEnlB,KAAK66B,WAAY,6CA1DGO,EAAAA,gBACFrzB,EAAAA,iBACkBuJ,EAAAA,gCACXoT,sNARhBkW,EAAiB75B,EAAA,CAH7BmH,EAAAA,WAAW,CACVC,WAAY,UAEDyyB,GAAb,GCCAS,GAAA,WAAA,SAAAA,KAA8B,OAAjBA,EAAet6B,EAAA,CAX3B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcmP,GACxBlP,UAAW,CACT,CACEE,QAASwiB,EAAAA,gBACTF,WAAYgP,GACZ/O,KAAM,CAACqO,IACPnO,OAAO,OAIA4O,GAAb,GAQA,SAAgBC,GAAWC,GAIzB,OAHgB,WACdA,EAAkBhU,YCfViU,GA4EAC,iBCnEV,SAAAC,EACU50B,EACAwyB,EACAnB,EACAhV,EACAwY,GAJA37B,KAAA8G,OAAAA,EACA9G,KAAAs5B,oBAAAA,EACAt5B,KAAAm4B,YAAAA,EACAn4B,KAAAmjB,eAAAA,EACAnjB,KAAA27B,kBAAAA,EAVF37B,KAAAyL,cAAgB,IAAIC,EAAAA,aAEpB1L,KAAA47B,uBAAyB,IAoEnC,OAzDEF,EAAAx7B,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAK67B,SAAW77B,KAAK87B,8BACrB97B,KAAK+7B,SAAWC,aAAY,WACtBtzB,EAAKmzB,SAAW,EAClBnzB,EAAKmzB,YAELI,cAAcvzB,EAAKqzB,UACnBrzB,EAAK4wB,oBAAoBjB,yCAE3B3vB,EAAKizB,kBAAkB1S,iBACtB,KAEHjpB,KAAKk8B,kBACLl8B,KAAKm8B,gCAGCT,EAAAx7B,UAAAg8B,gBAAR,WAAA,IAAAxzB,EAAA1I,KACEA,KAAKyL,cAAcmB,IACjB5M,KAAKmjB,eAAeiZ,eAAexuB,WAAU,SAAAwuB,GACvCA,GACF1zB,EAAK2zB,kBAMLX,EAAAx7B,UAAAi8B,6BAAR,WAAA,IAAAzzB,EAAA1I,KACEA,KAAKyL,cAAcmB,IACjB5M,KAAKm4B,YACFmE,eACAxvB,KAAKE,EAAAA,wBACLY,WAAU,SAAAzL,GAAK,OAAAuG,EAAK2zB,kBAI3BX,EAAAx7B,UAAAm8B,WAAA,WACMr8B,KAAK67B,SAAW,IAClB77B,KAAK67B,SAAW77B,KAAK87B,gCAIjBJ,EAAAx7B,UAAA47B,4BAAR,WACE,OACE97B,KAAK8G,OAAOy1B,IAAIC,kBAAkBC,uBAClCz8B,KAAK47B,uBAEE57B,KAAK47B,uBAEL57B,KAAK8G,OAAOy1B,IAAIC,kBAAkBC,wBAG7Cf,EAAAx7B,UAAAoO,YAAA,WACEtO,KAAKyL,cAAc8C,cACfvO,KAAK+7B,UACPE,cAAcj8B,KAAK+7B,oDA7DLW,EAAAA,iBACaxE,UACRvkB,EAAAA,mBACGkB,EAAAA,sBACG8nB,EAAAA,qBAXlBjB,EAAwB36B,EAAA,CANpCuI,EAAAA,UAAU,CACTC,SAAU,uBACVC,SAAA,0UAEAixB,cAAeC,EAAAA,kBAAkBC,4iCAEtBe,oBCbb,SAAAkB,KAgBA,OAfEA,EAAA18B,UAAA28B,UAAA,SAAUC,GACJA,EAAe,IACjBA,EAAe,GAEjB,IAAMC,EAAkBC,KAAKC,MAAMH,EAAe,IAC5CI,EAAkBJ,EAAe,GAQvC,OANIC,EAAU,IACS,KAAOA,GAASvf,OAAO,GAExBuf,EAAU,IAGL,KADQ,KAAOG,GAAS1f,OAAO,IAbjDof,EAAe77B,EAAA,CAH3Bo8B,EAAAA,KAAK,CACJjc,KAAM,iBAEK0b,MCAbQ,GAAA,WAAA,SAAAA,KAmBA,OARSA,EAAAC,gBAAP,SACEC,EACAC,EACAC,GAEA,IAAMC,EAA2BH,EAAK9lB,IAAI+lB,GAC1C,OAAOE,EAAQC,UAAYF,GAAcC,EAAQE,SAAWF,EAAQG,QAExER,EAnBA,iBCsBE,SAAAS,EAAoBC,GAAA99B,KAAA89B,GAAAA,EARZ99B,KAAA+9B,eAAgB,EAGxB/9B,KAAAg+B,qBAAsB,EAGtBh+B,KAAAi+B,YAAc,IAAInW,EAAAA,aA8BpB,OA1BE+V,EAAA39B,UAAAiM,SAAA,WACEnM,KAAKs9B,KAAOt9B,KAAK89B,GAAGI,MAAM,CACxBhE,OAAQ,CAAC,GAAI,CAACiE,EAAAA,WAAWC,WACzBjE,SAAU,CAAC,GAAI,CAACgE,EAAAA,WAAWC,cAI/BP,EAAA39B,UAAAm+B,SAAA,WACEr+B,KAAK+9B,eAAgB,EACjB/9B,KAAKs9B,KAAKI,SAId19B,KAAKi+B,YAAY1V,KAAK,CACpB2R,OAAQl6B,KAAKs9B,KAAKgB,SAASpE,OAAOh3B,MAClCi3B,SAAUn6B,KAAKs9B,KAAKgB,SAASnE,SAASj3B,SAI1C26B,EAAA39B,UAAAq+B,WAAA,SAAWhB,GACT,OAAOH,GAAUC,gBACfr9B,KAAKs9B,KACLC,EACAv9B,KAAK+9B,yDAzBeS,EAAAA,eALxBz9B,EAAA,CADCsI,EAAAA,mDAIDtI,EAAA,CADCooB,EAAAA,4CAPU0U,EAAyB98B,EAAA,CANrCuI,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAA,wkCAEAixB,cAAeC,EAAAA,kBAAkBC,siBAEtBkD,oBCDX,SAAAY,EACYnF,EACAD,GADAr5B,KAAAs5B,oBAAAA,EACAt5B,KAAAq5B,YAAAA,EAJJr5B,KAAA+nB,aAAe,IAAIrc,EAAAA,aAqB7B,OAdE+yB,EAAAv+B,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAK+nB,aAAanb,IAChB5M,KAAKq5B,YAAY7hB,MAAM5J,WAAU,SAAAsF,GAAQ,OAACxK,EAAKg2B,SAAWxrB,MAE5DlT,KAAK2+B,sCAAwC3+B,KAAKs5B,oBAAoBT,wCAGxE4F,EAAAv+B,UAAAu4B,eAAA,WACEz4B,KAAKs5B,oBAAoBb,kBAG3BgG,EAAAv+B,UAAAoO,YAAA,WACEtO,KAAK+nB,aAAaxZ,wDAhBa2pB,UACRjjB,EAAAA,eAPdwpB,EAA0B19B,EAAA,CANtCuI,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAA,8hBAEAixB,cAAeC,EAAAA,kBAAkBC,m+CAEtB8D,oBC+BX,SAAAG,EACUd,EACAe,EACA/3B,GAFA9G,KAAA89B,GAAAA,EACA99B,KAAA6+B,WAAAA,EACA7+B,KAAA8G,OAAAA,EAdF9G,KAAA+nB,aAAe,IAAIrc,EAAAA,aAM3B1L,KAAAi+B,YAAc,IAAInW,EAAAA,aAgFpB,OArEE8W,EAAA1+B,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAKs9B,KAAOt9B,KAAK89B,GAAGI,MAAM,CACxBY,WAAY,CAAC,MAEf9+B,KAAK6+B,WAAWE,sBAChB/+B,KAAKg/B,sBAAwBh/B,KAAK6+B,WAAWI,kCAC7Cj/B,KAAKk/B,cAAgBl/B,KAAK6+B,WAAWM,2BAErCn/B,KAAK+nB,aAAanb,IAChB5M,KAAKs9B,KAAKgB,SAASQ,WAAWM,aAC3BtyB,KAAKuyB,EAAAA,aAAa,MAClBzxB,WAAU,SAAA0xB,GACT52B,EAAK62B,iBAAiBD,QAKtBV,EAAA1+B,UAAAq/B,iBAAR,SAAyBD,GAErBtzB,QAAQhM,KAAKw/B,mBACbF,IAAoBt/B,KAAKw/B,iBAAiBte,OAE1ClhB,KAAKw/B,sBAAmB5oB,GAEtB5K,QAAQhM,KAAKw/B,oBAGjBx/B,KAAK6+B,WAAWE,sBACZO,EAAgBG,OAAO7+B,QAAU,GACnCZ,KAAK6+B,WAAWa,eAAe,CAC7BC,MAAOL,EACPM,SAAU5/B,KAAK8G,OAAOy1B,IAAImD,eAAeG,eAK/CjB,EAAA1+B,UAAA4/B,uBAAA,SAAuBpB,GACrB1+B,KAAKw/B,iBAAmBd,EACxB1+B,KAAKs9B,KAAKgB,SAASQ,WAAWiB,SAAS//B,KAAKw/B,iBAAiBte,MAC7DlhB,KAAK6+B,WAAWE,uBAGlBH,EAAA1+B,UAAAm+B,SAAA,WACMryB,QAAQhM,KAAKw/B,mBACfx/B,KAAKi+B,YAAY1V,KAAK,CAAE+R,WAAYt6B,KAAKw/B,iBAAiBlF,cAI9DsE,EAAA1+B,UAAA8/B,gBAAA,SAAgBljB,GACd,GAAI9Q,QAAQhM,KAAKigC,YAAa,CAC5B,GACEjgC,KAAKigC,WAAW/2B,cAAcg3B,SAASpjB,EAAM7b,SAC7CjB,KAAK8+B,WAAW51B,cAAcg3B,SAASpjB,EAAM7b,QAE7C,OAEAjB,KAAK6+B,WAAWE,wBAKtBH,EAAA1+B,UAAAigC,aAAA,WACEngC,KAAK6+B,WAAWE,uBAGlBH,EAAA1+B,UAAAoO,YAAA,WACEtO,KAAK+nB,aAAaxZ,cAClBvO,KAAK6+B,WAAWE,gEAxEJP,EAAAA,mBACQ4B,EAAAA,kBACJ1D,EAAAA,aARlB37B,EAAA,CADCooB,EAAAA,4CAGwBpoB,EAAA,CAAxBs/B,EAAAA,UAAU,gDACct/B,EAAA,CAAxBs/B,EAAAA,UAAU,gDAXAzB,EAA0B79B,EAAA,CATtCuI,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAA,6nCAEAixB,cAAeC,EAAAA,kBAAkBC,KACjC/xB,KAAM,CACJ03B,mBAAoB,22OAGX1B,oBCCb,SAAA2B,KAAwB,OAAXA,EAASx/B,EAAA,CAlBrB2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACA22B,EAAAA,oBACAlxB,EAAAA,WACAmxB,EAAAA,UAActR,UACdkM,IAEF1xB,aAAc,CACZyvB,GACAyE,GACAe,GACAlD,GACAkB,GACA6B,IAEF5uB,gBAAiB,CAACupB,OAEPmH,oBClBX,SAAAG,EACUC,EACAxd,GAFV,IAAAza,EAAA1I,KACUA,KAAA2gC,iBAAAA,EACA3gC,KAAAmjB,eAAAA,EAERnjB,KAAK4gC,WAAa5gC,KAAKmjB,eACpByU,iBACA9qB,KAAKgO,EAAAA,KAAI,SAAA+lB,GAAe,OAAAA,EAAYjmB,MAAMid,OAAOvJ,cAEpDtuB,KAAK8gC,WAAa9gC,KAAK4gC,WAAW9zB,KAChCG,EAAAA,KAAI,SAAAqhB,GACEA,EACF5lB,EAAKi4B,iBAAiBI,iBAAiBzS,GAEvC5lB,EAAKi4B,iBAAiBK,uBAG1BC,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,YAI3CT,EAAAxgC,UAAAkhC,gBAAA,WAAA,IAAA14B,EAAA1I,KACE,OAAOA,KAAK8gC,WAAWh0B,KACrB+R,EAAAA,WAAU,WAAM,OAAAnW,EAAKi4B,iBAAiBS,gEArBdhsB,EAAAA,wBACFP,EAAAA,mLANf6rB,EAAmB3/B,EAAA,CAH/BmH,EAAAA,WAAW,CACVC,WAAY,UAEDu4B,oBCUX,SAAAW,EACYC,EACAC,EACAC,GAFAxhC,KAAAshC,oBAAAA,EACAthC,KAAAuhC,gBAAAA,EACAvhC,KAAAwhC,kBAAAA,SAGZH,EAAAnhC,UAAAuhC,mBAAA,SACEC,GAEA,OAAQA,GACN,KAAKC,EAAAA,kBAAkBC,WACrB,OAAO5hC,KAAK6hC,6BACd,KAAKF,EAAAA,kBAAkBG,SACrB,OAAO9hC,KAAK+hC,iCACd,KAAKJ,EAAAA,kBAAkBK,MACrB,OAAOhiC,KAAKiiC,8BACd,QACE,OAAO7mB,EAAAA,GAAG,MAIhBimB,EAAAnhC,UAAA2hC,2BAAA,WAAA,IAAAn5B,EAAA1I,KACE,OAAOA,KAAKwhC,kBACT9P,YACA5kB,KAAKgO,EAAAA,KAAI,SAAAhJ,GAAQ,OAAApJ,EAAKw5B,iCAAiCpwB,QAGpDuvB,EAAAnhC,UAAAgiC,iCAAR,SAAyCpwB,GACvC,IAAMqwB,EAAsB,GAC5BA,EAAoB/+B,KAAItC,MAAxBqhC,EAAmBt+B,EAAUiO,EAAKswB,0BAA4B,KAE9D,IAAMC,EAAoB,GAG1B,OAFAA,EAAkBj/B,KAAItC,MAAtBuhC,EAAiBx+B,EAAUiO,EAAKwwB,wBAA0B,KAE1Dz+B,EAAWs+B,EAAwBE,IAGrChB,EAAAnhC,UAAA6hC,+BAAA,WAAA,IAAAr5B,EAAA1I,KACE,OAAOA,KAAKuhC,gBACTH,kBACAt0B,KAAKgO,EAAAA,KAAI,SAAAynB,GAAS,OAAA75B,EAAK85B,kCAAkCD,QAG9DlB,EAAAnhC,UAAA+hC,4BAAA,WAAA,IAAAv5B,EAAA1I,KACE,OAAOA,KAAKshC,oBACTF,kBACAt0B,KAAKgO,EAAAA,KAAI,SAAAynB,GAAS,OAAA75B,EAAK85B,kCAAkCD,QAGtDlB,EAAAnhC,UAAAsiC,kCAAR,SAA0CD,GACxC,IAAMD,EAAyB,GAG/B,OAFAA,EAAuBl/B,KAAItC,MAA3BwhC,EAAsBz+B,EAAU0+B,EAAMD,wBAA0B,KAEzDA,GAGTjB,EAAAnhC,UAAAuiC,4BAAA,SACErO,EACAsN,GAFF,IAAAh5B,EAAA1I,KAIE,OAAQ0hC,GACN,KAAKC,EAAAA,kBAAkBC,WACrB,OAAO5hC,KAAKwhC,kBACT9P,YACA5kB,KACCgO,EAAAA,KAAI,SAAAhJ,GACF,OAAApJ,EAAKg6B,oBACHtO,EACAtiB,EAAK6wB,0BAA4B,QAI3C,KAAKhB,EAAAA,kBAAkBG,SACrB,OAAO9hC,KAAKuhC,gBACTH,kBACAt0B,KACCgO,EAAAA,KAAI,SAAAynB,GACF,OAAA75B,EAAKg6B,oBACHtO,EACAmO,EAAMI,0BAA4B,QAI5C,KAAKhB,EAAAA,kBAAkBK,MACrB,OAAOhiC,KAAKshC,oBACTF,kBACAt0B,KACCgO,EAAAA,KAAI,SAAAynB,GACF,OAAA75B,EAAKg6B,oBACHtO,EACAmO,EAAMI,0BAA4B,UAOxCtB,EAAAnhC,UAAAwiC,oBAAR,SACEtO,EACAwO,eAEMC,EAAqC,GAC3C,GAAID,GAAcA,EAAWhiC,OAAS,MACpC,IAAwB,IAAAkiC,EAAAv/B,EAAAq/B,GAAUG,EAAAD,EAAAtgC,QAAAugC,EAAA9/B,KAAA8/B,EAAAD,EAAAtgC,OAAE,CAA/B,IAAMwgC,EAASD,EAAA7/B,MAClB,GACE8/B,EAAUrS,aACVqS,EAAUC,iBACVD,EAAUC,gBAAgBriC,OAAS,MAEnC,IAA4B,IAAAke,GAAAokB,OAAA,EAAA3/B,EAAAy/B,EAAUC,kBAAelkB,EAAAD,EAAAtc,QAAAuc,EAAA9b,KAAA8b,EAAAD,EAAAtc,OAAE,CAAlD,IAAM2gC,EAAapkB,EAAA7b,MAClBlD,KAAKojC,kBAAkBD,EAAe/O,IACxCyO,EAAgBz/B,KAAK4/B,wMAM/B,OAAOH,GAGDxB,EAAAnhC,UAAAkjC,kBAAR,SAA0BD,EAAoBrc,WACtCuc,EAAsBF,EAAcG,iBAC1C,GAAIxc,EAAMJ,SAAWI,EAAMJ,QAAQ9lB,OAAS,EAAG,KAC7C,IAAuB,IAAAuM,EAAA5J,EAAAujB,EAAMJ,SAAO5H,EAAA3R,EAAA3K,QAAAsc,EAAA7b,KAAA6b,EAAA3R,EAAA3K,OAAE,CACpC,GADiBsc,EAAA5b,MACJqgC,cAAgBF,EAC3B,OAAO,oGAGX,OAAO,EAEP,OAAOA,IAAwBvc,EAAMyc,sDAjIR7C,UACJ5sB,EAAAA,uBACED,EAAAA,0MAJpBwtB,EAAgBtgC,EAAA,CAH5BmH,EAAAA,WAAW,CACVC,WAAY,UAEDk5B,oBCsBX,SAAAmC,EACYj4B,EACAk4B,EACAC,GAFA1jC,KAAAuL,aAAAA,EACAvL,KAAAyjC,YAAAA,EACAzjC,KAAA0jC,iBAAAA,EAtBZ1jC,KAAA4L,UAAYxL,EAAAA,UAOZJ,KAAA0hC,kBAAuCC,EAAAA,kBAAkBC,WAEzD5hC,KAAA2jC,SAAW,EACX3jC,KAAA4jC,aAAc,EAKd5jC,KAAAs9B,KAAkB,IAAIuG,EAAAA,UAAU,IAgElC,OAlDEL,EAAAtjC,UAAA4jC,mBAAA,WAAA,IAAAp7B,EAAA1I,KA2BE,OA1BKA,KAAK+jC,mBACR/jC,KAAK+jC,iBAAmB/jC,KAAKgkC,OAAOl3B,KAClC4S,EAAAA,QAAO,SAAArc,GAAK,QAAEA,KACdyX,EAAAA,KAAI,SAAAgM,GAAS,OAAApe,EAAKu7B,eAAend,MACjCjI,EAAAA,WAAU,WACR,OAAAnW,EAAK40B,KAAK8B,aAAatyB,KAErBo3B,EAAAA,UAAU,MACVj3B,EAAAA,KAAI,SAAAk3B,GACEA,GACFz7B,EAAK+6B,YAAYW,YACfD,EAAYZ,YACZY,EAAYR,UAEe,IAAzBQ,EAAYR,UACdj7B,EAAK27B,aAAa,YAGpB37B,EAAK40B,KAAKgH,wBAKlBxpB,EAAAA,KAAI,WAAM,OAAapS,EAAK40B,KAAK9lB,IAAI,iBAGlCxX,KAAK+jC,kBAGdP,EAAAtjC,UAAAiM,SAAA,WACEnM,KAAKukC,iBAAmBvkC,KAAK0jC,iBAAiBjC,mBAC5CzhC,KAAK0hC,oBAID8B,EAAAtjC,UAAA+jC,eAAR,SAAuBnd,GACrB,IAAK9mB,KAAKs9B,KAAK9lB,IAAI,YAAa,CAC9B,IAAMmsB,EAAW,IAAIa,EAAAA,YAAY1d,EAAM6c,SAAU,CAAEc,SAAU,SAC7DzkC,KAAKs9B,KAAKoH,WAAW,WAAYf,GAEjC,IAAMJ,EAAc,IAAIiB,EAAAA,YAAY1d,EAAMyc,aAC1CvjC,KAAKs9B,KAAKoH,WAAW,cAAenB,GAEtC,OAAoBvjC,KAAKs9B,KAAK9lB,IAAI,aAGpCgsB,EAAAtjC,UAAAmkC,aAAA,SAAap5B,GACXjL,KAAKuL,aAAaP,mBAAmBC,6CAzDbV,SACDsJ,EAAAA,yBACKwtB,MAT9BtgC,EAAA,CADCs/B,EAAAA,UAAU,SAAU,CAAEsE,KAAMx7B,EAAAA,2CAblBq6B,EAA0BziC,EAAA,CAJtCuI,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAA,sgHAEWg6B,oBC2BX,SAAAoB,EACYr5B,EACAs5B,EACFC,EACEtD,GAHAxhC,KAAAuL,aAAAA,EACAvL,KAAA6kC,sBAAAA,EACF7kC,KAAA8kC,GAAAA,EACE9kC,KAAAwhC,kBAAAA,EA1BHxhC,KAAA+kC,cAAe,EAWxB/kC,KAAAglC,UAAW,EACXhlC,KAAA2jC,SAAW,EACX3jC,KAAAilC,WAAY,EAKZjlC,KAAAklC,cAAgB,IAAIrB,EAAAA,UAAU,CAC5BF,SAAU,IAAIa,EAAAA,YAAY,KAwF9B,OA9EEI,EAAA1kC,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACMA,KAAKyS,SACPzS,KAAKkuB,YAAcluB,KAAKyS,QAAQoiB,KAChC70B,KAAKmlC,WAAanlC,KAAKwhC,kBAAkB4D,SAASplC,KAAKkuB,aACvDluB,KAAKqlC,aAAarlC,KAAKyS,SACvBzS,KAAK8kC,GAAG7b,gBACCjpB,KAAKkuB,aACdluB,KAAKmlC,WAAanlC,KAAKwhC,kBAAkB4D,SAASplC,KAAKkuB,aAEvDluB,KAAK2jC,SAAW,EAChB3jC,KAAKglC,UAAW,EAChBhlC,KAAK8kC,GAAG7b,gBAERjpB,KAAK+nB,aAAe/nB,KAAK6kC,sBACtBnN,aACA5qB,KAAK4S,EAAAA,OAAO1T,UACZ4B,WAAU,SAAC6E,GACV/J,EAAKwlB,YAAczb,EAAQoiB,KAC3BnsB,EAAK28B,aAAa5yB,GAClB/J,EAAKy8B,WAAaz8B,EAAK84B,kBAAkB4D,SAAS18B,EAAKwlB,aACvDxlB,EAAKo8B,GAAG7b,mBAKR2b,EAAA1kC,UAAAmlC,aAAR,SAAqB5yB,GACnBzS,KAAK2jC,SAAW,EAChB3jC,KAAKglC,SACHvyB,EAAQ4iB,OAA4C,eAAnC5iB,EAAQ4iB,MAAMC,iBAC7Bt1B,KAAKglC,UAAYvyB,EAAQ4iB,MAAMiQ,aACjCtlC,KAAKulC,YAAc9yB,EAAQ4iB,MAAMiQ,aAIrCV,EAAA1kC,UAAAslC,YAAA,SAAYtiC,GACVlD,KAAK2jC,SAAWzgC,GAGlB0hC,EAAA1kC,UAAAulC,UAAA,WAAA,IAAA/8B,EAAA1I,KACQ2jC,EAAW3jC,KAAKklC,cAAc1tB,IAAI,YAAYtU,OAC/ClD,KAAKkuB,aAAeyV,GAAY,GAKrC3jC,KAAKwhC,kBACF4D,SAASplC,KAAKkuB,aACdtgB,WAAU,SAAAkZ,GACLA,IACFpe,EAAKu8B,WAAY,GAEnBv8B,EAAKg9B,YACLh9B,EAAK84B,kBAAkBmE,SAASj9B,EAAKwlB,YAAayV,GAClDj7B,EAAKu8B,WAAY,KAElB12B,eAGGq2B,EAAA1kC,UAAAwlC,UAAR,WACE,IAAIE,EACJ5lC,KAAK6lC,SAAW7lC,KAAKuL,aAAab,KAAK84B,GAA4B,CACjEz0B,UAAU,EACVC,KAAM,QAGR42B,EAAgB5lC,KAAK6lC,SAASC,mBAChB9B,OAAShkC,KAAKmlC,WAC5BS,EAAcG,MAAQ/lC,KAAKwhC,kBAAkB9P,YAC7CkU,EAAcI,QAAUhmC,KAAKwhC,kBAAkByE,YAC/CL,EAAcjC,SAAW3jC,KAAK2jC,SAC9BiC,EAAcX,UAAYjlC,KAAKilC,WAGjCL,EAAA1kC,UAAAoO,YAAA,WACMtO,KAAK+nB,cACP/nB,KAAK+nB,aAAaxZ,wDAjFIhE,SACS8sB,UACrBsF,EAAAA,yBACiB9oB,EAAAA,qBA3BtB9S,EAAA,CAARsI,EAAAA,2CACQtI,EAAA,CAARsI,EAAAA,4CAMQtI,EAAA,CAARsI,EAAAA,uCARUu7B,EAAkB7jC,EAAA,CAL9BuI,EAAAA,UAAU,CACTC,SAAU,iBACVC,SAAA,iuBACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BkjB,oBCjBb,SAAAsB,0GAAsBA,EAAgBnlC,EAAA,CAHrCmH,EAAAA,WAAW,CACVC,WAAY,UAEQ+9B,MCgBtBC,GAAA,WAeE,SAAAA,EACY79B,EACA89B,GADApmC,KAAAsI,WAAAA,EACAtI,KAAAomC,QAAAA,EANFpmC,KAAAqmC,cAAiC,GA+D7C,OAtDEF,EAAAjmC,UAAAiM,SAAA,WACEnM,KAAKsmC,0BACLtmC,KAAKumC,kBAAoB,GASjBJ,EAAAjmC,UAAAomC,wBAAV,WACQtmC,KAAK8G,QAA0B,KAAhB9G,KAAK8G,SAAkB9G,KAAKqmC,gBAC/CrmC,KAAK8G,OAAS9G,KAAKqmC,gBAQvB7mC,OAAAiC,eAAc0kC,EAAAjmC,UAAA,OAAI,KAAlB,WACE,OAAOF,KAAKsI,WAAWY,+CAUzB1J,OAAAiC,eAAc0kC,EAAAjmC,UAAA,mBAAgB,KAA9B,SAA+BsmC,GACzBxmC,KAAKymC,2BACPzmC,KAAKwmC,SAAWA,oCAWpBhnC,OAAAiC,eAAY0kC,EAAAjmC,UAAA,2BAAwB,KAApC,WACE,YACoB0W,IAAlB5W,KAAKwmC,WAGE,IAFP,CAAC,SAAU,QAAS,SAAU,YAAY/oB,QACxCzd,KAAK4I,KAAK89B,QAAQC,kBAEI,MAAtB3mC,KAAK4I,KAAK89B,SAAmB1mC,KAAK4I,KAAKg+B,aAAa,mFAvDlCz9B,EAAAA,kBACH+8B,MAJkBnlC,EAAA,CAAtCsI,EAAAA,QAAS+gB,EAAAA,YAAY,iDAbF+b,EAAkBplC,EAAA,CADvCgY,EAAAA,aACqBotB,GAAtB,GCXAU,GAAA,SAAAx8B,GAAA,SAAAw8B,IAAA,IAAAn+B,EAAA,OAAA2B,GAAAA,EAAAvJ,MAAAd,KAAAW,YAAAX,YACY0I,EAAA29B,cAAoC,CAAES,mBAAmB,GAMjCp+B,EAAAq+B,YAAa,IAiBjD,OAxB2CjnC,EAAA+mC,EAAAx8B,GASdw8B,EAAA3mC,UAAA8mC,gBAAA,WACrBhnC,KAAKinC,qBACPjnC,KAAK+mC,YAAa,IAIGF,EAAA3mC,UAAAgnC,cAAA,WACnBlnC,KAAKinC,qBACPjnC,KAAK+mC,YAAa,IAItBvnC,OAAAiC,eAAcolC,EAAA3mC,UAAA,qBAAkB,KAAhC,iBACE,OAAkB,QAAlBgN,EAAOlN,KAAK8G,cAAM,IAAAoG,OAAA,EAAAA,EAAE45B,mDAfY/lC,EAAA,CAAjCqpB,EAAAA,YAAY,uDAEcrpB,EAAA,CAA1BomC,EAAAA,aAAa,kDAMWpmC,EAAA,CAAxBomC,EAAAA,aAAa,8CAfHN,EAAqB9lC,EAAA,CADjCgY,EAAAA,aACY8tB,GAAb,CAA2CV,mBCIzC,SAAAiB,EACY9+B,EACA89B,GAFZ,IAAA19B,EAIE2B,EAAAxJ,KAAAb,KAAMsI,EAAY89B,IAAQpmC,YAHhB0I,EAAAJ,WAAAA,EACAI,EAAA09B,QAAAA,EAPF19B,EAAA29B,cAAkC,CAAEgB,OAAO,GAG3C3+B,EAAA5B,OAA2B,KAevC,OApByChH,EAAAsnC,EAAA/8B,GAcvC+8B,EAAAlnC,UAAAiM,SAAA,WACE9B,EAAAnK,UAAMiM,SAAQtL,KAAAb,MACVA,KAAK8G,OAAOugC,QACdrnC,KAAKwmC,UAAY,6CATGr9B,EAAAA,kBACH+8B,MATVkB,EAAmBrmC,EAAA,CAF/BgY,EAAAA,aAEYquB,IAA4BP,ICQzCS,GAAA,SAAAj9B,GAAA,SAAAi9B,IAAA,IAAA5+B,EAAA,OAAA2B,GAAAA,EAAAvJ,MAAAd,KAAAW,YAAAX,YAGY0I,EAAA6+B,MAAQ,IAAI3iB,aAHiB9kB,EAAAwnC,EAAAj9B,GAKvCi9B,EAAApnC,UAAAsX,IAAA,SAAI0mB,GACF,OAAOl+B,KAAKunC,MAAM/vB,IAAI0mB,GAjBL,QAoBnBoJ,EAAApnC,UAAAulB,IAAA,SAAIviB,EAAeg7B,GACbh7B,GACFlD,KAAKunC,MAAM9hB,IAAIyY,GAtBA,MAsBuBh7B,IAI1CokC,EAAApnC,UAAAsnC,oBAAA,SAAoB5+B,EAAmB9B,SACrC,OAAa,QAANoG,EAAApG,SAAM,IAAAoG,OAAA,EAAAA,EAAEgxB,OAAQp3B,EAAOo3B,MAAQt1B,EAAK6+B,aC5Bf,sHDYnBH,EAAmBvmC,EAAA,CAH/BmH,EAAAA,WAAW,CACVC,WAAY,UAEDm/B,GAAb,CAAyCpB,IEwBzCwB,GAAA,SAAAr9B,GAgCE,SAAAq9B,EACYp/B,EACA89B,GAFZ,IAAA19B,EAIE2B,EAAAxJ,KAAAb,KAAMsI,EAAY89B,IAAQpmC,YAHhB0I,EAAAJ,WAAAA,EACAI,EAAA09B,QAAAA,EAhCF19B,EAAA29B,cAAoC,GAQpC39B,EAAA5B,OAA6B,KAuEzC,OAjF2ChH,EAAA4nC,EAAAr9B,GAyBzCq9B,EAAAxnC,UAAAynC,YAAA,SAAY7qB,WACV9c,KAAKomC,QAAQ3gB,IAAIzlB,KAAKkB,IAAKlB,KAAKk+B,OAE3B,QAALhxB,EAAA4P,SAAK,IAAA5P,GAAAA,EAAEge,iBACF,QAAL/d,EAAA2P,SAAK,IAAA3P,GAAAA,EAAEy6B,mBAUTF,EAAAxnC,UAAAiM,SAAA,WACE9B,EAAAnK,UAAMiM,SAAQtL,KAAAb,MACdA,KAAK6nC,KAAO7nC,KAAKkB,IAAMlB,KAAKkB,SAAM0V,GAG1B8wB,EAAAxnC,UAAAomC,wBAAV,WAC6B,iBAAhBtmC,KAAK8G,QAAuC,KAAhB9G,KAAK8G,SAC1C9G,KAAK8G,OAAS,CAAE5F,IAAKlB,KAAK8G,SAE5BuD,EAAAnK,UAAMomC,wBAAuBzlC,KAAAb,OAM/B0nC,EAAAxnC,UAAA4nC,gBAAA,WACM9nC,KAAK+nC,aACP/nC,KAAK4I,KAAK2+B,MAAM,CAAES,eAAe,KAIrCxoC,OAAAiC,eAAcimC,EAAAxnC,UAAA,cAAW,KAAzB,WACE,QAASF,KAAKkB,KAAOlB,KAAKomC,QAAQ5uB,IAAIxX,KAAKk+B,SAAWl+B,KAAKkB,qCAO7D1B,OAAAiC,eAAcimC,EAAAxnC,UAAA,MAAG,KAAjB,iBACE,OAA0C,QAA1CgN,EAAQlN,KAAK8G,cAA6B,IAAAoG,OAAA,EAAAA,EAAEhM,qCAM9C1B,OAAAiC,eAAcimC,EAAAxnC,UAAA,QAAK,KAAnB,WACE,OAAOF,KAAKomC,QAAQoB,oBAClBxnC,KAAK4I,KACL5I,KAAK8G,kFA7CeqC,EAAAA,kBACHm+B,MAjBcvmC,EAAA,CAAlCqpB,EAAAA,YAAY,kDAQbrpB,EAAA,CADComC,EAAAA,aAAa,QAAS,CAAC,4CAxBbO,EAAqB3mC,EAAA,CADjCgY,EAAAA,aACY2uB,GAAb,CAA2CN,kBCjC3C,SAAAa,IAKYjoC,KAAAkoC,mBAA+B,CACvC,UACA,SACA,aACA,QACA,SACA,YAQQloC,KAAAmoC,wBAA0B,wCAEpCF,EAAA/nC,UAAAy/B,MAAA,SAAM/2B,EAAmBW,GACvB,OAAKA,GAAyB,KAAbA,EAGV5J,MAAMqa,KACXpR,EAAKw/B,iBAAiB7+B,IAHf,IAOX0+B,EAAA/nC,UAAAmoC,mBAAA,SACEz/B,EACA9B,cAAA,IAAAA,IAAAA,EAAA,CAA4BwhC,WAAW,IAEvC,IAAM/+B,EACyB,iBAAhB,QAAb2D,EAAOpG,SAAM,IAAAoG,OAAA,EAAAA,EAAEo7B,WAAyBxhC,EAAOwhC,UAAY,cAG7D,OACEtoC,KAAK2/B,MAAM/2B,EAAMW,GAAUxC,KAAKiF,UAChChM,KAAKuoC,cAAc3/B,GAAM7B,KAAKiF,UAWlCi8B,EAAA/nC,UAAAqoC,cAAA,SAAc3/B,EAAmB4/B,QAAA,IAAAA,IAAAA,GAAA,GAC/B,IAAIC,EAASzoC,KAAKmoC,wBACbK,IACHC,GAAU,yBAEZ,IAAMl/B,EAAWvJ,KAAKkoC,mBAAmBptB,KAAI,SAAAta,GAAK,OAACA,EAAKioC,KAAShoB,KAAK,KACtE,OAAOzgB,KAAK2/B,MAAM/2B,EAAMW,kGAzDf0+B,EAAkBlnC,EAAA,CAH9BmH,EAAAA,WAAW,CACVC,WAAY,UAED8/B,qBCGX,SAAAS,EAAsBC,GAAtB,IAAAjgC,EACE2B,EAAAxJ,KAAAb,OAAOA,YADa0I,EAAAigC,gBAAAA,WADgB7oC,EAAA4oC,EAAAr+B,GAKtCq+B,EAAAxoC,UAAA0oC,YAAA,SAAY9hC,SACV,SAAe,QAAPoG,EAACpG,SAAM,IAAAoG,OAAA,EAAAA,EAAE27B,gBAGnBH,EAAAxoC,UAAA4oC,aAAA,SACElgC,EACA9B,EACAgW,WAEI9c,KAAK4oC,YAAY9hC,KACf8B,IAASkU,EAAM7b,QACjB2H,EAAK2+B,MAAM,CAAES,eAAe,IAC5BlrB,EAAMoO,iBACNpO,EAAM8qB,oBAEI,QAAV16B,EAAIpG,SAAM,IAAAoG,OAAA,EAAAA,EAAE67B,uBAEsC,QADhD57B,EAAAnN,KAAK2oC,gBACFN,mBAAmBz/B,EAAM,CAAE0/B,WAAW,WAAO,IAAAn7B,GAAAA,EAC5Co6B,oDAtB2BU,uHAD5BS,EAAkB3nC,EAAA,CAH9BmH,EAAAA,WAAW,CACVC,WAAY,UAEDugC,IAA2BpB,ICYxC0B,GAAA,SAAA3+B,GAqBE,SAAA2+B,EACY1gC,EACA89B,GAFZ,IAAA19B,EAIE2B,EAAAxJ,KAAAb,KAAMsI,EAAY89B,IAAQpmC,YAHhB0I,EAAAJ,WAAAA,EACAI,EAAA09B,QAAAA,EArBF19B,EAAA29B,cAAmC,CAAEwC,eAAe,GAKpDngC,EAAAugC,IAAM,IAAInhB,EAAAA,eA2BtB,OAlC0ChoB,EAAAkpC,EAAA3+B,GAcxC2+B,EAAA9oC,UAAA4oC,aAAA,SAAahsB,GACP9c,KAAKomC,QAAQwC,YAAY5oC,KAAK8G,SAChC9G,KAAKomC,QAAQ0C,aAAa9oC,KAAK4I,KAAM5I,KAAK8G,OAAQgW,GAEpD9c,KAAKipC,IAAI1gB,KAAKvoB,KAAKomC,QAAQwC,YAAY5oC,KAAK8G,UAU9CkiC,EAAA9oC,UAAAiM,SAAA,WACMnM,KAAKomC,QAAQwC,YAAY5oC,KAAK8G,UAChC9G,KAAKumC,kBAAoB,GAE3Bl8B,EAAAnK,UAAMiM,SAAQtL,KAAAb,gDAVQmJ,EAAAA,kBACHu/B,MAhBX3nC,EAAA,CAATooB,EAAAA,oCAODpoB,EAAA,CADComC,EAAAA,aAAa,iBAAkB,CAAC,6CAbtB6B,EAAoBjoC,EAAA,CADhCgY,EAAAA,aACYiwB,GAAb,CAA0CtB,mBCT1C,SAAAwB,0DAAsCppC,EAAAopC,EAAA7+B,GAIpC6+B,EAAAhpC,UAAAmoC,mBAAA,SACEz/B,EACA9B,SAEA,YAFA,IAAAA,IAAAA,EAAA,CAA4BwhC,WAAW,IAEb,WAAhB,QAANp7B,EAAApG,SAAM,IAAAoG,OAAA,EAAAA,EAAEo7B,WACH1/B,EACE5I,KAAKmpC,kBAAkBvgC,EAAM9B,GAC/B9G,KAAKopC,aAAaxgC,EAAM5I,KAAKwnC,oBAAoB5+B,EAAM9B,IAEvD9G,KAAK2oC,gBAAgBN,mBAAmBz/B,EAAM9B,IAOzDoiC,EAAAhpC,UAAAipC,kBAAA,SAAkBvgC,EAAmB9B,GACnC,QAAS9G,KAAKopC,aAAaxgC,EAAM5I,KAAKwnC,oBAAoB5+B,EAAM9B,KAUxDoiC,EAAAhpC,UAAAkpC,aAAV,SAAuBxgC,EAAmBs1B,GACxC,GAAKl+B,KAAKwX,IAAI0mB,GAAd,CAGA,IAAMmL,EAAW1pC,MAAMqa,KACrBpR,EAAKw/B,iBACH,mBAAmBpoC,KAAKwX,IAAI0mB,GAAM,OAGtC,OAAOmL,EAASzoC,OAAS,EAAIyoC,EAAS,GAAK,wHAxClCH,EAAgBnoC,EAAA,CAH5BmH,EAAAA,WAAW,CACVC,WAAY,UAED+gC,IAAyBR,ICetCY,GAAA,SAAAj/B,GAQE,SAAAi/B,EACYhhC,EACA89B,GAFZ,IAAA19B,EAIE2B,EAAAxJ,KAAAb,KAAMsI,EAAY89B,IAAQpmC,YAHhB0I,EAAAJ,WAAAA,EACAI,EAAA09B,QAAAA,EAPF19B,EAAA29B,cAAiC,CAAEiC,WAAW,KAgE1D,OAnEwCxoC,EAAAwpC,EAAAj/B,GAkBtCi/B,EAAAppC,UAAA4nC,gBAAA,WACM9nC,KAAKupC,iBACPvpC,KAAK2nC,cAEF3nC,KAAKupC,kBAAmBvpC,KAAKmpC,mBAChC9+B,EAAAnK,UAAM4nC,gBAAejnC,KAAAb,OAQzBspC,EAAAppC,UAAAynC,YAAA,SAAY7qB,WACN9c,KAAKupC,mBACG,QAANr8B,EAAC4P,SAAK,IAAA5P,OAAA,EAAAA,EAAEjM,SAAU6b,EAAM7b,SAAWjB,KAAK4I,KAGzCkU,EAAM7b,OAAuBsmC,QAFX,QAAnBp6B,EAAAnN,KAAKwpC,sBAAc,IAAAr8B,GAAAA,EAAEo6B,SAKzBl9B,EAAAnK,UAAMynC,YAAW9mC,KAAAb,KAAC8c,IAMpBtd,OAAAiC,eAAc6nC,EAAAppC,UAAA,oBAAiB,KAA/B,WACE,OAAOF,KAAKomC,QAAQ+C,kBAAkBnpC,KAAK4I,KAAM5I,KAAK8G,yCASxDtH,OAAAiC,eAAY6nC,EAAAppC,UAAA,kBAAe,KAA3B,iBACE,SAAoB,QAAZgN,EAAClN,KAAK8G,cAAM,IAAAoG,OAAA,EAAAA,EAAEo7B,4CAQxB9oC,OAAAiC,eAAY6nC,EAAAppC,UAAA,iBAAc,KAA1B,WACE,OAAOF,KAAKomC,QAAQiC,mBAAmBroC,KAAK4I,KAAM5I,KAAK8G,kFAxDjCqC,EAAAA,kBACH+/B,MAVVI,EAAkBvoC,EAAA,CAD9BgY,EAAAA,aACYuwB,GAAb,CAAwCN,mBCnBxC,SAAAS,0DAAqC3pC,EAAA2pC,EAAAp/B,GAInCo/B,EAAAvpC,UAAAwpC,QAAA,SACE9gC,EACA9B,EACAm+B,EACAnoB,YAEU,QAAV5P,EAAIpG,SAAM,IAAAoG,OAAA,EAAAA,EAAEy8B,OAMN,QAAJx8B,EAJiB,WAAfrG,EAAO6iC,IACH3pC,KAAK4pC,mBAAmBhhC,EAAM9B,EAAQm+B,GACtCjlC,KAAK6pC,SAASjhC,EAAM9B,EAAQm+B,UAE9B,IAAA93B,GAAAA,EAAEo6B,QAENzqB,EAAMoO,iBACNpO,EAAM8qB,oBASA6B,EAAAvpC,UAAA0pC,mBAAV,SACEhhC,EACA9B,EACAm+B,SAEM6E,EAAS9pC,KAAK+pC,eAAenhC,EAAM9B,GAEzC,GAAKgjC,EAAL,CAIA,IAAME,EAAoBhN,KAAKiN,MAAMrhC,EAAKshC,YAActhC,EAAKuhC,aAOzDC,EAJwBpN,KAAKiN,MAC/BH,EAAOO,YAAczhC,EAAKshC,YAAcF,IAGG/E,EAiB7C,OAfW,IAATA,GACAmF,GAAoBJ,IAEpBI,EAAmB,IAER,IAATnF,GAAiCmF,EAAmB,IACtDA,EAAmBJ,EAAoB,GAGkB,QAAjC98B,EAAGlN,KAAKsqC,YAAY1hC,EAAM9B,UAAO,IAAAoG,OAAA,EAAAA,EAAEnG,MAC3D,SAAA4iC,GACE,OAAAA,EAAIU,YACHzhC,EAAKshC,YAAcF,EAAqBI,OAMrCX,EAAAvpC,UAAA2pC,SAAV,SACEjhC,EACA9B,EACAm+B,GAHF,QAAAv8B,EAAA1I,KAKQuqC,EAASvqC,KAAKsqC,YAAY1hC,EAAM9B,GAClC0jC,EAAoB,QAATt9B,EAAGq9B,SAAM,IAAAr9B,OAAA,EAAAA,EAAEu9B,WACxB,SAAArpC,GAAK,OAAAA,IAAMsH,EAAKqhC,eAAenhC,EAAM9B,MAcvC,OAXK0jC,IAAgC,IAAjBA,IAClBA,EAAc,GAEhBA,GAAevF,EAEF,IAATA,GAAiCuF,IAAqB,QAAVr9B,EAAIo9B,SAAM,IAAAp9B,OAAA,EAAAA,EAAEvM,UAC1D4pC,EAAcD,EAAO3pC,OAAS,IAEnB,IAATqkC,GAAiCuF,EAAc,IACjDA,EAAc,GAETD,EAASA,EAAOC,QAAe5zB,GAO9B6yB,EAAAvpC,UAAA6pC,eAAV,SACEnhC,EACA9B,GAFF,MAAA4B,EAAA1I,KAIQ0qC,EAAY1qC,KAAKopC,aAAaxgC,EAAY,QAARsE,EAAEpG,SAAM,IAAAoG,OAAA,EAAAA,EAAEgxB,OAClD,GAAIwM,EACF,OAAOA,EAET,IAAM3nB,EAAW/iB,KAAKsqC,YAAY1hC,EAAM9B,GACpCwd,EAAQvB,EAAS0nB,WAAU,SAAAd,GAAO,OAAAjhC,EAAKiiC,SAAShB,MAIpD,OAHKrlB,IAAoB,IAAXA,IACZA,EAAQ,GAEHvB,EAASuB,IAGRmlB,EAAAvpC,UAAAoqC,YAAV,SACE1hC,EACA9B,GAEA,MAA0B,iBAAfA,EAAO6iC,KAAmC,WAAf7iC,EAAO6iC,IACpC3pC,KAAK2oC,gBAAgBhJ,MAAM/2B,EAAM9B,EAAO6iC,KAExC3pC,KAAKuoC,cAAc3/B,GAAM,IAOpC6gC,EAAAvpC,UAAAqoC,cAAA,SAAc3/B,EAAmB4/B,GAC/B,YAD+B,IAAAA,IAAAA,GAAA,GACxBxoC,KAAK2oC,gBAAgBJ,cAAc3/B,EAAM4/B,IAGxCiB,EAAAvpC,UAAAyqC,SAAV,SAAmB/pB,GACjB,IAAMgqB,EAAQpjC,SAASqjC,cACjBthC,EAAWqhC,EAAMlE,QAEvB,OACE9lB,IAAOgqB,KACLjrC,MAAMqa,KAAK4G,EAAGwnB,iBAAiB7+B,IAAWxC,MAAK,SAAA1D,GAAK,OAAAA,IAAMunC,uHAtIrDnB,EAAe1oC,EAAA,CAH3BmH,EAAAA,WAAW,CACVC,WAAY,UAEDshC,IAAwBP,ICIrC4B,GAAA,SAAAzgC,GAqBE,SAAAygC,EACYxiC,EACA89B,GAFZ,IAAA19B,EAIE2B,EAAAxJ,KAAAb,KAAMsI,EAAY89B,IAAQpmC,YAHhB0I,EAAAJ,WAAAA,EACAI,EAAA09B,QAAAA,EArBF19B,EAAA29B,cAAgC,CAAEsD,KAAK,GAGvCjhC,EAAA5B,OAAyB,KAsBrC,OA3BuChH,EAAAgrC,EAAAzgC,GAQrCygC,EAAA5qC,UAAA6qC,cAAA,SAAcjuB,UACG,QAAf5P,EAAIlN,KAAK8G,cAAM,IAAAoG,OAAA,EAAAA,EAAEy8B,MACf3pC,KAAKomC,QAAQsD,QAAQ1pC,KAAK4I,KAAM5I,KAAK8G,OAAM,EAAmBgW,IAKlEguB,EAAA5qC,UAAA8qC,kBAAA,SAAkBluB,UACD,QAAf5P,EAAIlN,KAAK8G,cAAM,IAAAoG,OAAA,EAAAA,EAAEy8B,MACf3pC,KAAKomC,QAAQsD,QAAQ1pC,KAAK4I,KAAM5I,KAAK8G,QAAM,EAAmBgW,6CAK1C3T,EAAAA,kBACHsgC,MAfrB1oC,EAAA,CADComC,EAAAA,aAAa,qBAAsB,CAAC,8CAQrCpmC,EAAA,CADComC,EAAAA,aAAa,oBAAqB,CAAC,kDAdzB2D,EAAiB/pC,EAAA,CAD7BgY,EAAAA,aACY+xB,GAAb,CAAuCxB,mBCJvC,SAAA2B,0DAAsCnrC,EAAAmrC,EAAA5gC,GAMpC4gC,EAAA/qC,UAAAgrC,qBAAA,SAAqBtiC,GACnB,OAAO5I,KAAKuoC,cAAc3/B,GAAMhI,OAAS,GAQ3CqqC,EAAA/qC,UAAAirC,UAAA,SACEviC,EACA9B,EACAm+B,EACAnoB,GAEA,IAAMsuB,EAA2BprC,KAAKuoC,cAAc3/B,GAEhD0b,EAAQ8mB,EAAUX,WAAU,SAAA3nC,GAAK,OAAAA,IAAMga,EAAM7b,UAAUgkC,GAGxD3gB,GAAS,GAAKA,EAAQ8mB,EAAUxqC,QAChC0jB,EAAQ,GAAKtkB,KAAKqrC,aAAavkC,EAAOwkC,OACtChnB,GAAS8mB,EAAUxqC,QAAUZ,KAAKurC,WAAWzkC,EAAOwkC,SAGjDhnB,GAAS8mB,EAAUxqC,SACrB0jB,EAAQ,GAENA,EAAQ,IACVA,EAAQ8mB,EAAUxqC,OAAS,GAG7Bkc,EAAMoO,iBACNpO,EAAM8qB,kBAEKwD,EAAU9mB,GAElBijB,UAIG0D,EAAA/qC,UAAAmrC,aAAV,SAAuBC,GACrB,OAAgB,IAATA,GAA0B,UAATA,GAGhBL,EAAA/qC,UAAAqrC,WAAV,SAAqBD,GACnB,OAAgB,IAATA,GAA0B,QAATA,oHApDfL,EAAgBlqC,EAAA,CAH5BmH,EAAAA,WAAW,CACVC,WAAY,UAED8iC,IAAyBxB,ICGtC+B,GAAA,SAAAnhC,GAsBE,SAAAmhC,EACYljC,EACA89B,GAFZ,IAAA19B,EAIE2B,EAAAxJ,KAAAb,KAAMsI,EAAY89B,IAAQpmC,YAHhB0I,EAAAJ,WAAAA,EACAI,EAAA09B,QAAAA,EAvBF19B,EAAA29B,cAAiC,CAAEiF,MAAM,GAGzC5iC,EAAA5B,OAA0B,GAIpC4B,EAAA+iC,eAAiB,SAAC3uB,GACVpU,EAAK5B,OAAOwkC,MAChB5iC,EAAKyiC,UAAUruB,EAAK,IAMxBpU,EAAAgjC,aAAe,SAAC5uB,GACRpU,EAAK5B,OAAOwkC,MAChB5iC,EAAKyiC,UAAUruB,GAAK,MA6B1B,OA/CwChd,EAAA0rC,EAAAnhC,GAqC5BmhC,EAAAtrC,UAAAirC,UAAV,SAAoBruB,EAAgBmoB,GAC9BjlC,KAAKomC,QAAQ8E,qBAAqBlrC,KAAK4I,OACzC5I,KAAKomC,QAAQ+E,UACXnrC,KAAK4I,KACL5I,KAAK8G,OACLm+B,EACAnoB,6CApBkB3T,EAAAA,kBACH8hC,MAhBrBlqC,EAAA,CAFComC,EAAAA,aAAa,oBAAqB,CAAC,WACnCA,EAAAA,aAAa,cAAe,CAAC,iDAS9BpmC,EAAA,CAFComC,EAAAA,aAAa,kBAAmB,CAAC,WACjCA,EAAAA,aAAa,oBAAqB,CAAC,+CAfzBqE,EAAkBzqC,EAAA,CAD9BgY,EAAAA,aACYyyB,GAAb,CAAwCV,mBCJxC,SAAAa,0DAAsC7rC,EAAA6rC,EAAAthC,oHAAzBshC,EAAgB5qC,EAAA,CAH5BmH,EAAAA,WAAW,CACVC,WAAY,UAEDwjC,IAAyBV,ICetCW,GAAA,SAAAvhC,GA+CE,SAAAuhC,EACYtjC,EACA89B,EACA79B,GAHZ,IAAAG,EAKE2B,EAAAxJ,KAAAb,KAAMsI,EAAY89B,IAAQpmC,YAJhB0I,EAAAJ,WAAAA,EACAI,EAAA09B,QAAAA,EACA19B,EAAAH,SAAAA,EAhDFG,EAAA29B,cAAiC,CAAEwF,MAAM,GAGzCnjC,EAAA5B,OAA0B,GAe1B4B,EAAAojC,OAAS,IAAIhkB,EAAAA,eA0JzB,OA9KwChoB,EAAA8rC,EAAAvhC,GA4BtCuhC,EAAA1rC,UAAA6rC,YAAA,SAAYjvB,GACN9c,KAAKgsC,YAAchsC,KAAK4I,OAAUkU,EAAM7b,SAC1CjB,KAAKisC,YAAYnvB,GACjBA,EAAM8qB,oBASVgE,EAAA1rC,UAAAgsC,YAAA,SAAYpvB,GACN9c,KAAKgsC,YAAchsC,KAAKmsC,WAC1BnsC,KAAKisC,YAAYnvB,GACjBA,EAAM8qB,oBAYAgE,EAAA1rC,UAAAksC,UAAV,WACEpsC,KAAKqsC,uBAAuB,IAGpBT,EAAA1rC,UAAA+rC,YAAV,SAAsBnvB,SACpB9c,KAAK8rC,OAAOvjB,MAAK,GACjBvoB,KAAKqsC,sBAAsB,IAElB,QAALn/B,EAAA4P,SAAK,IAAA5P,OAAA,EAAAA,EAAEjM,UAAWjB,KAAK4I,MACzByB,EAAAnK,UAAMynC,YAAW9mC,KAAAb,KAAC8c,IAItB8uB,EAAA1rC,UAAAiM,SAAA,mBACE9B,EAAAnK,UAAMiM,SAAQtL,KAAAb,MAEdA,KAAKgsC,WAAwB,QAAd9+B,EAAGlN,KAAK8G,cAAM,IAAAoG,OAAA,EAAAA,EAAE2+B,KAE3B7rC,KAAKgsC,aACPhsC,KAAKwmC,SAAW,EAIXxmC,KAAK8G,OAAOjH,eAAe,eAC9BG,KAAK8G,OAAOwhC,WAAY,GAKrBtoC,KAAK8G,OAAOjH,eAAe,mBAC9BG,KAAK8G,OAAO+hC,iBAAiD,KAApB,QAAX17B,EAAAnN,KAAK8G,cAAM,IAAAqG,OAAA,EAAAA,EAAE07B,mBAKjD+C,EAAA1rC,UAAAosC,mBAAA,WAAA,IAAA5jC,EAAA1I,KACMA,KAAKgsC,aAMDhsC,KAAKk+B,OACTl+B,KAAKomC,QACFmC,cAAcvoC,KAAK4I,MACnBE,SAAQ,SAAA8X,GACP,OAAAlY,EAAKH,SAAS2I,aAAa0P,EZvHP,sBYuH6BlY,EAAKw1B,UAI5Dl+B,KAAKosC,cAITR,EAAA1rC,UAAAynC,YAAA,SAAY7qB,GAAZ,MAAApU,EAAA1I,KACMA,KAAKgsC,aACPhsC,KAAKosC,YAEDpsC,KAAKusC,2BAA2BzvB,GAElC0vB,YAAW,WAAM,OAAA9jC,EAAKujC,YAAYnvB,MAElC9c,KAAKosC,YAIHpsC,KAAKmsC,UACF,QAALj/B,EAAA4P,SAAK,IAAA5P,GAAAA,EAAE06B,kBAKXv9B,EAAAnK,UAAMynC,YAAW9mC,KAAAb,KAAC8c,IAUZ8uB,EAAA1rC,UAAAqsC,2BAAR,SAAmCzvB,GACjC,OAAQA,GAAS9c,KAAKomC,QAAQ+C,kBAAkBnpC,KAAK4I,KAAM5I,KAAK8G,SAMxD8kC,EAAA1rC,UAAAmsC,sBAAV,SAAgC5rC,GAAhC,IAAAiI,EAAA1I,UAAgC,IAAAS,IAAAA,EAAA,GAC1BT,KAAKgsC,aACPhsC,KAAKmsC,UAAkB,IAAP1rC,EACVT,KAAKkrC,sBAA8B,IAANzqC,GAAkB,IAANA,GAC7CT,KAAKorC,UAAUtiC,SAAQ,SAAA8X,GACrBlY,EAAKH,SAAS2I,aAAa0P,EAAI,WAAYngB,EAAE22B,iBAWrD53B,OAAAiC,eAAYmqC,EAAA1rC,UAAA,uBAAoB,KAAhC,WACE,OAAOF,KAAKomC,QAAQ8E,qBAAqBlrC,KAAK4I,uCAUhDpJ,OAAAiC,eAAYmqC,EAAA1rC,UAAA,YAAS,KAArB,WACE,OAAOF,KAAKomC,QAAQmC,cAAcvoC,KAAK4I,KAAM5I,KAAKgsC,sFA5H5B7iC,EAAAA,kBACHwiC,UACCviC,EAAAA,aAvCWrI,EAAA,CAAhCqpB,EAAAA,YAAY,sDAImBrpB,EAAA,CAA/BqpB,EAAAA,YAAY,mDAKHrpB,EAAA,CAATooB,EAAAA,uCAQDpoB,EAAA,CAFComC,EAAAA,aAAa,gBAAiB,CAAC,WAC/BA,EAAAA,aAAa,gBAAiB,CAAC,4CAahCpmC,EAAA,CADComC,EAAAA,aAAa,QAAS,CAAC,4CAvCbyE,EAAkB7qC,EAAA,CAD9BgY,EAAAA,aACY6yB,GAAb,CAAwCJ,mBCfxC,SAAAiB,0DAA0C3sC,EAAA2sC,EAAApiC,oHAA7BoiC,EAAoB1rC,EAAA,CAHhCmH,EAAAA,WAAW,CACVC,WAAY,UAEDskC,IAA6Bd,mBCOxC,SAAAe,EACYpkC,EACA89B,EACA79B,GAHZ,IAAAG,EAKE2B,EAAAxJ,KAAAb,KAAMsI,EAAY89B,EAAS79B,IAASvI,YAJ1B0I,EAAAJ,WAAAA,EACAI,EAAA09B,QAAAA,EACA19B,EAAAH,SAAAA,EAPFG,EAAA29B,cAA6B,GAEX39B,EAAA5B,OAAsB,KASpD,OAZoChH,EAAA4sC,EAAAriC,4CAMVlB,EAAAA,kBACHsjC,UACCrjC,EAAAA,aALJrI,EAAA,CAAjBsI,EAAAA,MAAM,yCAHIqjC,EAAc3rC,EAAA,CAH1BgY,EAAAA,UAAU,CACTxP,SAAU,eAECmjC,IAAuBd,ICJ9Be,GAAa,CASjBD,IAQFE,GAAA,WAAA,SAAAA,KAAkC,OAArBA,EAAmB7rC,EAAA,CAL/B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,cACVF,aAAY9F,EAAM8oC,IAClBxiC,QAAOtG,EAAM8oC,OAEFC,GAAb,iBC8DE,SAAAC,IAvDA7sC,KAAA4L,UAAYxL,EAAAA,UAGZJ,KAAA8sC,WAAmC,IAAIhlB,EAAAA,aAEvC9nB,KAAA+sC,eAAuC,IAAIjlB,EAAAA,aAE3C9nB,KAAAgtC,SAAiC,IAAIllB,EAAAA,aAErC9nB,KAAAitC,SAAiC,IAAInlB,EAAAA,aAErC9nB,KAAAktC,WAAmC,IAAIplB,EAAAA,aAGvC9nB,KAAAmtC,QAAS,EAGTntC,KAAAotC,UAAW,EAGXptC,KAAAqtC,WAAY,EAKZrtC,KAAAstC,gBAAiB,EAiCnB,OA7BET,EAAA3sC,UAAAqtC,YAAA,WACEvtC,KAAKotC,UAAW,GAGlBP,EAAA3sC,UAAAstC,WAAA,WACExtC,KAAKotC,UAAW,EAChBptC,KAAKktC,WAAW3kB,KAAK,IAGvBskB,EAAA3sC,UAAAutC,OAAA,WACEztC,KAAK8sC,WAAWvkB,KAAK,IAGvBskB,EAAA3sC,UAAAwtC,WAAA,WACE1tC,KAAKqtC,WAAY,EACjBrtC,KAAK+sC,eAAexkB,KAAK,IAG3BskB,EAAA3sC,UAAAytC,KAAA,WACE3tC,KAAKgtC,SAASzkB,KAAK,IAGrBskB,EAAA3sC,UAAA0tC,KAAA,WACE5tC,KAAKitC,SAAS1kB,KAAK,IAKrBskB,EAAA3sC,UAAAiM,SAAA,aAtDApL,EAAA,CADCooB,EAAAA,2CAGDpoB,EAAA,CADCooB,EAAAA,+CAGDpoB,EAAA,CADCooB,EAAAA,yCAGDpoB,EAAA,CADCooB,EAAAA,yCAGDpoB,EAAA,CADCooB,EAAAA,2CAIDpoB,EAAA,CADCsI,EAAAA,sCAIDtI,EAAA,CADCsI,EAAAA,wCAIDtI,EAAA,CADCsI,EAAAA,yCAIDtI,EAAA,CADCsI,EAAAA,uCAGDtI,EAAA,CADCsI,EAAAA,8CAzBUwjC,EAAa9rC,EAAA,CAJzBuI,EAAAA,UAAU,CACTC,SAAU,UACVC,SAAA,8jGAEWqjC,oBChBb,SAAAgB,KAAyB,OAAZA,EAAU9sC,EAAA,CALtB2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcyF,EAAAA,WAAY7F,GACpCE,aAAc,CAACkjC,IACf1iC,QAAS,CAAC0iC,OAECgB,oBCFX,SAAAC,EAAoB9nC,GAAAhG,KAAAgG,OAAAA,SAapB8nC,EAAA5tC,UAAA6tC,iBAAA,SACE7kC,EACA8kC,GAFF,IAAAtlC,EAAA1I,KAIE,OAAOA,KAAKgG,OAAO6W,QAAQ/P,KACzBgO,EAAAA,KAAI,WAAM,OAAC5R,EAA8BihC,eACzCrvB,EAAAA,KAAI,SAAAmzB,GAAc,OAAAvlC,EAAKwlC,eAAeD,EAAYD,QAW9CF,EAAA5tC,UAAAguC,eAAR,SAAuBC,EAAwBH,GAC7C,IAAII,EAAkB,EAClBJ,EAAUK,SAAS,QAErBD,EAAkBD,EADNH,EAAUM,UAAU,EAAGN,EAAUptC,OAAS,IAIpDotC,EAAUK,SAAS,OAErBD,EACED,GAAkBA,GAFPH,EAAUM,UAAU,EAAGN,EAAUptC,OAAS,GAEK,OAG9D,OAAOo8B,KAAKC,MAAMmR,IAAoB,4CA3CZrmC,EAAAA,uIADjB+lC,EAAe/sC,EAAA,CAH3BmH,EAAAA,WAAW,CACVC,WAAY,UAED2lC,MC0BbS,GAAA,WA6CE,SAAAA,EAAsB3tB,EAA0BwlB,GAA1BpmC,KAAA4gB,GAAAA,EAA0B5gB,KAAAomC,QAAAA,EAdvCpmC,KAAAguC,UAAY,QAKZhuC,KAAAwuC,gBAAiB,EAEjBxuC,KAAAyuC,cAAgBruC,EAAAA,UAAUoF,OAC1BxF,KAAA0uC,aAAetuC,EAAAA,UAAUuE,WACzB3E,KAAA2uC,SAAWvuC,EAAAA,UAAUsE,YAkBhC,OA9CElF,OAAAiC,eAAI8sC,EAAAruC,UAAA,WAAQ,KAAZ,SAAa0uC,GACX5uC,KAAK6uC,MAAQD,EAEb5uC,KAAK8uC,YAAc,mCAgCrBP,EAAAruC,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACOA,KAAKwJ,WAAY+W,EAAAA,YAMtBvgB,KAAK+uC,MAAQ/uC,KAAKomC,QACf2H,iBAAiB/tC,KAAK4gB,GAAG1X,cAAelJ,KAAKguC,WAC7ClhC,KAAKG,EAAAA,KAAI,WAAM,OAACvE,EAAKomC,YAAc,MAPpCx+B,QAAQ1M,MACN,+HALoBuF,EAAAA,kBAA+B2kC,MAzChD/sC,EAAA,CAARsI,EAAAA,qCAQDtI,EAAA,CADCsI,EAAAA,MAAM,uCAWEtI,EAAA,CAARsI,EAAAA,wCASQtI,EAAA,CAARsI,EAAAA,yCAKQtI,EAAA,CAARsI,EAAAA,8CAEQtI,EAAA,CAARsI,EAAAA,6CACQtI,EAAA,CAARsI,EAAAA,4CACQtI,EAAA,CAARsI,EAAAA,wCAxCUklC,EAAiBxtC,EAAA,CAL7BuI,EAAAA,UAAU,CACTC,SAAU,cACVC,SAAA,8rDACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B6sB,GAAb,GCtBAS,GAAA,WACE,SAAAA,EACYloC,EACAoX,GADAle,KAAA8G,OAAAA,EACA9G,KAAAke,kBAAAA,SAGZ1e,OAAAiC,eAAYutC,EAAA9uC,UAAA,eAAY,KAAxB,WACE,MAAO,CACL,CACE20B,KAAM,SACNoa,UAAWjvC,KAAKke,kBAAkBjB,QAAQvB,EAAAA,WAAWa,KAEvD,CACEsY,KAAM,SACNoa,UAAWjvC,KAAKke,kBAAkBjB,QAAQvB,EAAAA,WAAWc,KAEvD,CACEqY,KAAM,UACNoa,UAAWjvC,KAAKke,kBAAkBjB,QAAQvB,EAAAA,WAAWe,KAEvD,CACEoY,KAAM,aACNoa,UAAWjvC,KAAKke,kBAAkBjB,QAAQvB,EAAAA,WAAWgB,uCAK3DsyB,EAAA9uC,UAAAgvC,SAAA,SAASC,EAAWC,EAAiBC,GACnC,MAAO,CACLC,IAAKtvC,KAAKuvC,aAAaJ,EAAWC,GAClCI,OAAQxvC,KAAKyvC,UAAUN,GACvBE,IAAKA,GAAOrvC,KAAK0vC,OAAOP,EAAWC,KAI/BJ,EAAA9uC,UAAAqvC,aAAR,SAAqBI,EAAOP,GAC1B,OAAIO,GAASA,EAAMP,GAzCM,UA0ChBpvC,KAAK4vC,YAAYD,EAAMP,GA1CP,UA0CuCtpC,KACrD6pC,GAASA,EAAM7pC,IACjB9F,KAAK4vC,YAAYD,EAAM7pC,KACrB6pC,GAASA,EAAM3vC,KAAK6vC,0BAA0BF,IAChD3vC,KAAK4vC,YAAYD,EAAM3vC,KAAK6vC,0BAA0BF,IAAQ7pC,KAE9D,MAOHkpC,EAAA9uC,UAAA2vC,0BAAR,SAAkCF,GAE9B,IAAIG,EADN,OAAIH,GAGF3vC,KAAK+vC,aAAajnC,SAAQ,SAAAsmC,KAErBU,GACAA,EAAYb,UAAYG,EAAOH,WAAaU,EAAMP,EAAOva,SAE1Dib,EAAcV,MAIXU,EAAYjb,MAGd,MAGDma,EAAA9uC,UAAAwvC,OAAR,SAAeC,EAAOP,GACpB,GAAKO,EAEE,OAAIA,EAAMP,GA7EQ,UA8EhBO,EAAMP,GA9EU,UA8EsBY,QACpCL,EAAMK,QACRL,EAAMK,aADR,GAQDhB,EAAA9uC,UAAAuvC,UAAR,SAAkBE,GAAlB,IAAAjnC,EAAA1I,KACE,GAAK2vC,EAAL,CAGA,IAAMH,EAASxvC,KAAK+vC,aAAaE,QAAO,SAACxqB,EAAK2pB,GAS5C,OARMO,EAAMP,EAAOva,QACbpP,IACFA,GAAO,MAETA,GAAU/c,EAAKknC,YAAYD,EAAMP,EAAOva,MAAM/uB,KAAI,IAChDspC,EAAOH,UAAS,KAGbxpB,IACN,IAEH,MAAkB,KAAX+pB,OAAgB54B,EAAY44B,IAG7BR,EAAA9uC,UAAA0vC,YAAR,SAAoB9pC,GAClB,OAAKA,EAGEA,EAAIic,WAAW,QAAUjc,EAAM9F,KAAKkwC,aAAepqC,EAFjD,MAKHkpC,EAAA9uC,UAAAgwC,WAAR,WACE,OACElwC,KAAK8G,OAAOqpC,QAAQR,MAAMS,SAAWpwC,KAAK8G,OAAOqpC,QAAQE,IAAID,SAAW,6CA5GxDE,EAAAA,iBACW3zB,gJAHpBqyB,EAAYjuC,EAAA,CAHxBmH,EAAAA,WAAW,CACVC,WAAY,UAED6mC,GAAb,iBCwDE,SAAAuB,EAAsBC,GAAAxwC,KAAAwwC,aAAAA,EA5BZxwC,KAAA6nB,OAAgC,IAAIC,EAAAA,aAYT9nB,KAAAywC,eAAgB,EAOpBzwC,KAAA0wC,WAAY,EAOZ1wC,KAAA2wC,WAAY,EA8C/C,OA1CEJ,EAAArwC,UAAAkoB,YAAA,WACEpoB,KAAKG,UAMCowC,EAAArwC,UAAAC,OAAR,WACEH,KAAK2vC,MAAQ3vC,KAAKwwC,aAAatB,SAC7BlvC,KAAKmvC,UACLnvC,KAAKovC,OACLpvC,KAAKqvC,KAEFrvC,KAAK2vC,MAAML,KACdtvC,KAAK4wC,iBAOTL,EAAArwC,UAAA2wC,YAAA,WACE7wC,KAAK0wC,WAAY,EACjB1wC,KAAKywC,eAAgB,EACrBzwC,KAAK2wC,WAAY,EACjB3wC,KAAK6nB,OAAOU,MAAK,IAOnBgoB,EAAArwC,UAAA4wC,aAAA,WACE9wC,KAAK4wC,iBAGCL,EAAArwC,UAAA0wC,cAAR,WACE5wC,KAAK0wC,WAAY,EACjB1wC,KAAKywC,eAAgB,EACrBzwC,KAAK2wC,WAAY,EACjB3wC,KAAK6nB,OAAOU,MAAK,6CA1CiBymB,MA5C3BjuC,EAAA,CAARsI,EAAAA,yCAKQtI,EAAA,CAARsI,EAAAA,sCAMQtI,EAAA,CAARsI,EAAAA,mCAKStI,EAAA,CAATooB,EAAAA,uCAYoCpoB,EAAA,CAApCqpB,EAAAA,YAAY,6DAOoBrpB,EAAA,CAAhCqpB,EAAAA,YAAY,qDAOoBrpB,EAAA,CAAhCqpB,EAAAA,YAAY,qDAjDFmmB,EAAcxvC,EAAA,CAL1BuI,EAAAA,UAAU,CACTC,SAAU,WACVC,SAAA,6KACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B6uB,oBCRb,SAAAQ,KAA0B,OAAbA,EAAWhwC,EAAA,CALvB2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,cACVF,aAAc,CAAC4mC,IACfpmC,QAAS,CAAComC,OAECQ,oBCIb,SAAAC,KAA6B,OAAhBA,EAAcjwC,EAAA,CAL1B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAconC,EAAAA,aAAcxnC,EAAYsnC,GAAaG,EAAAA,WAC/DvnC,aAAc,CAAC4kC,IACfpkC,QAAS,CAACokC,OAECyC,MCYbG,GAAA,WAAA,SAAAA,IAWWnxC,KAAAoxC,IAAM,EAYNpxC,KAAAsD,KAAO,EAOPtD,KAAAqxC,WAAY,EAUmBrxC,KAAAsxC,UAAW,EAqDrD,OAjDyBH,EAAAjxC,UAAAgsC,YAAA,WACrBlsC,KAAKuxC,MAAMroC,cAAcq+B,SAG3B4J,EAAAjxC,UAAA+kC,UAAA,WAGEjlC,KAAKy9B,QAAQsC,SAAS//B,KAAKy9B,QAAQv6B,MAAQlD,KAAKsD,MAChDtD,KAAKy9B,QAAQ+T,eAGfL,EAAAjxC,UAAAuxC,UAAA,WACEzxC,KAAKy9B,QAAQsC,SAAS//B,KAAKy9B,QAAQv6B,MAAQlD,KAAKsD,MAChDtD,KAAKy9B,QAAQ+T,eAOfL,EAAAjxC,UAAAwxC,WAAA,WAAA,IAAAhpC,EAAA1I,KAUE,OATKA,KAAK2xC,YACR3xC,KAAK2xC,UAAY3xC,KAAKy9B,QAAQ2B,aAAatyB,KACzCo3B,EAAAA,UAAUlkC,KAAKy9B,QAAQv6B,OACvB+J,EAAAA,KAAI,SAAA/J,GACF,OAAAwF,EAAK+0B,QAAQsC,SAASr3B,EAAKkpC,cAAc1uC,GAAQ,CAAE2uC,WAAW,OAEhE/2B,EAAAA,KAAI,WAAM,OAAApS,EAAK+0B,aAGZz9B,KAAK2xC,WAUNR,EAAAjxC,UAAA0xC,cAAR,SAAsB1uC,GAOpB,OANIA,EAAQlD,KAAKoxC,MAAmB,IAAVluC,IAAelD,KAAKqxC,aAC5CnuC,EAAQlD,KAAKoxC,KAEXpxC,KAAK8xC,KAAO5uC,EAAQlD,KAAK8xC,MAC3B5uC,EAAQlD,KAAK8xC,KAER5uC,GAtFAnC,EAAA,CAARsI,EAAAA,uCAMQtI,EAAA,CAARsI,EAAAA,mCAKQtI,EAAA,CAARsI,EAAAA,mCAOQtI,EAAA,CAARsI,EAAAA,oCAOQtI,EAAA,CAARsI,EAAAA,yCAUuCtI,EAAA,CAAvCqpB,EAAAA,YAAY,kBAAmB/gB,EAAAA,wCAEdtI,EAAA,CAAjBs/B,EAAAA,UAAU,oCAEYt/B,EAAA,CAAtBomC,EAAAA,aAAa,0CA5CHgK,EAAoBpwC,EAAA,CARhCuI,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,wZAMW2nC,GAAb,iBCfA,SAAAY,KAAgC,OAAnBA,EAAiBhxC,EAAA,CAL7B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAc22B,EAAAA,qBACxB72B,aAAc,CAACwnC,IACfhnC,QAAS,CAACgnC,OAECY,MCDbC,GAAA,WAAA,SAAAA,IACmBhyC,KAAAiyC,cAAwB,gBA2B3C,OAlBEzyC,OAAAiC,eAAIuwC,EAAA9xC,UAAA,MAAG,KAAP,WACE,MAAuB,WAAhBF,KAAKiB,OAAsB,WAAa,sCAGjDzB,OAAAiC,eAAIuwC,EAAA9xC,UAAA,YAAS,KAAb,WACE,MAAwB,iBAAbF,KAAK8F,IACP,CAAC9F,KAAKkyC,eAAelyC,KAAK8F,MAE5B9F,KAAK8F,qCAGdksC,EAAA9xC,UAAAiyC,cAAA,WACE,MAA2B,iBAAbnyC,KAAK8F,KAAoB9F,KAAKiyC,cAAcG,KAAKpyC,KAAK8F,MAG9DksC,EAAA9xC,UAAAgyC,eAAR,SAAuBpsC,GACrB,OAAOA,EAAIic,WAAW,KAAO/hB,KAAK8F,IAAM,IAAM9F,KAAK8F,KAvB5C/E,EAAA,CAARsI,EAAAA,mCACQtI,EAAA,CAARsI,EAAAA,sCACQtI,EAAA,CAARsI,EAAAA,qCACQtI,EAAA,CAARsI,EAAAA,kCACQtI,EAAA,CAARsI,EAAAA,qCACQtI,EAAA,CAARsI,EAAAA,qCARU2oC,EAAoBjxC,EAAA,CAJhCuI,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,8wBAEWwoC,GAAb,iBCCA,SAAAK,KAAgC,OAAnBA,EAAiBtxC,EAAA,CAL7B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAconC,EAAAA,cACxBtnC,aAAc,CAACqoC,IACf7nC,QAAS,CAAC6nC,OAECK,MCRAC,GAA4C,CACvDC,WAAY,CACVC,UAAU,EACVC,QAAQ,OCHZ,c9CaYjX,GAAAA,EAAAA,qBAAAA,EAAAA,mBAAkB,KAC5B,IAAA,MACAA,GAAA,MAAA,QACAA,GAAA,KAAA,OACAA,GAAA,SAAA,WACAA,GAAA,KAAA,OACAA,GAAA,MAAA,QACAA,GAAA,IAAA,MACAA,GAAA,KAAA,QAoEUC,GAAAA,EAAAA,+BAAAA,EAAAA,6BAA4B,KACtC,MAAA,QACAA,GAAA,OAAA,SACAA,GAAA,MAAA,Q+CrFF,OCTYiX,GDSNC,GAAiD,CACrDC,WAAY,EACZC,UAAW,MACXC,WAAY,IACZC,cAAe,IACfC,UAAW,IACXC,SAAU,KA8BZC,GAAA,WACE,SAAAA,EAAsBC,GAAAnzC,KAAAmzC,iBAAAA,SAYtBD,EAAAhzC,UAAAkzC,SAAA,SAASC,EAAmBC,GAC1B,IAAMC,EAA0B,GAChC,OAAIF,EAAY,EACPE,GAETvzC,KAAKwzC,SAASD,EAAOF,EAAWC,GAChCtzC,KAAKyzC,QAAQF,EAAOF,GACpBrzC,KAAK0zC,aAAaH,EAAOF,GACzBrzC,KAAK2zC,cAAcJ,EAAOF,EAAWC,GAE9BC,IAWCL,EAAAhzC,UAAAszC,SAAV,SACED,EACAF,EACAC,GAEA,IAAMM,EAAQ5zC,KAAK6zC,gBAAgBR,EAAWC,GACxCxB,EAAM9U,KAAKoU,IAAIpxC,KAAK8G,OAAO8rC,WAAYS,GAE7C1zC,MAAMqa,KAAKra,MAAMmyC,IAAMhpC,SAAQ,SAAC3G,EAAG1B,GACjC8yC,EAAMnwC,KAAK,CACT0wC,OAAQrzC,EAAImzC,EACZxxC,MAAO2xC,OAAOtzC,EAAImzC,EAAQ,GAC1BhuC,KAAM41B,EAAAA,mBAAmBwY,WAarBd,EAAAhzC,UAAAuzC,QAAV,SAAkBF,EAAyBF,GAA3C,IAAA3qC,EAAA1I,KACE,GAAKA,KAAK8G,OAAO2sC,QAAjB,CA+DAF,EAAMU,QAAOnzC,MAAbyyC,EAAK1vC,EA3De,WAClB,IAAMqwC,EAAkBX,EAAM,GAAGO,OAC3BK,EAAYzrC,EAAK5B,OAAOstC,SAAW,EAAI,EAC7C,GAAIF,EAAkBC,EAAW,CAC/B,IAAME,GACH3rC,EAAK5B,OAAOwtC,+BACbJ,IAAoBC,EAAY,EAC5BI,EACJ7rC,EAAK5B,OAAOstC,UACZ1rC,EAAK5B,OAAOwtC,+BACE,IAAdH,EACIvuC,EAAOyuC,EACT7Y,EAAAA,mBAAmBgZ,IACnBD,EACA/Y,EAAAA,mBAAmBiZ,MACnBjZ,EAAAA,mBAAmBwY,KACvB,MAAO,CACLx0C,OAAOc,OACL,CACE8B,MAAOiyC,EAAQ3rC,EAAK5B,OAAO+rC,UAAYkB,OAAOI,EAAY,GAC1DvuC,KAAIA,GAENyuC,EAAQ,KAAO,CAAEP,OAAQK,KAGxB,MAAO,GAkCCO,KACjBnB,EAAMnwC,KAAItC,MAAVyyC,EAAK1vC,EAhCc,WACjB,IAAM8wC,EAAiBpB,EAAMA,EAAM3yC,OAAS,GAAGkzC,OAAS,EAClDc,EAAOvB,GAAa3qC,EAAK5B,OAAO+tC,QAAU,EAAI,GACpD,GAAIF,GAAkBC,EAAM,CAC1B,IAAML,EACJ7rC,EAAK5B,OAAO+tC,SACZnsC,EAAK5B,OAAOwtC,+BACZK,IAAmBC,EACfP,EACJM,EACAtB,GACG3qC,EAAK5B,OAAOwtC,8BAAgC,EAAI,IAChD5rC,EAAK5B,OAAO+tC,QAAU,EAAI,GAEzBjvC,EAAOyuC,EACT7Y,EAAAA,mBAAmBgZ,IACnBD,EACA/Y,EAAAA,mBAAmBsZ,KACnBtZ,EAAAA,mBAAmBwY,KACvB,MAAO,CACLx0C,OAAOc,OACL,CACE8B,MAAOiyC,EAAQ3rC,EAAK5B,OAAO+rC,UAAYkB,OAAOY,EAAiB,GAC/D/uC,KAAIA,GAENyuC,EAAQ,KAAO,CAAEP,OAAQa,KAGxB,MAAO,GAIFI,OAUN7B,EAAAhzC,UAAAwzC,aAAV,SAAuBH,EAAyBF,GAC1CrzC,KAAK8G,OAAOstC,UAAgC,IAApBb,EAAM,GAAGO,QACnCP,EAAMU,QAAQ,CACZH,OAAQ,EACR1xC,MAAO,IACPwD,KAAM41B,EAAAA,mBAAmBiZ,QAI3Bz0C,KAAK8G,OAAO+tC,SACZtB,EAAMA,EAAM3yC,OAAS,GAAGkzC,SAAWT,EAAY,GAE/CE,EAAMnwC,KAAK,CACT0wC,OAAQT,EAAY,EACpBjxC,MAAO2xC,OAAOV,GACdztC,KAAM41B,EAAAA,mBAAmBsZ,QAoBrB5B,EAAAhzC,UAAAyzC,cAAV,SACEJ,EACAF,EACAC,GAEA,IAAM0B,EAASh1C,KAAKi1C,eAAe3B,GAC7B4B,EAAQl1C,KAAKm1C,SAAS9B,EAAWC,GACjC8B,EAAMp1C,KAAK8G,OAAOuuC,mBACnBD,GAAOA,IAAQ3Z,EAAAA,6BAA6B6Z,OAI3CF,IAAQ3Z,EAAAA,6BAA6BtW,QACvCouB,EAAMU,QAAOnzC,MAAbyyC,EAAK1vC,EAAYmxC,EAAWE,IAE1BE,IAAQ3Z,EAAAA,6BAA6BpW,OACvCkuB,EAAMnwC,KAAItC,MAAVyyC,EAAK1vC,EAASmxC,EAAWE,MAP3B3B,EAAMU,QAAOnzC,MAAbyyC,EAAK1vC,EAAYmxC,IACjBzB,EAAMnwC,KAAItC,MAAVyyC,EAAK1vC,EAASqxC,MAcVhC,EAAAhzC,UAAA+0C,eAAR,SAAuB3B,GAAvB,IAAA5qC,EAAA1I,KACQu1C,EAAO,GAEb,GAAIv1C,KAAK8G,OAAO0rC,SAAU,CAUxB+C,EAAKnyC,KARI5D,OAAOc,OACZ,CACE8B,MAAOsG,EAAK5B,OAAOgsC,WACnBltC,KAAM41B,EAAAA,mBAAmBga,OAE3BlC,EAAU,EAAI,CAAEQ,OAAQ,GAAM,OAKpC,GAAI9zC,KAAK8G,OAAO2uC,YAAa,CAU3BF,EAAKnyC,KARI5D,OAAOc,OACZ,CACE8B,MAAOsG,EAAK5B,OAAOisC,cACnBntC,KAAM41B,EAAAA,mBAAmBka,UAE3BpC,EAAU,EAAI,CAAEQ,OAAQR,EAAU,GAAM,OAK9C,OAAOiC,GAMDrC,EAAAhzC,UAAAi1C,SAAR,SAAiB9B,EAAmBC,GAApC,IAAA5qC,EAAA1I,KACQu1C,EAAO,GAEb,GAAIv1C,KAAK8G,OAAO6uC,QAAS,CAUvBJ,EAAKnyC,KARI5D,OAAOc,OACZ,CACE8B,MAAOsG,EAAK5B,OAAOksC,UACnBptC,KAAM41B,EAAAA,mBAAmBoa,MAE3BtC,EAAUD,EAAY,EAAI,CAAES,OAAQR,EAAU,GAAM,OAK1D,GAAItzC,KAAK8G,OAAO2rC,OAAQ,CAUtB8C,EAAKnyC,KARI5D,OAAOc,OACZ,CACE8B,MAAOsG,EAAK5B,OAAOmsC,SACnBrtC,KAAM41B,EAAAA,mBAAmBqa,KAE3BvC,EAAUD,EAAY,EAAI,CAAES,OAAQT,EAAY,GAAM,OAM5D,OAAOkC,GAUDrC,EAAAhzC,UAAA2zC,gBAAR,SAAwBR,EAAmBC,GACzC,IAAMwC,EAAQ91C,KAAK8G,OAAO8rC,WAAa,EAEjCmD,EAAQ/Y,KAAKiN,MAAM6L,EAAQ,GAG3BE,EAAWhZ,KAAK8U,IAAI,EAAGwB,EAAUyC,GAEjCE,EAAWjZ,KAAK8U,IAAI,EAAGuB,EAAYyC,EAAQ,GAGjD,OAAO9Y,KAAKoU,IAAI6E,EAAUD,IAG5Bx2C,OAAAiC,eAAYyxC,EAAAhzC,UAAA,SAAM,KAAlB,WACE,OAAOV,OAAOc,OACZqyC,GACA3yC,KAAKmzC,iBAAiBZ,sFAxRc2D,uHAD7BhD,EAAiBnyC,EAAA,CAH7BmH,EAAAA,WAAW,CACVC,WAAY,UAED+qC,GAAb,GEvBAiD,GAAA,WA0BE,SAAAA,EACUC,EACAC,GADAr2C,KAAAo2C,kBAAAA,EACAp2C,KAAAq2C,eAAAA,EANAr2C,KAAAs2C,cAAsC,IAAIxuB,EAAAA,aAEpD9nB,KAAAuzC,MAA0B,GAkE5B,OA5EE/zC,OAAAiC,eAAI00C,EAAAj2C,UAAA,aAAU,KAAd,WACE,OAAOF,KAAKu2C,iBAEL,SAAerzC,GACtBlD,KAAKu2C,YAAcrzC,EACnBlD,KAAKmoB,OAAOjlB,oCAYNizC,EAAAj2C,UAAAioB,OAAR,SAAeoqB,GACbvyC,KAAKuzC,MAAQvzC,KAAKo2C,kBAAkBhD,SAClCb,EAAWiE,WACXjE,EAAWkE,cAUfN,EAAAj2C,UAAAw2C,UAAA,SAAUtiB,GACR,OACEA,EAAKxuB,OAAS41B,EAAAA,mBAAmBwY,MACjC5f,EAAK0f,SAAW9zC,KAAKuyC,WAAWkE,aAapCN,EAAAj2C,UAAAy2C,WAAA,SAAWviB,GACT,OACGA,EAAKv0B,eAAe,WACrBu0B,EAAK0f,SAAW9zC,KAAKuyC,WAAWkE,aAIpCN,EAAAj2C,UAAA02C,eAAA,SAAexiB,GACb,IAAMyiB,EAAcr3C,OAAOc,OACzB,GACAN,KAAKq2C,eAAeS,SAASD,aAc/B,OAXE72C,KAAK+2C,YACL3iB,EAAK0f,OAAS9zC,KAAKuyC,WAAWiE,aAC7Bx2C,KAAK02C,UAAUtiB,KAEhByiB,EAAY72C,KAAK+2C,YAAc3iB,EAAK0f,QAIlC+C,EAAY72C,KAAK+2C,cAAgB/2C,KAAKg3C,oBACjCH,EAAY72C,KAAK+2C,YAEnBF,GAGTV,EAAAj2C,UAAA+2C,WAAA,SAAWx4B,GACTze,KAAKs2C,cAAc/tB,KAAK9J,EAAKq1B,kDA7DFZ,UACHgE,EAAAA,kBA1BjBn2C,EAAA,CAARsI,EAAAA,yCAGQtI,EAAA,CAARsI,EAAAA,0CAMQtI,EAAA,CAARsI,EAAAA,2CAMQtI,EAAA,CAARsI,EAAAA,wCAKStI,EAAA,CAATooB,EAAAA,8CAtBUgtB,EAAmBp1C,EAAA,CAL/BuI,EAAAA,UAAU,CACTC,SAAU,gBACVC,SAAA,iTACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9By0B,GAAb,iBCNA,SAAAgB,KAA+B,OAAlBA,EAAgBp2C,EAAA,CAT5B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAconC,EAAAA,cACxBnnC,UAAW,CACTC,EAAAA,qBAAqBuoC,IACrB,CAAEtoC,QAASksC,GAAkBjsC,YAAaC,EAAAA,SAE5CP,aAAc,CAACwsC,IACfhsC,QAAS,CAACgsC,OAECgB,oBCWX,SAAAC,IACEp3C,KAAKq3C,cAAgB,IAAIvvB,EAAAA,aAM7B,OAHEsvB,EAAAl3C,UAAAo3C,SAAA,SAASC,GACPv3C,KAAKq3C,cAAc9uB,KAAKgvB,IAhB1Bx2C,EAAA,CADCsI,EAAAA,2CAGDtI,EAAA,CADCsI,EAAAA,8CAGDtI,EAAA,CADCsI,EAAAA,2CAGDtI,EAAA,CADCsI,EAAAA,0CAIDtI,EAAA,CADCooB,EAAAA,8CAVUiuB,EAAgBr2C,EAAA,CAL5BuI,EAAAA,UAAU,CACTC,SAAU,aACVC,SAAA,8UACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B01B,oBCFb,SAAAI,KAAmC,OAAtBA,EAAoBz2C,EAAA,CALhC2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAc4tC,EAAAA,eAAgBC,EAAAA,YAAaP,IACrDxtC,aAAc,CAACytC,IACfjtC,QAAS,CAACitC,GAAkBjB,OAEjBqB,MCJbG,GAAA,WACE,SAAAA,KACF,OAFaA,EAAgB52C,EAAA,CAJ5BuI,EAAAA,UAAU,CACTC,SAAU,aACVC,SAAA,mHAEWmuC,GAAb,iBCGA,SAAAC,KAA4B,OAAfA,EAAa72C,EAAA,CALzB2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcyF,EAAAA,YACxB3F,aAAc,CAACguC,IACfxtC,QAAS,CAACwtC,OAECC,oBCQX,SAAAC,EAAsBjtB,GAAA5qB,KAAA4qB,qBAAAA,EALtB5qB,KAAA4L,UAAYxL,EAAAA,UAGZJ,KAAA83C,YAAwCzsB,EAAAA,kBAW1C,OAPEwsB,EAAA33C,UAAAiM,SAAA,WACEnM,KAAK+3C,UAAY/3C,KAAK4qB,qBAAqBpT,OAG7CqgC,EAAA33C,UAAA+nB,MAAA,SAAMriB,EAAyB0e,GAC7BtkB,KAAK4qB,qBAAqBhS,OAAOhT,EAAM0e,6CAPGlQ,EAAAA,wBANjCyjC,EAAsB92C,EAAA,CAJlCuI,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAA,26DAEWquC,oBCDb,SAAAG,KAA2C,OAA9BA,EAA4Bj3C,EAAA,CALxC2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcouC,EAAAA,iBAAkBxuC,EAAY6F,EAAAA,YACtD3F,aAAc,CAACkuC,IACf1tC,QAAS,CAAC0tC,OAECG,SCZb,2BCYE,SAAAE,EAAoBlyC,EAA2Bc,GAA3B9G,KAAAgG,OAAAA,EAA2BhG,KAAA8G,OAAAA,EAFvC9G,KAAAm4C,iBAAmB,IAAIp3B,EAAAA,iBAAyB,GAIpD/U,QAAQhM,KAAKgG,OAAO8X,eACpB9R,QAAQhM,KAAKgG,OAAOwB,WACpBxH,KAAKo4C,0BAELp4C,KAAKq4C,aACLr4C,KAAKs4C,gBAIDJ,EAAAh4C,UAAAm4C,WAAR,WAAA,IAAA3vC,EAAA1I,KACEu4C,EAAAA,UAAUv4C,KAAKgG,OAAO8X,aAAc,iBAAiBlQ,WAAU,SAAAzL,GAC7D,OAAAuG,EAAKyvC,iBAAiB31C,MAAK,OAIvB01C,EAAAh4C,UAAAo4C,MAAR,WACE,IAAME,EAAkBx4C,KAAKgG,OAAOwB,SAASG,cAAc,UAC3D6wC,EAAgB5yC,KAAO,kBACvB4yC,EAAgBC,OAAQ,EACxBD,EAAgBlJ,IAAM,iCAEtB,IAAMoJ,EAAW14C,KAAKgG,OAAOwB,SAASG,cAAc,OACpD+wC,EAAS/qC,GAAK3N,KAAK8G,OAAO6xC,UAAUC,UAEpC54C,KAAKgG,OAAOwB,SACTC,qBAAqB,QAAQ,GAC7BK,YAAY0wC,GAEfx4C,KAAKgG,OAAOwB,SAASC,qBAAqB,QAAQ,GAAGK,YAAY4wC,IAG3DR,EAAAh4C,UAAAk4C,sBAAR,WACE,OACEpsC,QAAQhM,KAAK8G,OAAO6xC,YAAc3sC,QAAQhM,KAAK8G,OAAO6xC,UAAUC,YAIpEV,EAAAh4C,UAAAqnB,KAAA,WAAA,IAAA7e,EAAA1I,KACE,OAAOA,KAAKm4C,iBAAiBrrC,KAC3B4S,EAAAA,QAAO,SAAAmI,GAAU,OAAAA,KACjBhJ,EAAAA,WAAU,SAAA1c,GACR,IAAM02C,EAAMnwC,EAAK1C,OAAO8X,aAAkB,IAC1C,OAAOpV,EAAKowC,eAAehsC,KACzBE,EAAAA,uBACAC,EAAAA,KAAI,SAAA8rC,GACEA,IACFF,EAAIG,IAAIhgB,SACR6f,EAAIG,IAAIzxB,OAAOtkB,KAAK41C,EAAIG,IAAIC,iBAa9Bf,EAAAh4C,UAAA44C,aAAV,WACE,OAAO19B,EAAAA,IAAG,6CA/DgBrT,EAAAA,iBAA2BmxC,kJAH5ChB,EAAsBn3C,EAAA,CAHlCmH,EAAAA,WAAW,CACVC,WAAY,UAED+vC,oBCGX,SAAAiB,EAAoBC,GAAAp5C,KAAAo5C,gBAAAA,EAFpBp5C,KAAAq5C,kBAAoBr5C,KAAKo5C,gBAAgB7xB,OAG3C,gDADuC2wB,MAH1BiB,EAAkBp4C,EAAA,CAN9BuI,EAAAA,UAAU,CACTC,SAAU,eACVC,SAAU,+EAIC2vC,MCPAG,GAA0C,CACrDX,UAAW,kBCyBb,SAAAY,KAA8B,OAAjBA,EAAex4C,EAAA,CApB3B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcouC,EAAAA,kBACxBtuC,aAAc,CAACwvC,IACftpC,gBAAiB,CAACspC,IAClBrvC,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb2pC,mBAAoB,CAClB1pC,UAAW0pC,OAIjBpvC,EAAAA,qBAAqBuvC,IAErB,CACEtvC,QAASkvC,GACTjvC,YAAaC,EAAAA,YAINqvC,oBClBb,SAAAC,KAAwC,OAA3BA,EAAyBz4C,EAAA,CARrCuI,EAAAA,UAAU,CACTC,SAAU,gCACVC,SAAU,mKAIVgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B83B,MCGPC,KAAMC,GAAA,IACTC,EAAAA,qBAAsB,WACvBzsC,GAAC0sC,EAAAA,qBAAsB,eAIzBC,GAAA,WACE,SAAAA,EAEYC,EACFC,EACElkC,GAFA7V,KAAA85C,cAAAA,EACF95C,KAAA+5C,kBAAAA,EACE/5C,KAAA6V,SAAAA,EA2Fd,OAxFEgkC,EAAA35C,UAAA85C,SAAA,SAASC,GAAT,IAAAvxC,EAAA1I,KACE,OAAOA,KAAKk6C,WAAWD,GAASntC,KAC9B+R,EAAAA,WAAU,SAACunB,GAA8B,OAAAA,EAAQ+T,YACjDt7B,EAAAA,WAAU,SAAAgwB,GACR,OAAAnmC,EAAK0xC,WAAWH,GAASntC,KACvB+R,EAAAA,WAAU,SAAAw7B,WACFC,EAAY,OAClB,IAAmB,IAAAC,EAAAh3C,EAAAsrC,GAAK2L,EAAAD,EAAA/3C,QAAAg4C,EAAAv3C,KAAAu3C,EAAAD,EAAA/3C,OAAE,CAArB,IAAM4xB,EAAIomB,EAAAt3C,MACbo3C,EAAUl3C,KAAI/C,EAAAA,EAAA,GACT+zB,GAAI,CACPhyB,MAAOsG,EAAK+xC,eAAermB,EAAMimB,wGAGrC,OAAOj/B,EAAAA,GAAGk/B,YAOpBT,EAAA35C,UAAAw6C,cAAA,SAAcT,GACZ,OAAOj6C,KAAKk6C,WAAWD,GAASntC,KAC9B+R,EAAAA,WAAU,SAACunB,GAA8B,OAAAA,EAAQ1U,iBAIrDmoB,EAAA35C,UAAAy6C,SAAA,SAASV,GACP,OAAOj6C,KAAKo6C,WAAWH,GAASntC,KAC9BgO,EAAAA,KAAI,SAAAu/B,GACF,OAAOZ,GAAOY,QAKpBR,EAAA35C,UAAA06C,UAAA,SAAU13C,EAAe+2C,GACvBj6C,KAAKk6C,WAAWD,GACbntC,KAAKC,EAAAA,KAAK,IACVa,WAAU,SAAAw4B,GACTA,EAAQwU,UAAU13C,OAId22C,EAAA35C,UAAAg6C,WAAV,SACED,GADF,IAAAvxC,EAAA1I,KAGE,OAAOA,KAAKo6C,WAAWH,GAASntC,KAC9BgO,EAAAA,KAAI,SAACu/B,GAAgB,OAAA3xC,EAAKmyC,mBAAmBR,MAC7C36B,EAAAA,QAAO,SAAAlf,GAAK,QAAEA,OAIRq5C,EAAA35C,UAAAk6C,WAAV,SAAqBH,GACnB,OAAIA,EACK7+B,EAAAA,GAAG6+B,GACDj6C,KAAK85C,cACP95C,KAAK85C,cAAc5hC,MAAMpL,KAC9BgO,EAAAA,KAAI,SAAAoH,GAAQ,OAAAA,EAAK+3B,WACjBn/B,EAAAA,KAAI,SAAAu/B,GACF,OAAQA,GACN,IAAK,WACH,OAAOV,EAAAA,oBACT,IAAK,WACH,OAAOC,EAAAA,oBACT,QACE,OAAOS,YAVV,GAiBCR,EAAA35C,UAAA26C,mBAAV,SAA6BZ,GAC3B,OAAOj6C,KAAK6V,SAAS2B,IACnBxX,KAAK+5C,kBAAkBE,GACvB,OAIMJ,EAAA35C,UAAAu6C,eAAV,SAAyBrmB,EAAW6lB,GAClC,OAAQA,GACN,KAAKN,EAAAA,oBACH,OAAOvlB,EAAK0mB,WACd,KAAKlB,EAAAA,oBACH,OAAOxlB,EAAK2mB,OAAS,IAAM3mB,EAAK4mB,QAClC,QACE,OAAO5mB,EAAK4mB,mDA1FS1iC,EAAgBtX,WAAA,CAAA,CAAA4E,KADxCgO,EAAAA,kBAE0BqnC,EAAAA,yBACP5iC,EAAAA,YALXwhC,EAA2B94C,EAAA,CADvCmH,EAAAA,aAGIxG,EAAA,EAAAkS,EAAAA,aAFQimC,GAAb,iBCEE,SAAAqB,EAAoBC,GAAAn7C,KAAAm7C,iBAAAA,EAPpBn7C,KAAA4L,UAAYxL,EAAAA,UAwBd,OAfEZ,OAAAiC,eAAIy5C,EAAAh7C,UAAA,SAAM,KAAV,WACE,OAAOF,KAAKm7C,iBAAiBnB,SAASh6C,KAAKi6C,0CAG7Cz6C,OAAAiC,eAAIy5C,EAAAh7C,UAAA,cAAW,KAAf,WACE,OAAOF,KAAKm7C,iBAAiBT,cAAc16C,KAAKi6C,0CAGlDz6C,OAAAiC,eAAIy5C,EAAAh7C,UAAA,SAAM,KAAV,SAAWgD,GACTlD,KAAKm7C,iBAAiBP,UAAU13C,EAAOlD,KAAKi6C,0CAG9Cz6C,OAAAiC,eAAIy5C,EAAAh7C,UAAA,SAAM,KAAV,WACE,OAAOF,KAAKm7C,iBAAiBR,SAAS36C,KAAKi6C,mFAfPJ,MAF7B94C,EAAA,CAARsI,EAAAA,uCAPU6xC,EAA4Bn6C,EAAA,CALxCuI,EAAAA,UAAU,CACTC,SAAU,2BACVC,SAAA,kbACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9Bw5B,oBC6Bb,SAAAE,KAAwC,OAA3BA,EAAyBr6C,EAAA,CA1BrC2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAconC,EAAAA,aAAcoK,EAAAA,kBAAmB5xC,GACzDK,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb8rC,wBAAyB,CACvB7rC,UAAWyrC,GACXpxC,UAAW,CACT,CACEE,QAAS6vC,GACT0B,SAAU1B,GACVttB,KAAM,CAACjU,EAAkB2iC,EAAAA,kBAAmB5iC,EAAAA,aAIlDmhC,0BAA2B,CACzB/pC,UAAW+pC,OAIjBK,IAEFlwC,aAAc,CAACuxC,GAA8B1B,IAC7C3pC,gBAAiB,CAACqrC,GAA8B1B,IAChDrvC,QAAS,CAAC+wC,GAA8B1B,OAE7B4B,OjBzCD1I,GAAAA,EAAAA,kBAAAA,EAAAA,gBAAe,KACzB,SAAA,WACAA,GAAA,SAAA,6BkBqCA,SAAA8I,EAAsB56B,EAA0BrY,GAA1BvI,KAAA4gB,GAAAA,EAA0B5gB,KAAAuI,SAAAA,EAhBTvI,KAAAu5B,UAAW,EAUxCv5B,KAAAy7C,OAAS,IAAI3zB,EAAAA,aAEf9nB,KAAA07C,YAAc,EAEtB17C,KAAA4L,UAAYxL,EAAAA,UAiCd,OA7BEo7C,EAAAt7C,UAAAiM,SAAA,WACEnM,KAAK27C,QAAQ37C,KAAKs2B,QAAQ,IAG5BklB,EAAAt7C,UAAAy7C,QAAA,SAAQz4C,EAAe04C,GAChB57C,KAAKu5B,WAAYqiB,GACpB57C,KAAKuI,SAAS2I,aACZlR,KAAK4gB,GAAG1X,cACR,QACA,gBAAehG,GAASlD,KAAK07C,aAAW,MAK9CF,EAAAt7C,UAAA27C,SAAA,SAASvlB,GACHt2B,KAAKu5B,WAGTv5B,KAAK07C,YAAcplB,EACnBt2B,KAAK27C,QAAQrlB,GACbt2B,KAAKy7C,OAAOlzB,KAAK+N,KAGnBklB,EAAAt7C,UAAA47C,eAAA,SAAeh/B,EAAYwZ,GACN,UAAfxZ,EAAM+X,OACR/X,EAAMoO,iBACNlrB,KAAK27C,QAAQrlB,8CA5BSntB,EAAAA,kBAAgCC,EAAAA,aAhBnBrI,EAAA,CAAtCsI,EAAAA,QAAS+gB,EAAAA,YAAY,iDAKbrpB,EAAA,CAARsI,EAAAA,sCAKStI,EAAA,CAATooB,EAAAA,uCAfUqyB,EAAmBz6C,EAAA,CAL/BuI,EAAAA,UAAU,CACTC,SAAU,iBACVC,SAAA,4QACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B85B,oBCRb,SAAAO,KAA+B,OAAlBA,EAAgBh7C,EAAA,CAL5B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcJ,GACxBE,aAAc,CAAC6xC,IACfrxC,QAAS,CAACqxC,OAECO,SCVb,2BCKA,SAAAC,WAeA,SAfaA,EACJA,EAAA7sB,QAAP,WACE,MAAO,CACLC,SAAU6sB,EACVnyC,UAAW,CACTC,EAAAA,qBAAqB,CACnBmyC,KAAM,KAER,CACElyC,QAASmyC,GACTlyC,YAAaC,EAAAA,WAVV8xC,EAAgBC,EAAAl7C,EAAA,CAD5B2I,EAAAA,SAAS,KACGsyC,oBCFb,SAAAI,KA0BA,OAzBSA,EAAAC,qBAAP,SACE5e,GAIA,OAFcA,EAAQv6B,MAETo5C,MAAM,iBAAmB,KAAO,CAAEC,cAAc,IAGxDH,EAAAI,eAAP,SAAsB/e,GAGpB,OAFcA,EAAQv6B,MAETo5C,MAAMG,EAAAA,eAAiB,KAAO,CAAEF,cAAc,IAGtDH,EAAAM,kBAAP,SAAyBjf,GAEvB,OADiBA,EAAQv6B,MACTo5C,MAAMK,EAAAA,kBAAoB,KAAO,CAAEC,iBAAiB,IAG/DR,EAAAS,cAAP,SAAqBpf,GACnB,OAAIA,EAAQjmB,IAAI,YAAYtU,QAAUu6B,EAAQjmB,IAAI,gBAAgBtU,MACzD,CAAE45C,UAAU,GAEd,MAEXV,KC3BaW,GAAc,CACzBC,GAAI,EACJC,IAAK,EACLC,KAAM,EACNC,GAAI,EACJC,GAAI,EACJ/mB,IAAK,GAGP,SAAgBgnB,GAAWC,EAAeC,GACxC,OAAKR,GAAYO,EAAOzoB,OAAUkoB,GAAYQ,EAAO1oB,MAG5CkoB,GAAYO,EAAOzoB,MAAQkoB,GAAYQ,EAAO1oB,MAF9C,MCXC2oB,iBCUV,SAAAC,KACF,OAHE18C,EAAA,CADCsI,EAAAA,0CADUo0C,EAAmB18C,EAAA,CAL/BuI,EAAAA,UAAU,CACTC,SAAU,gBACVC,SAAA,gZACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B+7B,oBCEb,SAAAC,KAA+B,OAAlBA,EAAgB38C,EAAA,CAL5B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAc0F,EAAAA,sBACxB5F,aAAc,CAAC8zC,IACftzC,QAAS,CAACszC,OAECC,oBCSX,SAAAC,EAAoBC,GAAA59C,KAAA49C,mBAAAA,EANpB59C,KAAA69C,eAAgB,EAEhB79C,KAAA89C,YAAa,EAEb99C,KAAA4L,UAAYxL,EAAAA,UAcd,OAVEZ,OAAAiC,eAAWk8C,EAAAz9C,UAAA,iBAAc,KAAzB,WAEE,OADAF,KAAK+9C,SAAW/9C,KAAK+9C,UAAY,GAC1B/9C,KAAK+9C,SAASvgC,QAAQwgC,MAAK,SAAC/+B,EAAG1f,GACpC,OAAO0f,EAAE4V,KAAKopB,cAAc1+C,EAAEs1B,0CAIlC8oB,EAAAz9C,UAAAg+C,cAAA,SAAcC,GACZn+C,KAAK49C,mBAAmBM,cAAcC,6CAVAC,EAAAA,sBARxCr9C,EAAA,CADCsI,EAAAA,wCAGDtI,EAAA,CADCsI,EAAAA,6CAGDtI,EAAA,CADCsI,EAAAA,0CALUs0C,EAAuB58C,EAAA,CALnCuI,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAA,ixCACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9Bi8B,oBCyBX,SAAAU,EACYlmB,EACAylB,EACAU,EACAC,EACAnsC,EACAovB,GALAxhC,KAAAm4B,YAAAA,EACAn4B,KAAA49C,mBAAAA,EACA59C,KAAAs+C,YAAAA,EACAt+C,KAAAu+C,sBAAAA,EACAv+C,KAAAoS,cAAAA,EACApS,KAAAwhC,kBAAAA,EAnBZxhC,KAAAw+C,yBAA2B,IAOnBx+C,KAAAy+C,kBAAmB,EAEnBz+C,KAAA+nB,aAAe,IAAIrc,EAAAA,aAE3B1L,KAAA0+C,mBAAoB,EA8ItB,OAnIEL,EAAAn+C,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACMA,KAAKu+C,uBACPv+C,KAAKu+C,sBAAsBI,oBACzB3+C,KAAKw+C,0BAGLx+C,KAAKoS,eAAiBpS,KAAKoS,cAAcwsC,QAAQ,OACnD5+C,KAAK+lC,MAAQl5B,EAAAA,cAAc,CACzB7M,KAAKwhC,kBAAkB9P,YACvB1xB,KAAKm4B,YAAYmE,eACjBt8B,KAAKu+C,sBAAsBM,mBACzB7+C,KAAKw+C,4BAEN1xC,KACDG,EAAAA,KACE,SAACC,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAAC4E,EAAA3E,EAAA,GAAM+sB,EAAA/sB,EAAA,GAAQ2xC,EAAA3xC,EAAA,GAKdzE,EAAKq2C,OACH7kB,IAAW8kB,EAAAA,sBAAwBltC,EAAKmtC,KAAOntC,EAAK+iB,KACtDnsB,EAAKw2C,6BAA6BptC,EAAMgtC,EAAgBhwB,YAG5DhU,EAAAA,KAAI,SAAC5N,GAAuD,OAAvDxJ,EAAAwJ,EAAA,GAAC,OAKRlN,KAAK+lC,MAAQl5B,EAAAA,cAAc,CACzB7M,KAAKwhC,kBAAkB9P,YACvB1xB,KAAKm4B,YAAYmE,iBAChBxvB,KACDG,EAAAA,KACE,SAACC,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAAC4E,EAAA3E,EAAA,GAAM+sB,EAAA/sB,EAAA,GACN,OAACzE,EAAKq2C,OACJ7kB,IAAW8kB,EAAAA,sBAAwBltC,EAAKmtC,KAAOntC,EAAK+iB,QAE1D/Z,EAAAA,KAAI,SAAC5N,GAA2B,OAA3BxJ,EAAAwJ,EAAA,GAAC,OAKVlN,KAAKm/C,eAAiBn/C,KAAKwhC,kBACxByE,YACAn5B,KAAKgO,EAAAA,KAAI,SAAA+M,GAAU,OAACA,MAEvB7nB,KAAK49C,mBAAmBwB,iCAExBp/C,KAAKs9B,KAAOt9B,KAAKs+C,YAAYpgB,MAAM,CACjClP,WAAY,CAAC,GAAI,CAACmP,EAAAA,WAAWC,aAG/Bp+B,KAAK+nB,aAAanb,IAChB5M,KAAK49C,mBACFyB,6BACAzxC,WAAU,SAAA0xC,GACT52C,EAAK62C,UAAUD,OAIrBt/C,KAAK+nB,aAAanb,IAChB5M,KAAK49C,mBAAmB4B,2BAA2B5xC,WAAU,SAAAhK,GAC3D8E,EAAK+2C,QAAQ77C,QAKTy6C,EAAAn+C,UAAAu/C,QAAV,SAAkB77C,GACZA,IACF5D,KAAKu+C,sBAAsBI,oBACzB3+C,KAAKw+C,0BAEPx+C,KAAK49C,mBAAmBwB,mCAI5Bf,EAAAn+C,UAAAq/C,UAAA,SAAUD,GACJA,IACFt/C,KAAKs9B,KAAKoiB,QACV1/C,KAAK49C,mBAAmBwB,mCAIlBf,EAAAn+C,UAAAg/C,6BAAV,SACEptC,EACAgd,GAFF,IAAApmB,EAAA1I,KAIEA,KAAK2/C,kBAAoB7wB,GAAW,GAChChd,EAAK8tC,iBACP9tC,EAAK8tC,gBAAgB92C,SAAQ,SAAA+2C,GAC3Bn3C,EAAKi3C,kBAAoBj3C,EAAKi3C,kBAAkBjgC,QAC9C,SAAAogC,GAAU,OAAAA,EAAOC,WAAaF,EAAehrB,YAMrDwpB,EAAAn+C,UAAA8/C,aAAA,WACOhgD,KAAKs9B,KAAK2iB,MAIfjgD,KAAK49C,mBAAmBsC,WAAWlgD,KAAKs9B,KAAKp6B,MAAM8rB,WAAYhvB,KAAK++C,QAHlE/+C,KAAKs9B,KAAK6iB,iBAKd9B,EAAAn+C,UAAAkgD,oBAAA,SAAoBL,GAClB//C,KAAK49C,mBAAmBsC,WAAWH,EAAU//C,KAAK++C,QAClD/+C,KAAK0+C,mBAAoB,GAG3BL,EAAAn+C,UAAAkL,MAAA,SAAM0R,GACC9c,KAAKy+C,mBACRz+C,KAAK0+C,mBAAoB,EACrB5hC,GAASA,EAAM7b,QACH6b,EAAM7b,OAAQo/C,QAGhCrgD,KAAKy+C,kBAAmB,GAG1BJ,EAAAn+C,UAAAogD,aAAA,WACEtgD,KAAKy+C,kBAAmB,GAG1BJ,EAAAn+C,UAAAoO,YAAA,WACMtO,KAAK+nB,cACP/nB,KAAK+nB,aAAaxZ,cAEpBvO,KAAK49C,mBAAmBwB,2EAzIDzrC,EAAAA,mBACOyqC,EAAAA,0BACP5f,EAAAA,mBACU+hB,EAAAA,6BACRpsC,EAAAA,4BACIN,EAAAA,qBApBpBwqC,EAAmBt9C,EAAA,CAJ/BuI,EAAAA,UAAU,CACTC,SAAU,iBACVC,SAAA,m4DAEW60C,oBCkBb,SAAAmC,KAA+B,OAAlBA,EAAgBz/C,EAAA,CAxB5B2I,EAAAA,SAAS,CACRC,aAAc,CAAC00C,GAAqBV,IACpCxzC,QAAS,CAACk0C,GAAqBV,IAC/B/zC,QAAS,CACP2F,EAAAA,qBACA1F,EAAAA,aACA4tC,EAAAA,eACAC,EAAAA,YACAlX,EAAAA,oBACAlxB,EAAAA,WACA7F,GAEFK,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbixC,yBAA0B,CACxBhxC,UAAW4uC,QAMnBxuC,gBAAiB,CAACwuC,OAEPmC,oBCoBX,SAAAE,EACYlf,EACA/tB,EACArB,GAFApS,KAAAwhC,kBAAAA,EACAxhC,KAAAyT,qBAAAA,EACAzT,KAAAoS,cAAAA,EAvCHpS,KAAAsxC,UAAW,EAEXtxC,KAAA2gD,WAAY,EAEZ3gD,KAAA4K,QAAoC,CAC3Cg2C,gBAAgB,EAChBC,YAAa,MAGP7gD,KAAA8gD,OAAiB,GAehB9gD,KAAA0hC,kBAAuCC,EAAAA,kBAAkBC,WAuFpE,OA/FEpiC,OAAAiC,eAAIi/C,EAAAxgD,UAAA,QAAK,KAIT,WACE,OAAOF,KAAK8gD,YALd,SAAUjS,GACR7uC,KAAK+gD,aAAalS,GAClB7uC,KAAKghD,8CAQiBxhD,OAAAiC,eAAIi/C,EAAAxgD,UAAA,aAAU,KAAd,SAAegD,GAChClD,KAAKsxC,WAGRpuC,EACIlD,KAAKs9B,KAAK2jB,QAAQ,CAAEpP,WAAW,IAC/B7xC,KAAKs9B,KAAK4jB,OAAO,CAAErP,WAAW,sCAWtC6O,EAAAxgD,UAAAihD,sBAAA,WACE,QAAInhD,KAAKoS,eACApS,KAAKoS,cAAc0oB,UAAU,iBAUhC4lB,EAAAxgD,UAAA6gD,aAAR,SAAqBlS,GACfA,EAAMuS,OAAM,SAAAhtB,GAAQ,OAAAA,EAAKv0B,eAAe,iBAC1CG,KAAK8gD,OAASjS,EAAM/zB,KAAI,SAAAumC,GACtB,IAAMv6B,EAAQtnB,OAAOc,OACnB,GACC+gD,EAAsCC,YAGzC,OADAx6B,EAAM6c,SAAW0d,EAAiB1d,SAC3B7c,KAGT9mB,KAAK8gD,OAASjS,GAIV6R,EAAAxgD,UAAA8gD,WAAR,WAAA,IAAAt4C,EAAA1I,KACEA,KAAKs9B,KAAO,IAAIuG,EAAAA,UAAU,IAC1B7jC,KAAK8gD,OAAOh4C,SAAQ,SAAAsrB,GACV,IAAAS,EAAAT,EAAA3hB,QAAAoiB,KACFqJ,EAAQ,IAAI2F,EAAAA,UAAU,CAC1BN,YAAa,IAAIiB,EAAAA,YAAkBpQ,EAAMmP,aACzCI,SAAU,IAAIa,EAAAA,YAAYpQ,EAAKuP,SAAU,CAAEc,SAAU,WAElDrQ,EAAKmtB,aAAc74C,EAAK4oC,UAC3BpT,EAAM+iB,UAERv4C,EAAK40B,KAAKoH,WAAW7P,EAAMqJ,OAI/BwiB,EAAAxgD,UAAAshD,YAAA,SAAYptB,GACNp0B,KAAKyT,sBAAwBzT,KAAK4K,QAAQg2C,eAC5C5gD,KAAKyT,qBAAqB+tC,YAAYptB,GAEtCp0B,KAAKwhC,kBAAkBggB,YAAYptB,UAE9Bp0B,KAAKs9B,KAAKgB,SAASlK,EAAK3hB,QAAQoiB,OAGzC6rB,EAAAxgD,UAAAwxC,WAAA,SAAWtd,GAAX,IAAA1rB,EAAA1I,KACE,OAAOA,KAAKs9B,KAAK9lB,IAAI4c,EAAK3hB,QAAQoiB,MAAMuK,aAAatyB,KAEnDo3B,EAAAA,UAAU,MACVppB,EAAAA,KAAI,SAAA5X,GACEA,GAASwF,EAAK+K,sBAAwB/K,EAAKkC,QAAQg2C,eACrDl4C,EAAK+K,qBAAqB2wB,YACxBlhC,EAAMqgC,YACNrgC,EAAMygC,UAECzgC,GACTwF,EAAK84B,kBAAkB4C,YAAYlhC,EAAMqgC,YAAargC,EAAMygC,aAGhE7oB,EAAAA,KAAI,WAAM,OAAWpS,EAAK40B,KAAK9lB,IAAI4c,EAAK3hB,QAAQoiB,oDAvErBhhB,EAAAA,yBACG2B,EAAAA,4BACPrB,EAAAA,wBAvClBpT,EAAA,CAARsI,EAAAA,wCAEQtI,EAAA,CAARsI,EAAAA,yCAEQtI,EAAA,CAARsI,EAAAA,uCAYDtI,EAAA,CAJCsI,EAAAA,MAAM,oCAYEtI,EAAA,CAARsI,EAAAA,iDAEuBtI,EAAA,CAAvBsI,EAAAA,MAAM,iDA3BIq3C,EAAqB3/C,EAAA,CALjCuI,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAA,w6CACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9Bg/B,oBCoCX,SAAAe,EACY/d,EACFtxB,GADEpS,KAAA0jC,iBAAAA,EACF1jC,KAAAoS,cAAAA,EA/BDpS,KAAA0hD,SAAU,EAEV1hD,KAAAsxC,UAAW,EAGVtxC,KAAAk8C,KAAO,IAAIp0B,EAAAA,aAEZ9nB,KAAA0hC,kBAAuCC,EAAAA,kBAAkBC,WAGzD5hC,KAAA4K,QAAoC,CAC3Cg2C,gBAAgB,EAChBC,YAAa,MAuDjB,OAjCEY,EAAAvhD,UAAAiM,SAAA,WACEnM,KAAK2hD,0BAA4B3hD,KAAK0jC,iBAAiBjB,4BACrDziC,KAAKo0B,KACLp0B,KAAK0hC,oBAKT+f,EAAAvhD,UAAAihD,sBAAA,WACE,QAAInhD,KAAKoS,eACApS,KAAKoS,cAAc0oB,UAAU,iBAMxC2mB,EAAAvhD,UAAA0hD,oBAAA,SAAoBnvC,GAElB,OACEA,GACAA,EAAQ4iB,OAC2B,eAAnC5iB,EAAQ4iB,MAAMC,kBAIlBmsB,EAAAvhD,UAAAg5B,WAAA,WACEl5B,KAAK6hD,gBAAgB9hB,SAAS,GAC9B//B,KAAK6hD,gBAAgBrQ,eAGvBiQ,EAAAvhD,UAAA4hD,SAAA,WACE9hD,KAAKk8C,KAAK3zB,iDAnCkB8Y,UACJltB,EAAAA,wBA/BjBpT,EAAA,CAARsI,EAAAA,uCACQtI,EAAA,CAARsI,EAAAA,oCACQtI,EAAA,CAARsI,EAAAA,wCACQtI,EAAA,CAARsI,EAAAA,+CAEStI,EAAA,CAATooB,EAAAA,qCAEQpoB,EAAA,CAARsI,EAAAA,iDAGQtI,EAAA,CAARsI,EAAAA,uCAXUo4C,EAAiB1gD,EAAA,CAJ7BuI,EAAAA,UAAU,CACTC,SAAU,eACVC,SAAA,24KAEWi4C,oBCpBb,SAAAM,KAGA,OADEhhD,EAAA,CADCsI,EAAAA,oCADU04C,EAAqBhhD,EAAA,CAJjCuI,EAAAA,UAAU,CACTC,SAAU,mBACVC,SAAA,yzDAEWu4C,oBC4Bb,SAAAC,KAA+B,OAAlBA,EAAgBjhD,EAAA,CArB5B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAonC,EAAAA,aACAuP,GACAhgB,EAAAA,oBACA0Q,EAAAA,UACA+Q,EAAAA,UACAvE,GACApuC,EAAAA,WACAyhC,GACAgB,GACAxiC,EAAAA,sBAEF5F,aAAc,CACZ83C,GACAM,GACArB,IAEFv2C,QAAS,CAACs3C,GAAmBf,GAAuBqB,OAEzCC,oBCYb,SAAAE,KAA8B,OAAjBA,EAAenhD,EAAA,CA5B3B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACA22B,EAAAA,oBACAwhB,GACA/Q,EAAAA,aACA2G,GACA8F,GACAnuC,EAAAA,qBACA2hC,EAAAA,UACAznC,EACA6F,EAAAA,WACAyiC,GACAnF,IAEF9iC,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb2yC,0BAA2B,CACzB1yC,UAAWm1B,QAKnBj7B,aAAc,CAACi7B,GAAoBpB,IACnC3zB,gBAAiB,CAAC+0B,GAAoBpB,IACtCr5B,QAAS,CAACy6B,GAAoBpB,OAEnB0e,oBChBX,SAAAE,EACY5gB,EACAkC,EACAjwB,EACF0kB,EACAhV,EACA/Q,GALEpS,KAAAwhC,kBAAAA,EACAxhC,KAAA0jC,iBAAAA,EACA1jC,KAAAyT,qBAAAA,EACFzT,KAAAm4B,YAAAA,EACAn4B,KAAAmjB,eAAAA,EACAnjB,KAAAoS,cAAAA,EAXVpS,KAAAqiD,UAAW,EAEXriD,KAAA0hC,kBAAuCC,EAAAA,kBAAkBC,WA4D3D,OAhDEwgB,EAAAliD,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAK+lC,MAAQ/lC,KAAKwhC,kBAAkB9P,YACpC1xB,KAAKsiD,YAActiD,KAAK0jC,iBAAiB7B,6BAEzC7hC,KAAKuiD,SAAWviD,KAAKwhC,kBAClBghB,aACA11C,KAAK4S,EAAAA,QAAO,SAAAgH,GAAW,OAAAA,EAAQ9lB,OAAS,MAEvCZ,KAAKmhD,wBACPnhD,KAAKyiD,YAAc51C,EAAAA,cAAc,CAC/B7M,KAAKwhC,kBAAkByE,YACvBjmC,KAAKyT,qBAAqBwyB,YAC1BjmC,KAAKm4B,YAAYuqB,mBAChB51C,KACDG,EAAAA,KAAI,SAACC,OAAKm1C,EAAL3+C,EAAAwJ,EAAA,GAAK,GAAc,OAACxE,EAAK25C,SAAWA,KACzCvnC,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACy1C,EAAAx1C,EAAA,GAAYy1C,EAAAz1C,EAAA,GAChB,OAD2BA,EAAA,GAChBw1C,GAAcC,EAAYD,MAMzC3iD,KAAKyiD,YAAcziD,KAAKwhC,kBAAkByE,YAI5CjmC,KAAKukC,iBAAmBvkC,KAAK0jC,iBAAiBjC,mBAC5CzhC,KAAK0hC,oBAKT0gB,EAAAliD,UAAAihD,sBAAA,WACE,QAAInhD,KAAKoS,eACApS,KAAKoS,cAAc0oB,UAAU,iBAMxCsnB,EAAAliD,UAAA2iD,aAAA,SAAazuB,GACPp0B,KAAKqiD,UACPriD,KAAKwhC,kBAAkBggB,YAAYptB,GACnCp0B,KAAKyT,qBAAqBkyB,SAASvR,EAAK3hB,QAAQoiB,KAAMT,EAAKuP,WAE3D3jC,KAAKmjB,eAAewV,GAAG,CAAEC,QAAS,oDArDP/kB,EAAAA,yBACDwtB,UACI7rB,EAAAA,4BACX7B,EAAAA,mBACGkB,EAAAA,sBACDV,EAAAA,wBAfdiuC,EAAoBrhD,EAAA,CALhCuI,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,8oCACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B0gC,oBCiBb,SAAAU,KAAgC,OAAnBA,EAAiB/hD,EAAA,CAxB7B2I,EAAAA,SAAS,CACRE,QAAS,CACPo4C,GACAn4C,EAAAA,aACA22C,GACAvP,EAAAA,aACAC,EAAAA,UACAwM,GACAnuC,EAAAA,qBACAD,EAAAA,YAEFxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbuzC,cAAe,CACbtzC,UAAW2yC,QAKnBz4C,aAAc,CAACy4C,IACfj4C,QAAS,CAACi4C,IACVvyC,gBAAiB,CAACuyC,OAEPU,oBC7BX,SAAAE,EACY7/B,EACAqe,GADAxhC,KAAAmjB,eAAAA,EACAnjB,KAAAwhC,kBAAAA,SAGZwhB,EAAA9iD,UAAA8a,YAAA,WAAA,IAAAtS,EAAA1I,KACE,OAAO6M,EAAAA,cAAc,CACnB7M,KAAKwhC,kBAAkB9P,YACvB1xB,KAAKwhC,kBAAkByE,cACtBn5B,KACD4S,EAAAA,QAAO,SAACxS,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACC,EAAA,GAAe,OAAZA,EAAA,MACZ2N,EAAAA,KAAI,SAAC5N,OAAC4E,EAADpO,EAAAwJ,EAAA,GAAC,GACJ,OAAIxE,EAAKu6C,QAAQnxC,KACfpJ,EAAKya,eAAewV,GAAG,CAAEC,QAAS,UAC3B,QAOPoqB,EAAA9iD,UAAA+iD,QAAR,SAAgBnxC,GACd,OAAOA,IAASA,EAAKoxC,qDArBKruC,EAAAA,sBACGhB,EAAAA,uLAHpBmvC,EAAiBjiD,EAAA,CAH7BmH,EAAAA,WAAW,CACVC,WAAY,UAED66C,oBCCX,SAAAG,EACY3hB,EACA/tB,GADAzT,KAAAwhC,kBAAAA,EACAxhC,KAAAyT,qBAAAA,SAGZ0vC,EAAAjjD,UAAA8e,OAAA,SACEoC,EACA1C,EACAH,GAEA,MAAqB,qBAAjBG,GAAwCH,EAuBrC6C,EAtBEvU,EAAAA,cAAc,CACnBuU,EACAphB,KAAKwhC,kBAAkB9P,YACvB1xB,KAAKyT,qBAAqB2vC,YACzBt2C,KACDgO,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACyR,EAAAxR,EAAA,GAAO2E,EAAA3E,EAAA,GAAMk2C,EAAAl2C,EAAA,GACjB,OAAI2E,EAAKoxC,WACAvkC,EAAMe,QAAO,SAAAC,GAAQ,MAAS,2BAATA,KACnB0jC,EAAcH,WAChBvkC,EAAMe,QACX,SAAAC,GACE,MAAS,2BAATA,GACS,2BAATA,KAGGhB,EAAMe,QACX,SAAAC,GAAQ,MAAS,eAATA,GAAkC,2BAATA,mDA1Bd9L,EAAAA,yBACG2B,EAAAA,gMAHvB2tC,EAAqBpiD,EAAA,CAHjCmH,EAAAA,WAAW,CACVC,WAAY,UAEDg7C,oBCKX,SAAAG,EAAsB9hB,GAAAxhC,KAAAwhC,kBAAAA,EAQxB,OANE8hB,EAAApjD,UAAAiM,SAAA,WACEnM,KAAK+lC,MAAQ/lC,KAAKwhC,kBAAkB9P,YACpC1xB,KAAKuiD,SAAWviD,KAAKwhC,kBAClBghB,aACA11C,KAAK4S,EAAAA,QAAO,SAAAgH,GAAW,OAAAA,EAAQ9lB,OAAS,gDANJiT,EAAAA,qBAJ9ByvC,EAAmBviD,EAAA,CAL/BuI,EAAAA,UAAU,CACTC,SAAU,iBACVC,SAAA,wbACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B4hC,oBCyBb,SAAAC,KAA+B,OAAlBA,EAAgBxiD,EAAA,CAtB5B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAonC,EAAAA,aACAC,EAAAA,UACA8Q,GACA1yC,EAAAA,WACAkxC,IAEF12C,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb8zC,oBAAqB,CACnB7zC,UAAW6zC,QAKnB35C,aAAc,CAAC25C,IACfn5C,QAAS,CAACm5C,IACVzzC,gBAAiB,CAACyzC,OAEPC,oBCXX,SAAAC,EAAsBhiB,GAAAxhC,KAAAwhC,kBAAAA,EAZtBxhC,KAAA4L,UAAYxL,EAAAA,UAEZJ,KAAAyjD,UAAgCzjD,KAAKwhC,kBAAkB9P,YAAY5kB,KACjEo3B,EAAAA,UAAU,CAAEwf,sBAAuB,IACnC5oC,EAAAA,KAAI,SAAAhJ,GAAQ,OAAAA,EAAK4xC,uBAAyB,MAG5C1jD,KAAA2jD,OAA6B3jD,KAAKwhC,kBAAkB9P,YAAY5kB,KAC9D4S,EAAAA,QAAO,SAAA5N,GAAQ,QAAEA,EAAK8xC,cACtB9oC,EAAAA,KAAI,SAAAhJ,GAAQ,OAAAA,EAAK8xC,WAAWC,mBAIhC,gDAD2ChwC,EAAAA,qBAb9B2vC,EAAiBziD,EAAA,CAL7BuI,EAAAA,UAAU,CACTC,SAAU,eACVC,SAAA,yaACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B8hC,oBCgBb,SAAAM,KAA6B,OAAhBA,EAAc/iD,EAAA,CAf1B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAconC,EAAAA,aAAcC,EAAAA,UAAWznC,EAAY6F,EAAAA,YAC7DxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbg0C,kBAAmB,CACjB/zC,UAAW+zC,QAKnB75C,aAAc,CAAC65C,IACfr5C,QAAS,CAACq5C,IACV3zC,gBAAiB,CAAC2zC,OAEPM,oBCSX,SAAAC,EACYC,EACAnf,EACA1M,GAHZ,IAAAzvB,EAAA1I,KACYA,KAAAgkD,gBAAAA,EACAhkD,KAAA6kC,sBAAAA,EACA7kC,KAAAm4B,YAAAA,EArBZn4B,KAAAikD,SAAgCjkD,KAAK6kC,sBAAsBnN,aAAa5qB,KACtE4S,EAAAA,QAAO,SAAAjN,GAAW,OAAAzG,QAAQyG,MAC1BxF,EAAAA,KAAI,SAAAwF,GAAW,OAAA/J,EAAK28B,aAAa5yB,OAGnCzS,KAAAkkD,iBAEIlkD,KAAKgkD,gBAAgBG,cAAcr3C,KACrC4S,EAAAA,QAAO,SAAA0kC,GAAY,OAAAp4C,QAAQo4C,MAC3BtpC,EAAAA,KAAI,SAAAupC,GAAY,OAAAA,EAAS39B,YAG3B1mB,KAAAskD,cAAqCtkD,KAAKm4B,YAAYuqB,iBACtD1iD,KAAAwM,SAAgCxM,KAAKgkD,gBAAgBO,qBAErDvkD,KAAAglC,UAAW,EACXhlC,KAAA4L,UAAYxL,EAAAA,UAyBd,OAjBE2jD,EAAA7jD,UAAA0M,IAAA,SAAI6F,GACFzS,KAAKgkD,gBAAgBre,SAASlzB,EAAQoiB,OAGxCkvB,EAAA7jD,UAAA0Y,OAAA,SAAOkO,GACL9mB,KAAKgkD,gBAAgBxC,YAAY16B,IAGnCi9B,EAAA7jD,UAAAskD,qBAAA,SAAqB/xC,EAAkBiU,GAErC,OADaA,EAAQ3f,MAAK,SAAA+f,GAAS,OAAAA,EAAMrU,QAAQoiB,OAASpiB,EAAQoiB,SAI5DkvB,EAAA7jD,UAAAmlC,aAAR,SAAqB5yB,GACnBzS,KAAKglC,SACHvyB,EAAQ4iB,OAA4C,eAAnC5iB,EAAQ4iB,MAAMC,2DApBNmvB,EAAAA,uBACMptB,UACV1jB,EAAAA,eAtBdowC,EAAsBhjD,EAAA,CALlCuI,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAA,6iDACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BqiC,oBCUb,SAAAW,KAAkC,OAArBA,EAAmB3jD,EAAA,CAf/B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcyF,EAAAA,WAAY7F,EAAYwnC,EAAAA,aAAcC,EAAAA,WAC9DpnC,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbu0C,uBAAwB,CACtBt0C,UAAWs0C,QAKnBp6C,aAAc,CAACo6C,IACfl0C,gBAAiB,CAACk0C,IAClB55C,QAAS,CAAC45C,OAECW,oBCFX,SAAAC,EACY7uC,EACA2tB,EACAhwB,GAFAzT,KAAA8V,WAAAA,EACA9V,KAAAyjC,YAAAA,EACAzjC,KAAAyT,qBAAAA,EAwBd,OArBEkxC,EAAAzkD,UAAAiM,SAAA,WACEnM,KAAK4kD,aAAe5kD,KAAKyjC,YACtB/R,YACA5kB,KAAKgO,EAAAA,KAAI,SAAAhJ,GAAQ,QAAEA,GAAQA,EAAKoxC,YAAcpxC,EAAKoxC,WAAa,OACnEljD,KAAK6kD,cAAgB7kD,KAAKyT,qBAAqB2vC,UAC/CpjD,KAAKuiD,SAAWviD,KAAKyT,qBAClB+uC,aACA11C,KAAK4S,EAAAA,QAAO,SAAAgH,GAAW,OAAAA,EAAQ9lB,OAAS,MAC3CZ,KAAKyiD,YAAc51C,EAAAA,cAAc,CAC/B7M,KAAKyjC,YAAYwC,YACjBjmC,KAAKyT,qBAAqBwyB,cACzBn5B,KAAKgO,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACy1C,EAAAx1C,EAAA,GAAYy1C,EAAAz1C,EAAA,GAAe,OAAAw1C,GAAcC,MACvD5iD,KAAKkY,MAAQlY,KAAK8V,WAAWqC,iBAC3B,gCAIJwsC,EAAAzkD,UAAA4kD,WAAA,SAAW1wB,GACTp0B,KAAKyT,qBAAqB+tC,YAAYptB,GACtCp0B,KAAKyjC,YAAYkC,SAASvR,EAAK3hB,QAAQoiB,KAAMT,EAAKuP,oDAxB5B1vB,EAAAA,kBACCJ,EAAAA,yBACS2B,EAAAA,wBAXvBmvC,EAAqB5jD,EAAA,CAJjCuI,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAA,sqCAEWm7C,oBCYb,SAAAI,KAAiC,OAApBA,EAAkBhkD,EAAA,CAlB9B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcyF,EAAAA,WAAY0yC,IACpCl4C,UAAW,CACTC,EAAAA,qBAAiD,CAC/CyF,cAAe,CACbm1C,sBAAuB,CACrBl1C,UAAWk1C,KAGfK,SAAU,CACRnC,aAAc,UAIpBl5C,aAAc,CAACg7C,IACfx6C,QAAS,CAACw6C,IACV90C,gBAAiB,CAAC80C,OAEPI,oBCUb,SAAAE,KAAkC,OAArBA,EAAmBlkD,EAAA,CA3B/B2I,EAAAA,SAAS,CACRE,QAAS,CACPq4C,EAAAA,UACAa,GACAS,GACAvB,GACA+C,IAEF56C,QAAS,CACPu6C,GACA5B,GACAS,GACAvB,GACAE,GACA4B,GACAoB,EAAAA,WACAH,IAEFp7C,aAAc,GACdG,UAAW,CACT,CACEE,QAAS+T,EACT9T,YAAak5C,GACb12B,OAAO,OAIAw4B,OvBrCDzH,GAAAA,EAAAA,0BAAAA,EAAAA,wBAAuB,KACjC,KAAA,OACAA,GAAA,gBAAA,kBACAA,GAAA,eAAA,iBAGF,IwBRY2H,GxBQZC,GAAA,cwBRYD,GAAAA,EAAAA,mBAAAA,EAAAA,iBAAgB,KAC1B,iBAAA,kBACAA,GAAA,cAAA,eACAA,GAAA,gBAAA,iBACAA,GAAA,aAAA,kBCOUE,GCRCC,GAAwC,CACnDvzC,SAAU,CACRwzC,MAAO,CACL,CACE53C,GAAI,kBACJuT,KAAM,mCACNskC,UAAW,0BACX5/C,KAAM,CAACu/C,EAAAA,iBAAiBM,mBAE1B,CACE93C,GAAI,eACJuT,KAAM,gCACNskC,UAAW,uBACX5/C,KAAM,CAACu/C,EAAAA,iBAAiBO,gBAE1B,CACE/3C,GAAI,iBACJuT,KAAM,kCACNskC,UAAW,yBACX5/C,KAAM,CAACu/C,EAAAA,iBAAiBQ,kBAE1B,CACEh4C,GAAI,cACJuT,KAAM,+BACNskC,UAAW,sBACX5/C,KAAM,CAACu/C,EAAAA,iBAAiBS,gBAG5BC,SAAS,EACTC,oBAAqB,CAACtI,EAAAA,wBAAwBuI,MAC9CC,OAAO,kBCdT,SAAAC,EACUC,EACAC,GADAnmD,KAAAkmD,eAAAA,EACAlmD,KAAAmmD,qBAAAA,EARVnmD,KAAAulD,MAAwBvlD,KAAKkmD,eAAen0C,SAASwzC,MAC7CvlD,KAAA6lD,QAAmB7lD,KAAKkmD,eAAen0C,SAAS8zC,QAChD7lD,KAAAgmD,MAAiBhmD,KAAKkmD,eAAen0C,SAASi0C,MAC9ChmD,KAAA8lD,oBACN9lD,KAAKkmD,eAAen0C,SAAS+zC,qBAAuB,UAOtDG,EAAA/lD,UAAAkmD,gBAAA,SAAgBC,GACd,OAAOrmD,KAAKulD,MAAMvlD,KAAKsmD,qBAAqB,OAAQD,KAGtDJ,EAAA/lD,UAAAqmD,qBAAA,SAAqBF,GACnB,OAAOrmD,KAAKomD,gBAAgBC,GAAiBb,WAG/CS,EAAA/lD,UAAAsmD,0BAAA,WACE,OAAOxmD,KAAKulD,MAAM,GAAGC,WAGvBS,EAAA/lD,UAAAumD,uBAAA,SAAuBpQ,GACrB,IAAMqQ,EAAY1mD,KAAK2mD,oBAAoBtQ,GAE3C,OAAOqQ,GAAa,GAAK1mD,KAAKulD,MAAMmB,EAAY,GAC5C1mD,KAAK4mD,wBAAwB5mD,KAAKulD,MAAMmB,EAAY,GAAGlB,WACvD,MAGNS,EAAA/lD,UAAA2mD,2BAAA,SAA2BxQ,GACzB,IAAMqQ,EAAY1mD,KAAK2mD,oBAAoBtQ,GAE3C,OAAOqQ,GAAa,GAAK1mD,KAAKulD,MAAMmB,EAAY,GAC5C1mD,KAAK4mD,wBAAwB5mD,KAAKulD,MAAMmB,EAAY,GAAGlB,WACvD,MAGNS,EAAA/lD,UAAAymD,oBAAA,SAAoBtQ,WAKdqQ,EAJEI,EAAyB9mD,KAAK+mD,6BAClC1Q,GAIE/xB,EAAQ,MACZ,IAAmB,IAAAnX,EAAA5J,EAAAvD,KAAKulD,OAAKzmC,EAAA3R,EAAA3K,QAAAsc,EAAA7b,KAAA6b,EAAA3R,EAAA3K,OAAE,CAA1B,IAAMc,EAAIwb,EAAA5b,MAEX4jD,IAAmB,IAAI9mD,KAAK4mD,wBAAwBtjD,EAAKkiD,WAEzDkB,EAAYpiC,EAEZA,sGAIJ,OAAOoiC,GAAa,EAAIA,EAAY,MAG5BT,EAAA/lD,UAAA8mD,oBAAV,SACEC,EACAC,GAEA,OAAID,EAAcE,aAAajkD,MAAQgkD,EAAcC,aAAajkD,MACzD,EAEP+jD,EAAcE,aAAajkD,MAAQgkD,EAAcC,aAAajkD,OAEtD,EAEH,GAGC+iD,EAAA/lD,UAAAknD,yBAAV,SACEC,EACA/iC,GAFF,IAAA5b,EAAA1I,KAIE,YAFA,IAAAskB,IAAAA,EAAA,GAEQtkB,KAAK8lD,oBAAoBxhC,IAC/B,KAAKk5B,EAAAA,wBAAwBuI,KAC3B,GAA4C,IAAxCsB,EAAc,GAAGF,aAAajkD,MAChC,OAAOmkD,EAAc,GAAGxyB,KAE1B,MACF,KAAK2oB,EAAAA,wBAAwB8J,gBAC3B,IAAMC,EAAsBF,EAActgD,MACxC,SAAAygD,GAAgB,OAAoC,IAApCA,EAAaL,aAAajkD,SAE5C,GAAIqkD,EACF,OAAOA,EAAoB1yB,KAE7B,MACF,KAAK2oB,EAAAA,wBAAwBiK,eAC3B,OAAOJ,EAAcA,EAAczmD,OAAS,GAAGi0B,KACjD,QACE,IAAM6yB,EAAYL,EAActgD,MAC9B,SAAAygD,GAAgB,OAAAA,EAAa3yB,OAASnsB,EAAKo9C,oBAAoBxhC,MAEjE,GAAIojC,EACF,OAAOA,EAAU7yB,KAIvB,OADiB70B,KAAK8lD,oBAAoBllD,OAAS,GAAK0jB,EAEpD+iC,EAAc,GAAGxyB,KACjB70B,KAAKonD,yBAAyBC,EAAe/iC,EAAQ,IAG3D2hC,EAAA/lD,UAAAynD,yBAAA,SAAyBN,GAEvB,OADAA,EAAcrJ,KAAKh+C,KAAKgnD,qBACjBhnD,KAAKonD,yBAAyBC,IAGvCpB,EAAA/lD,UAAA0nD,kBAAA,WACE,OAAO5nD,KAAK6lD,SAGdI,EAAA/lD,UAAA2nD,gBAAA,WACE,OAAO7nD,KAAKgmD,OAGNC,EAAA/lD,UAAA6mD,6BAAR,SACE1Q,GAEA,OAAOA,GACLA,EAAeS,UACfT,EAAeS,SAAShxC,IACtB,IAAIuwC,EAAeS,SAAShxC,IAAI2a,KAAK,KACrC,MAGEwlC,EAAA/lD,UAAA0mD,wBAAR,SAAgCkB,GAC9B,OAAO9nD,KAAKmmD,qBAAqB4B,eAAeD,GAAW96B,MAAM,IAG3Di5B,EAAA/lD,UAAAomD,qBAAR,SAA6BplD,EAAagC,GACxC,OAAOhC,GAAOgC,EACVlD,KAAKulD,MAAM9a,WAAU,SAACnnC,GAAuB,OAAAA,EAAKpC,GAAKgG,SAAShE,MAChE,+CAlIoBkiD,UACM4C,EAAAA,+KATrB/B,EAAqBllD,EAAA,CAHjCmH,EAAAA,WAAW,CACVC,WAAY,UAED89C,oBCMX,SAAAgC,EACY9kC,EACAgV,EACA+vB,EACAC,EACA3mB,GAJAxhC,KAAAmjB,eAAAA,EACAnjB,KAAAm4B,YAAAA,EACAn4B,KAAAkoD,oBAAAA,EACAloD,KAAAmoD,sBAAAA,EACAnoD,KAAAwhC,kBAAAA,SAGZymB,EAAA/nD,UAAA8a,YAAA,WAAA,IAAAtS,EAAA1I,KACE,OAAO6M,EAAAA,cAAc,CACnB7M,KAAKm4B,YAAYG,eACjBt4B,KAAKwhC,kBAAkB4mB,oBACtBt7C,KACDgO,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACqrB,EAAAprB,EAAA,GAAO+F,EAAA/F,EAAA,GACX,IAAKorB,EAAMuB,aAAc,CACvB,GAAIpxB,EAAK84B,kBAAkB6mB,cACzB,OAAOr8C,QAAQkH,GAEbxK,EAAKy/C,sBAAsBN,kBAC7Bn/C,EAAKya,eAAewV,GAAG,CAAEC,QAAS,SAAW,CAAE0vB,QAAQ,IAEvD5/C,EAAKya,eAAewV,GAAG,CAAEC,QAAS,UAEpClwB,EAAKw/C,oBAAoBK,kBAE3B,QAAShwB,EAAMuB,2DAxBOjlB,EAAAA,sBACHlB,EAAAA,mBACQ60C,EAAAA,2BACEvC,UACJpyC,EAAAA,2QANpBo0C,EAAiBlnD,EAAA,CAH7BmH,EAAAA,WAAW,CACVC,WAAY,UAED8/C,oBCUX,SAAAQ,EACYlnB,EACAmnB,EACAC,EACAnnB,GAJZ,IAAA94B,EAAA1I,KACYA,KAAAuhC,gBAAAA,EACAvhC,KAAA0oD,wBAAAA,EACA1oD,KAAA2oD,uBAAAA,EACA3oD,KAAAwhC,kBAAAA,EAEVxhC,KAAK4oD,QAAU5oD,KAAKwhC,kBAAkB9P,YAAY5kB,KAChDgO,EAAAA,KAAI,SAAA+tC,GACF,OACGA,EAAS31C,MAAQ21C,EAAS31C,KAAK+E,MAAQ+mC,EAAAA,uBACxCt2C,EAAK84B,kBAAkB6mB,cAEhBQ,EAAS5J,KAEX4J,EAASh0B,QAElBnV,EAAAA,QAAO,SAAAq/B,GAAU,QAAEA,MAGrB/+C,KAAK8oD,0BAA4B9oD,KAAK4oD,QAAQ97C,KAC5CG,EAAAA,KAAI,SAAA8xC,GAAU,OAAAr2C,EAAK64B,gBAAgBwnB,oBAAoBhK,MACvD9d,EAAAA,YAAY,GACZpiB,EAAAA,WAAU,WAAM,OAAAnW,EAAK64B,gBAAgBynB,8BACrCxtC,EAAAA,WAAU,SAAAqM,GAAU,OAACA,aAIzB4gC,EAAAvoD,UAAA+oD,mBAAA,WAAA,IAAAvgD,EAAA1I,KACE,OAAOA,KAAK8oD,0BAA0Bh8C,KACpC+R,EAAAA,WAAU,WAAM,OAAAnW,EAAKggD,wBAAwBO,0BAIjDR,EAAAvoD,UAAAgpD,4BAAA,WAAA,IAAAxgD,EAAA1I,KACE,OAAOA,KAAK8oD,0BAA0Bh8C,KACpC+R,EAAAA,WAAU,WACR,OAAAnW,EAAKggD,wBAAwBQ,mCAKnCT,EAAAvoD,UAAAipD,kBAAA,WAAA,IAAAzgD,EAAA1I,KACE,OAAOA,KAAK8oD,0BAA0Bh8C,KACpC+R,EAAAA,WAAU,WAAM,OAAAnW,EAAKigD,uBAAuBQ,kEA1CnBr1C,EAAAA,uBACQC,EAAAA,+BACDC,EAAAA,8BACLH,EAAAA,yQARpB40C,EAAsB1nD,EAAA,CAHlCmH,EAAAA,WAAW,CACVC,WAAY,UAEDsgD,oBCEX,SAAAW,EACYC,EACAC,EACAZ,EACAC,EACAY,EACApB,GALAnoD,KAAAqpD,mBAAAA,EACArpD,KAAAspD,mBAAAA,EACAtpD,KAAA0oD,wBAAAA,EACA1oD,KAAA2oD,uBAAAA,EACA3oD,KAAAupD,uBAAAA,EACAvpD,KAAAmoD,sBAAAA,EAEVnoD,KAAKwpD,qBACLxpD,KAAKypD,kBACLzpD,KAAK0pD,0BAGGN,EAAAlpD,UAAAspD,mBAAV,WAAA,IAAA9gD,EAAA1I,KACEA,KAAK2pD,oBAAsB98C,EAAAA,cAAc,CACvC7M,KAAKqpD,mBAAmBO,eACxB5pD,KAAKqpD,mBAAmBQ,4BACxB7pD,KAAK0oD,wBAAwBoB,iCAC5Bh9C,KACDuyB,EAAAA,aAAa,GACbpyB,EAAAA,KACE,SAACC,GAAAxJ,EAAAwJ,EAAA,GAAG,IAMAxE,EAAK2gD,mBAAmBU,mBAI9BrqC,EAAAA,QACE,SAACxS,GACC,OADDxJ,EAAAwJ,EAAA,GAAG,MAGN2R,EAAAA,WACE,SAAC3R,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAAC88C,EAAA78C,EAAA,GAAa88C,EAAA98C,EAAA,GAKP+8C,EACJF,EAAUjjD,MAAK,SAAAojD,GAAW,OAAAA,EAAQD,mBAAmBF,EAAU,GACjE,OAAIE,GAAkB1qD,OAAOigB,KAAKyqC,GAAgBtpD,QAG5CqpD,EAA0B3K,SAC1B2K,EAA0BrmD,OAC1BqmD,EAA0BG,SAG5B1hD,EAAKggD,wBAAwB2B,mBAAmBH,GAE3C9uC,EAAAA,GAAG6uC,GAA2Bn9C,KACnC4S,EAAAA,QAAO,SAAC4qC,GACN,OACGA,EAA+BhL,SAC9BgL,EAA+B1mD,SAChC0mD,EAA+BF,WAGpCvrC,EAAAA,WAAU,SAACyrC,GACT,OAAIA,EAA+BhL,QAC1B52C,EAAK6gD,uBAAuBN,qBAE9B7tC,EAAAA,IAAG,MAEZN,EAAAA,KAAI,SAAAoH,GAAQ,OAAAlW,QAAQkW,GAAQ1iB,OAAOigB,KAAKyC,GAAMthB,aAG3Cwa,EAAAA,IAAG,QAMRguC,EAAAlpD,UAAAwpD,iBAAV,WAAA,IAAAhhD,EAAA1I,KACEA,KAAKuqD,kBAAoB19C,EAAAA,cAAc,CACrC7M,KAAKspD,mBAAmBkB,oBACxBxqD,KAAKspD,mBAAmBmB,iCACxBzqD,KAAK2oD,uBAAuB+B,sCAC3B59C,KACDuyB,EAAAA,aAAa,GACbpyB,EAAAA,KACE,SAACC,GAAAxJ,EAAAwJ,EAAA,GAAG,IAMAxE,EAAK4gD,mBAAmBqB,wBAI9BjrC,EAAAA,QACE,SAACxS,GAAgE,OAAhExJ,EAAAwJ,EAAA,GAAG,MAEN2R,EAAAA,WACE,SAAC3R,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAAC09C,EAAAz9C,EAAA,GAAY09C,EAAA19C,EAAA,GAKN29C,EACJF,EAAS7jD,MAAK,SAAAojD,GAAW,OAAAA,EAAQW,mBAAmBF,EAAS,GAC/D,OAAIE,GAAkBtrD,OAAOigB,KAAKqrC,GAAgBlqD,QAG5CiqD,EAAyBvL,SACzBuL,EAAyBjnD,OACzBinD,EAAyBT,SAG3B1hD,EAAKigD,uBAAuBoC,kBAAkBD,GAEzC1vC,EAAAA,GAAGyvC,GAA0B/9C,KAClC4S,EAAAA,QAAO,SAACsrC,GACN,OACGA,EAA8B1L,SAC7B0L,EAA8BpnD,SAC/BonD,EAA8BZ,WAGnCvrC,EAAAA,WAAU,SAACmsC,GACT,OAAIA,EAA8B1L,QACzB52C,EAAK6gD,uBAAuBJ,oBAE9B/tC,EAAAA,IAAG,MAEZN,EAAAA,KAAI,SAAAoH,GAAQ,OAAAlW,QAAQkW,GAAQ1iB,OAAOigB,KAAKyC,GAAMthB,aAG3Cwa,EAAAA,IAAG,QAMRguC,EAAAlpD,UAAAupD,gBAAV,WAAA,IAAA/gD,EAAA1I,KACEA,KAAKirD,iBAAmBp+C,EAAAA,cAAc,CACpC7M,KAAK2pD,oBACL3pD,KAAK0oD,wBAAwBwC,4BAC7BlrD,KAAK0oD,wBAAwByC,4BAC7BnrD,KAAK0oD,wBAAwB0C,wCAC5Bt+C,KACDuyB,EAAAA,aAAa,GACbxgB,EAAAA,WACE,SAAC3R,OAAAC,EAAAzJ,EAAAwJ,EAAA,GACCm+C,EAAAl+C,EAAA,GACAm+C,EAAAn+C,EAAA,GACAo+C,EAAAp+C,EAAA,GACAq+C,EAAAr+C,EAAA,GAEA,OAAIk+C,EACKjwC,EAAAA,GAAG,CACRkwC,EACAC,EACAC,IACC1+C,KACD4S,EAAAA,QACE,SAACxS,GAIK,OAJLxJ,EAAAwJ,EAAA,GAAK,GAI4BoyC,WAEpCzgC,EAAAA,WACE,SAAC3R,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACm6C,EAAAl6C,EAAA,GAAes+C,EAAAt+C,EAAA,GAKf,GAAInB,QAAQq7C,EAAczmD,QAAS,CACjC,IAAM8qD,EAAwBhjD,EAAKy/C,sBAAsBR,yBACvDN,GAEF,OAAOjsC,EAAAA,GAAG,CACRswC,EACAD,IACC3+C,KACDG,EAAAA,KACE,SAACC,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACs6C,EAAAr6C,EAAA,GAAcw+C,EAAAx+C,EAAA,GAKZq6C,KAEEmE,EAA0BrM,SAC1BqM,EAA0B/nD,OAC1B+nD,EAA0BvB,UAG5B1hD,EAAKggD,wBAAwBe,gBAC3BjC,MAKR9nC,EAAAA,QACE,SAACxS,OAAGy+C,EAAHjoD,EAAAwJ,EAAA,GAAG,GAIF,OACGy+C,EAA0BrM,SACzBqM,EAA0B/nD,SAC3B+nD,EAA0BvB,WAIjCvrC,EAAAA,WACE,SAAC3R,GAIC,OAJDxJ,EAAAwJ,EAAA,GAAG,GAI4BoyC,QACrB52C,EAAK6gD,uBAAuBL,8BAE9B9tC,EAAAA,IAAG,MAGdN,EAAAA,KAAI,SAAAoH,GAAQ,OAAAlW,QAAQkW,OAGxB,OAAO9G,EAAAA,IAAG,OAKTA,EAAAA,IAAG,QAOVguC,EAAAlpD,UAAA0rD,uBAAV,WACE5rD,KAAK0oD,wBAAwBmD,iCAC7B7rD,KAAK2oD,uBAAuBmD,gCAC5B9rD,KAAK0oD,wBAAwBqD,+BAGxB3C,EAAAlpD,UAAA8rD,6BAAP,WAEE,OADAhsD,KAAK4rD,yBACE/+C,EAAAA,cAAc,CAAC7M,KAAKirD,iBAAkBjrD,KAAKuqD,oBAAoBz9C,KACpEgO,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAAC++C,EAAA9+C,EAAA,GAAiB++C,EAAA/+C,EAAA,GACrB,OAAAnB,QAAQigD,GAAmBC,iDAtPDh3C,EAAAA,0BACAG,EAAAA,0BACKtB,EAAAA,+BACDC,EAAAA,8BACAy0C,UACDxC,kSAXxBmD,EAAsBroD,EAAA,CAHlCmH,EAAAA,WAAW,CACVC,WAAY,UAEDihD,oBCLX,SAAA+C,EACYvqC,EACAukC,EACAgC,EACAiE,EACA5qB,GAJAxhC,KAAA4hB,OAAAA,EACA5hB,KAAAmmD,qBAAAA,EACAnmD,KAAAmoD,sBAAAA,EACAnoD,KAAAosD,uBAAAA,EACApsD,KAAAwhC,kBAAAA,EAEVxhC,KAAKqsD,WAAajxC,EAAAA,GAChBpb,KAAK4hB,OAAO0qC,SACVtsD,KAAKmmD,qBAAqB4B,eACxB/nD,KAAKmoD,sBAAsB3B,6BAC3Bx5B,MAAM,YAKdm/B,EAAAjsD,UAAA8a,YAAA,WAAA,IAAAtS,EAAA1I,KACE,OACEA,KAAKmoD,sBAAsBP,sBAC1B5nD,KAAKwhC,kBAAkB6mB,cAEjBroD,KAAKosD,uBAAuBJ,+BAA+Bl/C,KAChE+R,EAAAA,WAAU,SAAC0tC,GACT,OAAOA,EACHnxC,EAAAA,GACE1S,EAAKkZ,OAAO0qC,SACV5jD,EAAKy9C,qBAAqB4B,eACxBr/C,EAAKy/C,sBAAsB5B,qBACzBpB,EAAAA,iBAAiBS,eAEnB54B,MAAM,KAGZtkB,EAAK2jD,eAIRrsD,KAAKqsD,qDApCMppC,EAAAA,cACc+kC,EAAAA,4BACC/B,UACCmD,UACLv1C,EAAAA,yPARpBs4C,EAAaprD,EAAA,CAHzBmH,EAAAA,WAAW,CACVC,WAAY,UAEDgkD,oBCJX,SAAAK,KACF,OAFaA,EAA6BzrD,EAAA,CALzCuI,EAAAA,UAAU,CACTC,SAAU,2BACVC,SAAA,GACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B8qC,oBCqBb,SAAAC,KAAyC,OAA5BA,EAA0B1rD,EAAA,CAlBtC2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,cACVC,UAAW,CACTC,EAAAA,qBAAqBu7C,IACrBv7C,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbk9C,qBAAsB,CACpBj9C,UAAW+8C,GACX9yC,OAAQ,CAACuuC,GAAmBjF,GAAmBmJ,QAIrD,CAAEniD,QAASo7C,GAAgBn7C,YAAaC,EAAAA,SAE1CP,aAAc,CAAC6iD,IACf38C,gBAAiB,CAAC28C,IAClBriD,QAAS,CAACqiD,OAECC,oBCjBX,SAAAE,EAAsBnrB,GAAAxhC,KAAAwhC,kBAAAA,EACpBxhC,KAAK+lC,MAAQ/lC,KAAKwhC,kBAAkB9P,YAExC,gDAH2C7d,EAAAA,qBAH9B84C,EAA6B5rD,EAAA,CALzCuI,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAA,iEACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BirC,oBCab,SAAAC,KAAyC,OAA5BA,EAA0B7rD,EAAA,CAftC2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcm4C,IACxBl4C,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbq9C,qBAAsB,CACpBp9C,UAAWk9C,QAKnBhjD,aAAc,CAACgjD,IACf98C,gBAAiB,CAAC88C,IAClBxiD,QAAS,CAACwiD,OAECC,oBCTX,SAAAE,EACYhmD,EACAqc,EACAgjC,GAFAnmD,KAAA8G,OAAAA,EACA9G,KAAAmjB,eAAAA,EACAnjB,KAAAmmD,qBAAAA,EAyBd,OAjBE2G,EAAA5sD,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAKulD,MAAQvlD,KAAK8G,OAAOiL,SAASwzC,MAClCvlD,KAAK+sD,aAAe/sD,KAAKmjB,eAAeyU,iBAAiB9qB,KACvDG,EAAAA,KAAI,SAAA2U,GACFlZ,EAAKskD,cAAgBprC,EAAOhH,MAAMq/B,QAAQtsC,GAE1CjF,EAAK68C,MAAMz8C,SAAQ,SAACxF,EAAMghB,GACP,IACf5b,EAAKy9C,qBAAqB4B,eAAezkD,EAAKkiD,WAAWx4B,MAAM,KAEhDtkB,EAAKskD,gBACpBtkD,EAAKukD,gBAAkB3oC,oDArBb8gC,UACQvwC,EAAAA,sBACMmzC,EAAAA,wBAJvB8E,EAAqC/rD,EAAA,CAJjDuI,EAAAA,UAAU,CACTC,SAAU,qCACVC,SAAA,kTAEWsjD,oBCoBb,SAAAI,KAAiD,OAApCA,EAAkCnsD,EAAA,CAjB9C2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcqnC,EAAAA,UAAW5hC,EAAAA,WAAY2hC,EAAAA,cAC/CnnC,UAAW,CACTC,EAAAA,qBAAqBu7C,IACrBv7C,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb29C,6BAA8B,CAC5B19C,UAAWq9C,GACXpzC,OAAQ,CAACuuC,GAAmBjF,SAKpCr5C,aAAc,CAACmjD,IACfj9C,gBAAiB,CAACi9C,IAClB3iD,QAAS,CAAC2iD,OAECI,oBCdX,SAAAE,EACYtmD,EACAqc,EACAgjC,EACA3kB,GAHAxhC,KAAA8G,OAAAA,EACA9G,KAAAmjB,eAAAA,EACAnjB,KAAAmmD,qBAAAA,EACAnmD,KAAAwhC,kBAAAA,EA2Bd,OAlBE4rB,EAAAltD,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAKulD,MAAQvlD,KAAK8G,OAAOiL,SAASwzC,MAClCvlD,KAAK+lC,MAAQ/lC,KAAKwhC,kBAAkB9P,YACpC1xB,KAAK+sD,aAAe/sD,KAAKmjB,eAAeyU,iBAAiB9qB,KACvDG,EAAAA,KAAI,SAAA2U,GACFlZ,EAAKskD,cAAgBprC,EAAOhH,MAAMq/B,QAAQtsC,GAE1CjF,EAAK68C,MAAMz8C,SAAQ,SAACxF,EAAMghB,GACP,IACf5b,EAAKy9C,qBAAqB4B,eAAezkD,EAAKkiD,WAAWx4B,MAAM,KAEhDtkB,EAAKskD,gBACpBtkD,EAAKukD,gBAAkB3oC,oDAxBb8gC,UACQvwC,EAAAA,sBACMmzC,EAAAA,4BACHn0C,EAAAA,qBALpBu5C,EAAkCrsD,EAAA,CAJ9CuI,EAAAA,UAAU,CACTC,SAAU,kCACVC,SAAA,i7BAEW4jD,oBCeb,SAAAC,KAA8C,OAAjCA,EAA+BtsD,EAAA,CAjB3C2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcqnC,EAAAA,UAAW5hC,EAAAA,WAAY2hC,EAAAA,cAC/CnnC,UAAW,CACTC,EAAAA,qBAAqBu7C,IACrBv7C,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb89C,0BAA2B,CACzB79C,UAAW29C,GACX1zC,OAAQ,CAACuuC,GAAmBjF,SAKpCr5C,aAAc,CAACyjD,IACfv9C,gBAAiB,CAACu9C,IAClBjjD,QAAS,CAACijD,OAECC,oBClBX,SAAAE,EACYzmD,EACAqc,EACAgjC,GAFAnmD,KAAA8G,OAAAA,EACA9G,KAAAmjB,eAAAA,EACAnjB,KAAAmmD,qBAAAA,EAqCd,OA7BEoH,EAAArtD,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAKulD,MAAQvlD,KAAK8G,OAAOiL,SAASwzC,MAClCvlD,KAAK+sD,aAAe/sD,KAAKmjB,eAAeyU,iBAAiB9qB,KACvDG,EAAAA,KAAI,SAAA2U,GACFlZ,EAAKskD,cAAgBprC,EAAOhH,MAAMq/B,QAAQtsC,GAE1CjF,EAAK68C,MAAMz8C,SAAQ,SAACxF,EAAMghB,GACP,IACf5b,EAAKy9C,qBAAqB4B,eAAezkD,EAAKkiD,WAAWx4B,MAAM,KAEhDtkB,EAAKskD,gBACpBtkD,EAAKukD,gBAAkB3oC,WAOjCipC,EAAArtD,UAAAstD,YAAA,SAAY9G,GACV,OAAQ1mD,KAAK2qC,SAAS+b,IAAe1mD,KAAKytD,WAAW/G,IAAkB,EAAL,GAGpE6G,EAAArtD,UAAAyqC,SAAA,SAASrmB,GACP,OAAOA,IAAUtkB,KAAKitD,iBAGxBM,EAAArtD,UAAAutD,WAAA,SAAWnpC,GACT,OAAOA,EAAQtkB,KAAKitD,0DArCF7H,UACQvwC,EAAAA,sBACMmzC,EAAAA,wBAJvBuF,EAAyBxsD,EAAA,CALrCuI,EAAAA,UAAU,CACTC,SAAU,uBACVC,SAAA,4iBACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B6rC,oBCsBb,SAAAG,KAAqC,OAAxBA,EAAsB3sD,EAAA,CAlBlC2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcqnC,EAAAA,UAAW5hC,EAAAA,WAAY2hC,EAAAA,cAC/CtnC,aAAc,CAAC4jD,IACf19C,gBAAiB,CAAC09C,IAClBpjD,QAAS,CAACojD,IACVzjD,UAAW,CACTC,EAAAA,qBAAqBu7C,IACrBv7C,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbm+C,iBAAkB,CAChBl+C,UAAW89C,GACX7zC,OAAQ,CAACuuC,GAAmBjF,QAIlC,CAAEh5C,QAASo7C,GAAgBn7C,YAAaC,EAAAA,YAG/BwjD,oBCrBX,SAAAE,EACUrE,EACApB,EACAhC,EACAvkC,GAHA5hB,KAAAupD,uBAAAA,EACAvpD,KAAAmoD,sBAAAA,EACAnoD,KAAAmmD,qBAAAA,EACAnmD,KAAA4hB,OAAAA,SAGVgsC,EAAA1tD,UAAA8a,YAAA,WAAA,IAAAtS,EAAA1I,KACQ6tD,EAA6B7tD,KAAKmoD,sBAAsB/B,gBAC5DjB,EAAAA,iBAAiBM,kBASnB,OANKoI,GAAgBttC,EAAAA,aACnBjQ,QAAQC,KACN,0BAA0B40C,EAAAA,iBAAiBM,iBAAgB,+BAIxDzlD,KAAKupD,uBACTN,qBACAn8C,KACCgO,EAAAA,KAAI,SAACgzC,GACH,SAAAA,IAAmBtuD,OAAOigB,KAAKquC,GAAiBltD,SAE5C8H,EAAKkZ,OAAO0qC,SACVuB,GACEnlD,EAAKy9C,qBAAqB4B,eACxB8F,EAAarI,WACbx4B,MAAM,kDA3BUy7B,UACDxC,UACD+B,EAAAA,4BACd/kC,EAAAA,2MALP2qC,EAAuB7sD,EAAA,CAHnCmH,EAAAA,WAAW,CACVC,WAAY,UAEDylD,oBCwBX,SAAAG,EACUjwB,EACA4qB,EACAvlC,EACAglC,EACA9R,GAJAr2C,KAAA89B,GAAAA,EACA99B,KAAA0oD,wBAAAA,EACA1oD,KAAAmjB,eAAAA,EACAnjB,KAAAmoD,sBAAAA,EACAnoD,KAAAq2C,eAAAA,EAbFr2C,KAAAguD,eAAgB,EAIxBhuD,KAAAiuD,KAAkBjuD,KAAK89B,GAAGI,MAAM,CAC9BgwB,eAAgB,CAAC,GAAI/vB,EAAAA,WAAWC,YAmFpC,OAxEE2vB,EAAA7tD,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAKmuD,oBAAsBnuD,KAAKmoD,sBAAsB1B,uBACpDzmD,KAAKq2C,gBAEPr2C,KAAKouD,wBAA0BpuD,KAAKmoD,sBAAsBtB,2BACxD7mD,KAAKq2C,gBAGPr2C,KAAKquD,wBAA0BruD,KAAK0oD,wBAAwBwC,4BAE5DlrD,KAAKsuD,gBAAkBtuD,KAAKquD,wBACzBvhD,KACC8W,EAAAA,eACE5jB,KAAK0oD,wBACF6F,0BACAzhD,KACCgO,EAAAA,KAAI,SAAC0sC,GACH,OAAAA,GAAgBA,EAAa3yB,KAAO2yB,EAAa3yB,KAAO,WAKjEjnB,WAAU,SAACV,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACm6C,EAAAl6C,EAAA,GAAe0nB,EAAA1nB,EAAA,IACrB0nB,GAAQwyB,GAAiBA,EAAczmD,SAC1Ci0B,EAAOnsB,EAAKy/C,sBAAsBR,yBAChCN,IAIF3+C,EAAKslD,eACHn5B,GACFA,IAASnsB,EAAK8lD,uBAEd9lD,EAAKya,eAAewV,GAAGjwB,EAAKylD,qBAE9BzlD,EAAK8lD,sBAAwB35B,EACzBA,GACFnsB,EAAKulD,KAAK3vB,SAAyB,eAAEyB,SAASlL,OAKtDk5B,EAAA7tD,UAAAuuD,WAAA,SAAW55B,GACLA,IAAS70B,KAAKwuD,wBAChBxuD,KAAKwuD,sBAAwB35B,IAIjCk5B,EAAA7tD,UAAAsC,KAAA,WACExC,KAAKguD,eAAgB,EACjBhuD,KAAKiuD,KAAKhO,OAASjgD,KAAKiuD,KAAK/qD,QAC1BlD,KAAKwuD,wBACRxuD,KAAKwuD,sBAAwBxuD,KAAKiuD,KAAK/qD,MAAMgrD,gBAE/CluD,KAAK0oD,wBAAwBe,gBAAgBzpD,KAAKwuD,wBAEpDxuD,KAAKmjB,eAAewV,GAAG34B,KAAKmuD,sBAG9BJ,EAAA7tD,UAAAwuD,KAAA,WACE1uD,KAAKmjB,eAAewV,GAAG34B,KAAKouD,0BAG9B5uD,OAAAiC,eAAIssD,EAAA7tD,UAAA,sBAAmB,KAAvB,WACE,OAAOF,KAAKiuD,KAAK3vB,SAAyB,eAAEZ,yCAG9CqwB,EAAA7tD,UAAAoO,YAAA,WACMtO,KAAKsuD,iBACPtuD,KAAKsuD,gBAAgB//C,wDA5EXiwB,EAAAA,mBACqBzqB,EAAAA,+BACTc,EAAAA,sBACOoxC,UACP/O,EAAAA,kBAnBf6W,EAAqBhtD,EAAA,CALjCuI,EAAAA,UAAU,CACTC,SAAU,mBACVC,SAAA,m2DACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BqsC,oBCQb,SAAAY,KAAiC,OAApBA,EAAkB5tD,EAAA,CApB9B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAc22B,EAAAA,oBAAqBlxB,EAAAA,WAAYsoC,IACzD9tC,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbo/C,qBAAsB,CACpBn/C,UAAWs+C,GACXr0C,OAAQ,CACNuuC,GACAjF,GACA4K,SAMVjkD,aAAc,CAACokD,IACfl+C,gBAAiB,CAACk+C,IAClB5jD,QAAS,CAAC4jD,OAECY,oBCjBX,SAAAE,EACUtF,EACApB,EACAhC,EACAvkC,GAHA5hB,KAAAupD,uBAAAA,EACAvpD,KAAAmoD,sBAAAA,EACAnoD,KAAAmmD,qBAAAA,EACAnmD,KAAA4hB,OAAAA,SAGVitC,EAAA3uD,UAAA8a,YAAA,WAAA,IAAAtS,EAAA1I,KACQ6tD,EAA6B7tD,KAAKmoD,sBAAsB/B,gBAC5DjB,EAAAA,iBAAiBO,eASnB,OANKmI,GAAgBttC,EAAAA,aACnBjQ,QAAQC,KACN,0BAA0B40C,EAAAA,iBAAiBO,cAAa,+BAIrD1lD,KAAKupD,uBACTL,8BACAp8C,KACCgO,EAAAA,KAAI,SAACmzC,GACH,SAAAA,IAAQA,EAAKrtD,SAET8H,EAAKkZ,OAAO0qC,SACVuB,GACEnlD,EAAKy9C,qBAAqB4B,eACxB8F,EAAarI,WACbx4B,MAAM,kDA3BUy7B,UACDxC,UACD+B,EAAAA,4BACd/kC,EAAAA,2MALP4rC,EAAoB9tD,EAAA,CAHhCmH,EAAAA,WAAW,CACVC,WAAY,UAED0mD,oBCcX,SAAAC,EAAsBzF,GAAArpD,KAAAqpD,mBAAAA,EAFtBrpD,KAAA+uD,iBAA4C,IAAIhuC,EAAAA,gBAAwB,IA8B1E,OA1BE+tC,EAAA5uD,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAKgvD,SAAWhvD,KAAK+uD,iBAAiBjiD,KACpC+R,EAAAA,WAAU,SAAAowC,GAAW,OAAAvmD,EAAK2gD,mBAAmB6F,WAAWD,MACxDhiD,EAAAA,KAAI,SAAAkiD,GACF,IAAMC,EAAgB1mD,EAAK2mD,eAAe73C,IAAI,uBAC1C23C,EAAQvuD,OAAS,EACnBwuD,EAAclO,SAEdkO,EAAcnO,eAMtB6N,EAAA5uD,UAAAovD,gBAAA,SAAgBL,GACdjvD,KAAKqvD,eAAyB,SAAEJ,QAAkB,SAAEjU,QAAQjb,SAC1DkvB,EAAQjU,SAEVh7C,KAAK+uD,iBAAiBvsD,KAAKysD,EAAQjU,UAGrC8T,EAAA5uD,UAAAqvD,eAAA,SAAeC,GACbxvD,KAAKqvD,eAAyB,SAAEG,OAAiB,SAAEC,aAAa1vB,SAC9DyvB,EAAOC,wDAzB+Bv6C,EAAAA,sBAN1CnU,EAAA,CADCsI,EAAAA,8CAIDtI,EAAA,CADCsI,EAAAA,0CANUylD,EAA2B/tD,EAAA,CALvCuI,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAA,igIACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BotC,oBCKb,SAAAY,KAAuC,OAA1BA,EAAwB3uD,EAAA,CAZpC2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACA22B,EAAAA,oBACAkX,EAAAA,YACAzG,EAAAA,aACAwG,EAAAA,eACAnoC,EAAAA,YAEF3F,aAAc,CAACmlD,IACf3kD,QAAS,CAAC2kD,OAECY,oBCHX,SAAAC,EAAsBpkD,GAAAvL,KAAAuL,aAAAA,EAFtBvL,KAAA4L,UAAYxL,EAAAA,UAoBd,OATEuvD,EAAAzvD,UAAAiM,SAAA,WACEnM,KAAK4vD,gBAAkB5vD,KAAK6vD,mBAAmBjvD,OAC3CZ,KAAK6vD,mBAAmB,GACxB7vD,KAAK8vD,gBAGXH,EAAAzvD,UAAAwM,WAAA,SAAWzB,GACTjL,KAAKuL,aAAaJ,iBAAiBF,6CAhBDV,KAGpCxJ,EAAA,CADCsI,EAAAA,kDAGDtI,EAAA,CADCsI,EAAAA,8CAPUsmD,EAA+B5uD,EAAA,CAL3CuI,EAAAA,UAAU,CACTC,SAAU,gCACVC,SAAA,66GACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BiuC,oBCkFX,SAAAI,EACYpH,EACAD,EACAY,EACA1+B,EACFkT,EACAvyB,GALEvL,KAAA2oD,uBAAAA,EACA3oD,KAAA0oD,wBAAAA,EACA1oD,KAAAspD,mBAAAA,EACAtpD,KAAA4qB,qBAAAA,EACF5qB,KAAA89B,GAAAA,EACA99B,KAAAuL,aAAAA,EA9DVvL,KAAA4L,UAAYxL,EAAAA,UAKZJ,KAAAgwD,OAAsB,GACtBhwD,KAAAiwD,MAAoB,GAMpBjwD,KAAAkwD,uBAAwB,EASxBlwD,KAAAmwD,OAAS,IAAIroC,EAAAA,aAGb9nB,KAAAowD,UAAY,IAAItoC,EAAAA,aAGhB9nB,KAAA+qD,kBAAoB,IAAIjjC,EAAAA,aAExB9nB,KAAAqwD,QAAqBrwD,KAAK89B,GAAGI,MAAM,CACjC4sB,eAAgB,EAAC,GACjBwF,kBAAmB,CAAC,GAAInyB,EAAAA,WAAWC,UACnCmyB,WAAY,CAAC,GAAIpyB,EAAAA,WAAWC,UAC5BoyB,SAAUxwD,KAAK89B,GAAGI,MAAM,CACtBrJ,KAAM,CAAC,GAAIsJ,EAAAA,WAAWC,YAExBqyB,YAAa,CAAC,GAAItyB,EAAAA,WAAWC,UAC7BsyB,WAAY,CAAC,GAAIvyB,EAAAA,WAAWC,UAC5BuyB,IAAK,CAAC,GAAIxyB,EAAAA,WAAWC,YAGvBp+B,KAAAqvD,eAA4BrvD,KAAK89B,GAAGI,MAAM,CACxC0yB,UAAW,CAAC,GAAIzyB,EAAAA,WAAWC,UAC3ByyB,SAAU,CAAC,GAAI1yB,EAAAA,WAAWC,UAC1B0yB,MAAO,CAAC,GAAI3yB,EAAAA,WAAWC,UACvB2yB,MAAO,CAAC,IACRC,KAAM,CAAC,GAAI7yB,EAAAA,WAAWC,UACtBoxB,OAAQxvD,KAAK89B,GAAGI,MAAM,CACpBuxB,aAAc,CAAC,KAAMtxB,EAAAA,WAAWC,YAElC6wB,QAASjvD,KAAK89B,GAAGI,MAAM,CACrB8c,QAAS,CAAC,KAAM7c,EAAAA,WAAWC,YAE7B6yB,WAAY,CAAC,GAAI9yB,EAAAA,WAAWC,YA4LhC,OAhLE2xB,EAAA7vD,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAKkxD,kBACLlxD,KAAKmxD,WAAanxD,KAAKspD,mBAAmB8H,yBAAyBtkD,KACjEG,EAAAA,KAAI,SAAAokD,GAEoC,IAAlC7xD,OAAOigB,KAAK4xC,GAAWzwD,QACzB8H,EAAK4gD,mBAAmBgI,2BAK9BtxD,KAAKuxD,WAAavxD,KAAK2oD,uBAAuB6I,eAAe1kD,KAC3DG,EAAAA,KAAI,SAAAwkD,GACoC,IAAlCjyD,OAAOigB,KAAKgyC,GAAW7wD,QACzB8H,EAAKigD,uBAAuB+I,6BAKlC1xD,KAAK2xD,iBAAmB3xD,KAAK0oD,wBAAwBO,qBACrDjpD,KAAKwM,SAAWxM,KAAK2oD,uBAAuB+B,oCAE5C1qD,KAAK4xD,YAAc5xD,KAAK6xD,oCAAoCjkD,WAC1D,SAACkkD,GAECppD,EAAKwnD,sBAAwB4B,KAKjC9xD,KAAK+xD,iBAAmB/xD,KAAK0oD,wBAC1BsJ,gCACApkD,WAAU,SAACqkD,GACe,SAArBA,EAAQC,SACVxpD,EAAKggD,wBAAwByJ,kCACC,WAArBF,EAAQC,SACjBxpD,EAAKlG,OACyB,WAArByvD,EAAQC,UACjBxpD,EAAKkiB,qBAAqBhe,IACxB,CAAE1L,IAAK,8BACPmqB,EAAAA,kBAAkB2O,gBAEpBtxB,EAAKggD,wBAAwByJ,mCACC,WAArBF,EAAQC,UACjBxpD,EAAK0pD,qBAAqBH,OAKlClC,EAAA7vD,UAAAgxD,gBAAA,WAEE,IADA,IAAMmB,GAAO,IAAIx7B,MAAOE,cACft2B,EAAI,EAAGA,EAAI,GAAIA,IACtBT,KAAKiwD,MAAM7sD,KAAK,CAAEuK,GAAIlN,EAAI,EAAGygB,KAAMmxC,EAAO5xD,IAE5C,IAAK,IAAI6xD,EAAI,EAAGA,GAAK,GAAIA,IACnBA,EAAI,GACNtyD,KAAKgwD,OAAO5sD,KAAK,CAAEuK,GAAI2kD,EAAGpxC,KAAM,IAAMoxC,EAAEl7B,aAExCp3B,KAAKgwD,OAAO5sD,KAAK,CAAEuK,GAAI2kD,EAAGpxC,KAAMoxC,EAAEl7B,cAKxC24B,EAAA7vD,UAAAqyD,2BAAA,WACEvyD,KAAKqwD,QAAQntD,MAAM4nD,gBAAkB9qD,KAAKqwD,QAAQntD,MAAM4nD,gBAG1DiF,EAAA7vD,UAAAsyD,gBAAA,SAAgBC,GACdzyD,KAAKqwD,QAAkB,SAAEG,SAAmB,SAAE37B,KAAKkL,SAAS0yB,EAAK59B,OAGnEk7B,EAAA7vD,UAAAwyD,cAAA,SAAcC,GACZ3yD,KAAKqwD,QAAkB,SAAEI,YAAY1wB,SAAS4yB,EAAMzxC,OAGtD6uC,EAAA7vD,UAAA0yD,aAAA,SAAaP,GACXryD,KAAKqwD,QAAkB,SAAEK,WAAW3wB,SAASsyB,EAAKnxC,OAGpD6uC,EAAA7vD,UAAA2yD,4BAAA,WACE7yD,KAAKkwD,uBAAyBlwD,KAAKkwD,uBAQrCH,EAAA7vD,UAAA2xD,kCAAA,WACE,OAAOhlD,EAAAA,cAAc,CAAC7M,KAAKmxD,WAAYnxD,KAAK2xD,mBAAmB7kD,KAC7DgO,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACmkD,EAAAlkD,EAAA,GAAWg9C,EAAAh9C,EAAA,GACf,YACcyJ,IAAZuzC,QACoBvzC,IAApBuzC,EAAQ8E,WACNoC,EAAU3xC,QACV,SAACuvC,GACC,OAAAA,EAAQjU,UAAYmP,EAAQ8E,QAAQjU,WACtCp6C,YAMVmvD,EAAA7vD,UAAA4yD,sBAAA,SAAsB3I,GACpB,IAAIqF,EAAS,GAKb,OAJIrF,EAAQqF,QAAUrF,EAAQqF,OAAOxU,UACnCwU,EAASrF,EAAQqF,OAAOxU,QAAU,MAG7B,CACL+X,SAAU5I,EAAQyG,UAAY,IAAMzG,EAAQ0G,SAC5CmC,KAAM,CACJ7I,EAAQ2G,MACR3G,EAAQ4G,MACR5G,EAAQ6G,KAAO,KAAOxB,EAASrF,EAAQ8E,QAAQjU,QAC/CmP,EAAQ8G,WACR9G,EAAQ8I,SAKdlD,EAAA7vD,UAAAkyD,qBAAA,SAAqBH,GAArB,IAAAvpD,EAAA1I,KACOA,KAAKkzD,2BACRlzD,KAAKkzD,yBAA2BlzD,KAAKuL,aAAab,KAChDilD,GACA,CAAE5gD,UAAU,EAAMC,KAAM,OAE1BhP,KAAKkzD,yBAAyBptB,kBAAkBgqB,eAAiB9vD,KAAKqvD,eAAensD,MACrFlD,KAAKkzD,yBAAyBptB,kBAAkB+pB,mBAC9CoC,EAAQpC,mBACV7vD,KAAKkzD,yBAAyBn7C,OAC3BC,MAAK,WACJtP,EAAKggD,wBAAwByJ,kCAC7BzpD,EAAKwqD,yBAA2B,QAEjCC,OAAM,WAELzqD,EAAKggD,wBAAwByJ,kCAC7BzpD,EAAKwqD,yBAA2B,UAKxCnD,EAAA7vD,UAAAkL,MAAA,WACEpL,KAAKowD,UAAU7nC,QAGjBwnC,EAAA7vD,UAAAwuD,KAAA,WACE1uD,KAAKmwD,OAAO5nC,QAGdwnC,EAAA7vD,UAAAkzD,cAAA,WACMpzD,KAAKkwD,sBACPlwD,KAAKwC,OAELxC,KAAK0oD,wBAAwB0K,cAAcpzD,KAAKqvD,eAAensD,QAInE6sD,EAAA7vD,UAAAsC,KAAA,WACExC,KAAK+qD,kBAAkBxiC,KAAK,CAC1B8qC,eAAgBrzD,KAAKqwD,QAAQntD,MAC7BmsD,eAAgBrvD,KAAKkwD,sBACjB,KACAlwD,KAAKqvD,eAAensD,SAI5B6sD,EAAA7vD,UAAAoO,YAAA,WACMtO,KAAK4xD,aACP5xD,KAAK4xD,YAAYrjD,cAEfvO,KAAK+xD,kBACP/xD,KAAK+xD,iBAAiBxjD,wDArLUyF,EAAAA,8BACCD,EAAAA,+BACLsB,EAAAA,0BACEjB,EAAAA,4BACpBoqB,EAAAA,mBACUj0B,KA/CxBxJ,EAAA,CADCsI,EAAAA,iDAIDtI,EAAA,CADCsI,EAAAA,mDAIDtI,EAAA,CADCooB,EAAAA,uCAIDpoB,EAAA,CADCooB,EAAAA,0CAIDpoB,EAAA,CADCooB,EAAAA,kDA3BU4mC,EAAoBhvD,EAAA,CALhCuI,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,g3MACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BquC,oBCdb,SAAAuD,KAAgC,OAAnBA,EAAiBvyD,EAAA,CAf7B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACA22B,EAAAA,oBACAiX,EAAAA,eACA5J,GACA6hB,GACApgD,EAAAA,WACA7F,EACAmuC,IAEFjuC,aAAc,CAAComD,IACflgD,gBAAiB,CAACkgD,IAClB5lD,QAAS,CAAC4lD,OAECuD,oBCoBX,SAAAC,EACYjK,EACA/nB,EACAmnB,EACAC,EACA/9B,EACAzH,EACAglC,EACA9R,EACA/jC,EACAkvB,GATAxhC,KAAAspD,mBAAAA,EACAtpD,KAAAuhC,gBAAAA,EACAvhC,KAAA0oD,wBAAAA,EACA1oD,KAAA2oD,uBAAAA,EACA3oD,KAAA4qB,qBAAAA,EACA5qB,KAAAmjB,eAAAA,EACAnjB,KAAAmoD,sBAAAA,EACAnoD,KAAAq2C,eAAAA,EACAr2C,KAAAsS,YAAAA,EACAtS,KAAAwhC,kBAAAA,EAxBZxhC,KAAA4L,UAAYxL,EAAAA,UACZJ,KAAAwzD,8BAA+B,EAK/BxzD,KAAA6nD,iBAAkB,EAmMpB,OA9KE0L,EAAArzD,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAKyzD,cAAe,EACpBzzD,KAAK0zD,WAAa1zD,KAAKspD,mBAAmBqK,2BAErC3zD,KAAKwhC,kBAAkB6mB,cAG1BroD,KAAK6nD,iBAAkB,EAFvB7nD,KAAKspD,mBAAmBqB,qBAK1B3qD,KAAKmuD,oBAAsBnuD,KAAKmoD,sBAAsB1B,uBACpDzmD,KAAKq2C,gBAGPr2C,KAAKouD,wBAA0BpuD,KAAKmoD,sBAAsBtB,2BACxD7mD,KAAKq2C,gBAGPr2C,KAAK0oD,wBACFO,qBACAn8C,KAAKC,EAAAA,KAAK,IACVa,WAAU,SAACu8C,GACVzhD,EAAKolD,gBAAkB3D,KAG3BnqD,KAAK4zD,wBAA0B5zD,KAAKspD,mBAAmBkB,oBACvDxqD,KAAK6zD,qBAAuB7zD,KAAK2oD,uBAC9BQ,oBACAr8C,KACC4S,EAAAA,QAAO,SAAAo0C,GAAe,OAAAA,KAAiBt0D,OAAOigB,KAAKq0C,GAAalzD,WAEjEgN,WAAU,SAAAkmD,GACLprD,EAAK+qD,cACP/qD,EAAKya,eAAewV,GAAGjwB,EAAKylD,qBAEzB2F,EAAsB,UAGzBt0D,OAAOigB,KAAKq0C,GAAahrD,SAAQ,SAAA5H,GAC3BA,EAAI6gB,WAAW,iBACjBrZ,EAAKqrD,mCAAmCD,EAAY5yD,OAGxDwH,EAAK64B,gBAAgByyB,kBAAkB,IAPvCtrD,EAAKurD,gBAAkBH,MAY/BP,EAAArzD,UAAAg0D,eAAA,SAAe7D,GAAf,IAAA3nD,EAAA1I,KAKE,OAJKA,KAAKi0D,iBAAmB5D,EAAQvF,iBACnC9qD,KAAKi0D,gBAAkB5D,GAGlBxjD,EAAAA,cAAc,CACnB7M,KAAKsS,YAAY6hD,UAAU,sBAAuB,CAChDxB,MAAOtC,EAAQI,YACf4B,KAAMhC,EAAQK,aAEhB1wD,KAAKsS,YAAY6hD,UAAU,8BAC3Bn0D,KAAKsS,YAAY6hD,UAAU,oCAC3Bn0D,KAAKsS,YAAY6hD,UAAU,0BAC1BrnD,KACDgO,EAAAA,KACE,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GACCknD,EAAAjnD,EAAA,GACAknD,EAAAlnD,EAAA,GACAmnD,EAAAnnD,EAAA,GACAonD,EAAApnD,EAAA,GAEA,OAAOzE,EAAK8rD,WAAWnE,EAAS,CAC9B+D,YAAWA,EACXC,mBAAkBA,EAClBC,yBAAwBA,EACxBC,aAAYA,SAOtBhB,EAAArzD,UAAAu0D,oBAAA,SAAoBpB,GAClBrzD,KAAKi0D,gBAAkBZ,GAGzBE,EAAArzD,UAAAw0D,mBAAA,WACE10D,KAAKwzD,8BAA+B,GAGtCD,EAAArzD,UAAAy0D,mBAAA,WACE30D,KAAKwzD,8BAA+B,GAGtCD,EAAArzD,UAAA6qD,kBAAA,SAAkB79C,OAChBmmD,EAAAnmD,EAAAmmD,eACAhE,EAAAniD,EAAAmiD,eACAliD,EAAAD,EAAA0nD,aAAAA,OAAA,IAAAznD,GAAAA,EAMM0nD,EAAOx0D,EAAA,GAAwBgzD,GACrCwB,EAAQxF,eAAiBA,GAAkBrvD,KAAK8tD,gBAE5C8G,EACF50D,KAAK2oD,uBAAuBmM,qBAAqBD,GACxC70D,KAAKi0D,iBAAmBj0D,KAAKi0D,gBAAgBtmD,KAAOknD,EAAQlnD,IACrE3N,KAAK2oD,uBAAuBoC,kBAAkB8J,GAGhD70D,KAAKyzD,cAAe,GAGtBF,EAAArzD,UAAAoO,YAAA,WACMtO,KAAK6zD,sBACP7zD,KAAK6zD,qBAAqBtlD,cAG5BvO,KAAK2oD,uBAAuBoM,yBAGpBxB,EAAArzD,UAAA80D,YAAV,SAAsBngC,GAcpB,MAZa,SAATA,EACO70B,KAAK4L,UAAU5G,KACN,WAAT6vB,GAA8B,wBAATA,EACrB70B,KAAK4L,UAAU3G,YACN,WAAT4vB,EACA70B,KAAK4L,UAAUzG,YACN,SAAT0vB,EACA70B,KAAK4L,UAAU1G,KAEflF,KAAK4L,UAAUxG,aAMlBmuD,EAAArzD,UAAA6zD,mCAAV,SAA6CkB,GAC3Cj1D,KAAK4qB,qBAAqBhe,IACxB,CACE1L,IAAK,8BACL22B,OAAQ,CAAEq9B,MAAOD,IAEnB5pC,EAAAA,kBAAkB2O,iBAIZu5B,EAAArzD,UAAAs0D,WAAV,SAAqBnB,EAAgB8B,GACnC,MAAO,CACLzkC,MAAO2iC,EAAevI,eAClBqK,EAAWb,yBACX,GACJvB,SAAUM,EAAe/C,kBACzB0C,KAAM,CAACK,EAAe9C,WAAY4E,EAAWf,aAC7CgB,IAAKp1D,KAAKg1D,YAAY3B,EAAe7C,SAAS37B,MAC9CwgC,QAAS,CAAC,CAAEn0C,KAAMi0C,EAAWd,mBAAoBv3C,MAAO,SACxDw4C,OACEt1D,KAAKi0D,iBAAmBj0D,KAAKi0D,gBAAgBtmD,KAAO0lD,EAAe1lD,GAC/DwnD,EAAWZ,kBACX39C,IAIV28C,EAAArzD,UAAAq1D,OAAA,WACEv1D,KAAK+qD,kBAAkB,CACrBsI,eAAgBrzD,KAAKi0D,gBACrBW,cAAc,KAIlBrB,EAAArzD,UAAAs1D,WAAA,WACEx1D,KAAKmjB,eAAewV,GAAG34B,KAAKouD,mEAxLE/4C,EAAAA,0BACHvB,EAAAA,uBACQC,EAAAA,+BACDC,EAAAA,8BACFI,EAAAA,4BACNS,EAAAA,sBACOoxC,UACP/O,EAAAA,sBACH7iC,EAAAA,0BACMR,EAAAA,qBAzBpB0/C,EAAsBxyD,EAAA,CALlCuI,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAA,m6EACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B6xC,oBCUb,SAAAkC,KAAkC,OAArBA,EAAmB10D,EAAA,CA5B/B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAonC,EAAAA,aACAqiB,GACAzlB,GACA+J,GACAtoC,EAAAA,YAEFxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbkmD,uBAAwB,CACtBjmD,UAAW8jD,GACX75C,OAAQ,CACNuuC,GACAjF,GACA4K,GACAiB,SAMVllD,aAAc,CAAC4pD,IACf1jD,gBAAiB,CAAC0jD,IAClBppD,QAAS,CAACopD,OAECkC,oBCpBX,SAAAE,EACUp0B,EACApe,GADAnjB,KAAAuhC,gBAAAA,EACAvhC,KAAAmjB,eAAAA,EALVnjB,KAAA41D,cAAe,EA8BjB,OAtBED,EAAAz1D,UAAA21D,YAAA,WACE71D,KAAK41D,cAAgB51D,KAAK41D,cAG5BD,EAAAz1D,UAAA41D,WAAA,WACE91D,KAAKuhC,gBAAgBu0B,cAGvBH,EAAAz1D,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAK+1D,uBAAyB/1D,KAAKuhC,gBAChCH,kBACAt0B,KAAK4S,EAAAA,QAAO,SAAA6iB,GAAS,OAA8B,IAA9B/iC,OAAOigB,KAAK8iB,GAAO3hC,WACxCgN,WAAU,WACTlF,EAAKya,eAAewV,GAAG,CAAEC,QAAS,0BAIxC+8B,EAAAz1D,UAAAoO,YAAA,WACMtO,KAAK+1D,wBACP/1D,KAAK+1D,uBAAuBxnD,wDAvBLuF,EAAAA,uBACDe,EAAAA,kBANf8gD,EAAmB50D,EAAA,CAL/BuI,EAAAA,UAAU,CACTC,SAAU,iBACVC,SAAA,qpBACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9Bi0C,oBCYb,SAAAK,KAA+B,OAAlBA,EAAgBj1D,EAAA,CAhB5B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAconC,EAAAA,aAAcC,EAAAA,UAAW5hC,EAAAA,YACjDxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbymD,mBAAoB,CAClBxmD,UAAWkmD,GACXj8C,OAAQ,CAACuuC,GAAmBjF,SAKpCr5C,aAAc,CAACgsD,IACf9lD,gBAAiB,CAAC8lD,IAClBxrD,QAAS,CAACwrD,OAECK,oBChBX,SAAAE,EACU3M,EACApB,EACAhC,EACAvkC,GAHA5hB,KAAAupD,uBAAAA,EACAvpD,KAAAmoD,sBAAAA,EACAnoD,KAAAmmD,qBAAAA,EACAnmD,KAAA4hB,OAAAA,SAGVs0C,EAAAh2D,UAAA8a,YAAA,WAAA,IAAAtS,EAAA1I,KACQ6tD,EAA6B7tD,KAAKmoD,sBAAsB/B,gBAC5DjB,EAAAA,iBAAiBQ,iBASnB,OANKkI,GAAgBttC,EAAAA,aACnBjQ,QAAQC,KACN,0BAA0B40C,EAAAA,iBAAiBQ,gBAAe,+BAIvD3lD,KAAKupD,uBACTJ,oBACAr8C,KACCgO,EAAAA,KAAI,SAAAu4C,GACF,SAAAA,GAAyD,IAAvC7zD,OAAOigB,KAAK4zC,GAAgBzyD,SAE1C8H,EAAKkZ,OAAO0qC,SACVuB,GACEnlD,EAAKy9C,qBAAqB4B,eACxB8F,EAAarI,WACbx4B,MAAM,kDA3BUy7B,UACDxC,UACD+B,EAAAA,4BACd/kC,EAAAA,2MALPizC,EAAsBn1D,EAAA,CAHlCmH,EAAAA,WAAW,CACVC,WAAY,UAED+tD,oBC2BX,SAAAC,EACYzN,EACAC,EACAU,EACA7nB,EACAlvB,EACA61C,EACAzkB,GANA1jC,KAAA0oD,wBAAAA,EACA1oD,KAAA2oD,uBAAAA,EACA3oD,KAAAqpD,mBAAAA,EACArpD,KAAAwhC,kBAAAA,EACAxhC,KAAAsS,YAAAA,EACAtS,KAAAmoD,sBAAAA,EACAnoD,KAAA0jC,iBAAAA,EAjBZ1jC,KAAAo2D,iBAAmBjR,EAAAA,iBAQnBnlD,KAAA0hC,kBAAuCC,EAAAA,kBAAkBC,WAgH3D,OApGEu0B,EAAAj2D,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAK+lC,MAAQ/lC,KAAKwhC,kBAAkB9P,YACpC1xB,KAAKuiD,SAAWviD,KAAKwhC,kBAAkBghB,aACvCxiD,KAAKq2D,iBAAmBr2D,KAAK0oD,wBAAwBO,qBACrDjpD,KAAKs2D,gBAAkBt2D,KAAK2oD,uBAAuBQ,oBACnDnpD,KAAKukC,iBAAmBvkC,KAAK0jC,iBAAiBjC,mBAC5CzhC,KAAK0hC,mBAGP1hC,KAAKu2D,cAAgBv2D,KAAK0oD,wBACvB6F,0BACAzhD,KACCG,EAAAA,KAAI,SAACupD,GACc,OAAbA,GACF9tD,EAAKggD,wBAAwB+N,iCAKrCz2D,KAAK02D,aAAe12D,KAAKq2D,iBAAiBvpD,KACxC+R,EAAAA,WAAU,SAACsrC,GACT,OAAAzhD,EAAK2gD,mBAAmBsN,WAAWxM,EAAQ8E,QAAQjU,YAErD/tC,EAAAA,KAAI,SAACgiD,GACa,OAAZA,GACFvmD,EAAK2gD,mBAAmBuN,2BAG5B97C,EAAAA,KAAI,SAACm0C,GAAqB,OAAAA,GAAWA,EAAQ/tC,UAIjDi1C,EAAAj2D,UAAA22D,uBAAA,SACE/I,EACAgJ,GAEA,OAAOjqD,EAAAA,cAAc,CACnB7M,KAAKsS,YAAY6hD,UAAU,wBAC1BrnD,KACDgO,EAAAA,KAAI,SAAC5N,OAAC6pD,EAADrzD,EAAAwJ,EAAA,GAAC,GACC4pD,IACHA,EAAchJ,EAAgBmB,QAAQjU,SAGxC,IAAIwU,EAAS,GAKb,OAJI1B,EAAgB0B,QAAU1B,EAAgB0B,OAAOxU,UACnDwU,EAAS1B,EAAgB0B,OAAOxU,QAAU,MAGrC,CACLtqB,MAAOqmC,EACPhE,SAAUjF,EAAgB8C,UAAY,IAAM9C,EAAgB+C,SAC5DmC,KAAM,CACJlF,EAAgBgD,MAChBhD,EAAgBiD,MAChBjD,EAAgBkD,KAAO,KAAOxB,EAASsH,EACvChJ,EAAgBmD,WAChBnD,EAAgBmF,aAO1BkD,EAAAj2D,UAAA82D,oBAAA,SAAoBxP,GAClB,OAAO36C,EAAAA,cAAc,CACnB7M,KAAKsS,YAAY6hD,UAAU,qCAC1BrnD,KACDgO,EAAAA,KAAI,SAAC5N,GACH,MAAO,CACLwjB,MAFChtB,EAAAwJ,EAAA,GAAC,GAGF6lD,SAAUvL,EAAatmC,KACvB8xC,KAAM,CAACxL,EAAa72B,mBAM5BwlC,EAAAj2D,UAAA+2D,qBAAA,SAAqB5D,GACnB,OAAOxmD,EAAAA,cAAc,CACnB7M,KAAKsS,YAAY6hD,UAAU,uBAC3Bn0D,KAAKsS,YAAY6hD,UAAU,sBAAuB,CAChDxB,MAAOU,EAAe5C,YACtB4B,KAAMgB,EAAe3C,eAEtB5jD,KACDgO,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAAC6pD,EAAA5pD,EAAA,GAAWinD,EAAAjnD,EAAA,GACf,MAAO,CACLujB,MAAOqmC,EACPhE,SAAUM,EAAe/C,kBACzB0C,KAAM,CAACK,EAAe9C,WAAY6D,SAM1C+B,EAAAj2D,UAAAg3D,mBAAA,SAAmBC,GACjB,IAAM7zD,EAAOtD,KAAKmoD,sBAAsB/B,gBAAgB+Q,GACxD,OAAO7zD,GAAQA,EAAKkiD,oDA3GezxC,EAAAA,+BACDC,EAAAA,8BACJkB,EAAAA,0BACDrB,EAAAA,yBACNQ,EAAAA,0BACU4xC,UACL5kB,MAlBnB80B,EAAqBp1D,EAAA,CALjCuI,EAAAA,UAAU,CACTC,SAAU,mBACVC,SAAA,q5GACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9By0C,oBCuBb,SAAAiB,KAAiC,OAApBA,EAAkBr2D,EAAA,CA/B9B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAgkC,GACAmU,GACA1yC,EAAAA,WACA4hC,EAAAA,UACAD,EAAAA,aACAyM,GACAnuC,EAAAA,sBAEFzF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb6nD,oBAAqB,CACnB5nD,UAAW0mD,GACXz8C,OAAQ,CACNuuC,GACAjF,GACA4K,GACAiB,GACAqH,SAMVvsD,aAAc,CAACwsD,IACftmD,gBAAiB,CAACsmD,IAClBhsD,QAAS,CAACgsD,OAECiB,oBCqCX,SAAAE,EACUx5B,EACE4qB,EACArvB,EACAgwB,EACAz+B,EACFrf,GALAvL,KAAA89B,GAAAA,EACE99B,KAAA0oD,wBAAAA,EACA1oD,KAAAq5B,YAAAA,EACAr5B,KAAAqpD,mBAAAA,EACArpD,KAAA4qB,qBAAAA,EACF5qB,KAAAuL,aAAAA,EAtDVvL,KAAA+uD,iBAA4C,IAAIhuC,EAAAA,gBAAwB,IAkBxE/gB,KAAAu3D,eAAgB,EAGhBv3D,KAAAw3D,cAAgB,IAAI1vC,EAAAA,aAGpB9nB,KAAAy3D,cAAgB,IAAI3vC,EAAAA,aAMpB9nB,KAAAmqD,QAAqBnqD,KAAK89B,GAAGI,MAAM,CACjCgsB,eAAgB,EAAC,GACjBwN,UAAW,CAAC,IACZ9G,UAAW,CAAC,GAAIzyB,EAAAA,WAAWC,UAC3ByyB,SAAU,CAAC,GAAI1yB,EAAAA,WAAWC,UAC1B0yB,MAAO,CAAC,GAAI3yB,EAAAA,WAAWC,UACvB2yB,MAAO,CAAC,IACRC,KAAM,CAAC,GAAI7yB,EAAAA,WAAWC,UACtBoxB,OAAQxvD,KAAK89B,GAAGI,MAAM,CACpB8c,QAAS,CAAC,KAAM7c,EAAAA,WAAWC,YAE7B6wB,QAASjvD,KAAK89B,GAAGI,MAAM,CACrB8c,QAAS,CAAC,KAAM7c,EAAAA,WAAWC,YAE7B6yB,WAAY,CAAC,GAAI9yB,EAAAA,WAAWC,UAC5B60B,MAAO,KA4LX,OAhLEqE,EAAAp3D,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KAEEA,KAAKmxD,WAAanxD,KAAKqpD,mBAAmBsO,uBAAuB7qD,KAC/DG,EAAAA,KAAI,SAAAokD,GACoC,IAAlC7xD,OAAOigB,KAAK4xC,GAAWzwD,QACzB8H,EAAK2gD,mBAAmBuN,4BAM9B52D,KAAK43D,QAAU53D,KAAKq5B,YAAYw+B,YAAY/qD,KAC1CG,EAAAA,KAAI,SAAA6qD,GACiC,IAA/Bt4D,OAAOigB,KAAKq4C,GAAQl3D,QACtB8H,EAAK2wB,YAAY0+B,gBAGrBj9C,EAAAA,KAAI,SAAAg9C,GACFA,EAAO9Z,KAAKX,IAEZ,OAAAx5C,EAAA,CADkB,CAAEgxB,KAAM,GAAI3T,KAAM,UACd42C,OAK1B93D,KAAKgvD,SAAWhvD,KAAK+uD,iBAAiBjiD,KACpC+R,EAAAA,WAAU,SAAAowC,GAAW,OAAAvmD,EAAK2gD,mBAAmB6F,WAAWD,MACxDhiD,EAAAA,KAAI,SAAAkiD,GACF,IAAMC,EAAgB1mD,EAAKyhD,QAAQ3yC,IAAI,kBACnC23C,GAAWA,EAAQvuD,OAAS,EAC9BwuD,EAAclO,SAEdkO,EAAcnO,cAMpBjhD,KAAK+xD,iBAAmB/xD,KAAK0oD,wBAC1BsJ,gCACApkD,WAAU,SAACqkD,GACe,SAArBA,EAAQC,SACVxpD,EAAKggD,wBAAwByJ,kCACC,WAArBF,EAAQC,SACjBxpD,EAAK8uD,cAAcjvC,KAAK7f,EAAKyhD,QAAQjnD,OACP,WAArB+uD,EAAQC,UAGfD,EAAQ+F,OAAOA,OAAOC,MAAK,SAAAr0D,GAAS,MAAkB,cAAlBA,EAAMs0D,WAE1CxvD,EAAKkiB,qBAAqBhe,IACxB,CAAE1L,IAAK,6BACPmqB,EAAAA,kBAAkB2O,gBAGpBtxB,EAAKkiB,qBAAqBhe,IACxB,CAAE1L,IAAK,8BACPmqB,EAAAA,kBAAkB2O,gBAGtBtxB,EAAKggD,wBAAwByJ,mCACC,WAArBF,EAAQC,UACjBxpD,EAAK0pD,qBAAqBH,MAI5BjyD,KAAKm4D,aAAwD,IAAzC34D,OAAOigB,KAAKzf,KAAKm4D,aAAav3D,SACpDZ,KAAKmqD,QAAQiO,WAAWp4D,KAAKm4D,aAE7Bn4D,KAAKsvD,gBAAgBtvD,KAAKm4D,YAAYlJ,SAClCjvD,KAAKm4D,YAAY3I,QACnBxvD,KAAKuvD,eAAevvD,KAAKm4D,YAAY3I,UAK3C8H,EAAAp3D,UAAAm4D,cAAA,SAAc3nC,GACZ1wB,KAAKmqD,QAAkB,SAAEuN,UAAU33B,SAASrP,EAAMmE,OAGpDyiC,EAAAp3D,UAAAovD,gBAAA,SAAgBL,GACdjvD,KAAKmqD,QAAkB,SAAE8E,QAAkB,SAAEjU,QAAQjb,SACnDkvB,EAAQjU,SAEVh7C,KAAK+uD,iBAAiBvsD,KAAKysD,EAAQjU,UAGrCsc,EAAAp3D,UAAAqvD,eAAA,SAAeC,GACbxvD,KAAKmqD,QAAkB,SAAEqF,OAAiB,SAAExU,QAAQjb,SAClDyvB,EAAOxU,UAIXsc,EAAAp3D,UAAAo4D,qBAAA,WACEt4D,KAAKmqD,QAAkB,SAAED,eAAenqB,SACtC//B,KAAKmqD,QAAQjnD,MAAMgnD,iBAIvBoN,EAAAp3D,UAAAwuD,KAAA,WACE1uD,KAAKy3D,cAAclvC,QAGrB+uC,EAAAp3D,UAAAkzD,cAAA,WAAA,IAAA1qD,EAAA1I,KACMA,KAAKmqD,QAAQ7rB,SAAiB,OAAEp7B,MAAM83C,UACxCh7C,KAAKu4D,WAAav4D,KAAKgvD,SAASliD,KAAKC,EAAAA,KAAK,IAAIa,WAAU,SAAAuhD,GACtD,IAAMh0C,EAAMg0C,EAAQpoD,MAClB,SAAAyoD,GACE,OAAAA,EAAOxU,UAAYtyC,EAAKyhD,QAAQ7rB,SAAiB,OAAEp7B,MAAM83C,WAE7Dx7C,OAAOc,OAAOoI,EAAKyhD,QAAQjnD,MAAMssD,OAAQ,CACvCC,aAAct0C,EAAIs0C,mBAKpBzvD,KAAKmqD,QAAQvsB,MACf59B,KAAK0oD,wBAAwB0K,cAAcpzD,KAAKmqD,QAAQjnD,OAIxDlD,KAAKw3D,cAAcjvC,UAAK3R,IAI5B0gD,EAAAp3D,UAAAkyD,qBAAA,SAAqBH,GAArB,IAAAvpD,EAAA1I,KACOA,KAAKkzD,2BACRlzD,KAAKkzD,yBAA2BlzD,KAAKuL,aAAab,KAChDilD,GACA,CAAE5gD,UAAU,EAAMC,KAAM,OAE1BhP,KAAKkzD,yBAAyBptB,kBAAkBgqB,eAAiB9vD,KAAKmqD,QAAQjnD,MAC9ElD,KAAKkzD,yBAAyBptB,kBAAkB+pB,mBAC9CoC,EAAQpC,mBACV7vD,KAAKkzD,yBAAyBn7C,OAC3BC,MAAK,SAAAmyC,GACJzhD,EAAKggD,wBAAwByJ,kCACzBhI,IACFA,EAAU3qD,OAAOc,OACf,CACEo3D,UAAWhvD,EAAKyhD,QAAQjnD,MAAMw0D,UAC9BzE,MAAOvqD,EAAKyhD,QAAQjnD,MAAM+vD,MAC1BuD,UAAU,GAEZrM,GAEFzhD,EAAK8uD,cAAcjvC,KAAK4hC,IAE1BzhD,EAAKwqD,yBAA2B,QAEjCC,OAAM,WAELzqD,EAAKggD,wBAAwByJ,kCAC7B,IAAMhI,EAAU3qD,OAAOc,OACrB,CACEk2D,UAAU,GAEZ9tD,EAAKyhD,QAAQjnD,OAEfwF,EAAK8uD,cAAcjvC,KAAK4hC,GACxBzhD,EAAKwqD,yBAA2B,UAKxCoE,EAAAp3D,UAAAoO,YAAA,WACEtO,KAAK0oD,wBAAwByJ,kCAEzBnyD,KAAK+xD,kBACP/xD,KAAK+xD,iBAAiBxjD,cAGpBvO,KAAKu4D,YACPv4D,KAAKu4D,WAAWhqD,wDArLNiwB,EAAAA,mBACuBzqB,EAAAA,+BACZkB,EAAAA,mBACOC,EAAAA,0BACEd,EAAAA,4BACV7J,KAnDxBxJ,EAAA,CADCsI,EAAAA,2CAIDtI,EAAA,CADCsI,EAAAA,8CAIDtI,EAAA,CADCsI,EAAAA,8CAIDtI,EAAA,CADCsI,EAAAA,iDAIDtI,EAAA,CADCsI,EAAAA,6CAIDtI,EAAA,CADCsI,EAAAA,6CAIDtI,EAAA,CADCooB,EAAAA,8CAIDpoB,EAAA,CADCooB,EAAAA,8CA3BUmuC,EAAoBv2D,EAAA,CALhCuI,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,23NACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B41C,oBCZb,SAAAkB,KAAgC,OAAnBA,EAAiBz3D,EAAA,CAd7B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACA22B,EAAAA,oBACAkX,EAAAA,YACAzG,EAAAA,aACAwG,EAAAA,eACAhuC,EACA6F,EAAAA,YAEF3F,aAAc,CAAC2tD,GAAsB3H,IACrC9/C,gBAAiB,CAAC8/C,IAClBxlD,QAAS,CAACmtD,GAAsB3H,OAErB6I,oBCdX,SAAAC,EAAoBlP,GAAAvpD,KAAAupD,uBAAAA,SAEpBkP,EAAAv4D,UAAA8a,YAAA,WACE,OAAOhb,KAAKupD,uBAAuBT,oEAHOL,uHADjCgQ,EAA0B13D,EAAA,CAHtCmH,EAAAA,WAAW,CACVC,WAAY,UAEDswD,oBCyBX,SAAAC,EACYrP,EACAlmC,EACAulC,EACAP,EACA9R,EACA/jC,EACAkvB,GANAxhC,KAAAqpD,mBAAAA,EACArpD,KAAAmjB,eAAAA,EACAnjB,KAAA0oD,wBAAAA,EACA1oD,KAAAmoD,sBAAAA,EACAnoD,KAAAq2C,eAAAA,EACAr2C,KAAAsS,YAAAA,EACAtS,KAAAwhC,kBAAAA,EAdZxhC,KAAA24D,8BAA+B,EAI/B34D,KAAA44D,aAAc,EACd54D,KAAA6nD,iBAAkB,EA4IpB,OAhIE6Q,EAAAx4D,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAK0zD,WAAa1zD,KAAKqpD,mBAAmBwP,sBAC1C74D,KAAK84D,mBAAqB94D,KAAKqpD,mBAAmBO,eAClD5pD,KAAK+4D,iBAAmB/4D,KAAK0oD,wBAAwBO,qBAErDjpD,KAAKg5D,OAASnsD,EAAAA,cAAc,CAC1B7M,KAAK84D,mBACL94D,KAAK+4D,iBACL/4D,KAAKsS,YAAY6hD,UAAU,0CAC3Bn0D,KAAKsS,YAAY6hD,UAAU,qCAC3Bn0D,KAAKsS,YAAY6hD,UAAU,0BAC1BrnD,KACDgO,EAAAA,KACE,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GACC88C,EAAA78C,EAAA,GACAqpD,EAAArpD,EAAA,GACA8rD,EAAA9rD,EAAA,GACA+rD,EAAA/rD,EAAA,GACAonD,EAAApnD,EAAA,GAGA,GACE68C,EAAUppD,UACR41D,GAA6C,IAAjCh3D,OAAOigB,KAAK+2C,GAAU51D,QACpC,CACA,IAAMspD,EAAiBF,EAAUjjD,MAC/B,SAAAojD,GAAW,OAAAA,EAAQD,kBAErBsM,EAAWtM,EACXxhD,EAAKywD,cAAcjP,GAErB,OAAOF,EAAUlvC,KAAI,SAAAqvC,GAQnB,MAAO,CACLA,QAAOA,EACPsI,KATW/pD,EAAKwrD,eAChB/J,EACAqM,EACAyC,EACAC,EACA3E,WAWLv0D,KAAKwhC,kBAAkB6mB,cAG1BroD,KAAK6nD,iBAAkB,EAFvB7nD,KAAKqpD,mBAAmBU,iBAM5B2O,EAAAx4D,UAAAg0D,eAAA,SACE/J,EACAqM,EACAyC,EACAC,EACA3E,GAEA,IAAI/E,EAAS,GAMb,OAJIrF,EAAQqF,QAAUrF,EAAQqF,OAAOxU,UACnCwU,EAASrF,EAAQqF,OAAOxU,QAAU,MAG7B,CACLtqB,MAAOy5B,EAAQD,eAAiB+O,EAA6B,GAC7DlG,SAAU5I,EAAQyG,UAAY,IAAMzG,EAAQ0G,SAC5CmC,KAAM,CACJ7I,EAAQ2G,MACR3G,EAAQ4G,MACR5G,EAAQ6G,KAAO,KAAOxB,EAASrF,EAAQ8E,QAAQjU,QAC/CmP,EAAQ8G,WACR9G,EAAQ8I,OAEVoC,QAAS,CAAC,CAAEn0C,KAAMg4C,EAAuBp8C,MAAO,SAChDw4C,OAAQkB,GAAYA,EAAS7oD,KAAOw8C,EAAQx8C,GAAK4mD,EAAe,KAIpEmE,EAAAx4D,UAAAi5D,cAAA,SAAchP,GACZnqD,KAAK0oD,wBAAwB2B,mBAAmBF,IAGlDuO,EAAAx4D,UAAAk5D,WAAA,SAAWjP,GAAX,IAAAzhD,EAAA1I,KACQq5D,EAAcr5D,KAAK+4D,iBAAiBnrD,WAAU,SAAA4oD,GAC9CA,GAAYA,EAAS8C,kBACvB5wD,EAAK6sD,SACL8D,EAAY9qD,kBAIhBvO,KAAK44D,aAAc,EAEnB54D,KAAK84D,mBAAmBhsD,KAAKC,EAAAA,KAAK,IAAIa,WAAU,SAAAo8C,GAC9CA,EAAU9iD,SAASijD,GACfzhD,EAAKywD,cAAchP,GACnBzhD,EAAKggD,wBAAwB6Q,oBAAoBpP,OAIzDuO,EAAAx4D,UAAAs5D,mBAAA,WACEx5D,KAAK24D,8BAA+B,GAGtCD,EAAAx4D,UAAAu5D,mBAAA,SAAmBjE,QAAA,IAAAA,IAAAA,GAAA,GACjBx1D,KAAK24D,8BAA+B,EAChCnD,GACFx1D,KAAKw1D,cAITkD,EAAAx4D,UAAAq1D,OAAA,WACEv1D,KAAKmjB,eAAewV,GAClB34B,KAAKmoD,sBAAsB1B,uBAAuBzmD,KAAKq2C,kBAI3DqiB,EAAAx4D,UAAAs1D,WAAA,WACEx1D,KAAKmjB,eAAewV,GAClB34B,KAAKmoD,sBAAsBtB,2BACzB7mD,KAAKq2C,iBACF,kDAtIuBnhC,EAAAA,0BACJL,EAAAA,sBACSd,EAAAA,+BACFkyC,UACP/O,EAAAA,sBACH7iC,EAAAA,0BACMR,EAAAA,qBAhBpB6kD,EAAwB33D,EAAA,CALpCuI,EAAAA,UAAU,CACTC,SAAU,sBACVC,SAAA,u7FACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9Bg3C,oBCmBb,SAAAgB,KAAoC,OAAvBA,EAAqB34D,EAAA,CA7BjC2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAonC,EAAAA,aACAunB,GACA3qB,GACA+J,GACAtoC,EAAAA,WACA+9C,GACAH,IAEFpjD,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbmqD,wBAAyB,CACvBlqD,UAAWipD,GACXh/C,OAAQ,CACNuuC,GACAjF,GACAyV,SAMV9uD,aAAc,CAAC+uD,IACf7oD,gBAAiB,CAAC6oD,IAClBvuD,QAAS,CAACuuD,OAECgB,oBCZb,SAAAE,KAAsC,OAAzBA,EAAuB74D,EAAA,CAhBnC2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACA4iD,GACAG,GACAc,GACAL,GACAH,GACAyB,GACA8G,GACAO,GACAtY,GACA0Z,GACAsC,OAGSE,oBClBX,SAAAC,EACY12C,EACAgV,EACAqJ,GAFAxhC,KAAAmjB,eAAAA,EACAnjB,KAAAm4B,YAAAA,EACAn4B,KAAAwhC,kBAAAA,SAGZq4B,EAAA35D,UAAA8a,YAAA,WAAA,IAAAtS,EAAA1I,KACE,OAAOA,KAAKm4B,YAAYG,eAAexrB,KACrCgO,EAAAA,KAAI,SAAAyd,GACF,GAAIA,EAAMuB,aACRpxB,EAAKya,eAAewV,GAAG,CAAEC,QAAS,cAC7B,GAAIlwB,EAAK84B,kBAAkB6mB,cAEhC,OADA3/C,EAAKya,eAAewV,GAAG,CAAEC,QAAS,UAC3B,EAET,OAAQL,EAAMuB,2DAdQjlB,EAAAA,sBACHlB,EAAAA,mBACME,EAAAA,oNAJpBgmD,EAAoB94D,EAAA,CAHhCmH,EAAAA,WAAW,CACVC,WAAY,UAED0xD,SvCbb,gBAIA,cAOYxU,GAAAA,EAAAA,yBAAAA,EAAAA,uBAAsB,KAChC,OAAA,SACAA,GAAA,MAAA,0BwCFA,SAAAyU,EACYhzD,EACAizD,GADA/5D,KAAA8G,OAAAA,EACA9G,KAAA+5D,qBAAAA,EAJJ/5D,KAAAg6D,WAAa,IAAIj5C,EAAAA,gBAA4B,WAOrD+4C,EAAA55D,UAAA+5D,aAAA,WACE,OAAOj6D,KAAKg6D,YAGdF,EAAA55D,UAAA0M,IAAA,SAAI1L,EAAaD,GACf,IAAMi5D,EAAkBl6D,KAAK8G,OAAOqzD,UAAUpzD,MAC5C,SAAAqzD,GAAY,OAAAA,EAASl5D,MAAQA,KAG/B,GAAIg5D,EAAO,CACT,IAAMG,EAAuBr6D,KAAKg6D,WAAW92D,MAC7Cm3D,EAAS/5C,OAAOtgB,KAAKs6D,wBAAwBp5D,GAAM,EAAG,CACpDD,OAAMA,EACNs5D,QAASL,EAAMK,QACft1C,SAAUi1C,EAAMj1C,SAChB/jB,IAAGA,IAELlB,KAAKg6D,WAAWx3D,KAAK63D,KAIzBP,EAAA55D,UAAA0Y,OAAA,SAAO1X,GAKL,GAJwBlB,KAAK8G,OAAOqzD,UAAUpzD,MAC5C,SAAAqzD,GAAY,OAAAA,EAASl5D,MAAQA,KAGpB,CACT,IAAIm5D,EAAuBr6D,KAAKg6D,WAAW92D,MAC3Cm3D,EAAWA,EAAS36C,QAAO,SAAA06C,GAAY,OAAAA,EAASl5D,MAAQA,KACxDlB,KAAKg6D,WAAWx3D,KAAK63D,KAIzBP,EAAA55D,UAAAs6D,eAAA,SAAeJ,GACb,IAAMn5D,EACJm5D,EAASn5D,kBAAkBioB,YACvBkxC,EAASn5D,OACRm5D,EAASn5D,OAAmByW,cAG7B8xB,EACJxpC,KAAK+5D,qBAAqB1xB,mBAAmBpnC,IAAWA,EAGpDw5D,EAAcjxB,EAAe5C,aAAa,YAC3C6zB,GACHjxB,EAAet4B,aAAa,WAAY,MAG1Cs4B,EAAejC,QAGVkzB,GACHjxB,EAAekxB,gBAAgB,aAIzBZ,EAAA55D,UAAAo6D,wBAAV,SAAkCp5D,GAKhC,IAJA,IAAIojB,EAAgBtkB,KAAK8G,OAAOqzD,UAAU1vB,WACxC,SAAA2vB,GAAY,OAAAA,EAASl5D,MAAQA,kBAI7BojB,IACA,IAAMq2C,EAAqBC,EAAK9zD,OAAOqzD,UAAU71C,GACjD,GAAIq2C,EAAU,CACZ,IACMT,EADuBU,EAAKZ,WAAW92D,MACdunC,WAC7B,SAAA2vB,GAAY,OAAAA,EAASl5D,MAAQy5D,EAASz5D,OAExC,GAAIg5D,GAAS,eACJA,EAAQ,YATd51C,EAAQ,GAAC,gDAahB,OAAO,4CA/EWu2C,UACcpuB,yIALvBqtB,EAAe/4D,EAAA,CAH3BmH,EAAAA,WAAW,CACVC,WAAY,UAED2xD,oBCKX,SAAAgB,EAAoBC,GAAA/6D,KAAA+6D,gBAAAA,EAFpB/6D,KAAAg6D,WAAqCh6D,KAAK+6D,gBAAgBd,eAO5D,OAHEa,EAAA56D,UAAAs6D,eAAA,SAAeJ,GACbp6D,KAAK+6D,gBAAgBP,eAAeJ,6CAHDN,MAH1BgB,EAAiB/5D,EAAA,CAL7BuI,EAAAA,UAAU,CACTC,SAAU,eACVC,SAAA,sPACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9Bo5C,MCRAE,GAAwC,CACnDb,UAAW,CACT,CACEj5D,IAAK,YACLq5D,QAAS,0BAEX,CACEr5D,IAAK,UACLq5D,QAAS,wBAEX,CAAEr5D,IAAK,YAAaq5D,QAAS,0CCH/B,SAAAU,EACY3yD,EACAyyD,GADA/6D,KAAAsI,WAAAA,EACAtI,KAAA+6D,gBAAAA,EAUd,OAPEE,EAAA/6D,UAAAiM,SAAA,WACEnM,KAAK+6D,gBAAgBnuD,IAAI5M,KAAKk7D,WAAYl7D,KAAKsI,WAAWY,gBAG5D+xD,EAAA/6D,UAAAoO,YAAA,WACEtO,KAAK+6D,gBAAgBniD,OAAO5Y,KAAKk7D,sDATX/xD,EAAAA,kBACK2wD,MAJpB/4D,EAAA,CAARsI,EAAAA,0CADU4xD,EAAiBl6D,EAAA,CAH7BgY,EAAAA,UAAU,CACTxP,SAAU,kBAEC0xD,oBCoCb,SAAAE,KAA6B,OAAhBA,EAAcp6D,EAAA,CAtB1B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAyF,EAAAA,WACA8rD,EAAAA,aAAaC,WAAWL,IACxBpuB,IAEFjjC,aAAc,CAACmxD,GAAmBG,IAClC9wD,QAAS,CAAC8wD,IACVprD,gBAAiB,CAACirD,IAElBhxD,UAAW,CACTC,EAAAA,qBAAqBixD,IACrB,CAAEhxD,QAAS6wD,GAAgB5wD,YAAaC,EAAAA,QACxC,CACEF,QAASwiB,EAAAA,gBACTF,WAAYgvC,GACZ/uC,KAAM,CAACjb,EAAAA,yBAA0BoT,IACjC+H,OAAO,OAIA0uC,MAKb,SAAgBG,GACdvrD,EACA6V,GAQA,OANgB,WACd,IAAMnV,EAAUV,EAAyBW,wBACvCoqD,IAEFl1C,EAAchZ,IAAI,gBAAsB6D,EAAS2L,EAAAA,eAAe+I,aCvDxDo2C,iBCWV,SAAAC,EAAY55C,GAAZ,IAAAlZ,EAAA1I,KAFAA,KAAAy7D,WAAuC,IAAI16C,EAAAA,iBAAgB,GAGzDa,EAAO85C,OACJ5uD,KAAK4S,EAAAA,QAAO,SAAA5C,GAAS,OAAAA,aAAiB6+C,EAAAA,oBACtC/tD,WAAU,WACTlF,EAAKkzD,QAAO,aAOlBJ,EAAAt7D,UAAA07D,OAAA,SAAOC,GACDA,EACF77D,KAAKy7D,WAAWj5D,MAAK,GAErBxC,KAAKy7D,WAAWj5D,MAAMxC,KAAKy7D,WAAWv4D,iDAftB+f,EAAAA,iIAHTu4C,EAAoBz6D,EAAA,CAHhCmH,EAAAA,WAAW,CACVC,WAAY,UAEDqzD,oBCEX,SAAAM,EAAoBC,GAAA/7D,KAAA+7D,qBAAAA,EAStB,OAPED,EAAA57D,UAAA07D,OAAA,WACE57D,KAAK+7D,qBAAqBH,UAG5Bp8D,OAAAiC,eAAIq6D,EAAA57D,UAAA,aAAU,KAAd,WACE,OAAOF,KAAK+7D,qBAAqBN,qFAPOD,MAD/BM,EAAsB/6D,EAAA,CALlCuI,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAA,6XACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9Bo6C,oBCWb,SAAAE,KAAkC,OAArBA,EAAmBj7D,EAAA,CAf/B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,cACVC,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbssD,uBAAwB,CACtBrsD,UAAWqsD,QAKnBnyD,aAAc,CAACmyD,IACf3xD,QAAS,CAAC2xD,IACVjsD,gBAAiB,CAACisD,OAEPE,oBCVb,SAAAC,KAA2B,OAAdA,EAAYl7D,EAAA,CALxB2I,EAAAA,SAAS,CACRE,QAAS,CAACoc,IACVlc,UAAW,CAAC,CAAEE,QAASqS,EAAcpS,YAAaC,EAAAA,SAClDC,QAAS,CAAC6b,OAECi2C,oBC0BX,SAAAC,IAxBAl8D,KAAAm8D,cAAe,EAMfn8D,KAAA6L,iBAA6B,GAG7B7L,KAAAo8D,4BAA6B,EAO7Bp8D,KAAA8L,WAAY,EAGZ9L,KAAAq8D,eAAiB,IAAIv0C,EAAAA,aAqCvB,OA9BEo0C,EAAAh8D,UAAAiM,SAAA,WACMnM,KAAKo8D,4BAA8Bp8D,KAAKsN,QAC1CtN,KAAKm8D,aAAenwD,QAClBhM,KAAKsN,QAAQQ,eAAiBwuD,EAAAA,yBAAyBC,OAGrDv8D,KAAKw8D,iBAAmBx8D,KAAKw8D,gBAAgBC,iBAC3Cz8D,KAAKw8D,gBAAgBC,eAAeC,qBACtC18D,KAAKm8D,cAAe,EACXn8D,KAAKw8D,gBAAgBC,eAAeE,mBAC7C38D,KAAKm8D,cAAe,KAM5BD,EAAAh8D,UAAA+N,gBAAA,WACEjO,KAAKm8D,cAAgBn8D,KAAKm8D,aAE1Bn8D,KAAKq8D,eAAe9zC,KAAK,CACvBra,MAAOlO,KAAKm8D,aACZ3yD,SAAUxJ,KAAKw8D,mBAInBN,EAAAh8D,UAAA08D,WAAA,SAAWC,GACT,QAAO78D,KAAKo8D,4BACRp8D,KAAK6L,iBAAiB3E,SAAS21D,IAlDrC97D,EAAA,CADCsI,EAAAA,+CAIDtI,EAAA,CADCsI,EAAAA,gDAIDtI,EAAA,CADCsI,EAAAA,0DAIDtI,EAAA,CADCsI,EAAAA,uCAKDtI,EAAA,CADCsI,EAAAA,yCAIDtI,EAAA,CADCooB,EAAAA,+CAnBU+yC,EAA8Bn7D,EAAA,CAJ1CuI,EAAAA,UAAU,CACTC,SAAU,6BACVC,SAAA,4pBAEW0yD,oBCiEX,SAAAY,EACUC,EACAnyC,EACAoyC,EACAxxD,EACA2sB,GAJAn4B,KAAA+8D,mBAAAA,EACA/8D,KAAA4qB,qBAAAA,EACA5qB,KAAAg9D,wBAAAA,EACAh9D,KAAAwL,yBAAAA,EACAxL,KAAAm4B,YAAAA,EA9CFn4B,KAAAyL,cAAgB,IAAIC,EAAAA,aACpB1L,KAAAi9D,mBAAqB,IAAIl8C,EAAAA,iBAAyB,GAK1D/gB,KAAA6L,iBAA6B,GAE7B7L,KAAAo8D,2BAA6Bc,EAAAA,iBAC3Bl9D,KAAKg9D,wBACLG,EAAAA,4BAIFn9D,KAAA8L,UAAYC,EAAAA,eAAe/L,KAAKg9D,wBAAyB,OAuU3D,OApSEF,EAAA58D,UAAAiM,SAAA,WACEnM,KAAKwM,SAAWK,EAAAA,cAAc,CAC5B7M,KAAK+8D,mBAAmBK,2BACxBp9D,KAAK+8D,mBAAmBM,8BACxBr9D,KAAK+8D,mBAAmBO,kCACxBt9D,KAAKm4B,YAAYuqB,iBACjB1iD,KAAKi9D,qBACJnwD,KACDgO,EAAAA,KACE,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GACCqwD,EAAApwD,EAAA,GACAqwD,EAAArwD,EAAA,GACAswD,EAAAtwD,EAAA,GACAu1C,EAAAv1C,EAAA,GACA8vD,EAAA9vD,EAAA,GAEA,OAAAowD,GACAC,GACAC,IACC/a,GACDua,MAGNj9D,KAAK09D,kBACL19D,KAAK29D,kBACL39D,KAAK49D,uBAGCd,EAAA58D,UAAAw9D,gBAAR,WAAA,IAAAh1D,EAAA1I,KACEA,KAAK69D,cAAgB79D,KAAK+8D,mBAAmBxwD,cAAcO,KACzD8W,EAAAA,eACE5jB,KAAKwL,yBAAyBa,eAC9BrM,KAAKm4B,YAAYuqB,kBAEnBhjC,EAAAA,QACE,SAACxS,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACC,EAAA,GAAeA,EAAA,GAAyC,OAApBA,EAAA,MAExCF,EAAAA,KAAI,SAACC,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAAC4wD,EAAA3wD,EAAA,GAAcA,EAAA,GACbzE,EAAKq1D,eAAeD,IACvBp1D,EAAKq0D,mBAAmBiB,kBAG5BljD,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAAC4wD,EAAA3wD,EAAA,GAAc8wD,EAAA9wD,EAAA,GAClB,OAAKzE,EAAK0zD,4BAINpwD,QAAQtD,EAAKs0D,wBAAwB/wD,qBAErCD,QACEtD,EAAKs0D,wBAAwB/wD,kBAAkBJ,oBAGjDnD,EAAKmD,iBAAmBnD,EAAKs0D,wBAAwB/wD,kBAAkBJ,kBAGvEG,QACEtD,EAAKs0D,wBAAwB/wD,kBAC1BiyD,wBAGEx1D,EAAKy1D,sBAAsBL,EAAcG,GAjB3CH,OA0BPhB,EAAA58D,UAAAi+D,sBAAR,SACEL,EACAG,QAAA,IAAAA,IAAAA,EAAA,IAEA,IAAIG,EAA4B,GAEhC,OACGp+D,KAAKg9D,wBAAwB/wD,kBAAkBiyD,sBAC7CG,uBAUHryD,QACEhM,KAAKg9D,wBAAwB/wD,kBAAkBiyD,sBAC5CI,eAELt+D,KAAKg9D,wBAAwB/wD,kBAAkBiyD,sBAC5CI,aAAa19D,OAAS,IAEzBw9D,EAAkBp+D,KAAKg9D,wBAAwB/wD,kBAC5CiyD,sBAAsBI,cAGpBt+D,KAAK+8D,mBAAmBwB,uBAC7BT,EACAM,KArBAA,EAAkBH,EAAmBnjD,KAAI,SAAAtR,GAAY,OAAAA,EAASmE,MACvD3N,KAAK+8D,mBAAmBwB,uBAC7BT,EACAM,KAsBEtB,EAAA58D,UAAAy9D,gBAAR,WAAA,IAAAj1D,EAAA1I,KACEA,KAAK+8D,mBAAmByB,+BACxBx+D,KAAKyL,cAAcmB,IACjB5M,KAAK+8D,mBACF0B,8BACA7wD,WAAU,SAAA0xC,GAAW,OAAA52C,EAAKg2D,sBAAsBpf,QAI/Cwd,EAAA58D,UAAA09D,oBAAR,WAAA,IAAAl1D,EAAA1I,KACEA,KAAK+8D,mBAAmB4B,mCACxB3+D,KAAKyL,cAAcmB,IACjB5M,KAAK+8D,mBACFO,kCACAxwD,KACC0O,EAAAA,UAAUxP,SACV4X,EAAAA,eACE5jB,KAAK+8D,mBAAmB6B,mCAE1B9jD,EAAAA,KAAI,SAAC5N,GAA0B,OAA1BxJ,EAAAwJ,EAAA,GAAG,MACRD,EAAAA,KAAI,SAAA4xD,GACEA,GACFn2D,EAAKq0D,mBAAmBiB,mBAI7BpwD,WAAU,SAAAixD,GACT,OAAAn2D,EAAKo2D,0BAA0BD,QAK/B/B,EAAA58D,UAAA69D,eAAR,SAAuBD,GACrB,OAAO9xD,QAAQ8xD,IAAiBA,EAAal9D,OAAS,GAGxDk8D,EAAA58D,UAAA+N,gBAAA,SAAgBf,OACdgB,EAAAhB,EAAAgB,MACA1E,EAAA0D,EAAA1D,SAKI0E,EACFlO,KAAK+8D,mBAAmB/uD,YAAYxE,EAASmE,GAAInE,EAASu1D,SAE1D/+D,KAAK+8D,mBAAmBrvD,gBAAgBlE,EAASizD,eAAe5nC,OAI5DioC,EAAA58D,UAAAw+D,sBAAR,SAA8Bpf,GACxBA,IACFt/C,KAAK+8D,mBAAmByB,+BACxBx+D,KAAK4qB,qBAAqBhe,IACxB,CAAE1L,IAAK,+CACPmqB,EAAAA,kBAAkBC,yBAKhBwxC,EAAA58D,UAAA4+D,0BAAR,SAAkCxf,GAC5BA,IACFt/C,KAAK+8D,mBAAmB4B,mCACxB3+D,KAAK4qB,qBAAqBhe,IACxB,CAAE1L,IAAK,mDACPmqB,EAAAA,kBAAkBC,yBAKxBwxC,EAAA58D,UAAAyM,UAAA,SAAUS,GAAV,IAAA1E,EAAA1I,UAAU,IAAAoN,IAAAA,EAAA,IACR,IAAM4xD,EAAwC,GAC9C5xD,EAAUtE,SAAQ,SAAAU,GAChB,GAAId,EAAKq0D,mBAAmBvvD,eAAehE,EAASizD,gBAAiB,CACnE,GAAI/zD,EAAK+E,kBAAkBjE,GACzB,OAEFw1D,EAAmB57D,KAAKoG,OAI5BxJ,KAAKi9D,mBAAmBz6D,MAAK,GAE7BxC,KAAKyL,cAAcmB,IACjB5M,KAAKi/D,sBAAsBD,GACxBlyD,KAAKG,EAAAA,KAAI,SAAAiyD,GAAgB,OAAAx2D,EAAKu0D,mBAAmBz6D,MAAK,OACtDoL,cAICkvD,EAAA58D,UAAA++D,sBAAR,SACED,GADF,IAAAt2D,EAAA1I,KAuBE,YAtBA,IAAAg/D,IAAAA,EAAA,IAEiBl7D,EAAAA,OACf9D,KAAK+8D,mBAAmBO,mCACxBxwD,KACAE,EAAAA,uBACA0S,EAAAA,QAAO,SAAA0qC,GAAW,OAACA,MAEGt9C,KAAKqyD,EAAAA,MAAK,SAACC,EAAKC,GAAW,OAAAD,EAAM,KAAI,IACpCtyD,KACvBG,EAAAA,KAAI,SAAAxM,GACEA,EAAIu+D,EAAmBp+D,QACzB8H,EAAKq0D,mBAAmBrvD,gBACtBsxD,EAAmBv+D,GAAGg8D,eAAe5nC,UAKT/nB,KAClC4S,EAAAA,QAAO,SAAA4/C,GAAe,OAAAA,IAAgBN,EAAmBp+D,YAM7Dk8D,EAAA58D,UAAA2N,SAAA,SAAST,GAAT,IAAA1E,EAAA1I,UAAS,IAAAoN,IAAAA,EAAA,IACP,IAAMmyD,EAAoC,GAC1CnyD,EAAUtE,SAAQ,SAAAU,GAChB,GAAId,EAAKq0D,mBAAmBhvD,mBAAmBvE,EAASizD,gBAAiB,CACvE,GAAI/zD,EAAK+E,kBAAkBjE,GACzB,OAGF+1D,EAAen8D,KAAKoG,OAIxBxJ,KAAKi9D,mBAAmBz6D,MAAK,GAE7BxC,KAAKyL,cAAcmB,IACjB5M,KAAKw/D,gBAAgBD,GAClBzyD,KAAKG,EAAAA,KAAI,SAAAiyD,GAAgB,OAAAx2D,EAAKu0D,mBAAmBz6D,MAAK,OACtDoL,cAICkvD,EAAA58D,UAAAs/D,gBAAR,SACED,GADF,IAAA72D,EAAA1I,KAwBE,YAvBA,IAAAu/D,IAAAA,EAAA,IAEiBz7D,EAAAA,OACf9D,KAAK+8D,mBAAmBM,+BACxBvwD,KACAE,EAAAA,uBACA0S,EAAAA,QAAO,SAAA0qC,GAAW,OAACA,MAEGt9C,KAAKqyD,EAAAA,MAAK,SAACC,EAAKC,GAAW,OAAAD,EAAM,KAAI,IACjCtyD,KAC1BG,EAAAA,KAAI,SAAAxM,GACEA,EAAI8+D,EAAe3+D,QACrB8H,EAAKq0D,mBAAmB/uD,YACtBuxD,EAAe9+D,GAAGkN,GAClB4xD,EAAe9+D,GAAGs+D,aAKajyD,KACrC4S,EAAAA,QAAO,SAAA4/C,GAAe,OAAAA,IAAgBC,EAAe3+D,YAMjDk8D,EAAA58D,UAAAuN,kBAAR,SAA0BjE,GACxB,QAAKxJ,KAAKo8D,6BAKRpwD,QAAQhM,KAAKg9D,wBAAwB/wD,oBACrCD,QACEhM,KAAKg9D,wBAAwB/wD,kBAAkBJ,mBAEjD7L,KAAKg9D,wBAAwB/wD,kBAAkBJ,iBAAiB3E,SAC9DsC,EAASmE,MAKfmvD,EAAA58D,UAAAoO,YAAA,WACEtO,KAAKyL,cAAc8C,cACnBvO,KAAKi9D,mBAAmB1uD,cAExBvO,KAAK+8D,mBAAmByB,+BACxBx+D,KAAK+8D,mBAAmB4B,6EAzSIxpD,EAAAA,0BACEf,EAAAA,4BACI5F,EAAAA,+BACCC,EAAAA,gCACbkF,EAAAA,eA/CbmpD,EAA0B/7D,EAAA,CAJtCuI,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAA,qzEAEWszD,oBCGb,SAAA2C,KAAsC,OAAzBA,EAAuB1+D,EAAA,CAvBnC2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACA6tC,EAAAA,YACAlX,EAAAA,oBACAoX,GACAtoC,EAAAA,WACA7F,GAEFK,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbstD,2BAA4B,CAC1BrtD,UAAWqtD,GACXpjD,OAAQ,CAACgmD,EAAAA,gBAKjB/1D,aAAc,CAACmzD,GAA4BZ,IAC3C/xD,QAAS,CAAC2yD,GAA4BZ,IACtCrsD,gBAAiB,CAACitD,OAEP2C,oBCjBb,SAAAE,KAAsC,OAAzBA,EAAuB5+D,EAAA,CAZnC2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAyF,EAAAA,WACA7F,EACAmuC,GACA6nB,IAEF91D,aAAc,CAAC2B,GACfuE,gBAAiB,CAACvE,GAClBnB,QAAS,CAACmB,MAECq0D,oBC4BX,SAAAC,EACU7D,EACA54C,EACE7a,EACAyxD,GAHF/5D,KAAA+7D,qBAAAA,EACA/7D,KAAAmjB,eAAAA,EACEnjB,KAAAsI,WAAAA,EACAtI,KAAA+5D,qBAAAA,EA5BZ/5D,KAAA6/D,YAAmC7/D,KAAK+7D,qBAAqBN,WAMpCz7D,KAAAwmC,SAAW,IAI5BxmC,KAAA8/D,oBAAmC,CACzCj3B,eAAe,EACfE,qBAAqB,GA2CzB,OAvCE62B,EAAA1/D,UAAA4oC,aAAA,SAAahsB,GACX9c,KAAK+5D,qBAAqBjxB,aACxB9oC,KAAKsI,WAAWY,cAChBlJ,KAAK8/D,oBACLhjD,IAWJ8iD,EAAA1/D,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAK+/D,qBAAuB//D,KAAKmjB,eAC9BiZ,eACAxuB,WAAU,SAAAoyD,GACTt3D,EAAKu3D,iBAA0B,IAARD,EACvBt3D,EAAKw3D,gBAAyB,IAARF,MAI5BJ,EAAA1/D,UAAAigE,2BAAA,SAA2BrjD,GACPA,EAAM7b,OAAQm/D,UAAUl5D,SAAS,gBACjDlH,KAAKqgE,gBAITT,EAAA1/D,UAAAmgE,aAAA,WACErgE,KAAK+7D,qBAAqBH,QAAO,IAGnCgE,EAAA1/D,UAAAoO,YAAA,WACMtO,KAAK+/D,sBACP//D,KAAK+/D,qBAAqBxxD,wDA3BEitD,UACN3mD,EAAAA,sBACF1L,EAAAA,kBACUsjC,MA1BK1rC,EAAA,CAAtCqpB,EAAAA,YAAY,iEACyBrpB,EAAA,CAArCqpB,EAAAA,YAAY,+DAGYrpB,EAAA,CAAxBqpB,EAAAA,YAAY,4CAEiBrpB,EAAA,CAA7Bs/B,EAAAA,UAAUy6B,iCAQX/5D,EAAA,CADComC,EAAAA,aAAa,iBAAkB,CAAC,6CAjBtBy4B,EAAmB7+D,EAAA,CAJ/BuI,EAAAA,UAAU,CACTC,SAAU,gBACVC,SAAA,i6BAEWo2D,oBCcb,SAAAU,KAAyB,OAAZA,EAAUv/D,EAAA,CApBtB2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAonC,EAAAA,aACA+G,GACA5uB,GACApD,GACAkG,GACA5B,GACAuJ,GACAxJ,GACAs1C,GACApwD,EAAAA,qBAEA4rD,GACAvuB,IAEFjjC,aAAc,CAACi2D,IACfz1D,QAAS,CAACy1D,OAECU,MClBbC,GAAA,WAmBE,SAAAA,EACUzmB,EACAhkC,GAFV,IAAApN,EAAA1I,KACUA,KAAA85C,cAAAA,EACA95C,KAAA8V,WAAAA,EApBF9V,KAAAwgE,eAAoCxgE,KAAK85C,cAAc5hC,MAAMpL,KACnE4S,EAAAA,OAAO1T,SACPiB,EAAAA,KAAI,SAAC3N,GAAa,OAACoJ,EAAK+3D,MAAWnhE,EAAEohE,OAAM,aAGrC1gE,KAAA2gE,OAEJ3gE,KAAKwgE,eAAe1zD,KACtBgO,EAAAA,KAAI,SAAAoH,GAAQ,OAAAA,EAAK0+C,QAAQnhC,OAAOx2B,MAAM,QACtC6R,EAAAA,KAAI,SAAA+lD,GAAS,OAAAA,EAAM/lD,KAAI,SAAA+Z,GAAQ,OAAAnsB,EAAKoN,WAAWqC,iBAAiB0c,UAO5C70B,KAAAygE,MAAQ,GAehC,OAHEF,EAAArgE,UAAA85C,SAAA,WACE,OAAOh6C,KAAK2gE,iDAVWroD,SACHrE,EAAAA,cAJAlT,EAAA,CAArBqpB,EAAAA,YAAY,sCAjBFm2C,EAAuBx/D,EAAA,CALnCuI,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAA,2WACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B6+C,GAAb,iBCIA,SAAAO,KAAmC,OAAtBA,EAAoB//D,EAAA,CAfhC2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcmP,EAAqBg4B,GAAgBD,IAC7DjnC,UAAW,CACTC,EAAAA,qBAAqB,CACnByF,cAAe,CACbuxD,wBAAyB,CACvBtxD,UAAW8wD,QAKnB52D,aAAc,CAAC42D,IACf1wD,gBAAiB,CAAC0wD,IAClBp2D,QAAS,CAACo2D,OAECO,oBCZX,SAAAE,EAAmBvxD,GAAAzP,KAAAyP,UAAAA,EACrB,gDADgC6I,KADnB0oD,EAAejgE,EAAA,CAL3BuI,EAAAA,UAAU,CACTC,SAAU,YACVC,SAAA,0ZACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9Bs/C,oBCoBb,SAAAC,KAA2B,OAAdA,EAAYlgE,EAAA,CArBxB2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAconC,EAAAA,aAAcoB,GAAmBtB,IACzDjnC,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb0xD,gCAAiC,CAC/BzxD,UAAWuxD,IAEbA,gBAAiB,CACfvxD,UAAWuxD,IAEbG,sBAAuB,CACrB1xD,UAAWuxD,QAKnBr3D,aAAc,CAACq3D,IACfnxD,gBAAiB,CAACmxD,IAClB72D,QAAS,CAAC62D,OAECC,oBCnBX,SAAAG,EAAmB3xD,GAAAzP,KAAAyP,UAAAA,EACrB,gDADgC6I,KADnB8oD,EAAargE,EAAA,CALzBuI,EAAAA,UAAU,CACTC,SAAU,UACVC,SAAA,kKACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B0/C,oBCWb,SAAAC,KAAyB,OAAZA,EAAUtgE,EAAA,CAbtB2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAconC,EAAAA,aAAcoB,IACtCvoC,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb8xD,iBAAkB,CAAE7xD,UAAW2xD,QAIrCz3D,aAAc,CAACy3D,IACfj3D,QAAS,CAACi3D,IACVvxD,gBAAiB,CAACuxD,OAEPC,oBCVX,SAAAE,EAAmB9xD,GAAAzP,KAAAyP,UAAAA,EACrB,gDADgC6I,KADnBipD,EAAkBxgE,EAAA,CAL9BuI,EAAAA,UAAU,CACTC,SAAU,eACVC,SAAA,+EACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B6/C,oBCcb,SAAAC,KAAiC,OAApBA,EAAkBzgE,EAAA,CAlB9B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,cACVC,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbiyD,sBAAuB,CACrBhyD,UAAW8xD,IAEbG,yBAA0B,CACxBjyD,UAAW8xD,QAKnB53D,aAAc,CAAC43D,IACfp3D,QAAS,CAACo3D,IACV1xD,gBAAiB,CAAC0xD,OAEPC,oBCiCX,SAAAG,EACS7nB,EACChkC,EACA9P,GAHV,IAAA0C,EAAA1I,KACSA,KAAA85C,cAAAA,EACC95C,KAAA8V,WAAAA,EACA9V,KAAAgG,OAAAA,EA5BVhG,KAAA4hE,aAAe,EAMf5hE,KAAA6hE,eAAoC,GAyBpC7hE,KAAA6pB,YAAiC7pB,KAAK85C,cAAc5hC,MAAMpL,KACxDg1D,EAAAA,wBAAwB,cACxBjjD,EAAAA,WAAU,SAAAqD,GACR,OAAArV,EAAAA,cACEqV,EAAK4H,WAAW7gB,MAAM,KAAK6R,KAAI,SAAArL,GAC7B,OAAA/G,EAAKoN,WAAWqC,iBAAsB1I,GAAW3C,KAC/CE,EAAAA,uBACA8N,EAAAA,KAAI,SAAA6uB,GAQF,OAPKA,EAAIxzB,WACPwzB,EAAGtpC,EAAAA,EAAA,GACEspC,GAAG,CACNxzB,SAAUwzB,EAAIv5B,YAIlB/P,EAAAA,EAAA,GACKspC,GAAG,CACNjZ,MAAUxO,EAAKjK,IAAG,SAAS0xB,EAAI1xB,kBAuD/C,OA9CE0pD,EAAAzhE,UAAA6hE,OAAA,SAAOC,GACLhiE,KAAK4hE,aAAeI,GAGtBL,EAAAzhE,UAAAiM,SAAA,WACE,GAAInM,KAAKgG,QAAUhG,KAAKgG,OAAO8X,aAAc,CAC3C,IAAMmkD,EACJjiE,KAAKgG,OAAO8X,aAAaokD,SACzBliE,KAAKgG,OAAO8X,aAAaokD,QAAQtnD,MAE/BqnD,GAAcA,EAAsB,YACtCjiE,KAAK4hE,aAAeK,EAAsB,aAKhDN,EAAAzhE,UAAA4nC,gBAAA,WAAA,IAAAp/B,EAAA1I,KAKMA,KAAK+iB,SAASniB,OAAS,EACzBZ,KAAKmiE,eAAeniE,KAAK+iB,UAEzB/iB,KAAK+nB,aAAe/nB,KAAK+iB,SAASsF,QAAQza,WACxC,SAACw0D,GACC,OAAA15D,EAAKy5D,eAAeC,OAKpBT,EAAAzhE,UAAAiiE,eAAR,SAAuBp/C,GAAvB,IAAAra,EAAA1I,KACE+iB,EAASja,SAAQ,SAAAu5D,GACXA,EAAK3rD,QAAU2rD,EAAK3rD,OAAO4rD,SAASC,eACtC75D,EAAKm5D,eAAez+D,KAAKi/D,EAAK3rD,OAAO4rD,SAASC,gBAE9C75D,EAAKm5D,eAAez+D,KAAK,UAK/Bu+D,EAAAzhE,UAAAoO,YAAA,WACMtO,KAAK+nB,cACP/nB,KAAK+nB,aAAaxZ,wDA1EE+J,SACFrE,EAAAA,kBACHlM,EAAAA,aA1BsBhH,EAAA,CAAxCyhE,EAAAA,aAAa9sD,mCAJHisD,EAA8B5gE,EAAA,CAL1CuI,EAAAA,UAAU,CACTC,SAAU,6BACVC,SAAA,4dACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BigD,oBCPb,SAAAc,KAA0C,OAA7BA,EAA2B1hE,EAAA,CAfvC2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcmP,EAAqBoQ,GAAc9Z,EAAAA,YAC3DxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbkzD,yBAA0B,CACxBjzD,UAAWkyD,QAKnBh4D,aAAc,CAACg4D,IACf9xD,gBAAiB,CAAC8xD,IAClBx3D,QAAS,CAACw3D,OAECc,oBCZX,SAAAE,EACYtZ,EACAX,GADA1oD,KAAAqpD,mBAAAA,EACArpD,KAAA0oD,wBAAAA,EAuBd,OApBEia,EAAAziE,UAAA0pD,aAAA,WACE,OAAO5pD,KAAKqpD,mBAAmBO,gBAGjC+Y,EAAAziE,UAAA0iE,yBAAA,WACE,OAAO5iE,KAAKqpD,mBAAmBwP,uBAGjC8J,EAAAziE,UAAA6pD,cAAA,WACE/pD,KAAKqpD,mBAAmBU,iBAG1B4Y,EAAAziE,UAAA2iE,eAAA,SAAe1Y,GACbnqD,KAAKqpD,mBAAmBwZ,eAAe1Y,IAGzCwY,EAAAziE,UAAA4iE,kBAAA,SAAkBC,EAAmB5Y,GACnCnqD,KAAKqpD,mBAAmByZ,kBAAkBC,EAAW5Y,GACrDnqD,KAAK0oD,wBAAwBsa,yEAtBC9tD,EAAAA,0BACKnB,EAAAA,2BAH1B4uD,EAA2B5hE,EAAA,CADvCmH,EAAAA,cACYy6D,oBCiBX,SAAAM,EACS78B,EACG9zB,EACA+2C,EACAX,GAHH1oD,KAAAomC,QAAAA,EACGpmC,KAAAsS,YAAAA,EACAtS,KAAAqpD,mBAAAA,EACArpD,KAAA0oD,wBAAAA,EARZ1oD,KAAAkjE,oBAAqB,EACrBljE,KAAAmjE,qBAAsB,EAiHxB,OAvGEF,EAAA/iE,UAAAiM,SAAA,WACEnM,KAAKojE,WAAapjE,KAAKomC,QAAQwjB,eAC/B5pD,KAAKqjE,uBAAyBrjE,KAAKomC,QAAQw8B,2BAC3C5iE,KAAKomC,QAAQ2jB,iBAGfkZ,EAAA/iE,UAAAojE,uBAAA,WACEtjE,KAAKmjE,qBAAsB,EAC3BnjE,KAAKkjE,oBAAqB,GAG5BD,EAAA/iE,UAAAqjE,wBAAA,SAAwBpZ,GACtBnqD,KAAKkjE,oBAAqB,EAC1BljE,KAAKmjE,qBAAsB,EAC3BnjE,KAAKwjE,eAAiBrZ,GAGxB8Y,EAAA/iE,UAAAujE,iBAAA,SAAiBtZ,GACfnqD,KAAKkjE,oBAAqB,EAC1BljE,KAAKomC,QAAQy8B,eAAe1Y,IAG9B8Y,EAAA/iE,UAAAwjE,iBAAA,WACE1jE,KAAKkjE,oBAAqB,GAG5BD,EAAA/iE,UAAAyjE,kBAAA,SAAkBxZ,GAChBnqD,KAAKmjE,qBAAsB,EAC3BnjE,KAAKomC,QAAQ08B,kBAAkB9iE,KAAKwjE,eAAmB,GAAGrZ,IAG5D8Y,EAAA/iE,UAAA0jE,kBAAA,WACE5jE,KAAKmjE,qBAAsB,GAG7BF,EAAA/iE,UAAAg0D,eAAA,SAAe/J,GACb,OAAOt9C,EAAAA,cAAc,CACnB7M,KAAKsS,YAAY6hD,UAAU,uBAC3Bn0D,KAAKsS,YAAY6hD,UAAU,4BAC3Bn0D,KAAKsS,YAAY6hD,UAAU,iBAC3Bn0D,KAAKsS,YAAY6hD,UAAU,eAC3Bn0D,KAAKsS,YAAY6hD,UAAU,2CAC1BrnD,KACDgO,EAAAA,KACE,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GACC22D,EAAA12D,EAAA,GACA22D,EAAA32D,EAAA,GACA42D,EAAA52D,EAAA,GACA62D,EAAA72D,EAAA,GACA82D,EAAA92D,EAAA,GAEIqiD,EAAS,GAETrF,EAAQqF,QAAUrF,EAAQqF,OAAOxU,UACnCwU,EAASrF,EAAQqF,OAAOxU,QAAU,MAGpC,IAAMqa,EAA6C,GAOnD,OANKlL,EAAQD,gBACXmL,EAAQjyD,KAAK,CAAE8d,KAAM4iD,EAAkBhnD,MAAO,YAEhDu4C,EAAQjyD,KAAK,CAAE8d,KAAM8iD,EAAUlnD,MAAO,SACtCu4C,EAAQjyD,KAAK,CAAE8d,KAAM6iD,EAAYjnD,MAAO,WAEjC,CACLi2C,SAAU5I,EAAQyG,UAAY,IAAMzG,EAAQ0G,SAC5CmC,KAAM,CACJ7I,EAAQ2G,MACR3G,EAAQ4G,MACR5G,EAAQ6G,KAAO,KAAOxB,EAASrF,EAAQ8E,QAAQjU,QAC/CmP,EAAQ8G,WACR9G,EAAQ8I,OAEVoC,QAASA,EACTC,OAAQnL,EAAQD,eAAiB,KAAK2Z,EAAgB,GACtDK,UAAWD,QAOrBhB,EAAA/iE,UAAAikE,oBAAA,SAAoBpB,GAClB/iE,KAAKqpD,mBAAmB8a,oBAAoBpB,GAC5C/iE,KAAK0oD,wBAAwBsa,gCAG/BC,EAAA/iE,UAAAkkE,cAAA,SAAcrB,GACZ/iE,KAAKqpD,mBAAmBgb,kBAAkBtB,GAC1C/iE,KAAK0oD,wBAAwBsa,gCAG/BC,EAAA/iE,UAAAokE,QAAA,SAAQvB,GACF/iE,KAAKitC,WAAa81B,EACpB/iE,KAAKitC,SAAW81B,EAEhB/iE,KAAKokE,cAAcrB,IAIvBE,EAAA/iE,UAAAgtC,WAAA,WACEltC,KAAKitC,SAAW,+CA3GA01B,UACOtuD,EAAAA,0BACOa,EAAAA,0BACKnB,EAAAA,2BAd1BkvD,EAAoBliE,EAAA,CAJhCuI,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,yjFAEWy5D,oBC8Bb,SAAAsB,KAAgC,OAAnBA,EAAiBxjE,EAAA,CA/B7B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAgkC,GACA2qB,GACA5gB,GACAtoC,EAAAA,YAEF3F,aAAc,CAACs5D,IACf94D,QAAS,CAAC84D,IACVn5D,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbg1D,4BAA6B,CAC3B/0D,UAAWwzD,GACXn5D,UAAW,CACT,CACEE,QAAS24D,GACTpnB,SAAUonB,GACVp2C,KAAM,CAACrX,EAAAA,sBAGXwE,OAAQ,CAACgmD,EAAAA,eAIfxqD,EAAAA,mBACAytD,IAEF9yD,gBAAiB,CAACozD,OAEPsB,oBCdX,SAAAE,EACYl5D,EACF8tB,EACAlB,EACAvN,EACAzH,EACAuhD,GALE1kE,KAAAuL,aAAAA,EACFvL,KAAAq5B,YAAAA,EACAr5B,KAAAm4B,YAAAA,EACAn4B,KAAA4qB,qBAAAA,EACA5qB,KAAAmjB,eAAAA,EACAnjB,KAAA0kE,mBAAAA,EAZV1kE,KAAA4L,UAAYxL,EAAAA,UAEJJ,KAAA+nB,aAAe,IAAIrc,EAAAA,aAuE7B,OA1DE+4D,EAAAvkE,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAK2kE,WAAa3kE,KAAKm4B,YAAYG,eACnCt4B,KAAKq5B,YAAYurC,8BACjB5kE,KAAK+nB,aAAanb,IAChB5M,KAAKq5B,YACFwrC,6BACAj3D,WAAU,SAAA0xC,GAAW,OAAA52C,EAAK62C,UAAUD,OAGzCt/C,KAAK+nB,aAAanb,IAChB5M,KAAKq5B,YACFyrC,2BACAl3D,WAAU,SAAAhK,GAAS,OAAA8E,EAAK+2C,QAAQ77C,OAErC5D,KAAK0zD,WAAa1zD,KAAKq5B,YAAY0rC,8BAGrCN,EAAAvkE,UAAAq/C,UAAA,SAAUD,GAAV,IAAA52C,EAAA1I,KACMs/C,IACFt/C,KAAKqkC,eACLrkC,KAAK0kE,mBACFvQ,UAAU,0CACVrnD,KAAKwO,EAAAA,SACL1N,WAAU,SAAAolD,GACTtqD,EAAKkiB,qBAAqBhe,IACxBomD,EACA3nC,EAAAA,kBAAkBC,0BAGxBtrB,KAAKmjB,eAAewV,GAAG,CAAEC,QAAS,WAItC6rC,EAAAvkE,UAAAu/C,QAAA,SAAQ77C,GAAR,IAAA8E,EAAA1I,KACM4D,IACF5D,KAAKqkC,eACLrkC,KAAK0kE,mBACFvQ,UAAU,qCACVrnD,KAAKwO,EAAAA,SACL1N,WAAU,SAAAolD,GACTtqD,EAAKkiB,qBAAqBhe,IAAIomD,EAAM3nC,EAAAA,kBAAkB2O,qBAK9DyqC,EAAAvkE,UAAAmkC,aAAA,SAAap5B,GACXjL,KAAKuL,aAAaP,mBAAmBC,IAGvCw5D,EAAAvkE,UAAA8kE,aAAA,WACEhlE,KAAKq5B,YAAYzgB,UAGnB6rD,EAAAvkE,UAAAoO,YAAA,WACMtO,KAAK+nB,cACP/nB,KAAK+nB,aAAaxZ,wDA/DIhE,SACH0K,EAAAA,mBACAtB,EAAAA,mBACSS,EAAAA,4BACNS,EAAAA,sBACIR,EAAAA,sBAbnBowD,EAA0B1jE,EAAA,CALtCuI,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,yvCACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B+iD,oBCbX,SAAAQ,EAAoB15D,GAAAvL,KAAAuL,aAAAA,EAOtB,OALE05D,EAAA/kE,UAAAwlC,UAAA,WACE1lC,KAAK+K,MAAQ/K,KAAKuL,aAAab,KAAK+5D,GAA4B,CAC9D11D,UAAU,IACT+2B,4DAL6Bv7B,KAFvB06D,EAAqBlkE,EAAA,CALjCuI,EAAAA,UAAU,CACTC,SAAU,mBACVC,SAAA,6dACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BujD,oBC4Bb,SAAAC,KAAiC,OAApBA,EAAkBnkE,EAAA,CAvB9B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAonC,EAAAA,aACAC,EAAAA,UACA5hC,EAAAA,WACA7F,EACAmuC,IAEF9tC,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACby1D,sBAAuB,CACrBx1D,UAAWw1D,GACXvrD,OAAQ,CAACgmD,EAAAA,gBAKjB/1D,aAAc,CAACs7D,GAAuBR,IACtCt6D,QAAS,CAAC86D,GAAuBR,IACjC50D,gBAAiB,CAACo1D,GAAuBR,OAE9BS,oBC3BX,SAAAC,EACUrnC,EACAzE,EACAlW,GAFAnjB,KAAA89B,GAAAA,EACA99B,KAAAq5B,YAAAA,EACAr5B,KAAAmjB,eAAAA,EAJVnjB,KAAAolE,UAAW,EAyBb,OAlBED,EAAAjlE,UAAAiM,SAAA,WACEnM,KAAKs9B,KAAOt9B,KAAK89B,GAAGI,MAAM,CACxBmnC,UAAW,CACT,GACA,CAAClnC,EAAAA,WAAWC,SAAUge,GAAqBI,oBAKjD2oB,EAAAjlE,UAAAolE,2BAAA,WACEtlE,KAAKolE,UAAW,EAEZplE,KAAKs9B,KAAKI,UAGd19B,KAAKq5B,YAAYisC,2BAA2BtlE,KAAKs9B,KAAKp6B,MAAMmiE,WAC5DrlE,KAAKmjB,eAAewV,GAAG,CAAEC,QAAS,qDArBtB4F,EAAAA,mBACSvpB,EAAAA,mBACGJ,EAAAA,kBANfswD,EAAuBpkE,EAAA,CAJnCuI,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAA,q1CAEW27D,oBC2Bb,SAAAI,KAAmC,OAAtBA,EAAoBxkE,EAAA,CAtBhC2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACA22B,EAAAA,oBACAyQ,EAAAA,aACAC,EAAAA,UACA5hC,EAAAA,YAEFxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb21D,wBAAyB,CACvB11D,UAAW01D,GACXzrD,OAAQ,CAAC8rD,EAAAA,mBAKjB77D,aAAc,CAACw7D,IACfh7D,QAAS,CAACg7D,IACVt1D,gBAAiB,CAACs1D,OAEPI,oBCvBb,SAAAE,IAMwBzlE,KAAA0lE,OAAS,MACjC,OANW3kE,EAAA,CAARsI,EAAAA,yCACQtI,EAAA,CAARsI,EAAAA,uCACQtI,EAAA,CAARsI,EAAAA,yCACQtI,EAAA,CAARsI,EAAAA,4CAEqBtI,EAAA,CAArBqpB,EAAAA,YAAY,uCANFq7C,EAA0B1kE,EAAA,CALtCuI,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,ozBACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B+jD,oBCDb,SAAAE,KAAsC,OAAzBA,EAAuB5kE,EAAA,CALnC2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAconC,EAAAA,aAAcC,EAAAA,UAAW5hC,EAAAA,YACjD3F,aAAc,CAAC87D,IACft7D,QAAS,CAACs7D,OAECE,MCFb,SAASC,GAAiBnoC,GACxB,IAAIooC,EAAI,EAGR,OAFArmE,OAAOigB,KAAKge,EAAQv6B,OAAO4F,SAAQ,SAAA5H,GAAO,OAAC2kE,GAAKpoC,EAAQv6B,MAAMhC,MAEvD2kE,EAAI,EAAI,KAAO,CAAEznC,UAAU,I/BbxBm9B,GAAAA,EAAAA,iBAAAA,EAAAA,eAAc,KACxBA,GAAA,OAAA,GAAA,SACAA,GAAAA,GAAA,OAAA,GAAA,S+BeF,ICRYuK,GDQZC,GAAA,WAIE,SAAAA,EAAsBzkC,GAAAthC,KAAAshC,oBAAAA,EAsGxB,OA5FEykC,EAAA7lE,UAAA8lE,kBAAA,WAAA,IAAAt9D,EAAA1I,KACE,OAAOA,KAAKimE,UAAUn5D,KACpB+R,EAAAA,WAAU,SAAAye,GACR,OAAO50B,EAAK85C,aAAa11C,KACvBgO,EAAAA,KAAI,SAAA4L,GACF,OAAAA,EAAQhH,QAAO,SAAAoH,GAAS,OAAApe,EAAKu7B,eAAe3G,EAAMxW,GAAO5jB,MAAQ,cAY3E6iE,EAAA7lE,UAAAgmE,SAAA,WACE,OAAOlmE,KAAKshC,oBAAoBF,mBAMlC2kC,EAAA7lE,UAAA+lE,QAAA,WAAA,IAAAv9D,EAAA1I,KACE,OAAOA,KAAKkmE,WAAWp5D,KACrBG,EAAAA,KAAI,SAAAs1B,GACG75B,EAAK40B,MAAQ50B,EAAK40B,KAAK9lB,IAAI,aAAatU,QAAUq/B,EAAM1N,MAC3DnsB,EAAKy9D,UAAU5jC,MAGnBznB,EAAAA,KAAI,WAAM,OAAApS,EAAK40B,UAIXyoC,EAAA7lE,UAAAimE,UAAR,SAAkB5jC,GAAlB,IAAA75B,EAAA1I,KACEA,KAAKs9B,KAAO,IAAIuG,EAAAA,UAAU,IAC1B7jC,KAAKs9B,KAAKoH,WAAW,YAAa,IAAIF,EAAAA,YAAYjC,EAAM1N,OAExD,IAAMuxC,EAAa,IAAIviC,EAAAA,UAAU,GAAI,CAAEwiC,WAAY,CAACT,MACpD5lE,KAAKs9B,KAAKoH,WAAW,UAAW0hC,IAE/B7jC,EAAM7b,SAAW,IAAI5d,SAAQ,SAAAge,GAC5B,IAAM5lB,EAAM4lB,EAAMyc,YAAYnM,WAC9BgvC,EAAW1hC,WACTxjC,EACA,IAAIsjC,EAAAA,YAAY,EAAG,CACjB6hC,WAAY,CACVloC,EAAAA,WAAWiT,IAAI,GACfjT,EAAAA,WAAW2T,IAAIppC,EAAK49D,oBAAoBx/C,YAOxCi/C,EAAA7lE,UAAA+jC,eAAV,SAAyB3G,EAAiBxW,GACxC,OAAoBwW,EAAK9lB,IAAI,WAAWA,IAAIsP,EAAMyc,YAAYnM,aAOhE2uC,EAAA7lE,UAAAqmE,gBAAA,SAAgBz/C,GACd,IAAM0/C,EAAkBxmE,KAAKikC,eAAejkC,KAAKs9B,KAAMxW,GAAO5jB,MACxDujE,EAAejnE,OAAOc,OAAO,GAAIwmB,EAAM4/C,WAY7C,OAXAD,EAAavjE,MACX85B,KAAKiN,MAAMnjB,EAAM4/C,UAAUxjE,MAAQsjE,EAAkB,KAAO,IAE9DC,EAAa5iB,eAAiB8iB,EAAAA,eAC5BF,EAAavjE,MAEb,KACA0jE,EAAAA,kBAAkBH,EAAatxC,YAAa,UAC5CsxC,EAAatxC,aAGRsxC,GAGTV,EAAA7lE,UAAAomE,oBAAA,SAAoBx/C,GAClB,OACG9mB,KAAK6mE,iBACF//C,EAAMggD,oBACNhgD,EAAMigD,qBAAuBjgD,EAAM6c,UAI3CoiC,EAAA7lE,UAAA2mE,eAAA,WACE,OAAO7mE,KAAKgnE,YAAczL,EAAAA,eAAe0L,iDApGAvmC,MAJvBqlC,EAAiBhlE,EAAA,CADtCmH,EAAAA,cACqB69D,GAAtB,iBEAE,SAAAmB,EAAsBC,GAAAnnE,KAAAmnE,kBAAAA,EAJbnnE,KAAAonE,gBAAiB,EAE1BpnE,KAAAqnE,MAA+BrnE,KAAKmnE,kBAAkBlB,UA+BxD,OA3BEiB,EAAAhnE,UAAAwxC,WAAA,SAAWpU,EAAiBxW,GAC1B,IAAM2W,EACJH,EAAK9lB,IAAI,WAAWA,IAAIsP,EAAMyc,YAAYnM,YAK5C,OAHIp3B,KAAKonE,gBACP3pC,EAAQwjB,UAEHxjB,GAGTypC,EAAAhnE,UAAAonE,OAAA,SAAOhqC,GAAP,IAAA50B,EAAA1I,KACEA,KAAK0mB,QAAQ5d,SAAQ,SAAAge,GACnB,OAAApe,EAAKgpC,WAAWpU,EAAMxW,GAAOiZ,SAASr3B,EAAK49D,oBAAoBx/C,QAInEogD,EAAAhnE,UAAAqnE,aAAA,SAAazgD,GACX,OAAO9mB,KAAKmnE,kBAAkBZ,gBAAgBz/C,IAGhDogD,EAAAhnE,UAAAomE,oBAAA,SAAoBx/C,GAClB,OAAO9mB,KAAKmnE,kBAAkBb,oBAAoBx/C,IAGpDogD,EAAAhnE,UAAA2mE,eAAA,WACE,OAAO7mE,KAAKmnE,kBAAkBN,2DA3BSd,MALhChlE,EAAA,CAARsI,EAAAA,uCACQtI,EAAA,CAARsI,EAAAA,8CAFU69D,EAA4BnmE,EAAA,CALxCuI,EAAAA,UAAU,CACTC,SAAU,uBACVC,SAAA,qyJACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BwlD,oBCSb,SAAAM,KAAoC,OAAvBA,EAAqBzmE,EAAA,CAbjC2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACA22B,EAAAA,oBACAlxB,EAAAA,WACAyhC,GACAgB,GACAxiC,EAAAA,sBAEF5F,aAAc,CAACu9D,IACf/8D,QAAS,CAAC+8D,IACVr3D,gBAAiB,CAACq3D,OAEPM,oBCGX,SAAAC,EAAsBN,GAAtB,IAAAz+D,EAAA1I,KAAsBA,KAAAmnE,kBAAAA,EARtBnnE,KAAAqnE,MAAQrnE,KAAKmnE,kBACVlB,UACAn5D,KAAKG,EAAAA,KAAI,SAAAqwB,GAAQ,OAAC50B,EAAK4lB,UAAYgP,EAAKp6B,MAAMorB,cAEjDtuB,KAAAuiD,SAEIviD,KAAKmnE,kBAAkBnB,oBAQ7B,OAJEyB,EAAAvnE,UAAAwnE,OAAA,SAAOpqC,GACLA,EAAK2jB,UACLjhD,KAAKmnE,kBAAkBQ,iDAJgB5B,MAX9B0B,EAAgC1mE,EAAA,CAL5CuI,EAAAA,UAAU,CACTC,SAAU,+BACVC,SAAA,gmBACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B+lD,qBCSX,SAAAG,EACYtmC,EACAX,EACA7tB,EACA8X,GAJZ,IAAAliB,EAME2B,EAAAxJ,KAAAb,KAAMshC,IAAoBthC,YALhB0I,EAAA44B,oBAAAA,EACA54B,EAAAi4B,iBAAAA,EACAj4B,EAAAoK,QAAAA,EACApK,EAAAkiB,qBAAAA,EANZliB,EAAAs+D,UAAYzL,EAAAA,eAAe0L,gBADiBnnE,EAAA8nE,EAAAv9D,GAc5Cu9D,EAAA1nE,UAAAsiD,WAAA,WACE,OAAOxiD,KAAKkmE,WAAWp5D,KACrB4S,EAAAA,QAAO,SAAA6iB,GAAS,OAAAv2B,QAAQu2B,MACxBznB,EAAAA,KAAI,SAAAynB,GACF,OAAAA,EAAM7b,QAAQhH,QACZ,SAAAoH,GAAS,OAAuB,IAAvBA,EAAMyc,aAAsBzc,EAAMggD,oBAAsB,UAMzEc,EAAA1nE,UAAAynE,KAAA,WAAA,IAAAj/D,EAAA1I,KACQsuB,EAAYtuB,KAAKs9B,KAAKp6B,MAAMorB,UAC5B5H,EAAU1mB,KAAKs9B,KAAKp6B,MAAMwjB,QAC1BmhD,EAA4CroE,OAAOigB,KAAKiH,GAC3DhH,QAAO,SAAA6jB,GAAe,OAAQ7c,EAAQ6c,GAAe,KACrDzoB,KACC,SAAAyoB,GACE,MAAA,CACED,iBAAkBwkC,OAAOvkC,GACzBI,SAAkBjd,EAAQ6c,OAIlCvjC,KAAKs9B,KAAKoiB,QAEV1/C,KAAK2gC,iBAAiBonC,YAAYz5C,EAAW,CAC3C05C,+BAAgCH,IAGlC7nE,KAAK2gC,iBACFsnC,wBACAn7D,KAAKwO,EAAAA,MAAMtP,UACX4B,WAAU,WAAM,OAAAlF,EAAKw/D,UAAU55C,OAG5Bs5C,EAAA1nE,UAAAgoE,UAAR,SAAkB55C,GAChBtuB,KAAK2gC,iBAAiBwnC,+BACtBnoE,KAAK4qB,qBAAqBhe,IACxB,CACE1L,IAAK,mDACL22B,OAAQ,CAAEvJ,UAASA,IAErBjD,EAAAA,kBAAkBC,uBAEpBtrB,KAAK8S,QAAQ6lB,GAAG,CACdC,QAAS,qDAxDoB8H,UACHtrB,EAAAA,wBACTP,EAAAA,sBACaT,EAAAA,iPAPvBwzD,EAAwB7mE,EAAA,CAHpCmH,EAAAA,WAAW,CACVC,WAAY,UAEDy/D,IAAiC7B,kBCP5C,SAAAqC,EACYt1D,EACAq0D,GADAnnE,KAAA8S,QAAAA,EACA9S,KAAAmnE,kBAAAA,SAGZiB,EAAAloE,UAAA8a,YAAA,WAAA,IAAAtS,EAAA1I,KACE,OAAOA,KAAKmnE,kBAAkBlB,UAAUn5D,KACtCgO,EAAAA,KAAI,SAAAwiB,GACF,QAAKA,EAAK2iB,QAIRv3C,EAAKoK,QAAQ6lB,GAAG,CAAEC,QAAS,YACpB,iDAZM/jB,EAAAA,sBACU+yD,uJAHpBQ,EAAsBrnE,EAAA,CAHlCmH,EAAAA,WAAW,CACVC,WAAY,UAEDigE,SCYC,CACJxvC,QAAS,2BA4BnByvC,GAAA,WAAA,SAAAA,KAA4C,OAA/BA,EAA6BtnE,EAAA,CArCzC2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAonC,EAAAA,aAAaq3B,SAAS,CACpB,CACEt3D,KAAM,KACNgK,YAAa,CAACkI,IACdzT,UAAWkR,GACXuB,KAAIqmD,MAKR/nC,EAAAA,oBACAgnC,GACA7B,IAEF77D,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbi4D,iCAAkC,CAChCh4D,UAAWg4D,GACX/tD,OAAQ,CAACgmD,EAAAA,UAAW0I,IACpBt+D,UAAW,CACT,CACEE,QAAS+7D,GACT97D,YAAa29D,UAOzBj+D,aAAc,CAAC89D,IACft9D,QAAS,CAACs9D,IACV53D,gBAAiB,CAAC43D,OAEPY,GAAb,iBC/BE,SAAAG,EAAsBrB,GAAtB,IAAAz+D,EAAA1I,KAAsBA,KAAAmnE,kBAAAA,EANtBnnE,KAAAqnE,MAAQrnE,KAAKmnE,kBACVlB,UACAn5D,KAAKG,EAAAA,KAAI,SAAAqwB,GAAQ,OAAC50B,EAAK4lB,UAAYgP,EAAKp6B,MAAMorB,cAEjDtuB,KAAAuiD,SAAqCviD,KAAKmnE,kBAAkB3kB,aAG9D,gDAD2CujB,MAT9ByC,EAAoBznE,EAAA,CALhCuI,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,4jBACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B8mD,SCWC,CACJ5vC,QAAS,eA2BnB6vC,GAAA,WAAA,SAAAA,KAAgC,OAAnBA,EAAiB1nE,EAAA,CApC7B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAonC,EAAAA,aAAaq3B,SAAS,CACpB,CACEt3D,KAAM,KACNgK,YAAa,CAACkI,IACdzT,UAAWkR,GACXuB,KAAIwmD,MAKRlB,GACA7B,IAEF77D,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbg5D,qBAAsB,CACpB/4D,UAAW+4D,GACX9uD,OAAQ,CAACgmD,EAAAA,WACT51D,UAAW,CACT,CACEE,QAAS+7D,GACT97D,YAAa29D,UAOzBj+D,aAAc,CAAC6+D,IACfr+D,QAAS,CAACq+D,IACV34D,gBAAiB,CAAC24D,OAEPC,GAAb,iBC3CA,SAAAE,KAAsC,OAAzBA,EAAuB5nE,EAAA,CAHnC2I,EAAAA,SAAS,CACRE,QAAS,CAAC6+D,GAAmBJ,OAElBM,qBCcX,SAAAC,EACYtnC,EACAunC,EACA/1D,EACA8X,GAJZ,IAAAliB,EAME2B,EAAAxJ,KAAAb,KAAMshC,IAAoBthC,YALhB0I,EAAA44B,oBAAAA,EACA54B,EAAAmgE,qBAAAA,EACAngE,EAAAoK,QAAAA,EACApK,EAAAkiB,qBAAAA,EANZliB,EAAAs+D,UAAYzL,EAAAA,eAAeuN,gBADWhpE,EAAA8oE,EAAAv+D,GAYtCu+D,EAAA1oE,UAAAsiD,WAAA,WACE,OAAOxiD,KAAKkmE,WAAWp5D,KACrB4S,EAAAA,QAAO,SAAA6iB,GAAS,QAAEA,EAAM7b,WACxB5L,EAAAA,KAAI,SAAAynB,GACF,OAAAA,EAAM7b,QAAQhH,QACZ,SAAAoH,GAAS,OAAuB,IAAvBA,EAAMyc,aAAsBzc,EAAMigD,mBAAqB,UAMxE6B,EAAA1oE,UAAAynE,KAAA,WAAA,IAAAj/D,EAAA1I,KACQsuB,EAAYtuB,KAAKs9B,KAAKp6B,MAAMorB,UAC5B5H,EAAU1mB,KAAKs9B,KAAKp6B,MAAMwjB,QAC1BmhD,EAA4CroE,OAAOigB,KAAKiH,GAC3DhH,QAAO,SAAA6jB,GAAe,OAAQ7c,EAAQ6c,GAAe,KACrDzoB,KACC,SAAAyoB,GACE,MAAA,CACED,iBAAkBwkC,OAAOvkC,GACzBI,SAAkBjd,EAAQ6c,OAIlCvjC,KAAKs9B,KAAKoiB,QAEV1/C,KAAK6oE,qBAAqBE,yBAAyB,CACjDz6C,UAASA,EACT06C,yBAA0BnB,IAG5B7nE,KAAK6oE,qBACFI,0BACAn8D,KAAKwO,EAAAA,MAAMtP,UACX4B,WAAU,WAAM,OAAAlF,EAAKw/D,gBAGlBU,EAAA1oE,UAAAgoE,UAAR,WAAA,IAAAx/D,EAAA1I,KACEA,KAAK6oE,qBACFK,wBACAp8D,KAAKwO,EAAAA,OAAM,SAAAja,GAAK,QAAEA,MAClBuM,WAAU,SAAAu7D,GACT,IAAMC,EAAMD,EAAcC,IAC1B1gE,EAAKkiB,qBAAqBhe,IACxB,CACE1L,IAAK,mDACL22B,OAAQ,CAAEuxC,IAAGA,IAEf/9C,EAAAA,kBAAkBC,uBAEpB5iB,EAAKoK,QAAQ6lB,GAAG,CACdC,QAAS,uBACTf,OAAQ,CAAEuxC,IAAGA,kDA5DY1oC,UACC2oC,EAAAA,iCACbx0D,EAAAA,sBACaT,EAAAA,0PAPvBw0D,EAAkB7nE,EAAA,CAH9BmH,EAAAA,WAAW,CACVC,WAAY,UAEDygE,IAA2B7C,kBCPtC,SAAAuD,EACYx2D,EACAq0D,GADAnnE,KAAA8S,QAAAA,EACA9S,KAAAmnE,kBAAAA,SAGZmC,EAAAppE,UAAA8a,YAAA,WAAA,IAAAtS,EAAA1I,KACE,OAAOA,KAAKmnE,kBAAkBlB,UAAUn5D,KACtCgO,EAAAA,KAAI,SAAAwiB,GACF,QAAKA,EAAK2iB,QAIRv3C,EAAKoK,QAAQ6lB,GAAG,CAAEC,QAAS,YACpB,iDAZM/jB,EAAAA,sBACU+zD,uJAHpBU,EAAgBvoE,EAAA,CAH5BmH,EAAAA,WAAW,CACVC,WAAY,UAEDmhE,oBCaX,SAAAC,EAAsBpC,GAAtB,IAAAz+D,EAAA1I,KAAsBA,KAAAmnE,kBAAAA,EARtBnnE,KAAAqnE,MAAQrnE,KAAKmnE,kBACVlB,UACAn5D,KAAKG,EAAAA,KAAI,SAAAqwB,GAAQ,OAAC50B,EAAK4lB,UAAYgP,EAAKp6B,MAAMorB,cAEjDtuB,KAAAuiD,SAEIviD,KAAKmnE,kBAAkBnB,oBAQ7B,OAJEuD,EAAArpE,UAAAwnE,OAAA,SAAOpqC,GACLA,EAAK2jB,UACLjhD,KAAKmnE,kBAAkBQ,iDAJgB5B,MAX9BwD,EAAgCxoE,EAAA,CAL5CuI,EAAAA,UAAU,CACTC,SAAU,+BACVC,SAAA,gmBACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B6nD,SCeC,CACJ3wC,QAAS,2BA6BnB4wC,GAAA,WAAA,SAAAA,KAA4C,OAA/BA,EAA6BzoE,EAAA,CAtCzC2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAonC,EAAAA,aAAaq3B,SAAS,CACpB,CACEt3D,KAAM,KACNgK,YAAa,CAACkI,IACdzT,UAAWkR,GACXuB,KAAIunD,MAKRjC,GACAl4D,EAAAA,WACAkxB,EAAAA,oBACAmlC,IAEF77D,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb+5D,iCAAkC,CAChC95D,UAAW85D,GACX7vD,OAAQ,CAACgmD,EAAAA,UAAW4J,IACpBx/D,UAAW,CACT,CACEE,QAAS+7D,GACT97D,YAAa2+D,UAOzBj/D,aAAc,CAAC4/D,IACfp/D,QAAS,CAACo/D,IACV15D,gBAAiB,CAAC05D,OAEPC,GAAb,iBCrCE,SAAAE,EAAsBvC,GAAtB,IAAAz+D,EAAA1I,KAAsBA,KAAAmnE,kBAAAA,EANtBnnE,KAAAqnE,MAAQrnE,KAAKmnE,kBACVlB,UACAn5D,KAAKG,EAAAA,KAAI,SAAAqwB,GAAQ,OAAC50B,EAAK4lB,UAAYgP,EAAKp6B,MAAMorB,cAEjDtuB,KAAAuiD,SAAqCviD,KAAKmnE,kBAAkB3kB,aAG9D,gDAD2CujB,MAT9B2D,EAAoB3oE,EAAA,CALhCuI,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,4jBACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BgoD,SCSC,CACJ9wC,QAAS,eA2BnB+wC,GAAA,WAAA,SAAAA,KAAgC,OAAnBA,EAAiB5oE,EAAA,CApC7B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAonC,EAAAA,aAAaq3B,SAAS,CACpB,CACEt3D,KAAM,KACNgK,YAAa,CAACkI,IACdzT,UAAWkR,GACXuB,KAAI0nD,MAKRpC,GACA7B,IAEF77D,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbk6D,qBAAsB,CACpBj6D,UAAWi6D,GACXhwD,OAAQ,CAACgmD,EAAAA,WACT51D,UAAW,CACT,CACEE,QAAS+7D,GACT97D,YAAa2+D,UAOzBj/D,aAAc,CAAC+/D,IACfv/D,QAAS,CAACu/D,IACV75D,gBAAiB,CAAC65D,OAEPC,GAAb,iBCzCA,SAAAE,KAAgC,OAAnBA,EAAiB9oE,EAAA,CAH7B2I,EAAAA,SAAS,CACRE,QAAS,CAAC+/D,GAAmBH,OAElBK,oBCKX,SAAAC,EAAoBxoC,GAAAthC,KAAAshC,oBAAAA,EAOtB,OAHEwoC,EAAA5pE,UAAAiM,SAAA,WACEnM,KAAK+pE,OAAS/pE,KAAKshC,oBAAoBF,4DALAV,MAD9BopC,EAA4B/oE,EAAA,CAJxCuI,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAA,i7BAEWsgE,MCXAE,GAAkB,CAAC,qBAAsB,mBACzCC,GAAkB,CAAC,2BCoB9B,SAAAC,EACY5oC,EACAoC,GADA1jC,KAAAshC,oBAAAA,EACAthC,KAAA0jC,iBAAAA,EAGZ1jC,KAAA0hC,kBAAuCC,EAAAA,kBAAkBK,MACzDhiC,KAAA+pE,OAA4B/pE,KAAKshC,oBAAoBF,kBA0CvD,OApCE8oC,EAAAhqE,UAAAiM,SAAA,WACEnM,KAAKukC,iBAAmBvkC,KAAK0jC,iBAAiBjC,mBAC5CzhC,KAAK0hC,mBAEP1hC,KAAKmqE,QAAUnqE,KAAKoqE,eAActpE,MAAnBd,KAAI6D,EAAmBmmE,GAAoBC,KAC1DjqE,KAAKqqE,WAAarqE,KAAKsqE,eAAeN,IACtChqE,KAAKuqE,QAAUvqE,KAAKsqE,eAAeL,KAG7BC,EAAAhqE,UAAAoqE,eAAR,SACEE,GAEA,OAAOxqE,KAAK+pE,OAAOj9D,KACjBgO,EAAAA,KAAI,SAAAynB,GACF,GAAIv2B,QAAQu2B,EAAMkoC,cAChB,OAAOloC,EAAMkoC,aAAa/qD,QAAO,SAAAgrD,GAC/B,OAAAF,EAAkBtjE,SAASwjE,EAAYC,gBAOzCT,EAAAhqE,UAAAkqE,eAAR,eACE,IAAAI,EAAA,GAAAI,EAAA,EAAAA,EAAAjqE,UAAAC,OAAAgqE,IAAAJ,EAAAI,GAAAjqE,UAAAiqE,GAEA,OAAO5qE,KAAK+pE,OAAOj9D,KACjBgO,EAAAA,KAAI,SAAAynB,GACF,GAAIv2B,QAAQu2B,EAAMkoC,cAChB,OAAOloC,EAAMkoC,aAAa/qD,QACxB,SAAAgrD,GAAe,OAACF,EAAkBtjE,SAASwjE,EAAYC,yDAzChCjqC,UACHW,MAHnB6oC,EAAyBnpE,EAAA,CAJrCuI,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,quBAEW0gE,oBCNX,SAAAW,EACShgE,EACC81B,GADD3gC,KAAA6K,YAAAA,EACC7K,KAAA2gC,iBAAAA,EAMZ,OAHEkqC,EAAA3qE,UAAAoO,YAAA,WACEtO,KAAK2gC,iBAAiBmqC,qEALFC,EAAAA,sBACM31D,EAAAA,oBAPjBy1D,EAAuB9pE,EAAA,CAJnCuI,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAA,kgJAEWqhE,oBCwBX,SAAAG,EACUrqC,EACAp1B,GADAvL,KAAA2gC,iBAAAA,EACA3gC,KAAAuL,aAAAA,EAjBVvL,KAAAwqE,kBAA8B,CAC5B,UACA,aACA,qBACA,oBACA,cAuCJ,OAxBEQ,EAAA9qE,UAAAiM,SAAA,WACEnM,KAAKirE,qBAAuBjrE,KAAK2gC,iBAAiBuqC,0BAGpDF,EAAA9qE,UAAAirE,mBAAA,SAAmBT,GAKjB,IAAI9kC,EAJJ5lC,KAAK2gC,iBAAiByqC,wBACpBprE,KAAKsuB,UACLo8C,EAAY71C,MAGd70B,KAAK6lC,SAAW7lC,KAAKuL,aAAab,KAAKmgE,GAAyB,CAC9D97D,UAAU,EACVC,KAAM,QAGR42B,EAAgB5lC,KAAK6lC,SAASC,mBAChBulC,UAAYrrE,KAAKirE,qBAC/BrlC,EAAc0lC,SAAWZ,EAAYa,WACrC3lC,EAAc4lC,gBAAkBd,EAAY71C,MAG9Cm2C,EAAA9qE,UAAAoO,YAAA,WACEtO,KAAK2gC,iBAAiBmqC,qEA1BI11D,EAAAA,wBACJ7K,KAPxBxJ,EAAA,CADCsI,EAAAA,2CAGDtI,EAAA,CADCsI,EAAAA,yCAZU2hE,EAA4BjqE,EAAA,CAJxCuI,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAA,mXAEWwhE,oBCLb,SAAAS,IAGEzrE,KAAA0hC,kBAAuCC,EAAAA,kBAAkBK,MAU3D,OAREypC,EAAAvrE,UAAAwrE,uBAAA,SAAuBhB,GACrB,IAAMiB,EAAyB,GAK/B,OAJAjB,EAAYhkD,QAAQ5d,SAAQ,SAAA2O,GAC1Bk0D,EAASvoE,KAAKqU,EAAQ6pC,eAGjBqqB,GAVA5qE,EAAA,CAARsI,EAAAA,4CACQtI,EAAA,CAARsI,EAAAA,qCAFUoiE,EAA8B1qE,EAAA,CAJ1CuI,EAAAA,UAAU,CACTC,SAAU,6BACVC,SAAA,22BAEWiiE,oBCMX,SAAAG,EACUtqC,EACAhvB,GADAtS,KAAAshC,oBAAAA,EACAthC,KAAAsS,YAAAA,EA8EZ,OAzEEs5D,EAAA1rE,UAAAiM,SAAA,WACEnM,KAAK+pE,OAAS/pE,KAAKshC,oBAAoBF,mBAGzCwqC,EAAA1rE,UAAA4yD,sBAAA,SAAsB3I,GACpB,OAAOt9C,EAAAA,cAAc,CACnB7M,KAAKsS,YAAY6hD,UAAU,wBAC1BrnD,KACDgO,EAAAA,KAAI,SAAC5N,GACH,MAAO,CACLwjB,MAFChtB,EAAAwJ,EAAA,GAAC,GAGF6lD,SAAa5I,EAAQyG,UAAS,IAAIzG,EAAQ0G,SAC1CmC,KAAM,CACJ7I,EAAQ2G,MACR3G,EAAQ4G,MACL5G,EAAQ6G,KAAI,KAAK7G,EAAQ8E,QAAQjU,QAAO,KAAKmP,EAAQ8G,WACxD9G,EAAQ8I,aAOlB2Y,EAAA1rE,UAAA2rE,6BAAA,SAA6Bxc,GAC3B,OAAOxiD,EAAAA,cAAc,CACnB7M,KAAKsS,YAAY6hD,UAAU,wBAC1BrnD,KACDgO,EAAAA,KAAI,SAAC5N,GACH,MAAO,CACLwjB,MAFChtB,EAAAwJ,EAAA,GAAC,GAGF6lD,SAAa1D,EAAeuB,UAAS,IAAIvB,EAAewB,SACxDmC,KAAM,CACJ3D,EAAeyB,MACfzB,EAAe0B,MACZ1B,EAAe2B,KAAI,KAAK3B,EAAeJ,QAAQjU,QAAO,KAAKqU,EAAe4B,WAC7E5B,EAAe4D,aAOzB2Y,EAAA1rE,UAAA4rE,sBAAA,SAAsBzb,GACpB,OAAOxjD,EAAAA,cAAc,CACnB7M,KAAKsS,YAAY6hD,UAAU,uBAC3Bn0D,KAAKsS,YAAY6hD,UAAU,sBAAuB,CAChDxB,MAAOtC,EAAQI,YACf4B,KAAMhC,EAAQK,eAEf5jD,KACDgO,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAAC6pD,EAAA5pD,EAAA,GAAWinD,EAAAjnD,EAAA,GACf,MAAO,CACLujB,MAAOqmC,EACPhE,SAAU1C,EAAQC,kBAClB0C,KAAM,CAAC3C,EAAQG,SAAStvC,KAAMmvC,EAAQE,WAAY6D,SAM1DwX,EAAA1rE,UAAA6rE,6BAAA,SAA6BC,GAC3B,OAAOn/D,EAAAA,cAAc,CACnB7M,KAAKsS,YAAY6hD,UAAU,qCAC1BrnD,KACDgO,EAAAA,KAAI,SAAC5N,GACH,MAAO,CACLwjB,MAFChtB,EAAAwJ,EAAA,GAAC,GAGF6lD,SAAUiZ,EAAS9qD,KACnB8xC,KAAM,CAACgZ,EAASr7C,4DA1EO+P,UACRrsB,EAAAA,sBAHZu3D,EAA4B7qE,EAAA,CAJxCuI,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAA,kgCAEWoiE,oBCNX,SAAAK,EAAsB3qC,GAAAthC,KAAAshC,oBAAAA,EAOxB,OAHE2qC,EAAA/rE,UAAAiM,SAAA,WACEnM,KAAK+pE,OAAS/pE,KAAKshC,oBAAoBF,4DALEV,MADhCurC,EAA0BlrE,EAAA,CAJtCuI,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAA,qQAEWyiE,oBCEX,SAAAC,EAAsB5qC,GAAAthC,KAAAshC,oBAAAA,EAEtBthC,KAAA+pE,OAA4B/pE,KAAKshC,oBAAoBF,kBACvD,gDAH6CV,MADhCwrC,EAA2BnrE,EAAA,CAJvCuI,EAAAA,UAAU,CACTC,SAAU,2BACVC,SAAA,siCAEW0iE,MCiBPC,GAAmB,CACvBD,GACApC,GACAI,GACA+B,GACAL,GACAf,GACAG,GACAS,OAiBY,CAAE9oD,UAAW,QAASiW,QAAS,cAAcwzC,GAM7C,CAAExzC,QAAS,gBAkCzByzC,GAAA,WAAA,SAAAA,KAAiC,OAApBA,EAAkBtrE,EAAA,CAtD9B2I,EAAAA,SAAS,CACRE,QAAS,CACPo4C,GACAnU,GACAhkC,EAAAA,aACAyF,EAAAA,WACAC,EAAAA,qBACAmuC,GACAxM,EAAAA,UACAD,EAAAA,aAAaq3B,SAAS,CACpB,CACEt3D,KAAM,KACNgK,YAAa,CAACkI,IACdzT,UAAWkR,GACXuB,KAAIoqD,IAEN,CACEt7D,KAAM,KACNgK,YAAa,CAAC0kD,EAAAA,UAAWx8C,IACzBzT,UAAWkR,GACXuB,KAAIkqD,MAGRx0B,IAEF9tC,UAAW,CACTC,EAAAA,qBAAiD,CAC/CyF,cAAe,CACb+8D,oCAAqC,CACnC98D,UAAWy8D,IAEbM,qCAAsC,CACpC/8D,UAAWq6D,IAEb2C,kCAAmC,CACjCh9D,UAAWy6D,IAEbwC,mCAAoC,CAClCj9D,UAAWw8D,IAEbU,qCAAsC,CACpCl9D,UAAWm8D,KAGf5mB,SAAU,CACR4nB,oBAAqB,SAGzBlsC,IAEF/2B,aAAY9F,EAAMsoE,IAClBhiE,QAAOtG,EAAMsoE,IACbt8D,gBAAehM,EAAMsoE,OAEVE,GAAb,iBC5EE,SAAAQ,EACU/5D,EACA6tB,EACAruB,GAHV,IAAA5J,EAAA1I,KACUA,KAAA8S,QAAAA,EACA9S,KAAA2gC,iBAAAA,EACA3gC,KAAAsS,YAAAA,EAGFtS,KAAA8sE,UAAY,EAGpB9sE,KAAA+sE,QAEI/sE,KAAK2gC,iBAAiBqsC,oBAAoBhtE,KAAK8sE,WAAWhgE,KAC5DG,EAAAA,KAAI,SAACmhB,GACCA,EAAOmkB,aACT7pC,EAAKukE,SAAW7+C,EAAOmkB,WAAWyL,UAKxCh+C,KAAAktE,UAEIltE,KAAK2gC,iBAAiBwsC,4BAM1BntE,KAAAuiE,eAAqCviE,KAAK+sE,QAAQjgE,KAChDgO,EAAAA,KAAI,SAAAynB,GAAS,OAAAA,EAAMgQ,WAAW66B,gBAC9B1tD,EAAAA,QAAO,SAAA0tD,GAAgB,YAAiBx2D,IAAjBw2D,KACvBrgE,EAAAA,KAAK,IAoDT,OAjDE8/D,EAAA3sE,UAAAoO,YAAA,WACEtO,KAAK2gC,iBAAiB0sC,kBAGxBR,EAAA3sE,UAAAotE,eAAA,SAAe/1B,GACb,IAAMz6B,EAAmD,CACvDy6B,SAAQA,EACRd,YAAa,GAEfz2C,KAAKitE,SAAW11B,EAChBv3C,KAAKutE,YAAYzwD,IAGnB+vD,EAAA3sE,UAAA+2C,WAAA,SAAWx4B,GACT,IAAM3B,EAAmD,CACvDy6B,SAAUv3C,KAAKitE,SACfx2B,YAAah4B,GAEfze,KAAKutE,YAAYzwD,IAGnB+vD,EAAA3sE,UAAAstE,gBAAA,SAAgBjrC,GACdviC,KAAK8S,QAAQ6lB,GAAG,CACdC,QAAS,eACTf,OAAQ0K,KAIZsqC,EAAA3sE,UAAAutE,cAAA,WACE,OAAO5gE,EAAAA,cAAc,CACnB7M,KAAKsS,YAAY6hD,UAAU,gBAC3Bn0D,KAAKsS,YAAY6hD,UAAU,yBAC1BrnD,KACDgO,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GACH,MAAO,CACLwgE,OAFEvgE,EAAA,GAGFwgE,cAHcxgE,EAAA,SASd0/D,EAAA3sE,UAAAqtE,YAAR,SAAoBzwD,GAClB9c,KAAK2gC,iBAAiBitC,cACpB5tE,KAAK8sE,UACLhwD,EAAM25B,YACN35B,EAAMy6B,oDA9ES1iC,EAAAA,sBACSO,EAAAA,wBACLf,EAAAA,sBAJZw4D,EAAqB9rE,EAAA,CALjCuI,EAAAA,UAAU,CACTC,SAAU,mBACVC,SAAA,guLACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BmrD,SCSC,CAAEj0C,QAAS,UAwBzBi1C,GAAA,WAAA,SAAAA,KAAiC,OAApBA,EAAkB9sE,EAAA,CAhC9B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAonC,EAAAA,aAAaq3B,SAAS,CACpB,CACEt3D,KAAM,KACNgK,YAAa,CAAC0kD,EAAAA,UAAWx8C,IACzBzT,UAAWkR,GACXuB,KAAI4rD,MAGR78B,EAAAA,aACAyG,EAAAA,YACAD,EAAAA,eACAD,GACAtG,EAAAA,UACA5hC,EAAAA,YAEF3F,aAAc,CAACkjE,IACf1iE,QAAS,CAAC0iE,IACV/iE,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbu+D,6BAA8B,CAC5Bt+D,UAAWo9D,GACXnzD,OAAQ,CAACgmD,EAAAA,gBAKjB7vD,gBAAiB,CAACg9D,OAEPgB,GAAb,iBClCE,SAAAG,EACY7qD,EACA0lD,EACAj+C,GAFA5qB,KAAAmjB,eAAAA,EACAnjB,KAAA6oE,qBAAAA,EACA7oE,KAAA4qB,qBAAAA,SAGZprB,OAAAiC,eAAIusE,EAAA9tE,UAAA,gBAAa,KAAjB,WACE,OAAOF,KAAK6oE,qBAAqBoF,iEAGnCzuE,OAAAiC,eAAIusE,EAAA9tE,UAAA,mBAAgB,KAApB,WACE,OAAOF,KAAK6oE,qBAAqBqF,iEAGnCF,EAAA9tE,UAAAiuE,iBAAA,WAAA,IAAAzlE,EAAA1I,KACE,OAAO6M,EAAAA,cAAc,CACnB7M,KAAKmjB,eAAeyU,iBACpB53B,KAAK6oE,qBAAqBK,wBAC1BlpE,KAAK6oE,qBAAqBuF,4BACzBthE,KACDgO,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACmhE,EAAAlhE,EAAA,GAAcg8D,EAAAh8D,EAAA,GAAeujC,EAAAvjC,EAAA,GAAe,MAAA,CAChDkhE,EAAazzD,MAAMid,OAAmB,WACtCsxC,EACAz4B,MAEFhxB,EAAAA,QAAO,SAACxS,OAAC2hB,EAADnrB,EAAAwJ,EAAA,GAAC,GAAgB,OAAAlB,QAAQ6iB,MACjC5hB,EAAAA,KAAI,SAACC,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAAC2hB,EAAA1hB,EAAA,GAAYg8D,EAAAh8D,EAAA,GAAeujC,EAAAvjC,EAAA,QAEVyJ,IAAlBuyD,GAA+BA,EAAcC,MAAQv6C,GACrD6hB,GAEDhoC,EAAKmgE,qBAAqByF,6BAA6Bz/C,MAG3D/T,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACC,EAAA,GAAsB,OAAnBA,EAAA,MACTuS,EAAAA,OAAO1T,SACPgB,EAAAA,yBAIJghE,EAAA9tE,UAAAquE,mBAAA,WACEvuE,KAAK6oE,qBAAqB2F,iCAG5BR,EAAA9tE,UAAAuuE,oBAAA,SAAoBC,GAClB1uE,KAAK6oE,qBAAqB8F,yBAAyBD,EAAmB,CACpE/D,OAAQ,gBAIZqD,EAAA9tE,UAAA0uE,cAAA,SAAcxF,GACZppE,KAAK6oE,qBAAqBgG,uCAC1B7uE,KAAK4qB,qBAAqBhe,IACxB,CACE1L,IAAK,8BACL22B,OAAQ,CAAEuxC,IAAGA,IAEf/9C,EAAAA,kBAAkBC,uBAEpBtrB,KAAKmjB,eAAewV,GAAG,CACrBC,QAAS,YAIbo1C,EAAA9tE,UAAA4uE,WAAA,WACE9uE,KAAKmjB,eAAewV,GAAG,CAAEC,QAAS,UAAY,KAAM,CAClDhe,MAAO,CACLm0D,UAAW,+CAlEWl6D,EAAAA,sBACMw0D,EAAAA,iCACAj1D,EAAAA,wOAJvB45D,EAAoBjtE,EAAA,CAHhCmH,EAAAA,WAAW,CACVC,WAAY,UAED6lE,oBCGX,SAAAgB,EAAsBnG,GAAtB,IAAAngE,EAAA1I,KAAsBA,KAAA6oE,qBAAAA,EAKtB7oE,KAAAivE,eAEIjvE,KAAK6oE,qBACNsF,mBACArhE,KAAKG,EAAAA,KAAI,SAAAk8D,GAAiB,OAACzgE,EAAK0gE,IAAMD,EAAcC,QAEvDppE,KAAAkvE,cAAgBlvE,KAAK6oE,qBAAqBqG,cAyB5C,OAvBEF,EAAA9uE,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAK+nB,aAAe/nB,KAAK6oE,qBAAqBsG,iBAAiBvhE,WAC7D,SAAA0xC,GACMA,GACF52C,EAAKmgE,qBAAqB+F,cAAclmE,EAAK0gE,SAMrD4F,EAAA9uE,UAAAkvE,aAAA,SAAaV,GACX1uE,KAAK6oE,qBAAqB4F,oBAAoBC,IAGhDM,EAAA9uE,UAAAwuD,KAAA,WACE1uD,KAAK6oE,qBAAqBiG,cAG5BE,EAAA9uE,UAAAoO,YAAA,WACMtO,KAAK+nB,cACP/nB,KAAK+nB,aAAaxZ,wDAjCsBy/D,MADjCgB,EAA8BjuE,EAAA,CAL1CuI,EAAAA,UAAU,CACTC,SAAU,6BACVC,SAAA,8+CACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BstD,oBCLX,SAAAK,EAAsBxG,GAAA7oE,KAAA6oE,qBAAAA,EAEtB7oE,KAAAivE,eAEIjvE,KAAK6oE,qBAAqBsF,mBAChC,gDAL8CH,MADjCqB,EAA2BtuE,EAAA,CALvCuI,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAA,mrHACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B2tD,oBCCX,SAAAC,EAAsBzG,GAAA7oE,KAAA6oE,qBAAAA,EAEtB7oE,KAAAivE,eAEIjvE,KAAK6oE,qBAAqBsF,mBAKhC,OAHEmB,EAAApvE,UAAAoO,YAAA,WACEtO,KAAK6oE,qBAAqB0F,+DAPgBP,MADjCsB,EAA4BvuE,EAAA,CALxCuI,EAAAA,UAAU,CACTC,SAAU,2BACVC,SAAA,2wCACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B4tD,MCQPxlD,GAAa,CACjBklD,GACAK,GACAC,OAWY,CAAE12C,QAAS,wBA4BzB22C,GAAA,WAAA,SAAAA,KAAwC,OAA3BA,EAAyBxuE,EAAA,CApCrC2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAonC,EAAAA,aAAaq3B,SAAS,CACpB,CACEt3D,KAAM,KACNgK,YAAa,CAAC0kD,EAAAA,UAAWx8C,IACzBzT,UAAWkR,GACXuB,KAAIstD,MAGRv+B,EAAAA,aACAC,EAAAA,UACA5hC,EAAAA,WACAyhC,GACAxhC,EAAAA,sBAEFzF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbw/D,+BAAgC,CAC9Bv/D,UAAWu/D,IAEbK,4BAA6B,CAC3B5/D,UAAW4/D,IAEbC,6BAA8B,CAC5B7/D,UAAW6/D,QAKnB3lE,aAAY9F,EAAMimB,IAClB3f,QAAOtG,EAAMimB,IACbja,gBAAehM,EAAMimB,OAEVylD,GAAb,iBC7CE,SAAAE,EACU5G,EACAv2D,GAFV,IAAA5J,EAAA1I,KACUA,KAAA6oE,qBAAAA,EACA7oE,KAAAsS,YAAAA,EAGFtS,KAAA8sE,UAAY,EAGpB9sE,KAAA0vE,gBAEI1vE,KAAK6oE,qBAAqB8G,0BAA0B3vE,KAAK8sE,WAAWhgE,KACtEG,EAAAA,KAAI,SAAC2iE,GACCA,EAAYr9B,aACd7pC,EAAKukE,SAAW2C,EAAYr9B,WAAWyL,UAS7Ch+C,KAAAuiE,eAAqCviE,KAAK0vE,gBAAgB5iE,KACxDgO,EAAAA,KAAI,SAAA+0D,GAAkB,OAAAA,EAAet9B,WAAW66B,gBAChD1tD,EAAAA,QAAO,SAAA0tD,GAAgB,YAAiBx2D,IAAjBw2D,KACvBrgE,EAAAA,KAAK,IAgDT,OA7CE0iE,EAAAvvE,UAAAoO,YAAA,WACEtO,KAAK6oE,qBAAqBiH,+BAG5BL,EAAAvvE,UAAAotE,eAAA,SAAe/1B,GACb,IAAMz6B,EAAmD,CACvDy6B,SAAQA,EACRd,YAAa,GAEfz2C,KAAKitE,SAAW11B,EAChBv3C,KAAK+vE,oBAAoBjzD,IAG3B2yD,EAAAvvE,UAAA+2C,WAAA,SAAWx4B,GACT,IAAM3B,EAAmD,CACvDy6B,SAAUv3C,KAAKitE,SACfx2B,YAAah4B,GAEfze,KAAK+vE,oBAAoBjzD,IAG3B2yD,EAAAvvE,UAAAutE,cAAA,WACE,OAAO5gE,EAAAA,cAAc,CACnB7M,KAAKsS,YAAY6hD,UAAU,gBAC3Bn0D,KAAKsS,YAAY6hD,UAAU,iBAC1BrnD,KACDgO,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GACH,MAAO,CACLwgE,OAFEvgE,EAAA,GAGF6iE,MAHc7iE,EAAA,SASdsiE,EAAAvvE,UAAA6vE,oBAAR,SAA4BjzD,GAI1B9c,KAAK6oE,qBAAqBoH,2BACxBjwE,KAAK8sE,UACLhwD,EAAM25B,YACN35B,EAAMy6B,oDArEsB8xB,EAAAA,iCACTh1D,EAAAA,sBAHZo7D,EAA+B1uE,EAAA,CAL3CuI,EAAAA,UAAU,CACTC,SAAU,+BACVC,SAAA,0jJACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B+tD,oBCqBb,SAAAS,KAAsC,OAAzBA,EAAuBnvE,EAAA,CAtBnC2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAonC,EAAAA,aACAuG,GACAtG,EAAAA,UACA5hC,EAAAA,YAEFxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbigE,gCAAiC,CAC/BhgE,UAAWggE,GACX/1D,OAAQ,CAACgmD,EAAAA,gBAKjB/1D,aAAc,CAAC8lE,IACftlE,QAAS,CAACslE,IACV5/D,gBAAiB,CAAC4/D,OAEPS,oBCfb,SAAAC,KAA0B,OAAbA,EAAWpvE,EAAA,CAVvB2I,EAAAA,SAAS,CACRE,QAAS,CACPikE,GACAxB,GACA1D,GACAkB,GACAqG,GACAX,OAGSY,oBCCX,SAAAC,EACU9mB,EACAh3C,GADAtS,KAAAspD,mBAAAA,EACAtpD,KAAAsS,YAAAA,EALVtS,KAAA4L,UAAYxL,EAAAA,UAyGd,OAjGEgwE,EAAAlwE,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAKqwE,gBAAkBrwE,KAAKspD,mBAAmBkB,oBAAoB19C,KACjEG,EAAAA,KAAI,SAAAomD,GAGAA,EAAezyD,OAAS,IACvByyD,EAAetsD,MAAK,SAAAupE,GAAiB,OAAAA,EAAcxlB,mBAEpDpiD,EAAK6nE,wBAAwBld,EAAe,QAKlDrzD,KAAKitC,SAAW,KAChBjtC,KAAKwM,SAAWxM,KAAKspD,mBAAmBqK,2BACxC3zD,KAAKspD,mBAAmBqB,sBAG1BylB,EAAAlwE,UAAAg0D,eAAA,SAAehnD,GAAf,IAAAxE,EAAA1I,KACE8qD,EAAA59C,EAAA49C,eACAwF,EAAApjD,EAAAojD,kBACAG,EAAAvjD,EAAAujD,YACAC,EAAAxjD,EAAAwjD,WACAH,EAAArjD,EAAAqjD,WACAC,EAAAtjD,EAAAsjD,SAEA,OAAO3jD,EAAAA,cAAc,CACnB7M,KAAKsS,YAAY6hD,UAAU,4BAC3Bn0D,KAAKsS,YAAY6hD,UAAU,iBAC3Bn0D,KAAKsS,YAAY6hD,UAAU,kCAC3Bn0D,KAAKsS,YAAY6hD,UAAU,sBAAuB,CAChDxB,MAAOlC,EACP4B,KAAM3B,IAER1wD,KAAKsS,YAAY6hD,UAAU,sCAC1BrnD,KACDgO,EAAAA,KACE,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GACCsjE,EAAArjE,EAAA,GACA42D,EAAA52D,EAAA,GACAsjE,EAAAtjE,EAAA,GACAinD,EAAAjnD,EAAA,GACAmnD,EAAAnnD,EAAA,GAEMkoD,EAA6C,GAcnD,OAbKvK,GACHuK,EAAQjyD,KAAK,CAAE8d,KAAMsvD,EAAkB1zD,MAAO,YAEhDu4C,EAAQjyD,KAAK,CAAE8d,KAAM6iD,EAAYjnD,MAAO,SACrB,CACjBw4C,OAAQxK,EAAiBwJ,EAA2B,KACpDvB,SAAUzC,EACV0C,KAAM,CAACzC,EAAY6D,GACnBiB,QAAOA,EACP6O,UAAWuM,EACXrb,IAAK1sD,EAAKssD,YAAYxE,EAAS37B,YASzCu7C,EAAAlwE,UAAAwwE,oBAAA,SAAoBC,GAClB3wE,KAAKspD,mBAAmBonB,oBAAoBC,EAAchjE,IAC1D3N,KAAKitC,SAAW,MAGlBmjC,EAAAlwE,UAAAokE,QAAA,SAAQqM,GACN3wE,KAAKitC,SAAW0jC,EAAchjE,IAGhCyiE,EAAAlwE,UAAAgtC,WAAA,WACEltC,KAAKitC,SAAW,MAGlBmjC,EAAAlwE,UAAAqwE,wBAAA,SAAwBI,GACtB3wE,KAAKspD,mBAAmBsnB,0BAA0BD,EAAchjE,KAGlEyiE,EAAAlwE,UAAA80D,YAAA,SAAYngC,GAcV,MAZa,SAATA,EACO70B,KAAK4L,UAAU5G,KACN,WAAT6vB,GAA8B,wBAATA,EACrB70B,KAAK4L,UAAU3G,YACN,WAAT4vB,EACA70B,KAAK4L,UAAUzG,YACN,SAAT0vB,EACA70B,KAAK4L,UAAU1G,KAEflF,KAAK4L,UAAUxG,sDAhGEiQ,EAAAA,0BACPhB,EAAAA,sBARZ+7D,EAAuBrvE,EAAA,CAJnCuI,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAA,w0CAEW4mE,oBCab,SAAAS,KAAmC,OAAtBA,EAAoB9vE,EAAA,CAhBhC2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcgkC,GAAY+J,GAAetoC,EAAAA,YACnDxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbshE,+BAAgC,CAC9BrhE,UAAW2gE,GACX12D,OAAQ,CAACgmD,EAAAA,gBAKjB/1D,aAAc,CAACymE,IACfjmE,QAAS,CAACimE,IACVvgE,gBAAiB,CAACugE,OAEPS,oBCGX,SAAAE,EACUjzC,EACA3a,EACAkW,GAFAr5B,KAAA89B,GAAAA,EACA99B,KAAAmjB,eAAAA,EACAnjB,KAAAq5B,YAAAA,EAjBVr5B,KAAA+nB,aAAe,IAAIrc,EAAAA,aACnB1L,KAAAolE,UAAW,EAEXplE,KAAAs9B,KAAkBt9B,KAAK89B,GAAGI,MACxB,CACE/D,SAAU,CACR,GACA,CAACgE,EAAAA,WAAWC,SAAUge,GAAqBM,oBAE7Cs0B,WAAY,CAAC,GAAI,CAAC7yC,EAAAA,WAAWC,YAE/B,CAAE6yC,UAAWjxE,KAAK68C,gBA8CtB,OArCEk0B,EAAA7wE,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAK+nB,aAAanb,IAChB5M,KAAKmjB,eACFyU,iBACAhqB,WAAU,SAAAgN,GAAS,OAAClS,EAAK6vB,MAAQ3d,EAAMA,MAAMi8B,YAAmB,UAGrE72C,KAAK+nB,aAAanb,IAChB5M,KAAKq5B,YAAY63C,kBAAkBtjE,WAAU,SAAA8xC,GACvCA,GACFh3C,EAAKya,eAAewV,GAAG,CAAEC,QAAS,eAM1Cm4C,EAAA7wE,UAAAoO,YAAA,WACMtO,KAAK+nB,cACP/nB,KAAK+nB,aAAaxZ,eAItBwiE,EAAA7wE,UAAAmtB,cAAA,WAEE,GADArtB,KAAKolE,UAAW,GACZplE,KAAKs9B,KAAKI,QAAd,CAIA,IAAMvD,EAAWn6B,KAAKs9B,KAAKp6B,MAAgB,SAC3ClD,KAAKq5B,YAAYhM,cAAcrtB,KAAKu4B,MAAO4B,KAGrC42C,EAAA7wE,UAAA28C,cAAR,SAAsBs0B,GACpB,GAAIA,EAAG35D,IAAI,YAAYtU,QAAUiuE,EAAG35D,IAAI,cAActU,MACpD,MAAO,CAAE45C,UAAU,6CAvCTte,EAAAA,mBACY3pB,EAAAA,sBACHI,EAAAA,eAnBZ87D,EAA0BhwE,EAAA,CAJtCuI,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,skEAEWunE,oBCmBb,SAAAK,KAAkC,OAArBA,EAAmBrwE,EAAA,CAtB/B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACA6tC,EAAAA,YACAlX,EAAAA,oBACAyQ,EAAAA,aACA3hC,EAAAA,YAEFxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb6hE,uBAAwB,CACtB5hE,UAAWshE,GACXr3D,OAAQ,CAAC8rD,EAAAA,mBAKjB77D,aAAc,CAAConE,IACf5mE,QAAS,CAAC4mE,IACVlhE,gBAAiB,CAACkhE,OAEPK,oBCEX,SAAAE,EAAoBxzC,GAAA99B,KAAA89B,GAAAA,EApBpB99B,KAAAolE,UAAW,EAGXplE,KAAAuxE,UAAY,IAAIzpD,EAAAA,aAMhB9nB,KAAAwxE,YAAc,IAAI1pD,EAAAA,aAElB9nB,KAAAs9B,KAAkBt9B,KAAK89B,GAAGI,MACxB,CACEuzC,MAAO,CAAC,GAAI,CAACtzC,EAAAA,WAAWC,SAAUge,GAAqBI,iBACvDk1B,aAAc,CAAC,GAAI,CAACvzC,EAAAA,WAAWC,WAC/BjE,SAAU,CAAC,GAAI,CAACgE,EAAAA,WAAWC,YAE7B,CAAE6yC,UAAWjxE,KAAK2xE,aAwCtB,OAnCEL,EAAApxE,UAAA0xE,uBAAA,SAAuBr0C,GACrB,OACEv9B,KAAKs9B,KAAKu0C,SAAS,cAClB7xE,KAAKolE,UACHplE,KAAKs9B,KAAK9lB,IAAI+lB,GAAiBI,SAC9B39B,KAAKs9B,KAAK9lB,IAAI+lB,GAAiBK,QAIvC0zC,EAAApxE,UAAAq+B,WAAA,SAAWhB,GACT,OAAOH,GAAUC,gBAAgBr9B,KAAKs9B,KAAMC,EAAiBv9B,KAAKolE,WAGpEkM,EAAApxE,UAAAm+B,SAAA,WAGE,GAFAr+B,KAAKolE,UAAW,GAEZplE,KAAKs9B,KAAKI,QAAd,CAIA,IAAMo0C,EAAS9xE,KAAKs9B,KAAKp6B,MAAMwuE,aACzBv3C,EAAWn6B,KAAKs9B,KAAKp6B,MAAMi3B,SAEjCn6B,KAAKuxE,UAAUhpD,KAAK,CAAEupD,OAAMA,EAAE33C,SAAQA,MAGxCm3C,EAAApxE,UAAA6xE,SAAA,WACE/xE,KAAKwxE,YAAYjpD,QAGX+oD,EAAApxE,UAAAyxE,WAAR,SAAmBR,GACjB,GAAIA,EAAG35D,IAAI,SAAStU,QAAUiuE,EAAG35D,IAAI,gBAAgBtU,MACnD,MAAO,CAAE45C,UAAU,6CAlCCte,EAAAA,eAjBxBz9B,EAAA,CADCooB,EAAAA,0CAODpoB,EAAA,CADCooB,EAAAA,4CATUmoD,EAAwBvwE,EAAA,CAJpCuI,EAAAA,UAAU,CACTC,SAAU,uBACVC,SAAA,2vFAEW8nE,oBCAX,SAAAU,EACU7uD,EACAyH,EACAyO,EACAlB,GAHAn4B,KAAAmjB,eAAAA,EACAnjB,KAAA4qB,qBAAAA,EACA5qB,KAAAq5B,YAAAA,EACAr5B,KAAAm4B,YAAAA,EAGFn4B,KAAA+nB,aAAe,IAAIrc,EAAAA,aA6C7B,OAzCEsmE,EAAA9xE,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAKq5B,YAAY44C,8BACjBjyE,KAAK+nB,aAAanb,IAChB5M,KAAKq5B,YACF64C,8BACAtkE,WAAU,SAAA0xC,GAAW,OAAA52C,EAAK62C,UAAUD,OAEzCt/C,KAAK0zD,WAAa1zD,KAAKq5B,YAAY84C,+BAGrCH,EAAA9xE,UAAA6xE,SAAA,WACE/xE,KAAKmjB,eAAewV,GAAG,CAAEC,QAAS,UAGpCo5C,EAAA9xE,UAAAm+B,SAAA,SAASnxB,OAAE4kE,EAAA5kE,EAAA4kE,OAAQ33C,EAAAjtB,EAAAitB,SACjBn6B,KAAK8xE,OAASA,EACd9xE,KAAKq5B,YAAY+4C,YAAYj4C,EAAU23C,IAGzCE,EAAA9xE,UAAAq/C,UAAA,SAAUD,GACJA,IACFt/C,KAAK4qB,qBAAqBhe,IACxB,CACE1L,IAAK,qCACL22B,OAAQ,CAAEi6C,OAAQ9xE,KAAK8xE,SAEzBzmD,EAAAA,kBAAkBC,uBAEpBtrB,KAAKm4B,YAAY7K,SACjBttB,KAAKmjB,eAAewV,GAAG,CAAEC,QAAS,SAAW,KAAM,CACjDhe,MAAO,CACLk3D,OAAQ9xE,KAAK8xE,YAMrBE,EAAA9xE,UAAAoO,YAAA,WACEtO,KAAK+nB,aAAaxZ,cAClBvO,KAAKq5B,YAAY44C,wEAjDOp9D,EAAAA,sBACMT,EAAAA,4BACTa,EAAAA,mBACAtB,EAAAA,eALZq+D,EAAoBjxE,EAAA,CAJhCuI,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,ggBAEWwoE,oBCqBb,SAAAK,KAAgC,OAAnBA,EAAiBtxE,EAAA,CAtB7B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACA6tC,EAAAA,YACAlX,EAAAA,oBACAoX,GACAtoC,EAAAA,YAEFxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbwiE,qBAAsB,CACpBviE,UAAWuiE,GACXt4D,OAAQ,CAACgmD,EAAAA,gBAKjB/1D,aAAc,CAAC2nE,GAA0BU,IACzC7nE,QAAS,CAAC6nE,GAAsBV,IAChCzhE,gBAAiB,CAACmiE,OAEPK,oBCXX,SAAAC,EAAoBx0C,GAAA99B,KAAA89B,GAAAA,EATZ99B,KAAA+9B,eAAgB,EAIxB/9B,KAAAolE,SAAW,IAAIt9C,EAAAA,aAGf9nB,KAAAuyE,UAAY,IAAIzqD,EAAAA,aA4DlB,OAxDEwqD,EAAApyE,UAAAiM,SAAA,WACEnM,KAAKs9B,KAAOt9B,KAAK89B,GAAGI,MAClB,CACEs0C,YAAa,CAAC,GAAI,CAACr0C,EAAAA,WAAWC,WAC9Bq0C,YAAa,CACX,GACA,CAACt0C,EAAAA,WAAWC,SAAUge,GAAqBM,oBAE7Cg2B,mBAAoB,CAAC,GAAI,CAACv0C,EAAAA,WAAWC,YAEvC,CAAE6yC,UAAWjxE,KAAK68C,iBAItBy1B,EAAApyE,UAAAq+B,WAAA,SAAWhB,GACT,OAAOH,GAAUC,gBACfr9B,KAAKs9B,KACLC,EACAv9B,KAAK+9B,gBAITu0C,EAAApyE,UAAAyyE,0BAAA,WACE,OACE3yE,KAAKs9B,KAAKu0C,SAAS,cAClB7xE,KAAK+9B,eACH/9B,KAAKs9B,KAAK9lB,IAAI,sBAAsBmmB,SACnC39B,KAAKs9B,KAAK9lB,IAAI,sBAAsBomB,QAI5C00C,EAAApyE,UAAAm+B,SAAA,WACEr+B,KAAK+9B,eAAgB,EACjB/9B,KAAKs9B,KAAKI,SAId19B,KAAKolE,SAAS78C,KAAK,CACjBiqD,YAAaxyE,KAAKs9B,KAAKp6B,MAAMsvE,YAC7BC,YAAazyE,KAAKs9B,KAAKp6B,MAAMuvE,eAIjCH,EAAApyE,UAAA6xE,SAAA,WACE/xE,KAAKuyE,UAAUhqD,QAGT+pD,EAAApyE,UAAA28C,cAAR,SAAsB+1B,GACpB,OACEA,EAAgBp7D,IAAI,eAAetU,QACnC0vE,EAAgBp7D,IAAI,sBAAsBtU,MAEnC,CAAE45C,UAAU,GAEd,+CAxDete,EAAAA,eALxBz9B,EAAA,CADCooB,EAAAA,yCAIDpoB,EAAA,CADCooB,EAAAA,0CAPUmpD,EAA2BvxE,EAAA,CAJvCuI,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAA,+2FAEW8oE,oBCGX,SAAAO,EACU1vD,EACAkW,EACAzO,GAFA5qB,KAAAmjB,eAAAA,EACAnjB,KAAAq5B,YAAAA,EACAr5B,KAAA4qB,qBAAAA,EANF5qB,KAAA+nB,aAAe,IAAIrc,EAAAA,aAgD7B,OAvCEmnE,EAAA3yE,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAKq5B,YAAYy5C,kCACjB9yE,KAAKwM,SAAWxM,KAAKq5B,YAAY05C,iCACjC/yE,KAAK+nB,aAAanb,IAChB5M,KAAKq5B,YACF25C,iCACAplE,WAAU,SAAA0xC,GAAW,OAAA52C,EAAK62C,UAAUD,QAI3CuzB,EAAA3yE,UAAAq/C,UAAA,SAAUD,GACJA,IACFt/C,KAAK4qB,qBAAqBhe,IACxB,CAAE1L,IAAK,4CACPmqB,EAAAA,kBAAkBC,uBAEpBtrB,KAAKmjB,eAAewV,GAAG,CAAEC,QAAS,WAItCi6C,EAAA3yE,UAAA6xE,SAAA,WACE/xE,KAAKmjB,eAAewV,GAAG,CAAEC,QAAS,UAGpCi6C,EAAA3yE,UAAAm+B,SAAA,SAASnxB,OACPslE,EAAAtlE,EAAAslE,YACAC,EAAAvlE,EAAAulE,YAKAzyE,KAAKq5B,YAAY45C,eAAeT,EAAaC,IAG/CI,EAAA3yE,UAAAoO,YAAA,WACEtO,KAAK+nB,aAAaxZ,cAElBvO,KAAKq5B,YAAYy5C,4EA1COj+D,EAAAA,sBACHI,EAAAA,mBACSb,EAAAA,wBAPrBy+D,EAAuB9xE,EAAA,CAJnCuI,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAA,8fAEWqpE,oBCsBb,SAAAK,KAAmC,OAAtBA,EAAoBnyE,EAAA,CAtBhC2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACA6tC,EAAAA,YACAlX,EAAAA,oBACAoX,GACAtoC,EAAAA,YAEFxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbqjE,wBAAyB,CACvBpjE,UAAWojE,GACXn5D,OAAQ,CAACgmD,EAAAA,gBAKjB/1D,aAAc,CAACkpE,GAAyBP,IACxCnoE,QAAS,CAAC0oE,GAAyBP,IACnCziE,gBAAiB,CAACgjE,OAEPK,oBCLX,SAAAC,EAAoBr1C,GAAA99B,KAAA89B,GAAAA,EAbpB99B,KAAAolE,SAAW,IAAIt9C,EAAAA,aAGf9nB,KAAAuyE,UAAY,IAAIzqD,EAAAA,aAEhB9nB,KAAAs9B,KAAOt9B,KAAK89B,GAAGI,MAAM,CACnBw5B,UAAW,CAAC,IACZ9G,UAAW,CAAC,GAAIzyB,EAAAA,WAAWC,UAC3ByyB,SAAU,CAAC,GAAI1yB,EAAAA,WAAWC,YAGpBp+B,KAAA+9B,eAAgB,EAgC1B,OA5BEo1C,EAAAjzE,UAAAiM,SAAA,WACMnM,KAAKkT,MACPlT,KAAKs9B,KAAK86B,WAAWp4D,KAAKkT,OAI9BigE,EAAAjzE,UAAAq+B,WAAA,SAAWhB,GACT,OAAOH,GAAUC,gBACfr9B,KAAKs9B,KACLC,EACAv9B,KAAK+9B,gBAITo1C,EAAAjzE,UAAAm+B,SAAA,WACEr+B,KAAK+9B,eAAgB,EACjB/9B,KAAKs9B,KAAKI,SAId19B,KAAKolE,SAAS78C,KAAK,CACjB6qD,YAAW/yE,EAAA,GAAOL,KAAKs9B,KAAKp6B,UAIhCiwE,EAAAjzE,UAAA6xE,SAAA,WACE/xE,KAAKuyE,UAAUhqD,iDA5BOiW,EAAAA,eAnBxBz9B,EAAA,CADCsI,EAAAA,oCAIDtI,EAAA,CADCsI,EAAAA,sCAIDtI,EAAA,CADCooB,EAAAA,yCAIDpoB,EAAA,CADCooB,EAAAA,0CAVUgqD,EAA0BpyE,EAAA,CAJtCuI,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,g/EAEW2pE,oBCcX,SAAAE,EACUlwD,EACAkW,EACAzO,GAFA5qB,KAAAmjB,eAAAA,EACAnjB,KAAAq5B,YAAAA,EACAr5B,KAAA4qB,qBAAAA,EATF5qB,KAAA+nB,aAAe,IAAIrc,EAAAA,aAyD7B,OA7CE2nE,EAAAnzE,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KAEEA,KAAKq5B,YAAYi6C,4CAEjBtzE,KAAKuzE,MAAQvzE,KAAKq5B,YAAY7hB,MAC9BxX,KAAK43D,QAAU53D,KAAKq5B,YAAYw+B,YAAY/qD,KAC1CG,EAAAA,KAAI,SAAA6qD,GACiC,IAA/Bt4D,OAAOigB,KAAKq4C,GAAQl3D,QACtB8H,EAAK2wB,YAAY0+B,iBAIvB/3D,KAAKwM,SAAWxM,KAAKq5B,YAAYm6C,wCAEjCxzE,KAAK+nB,aAAanb,IAChB5M,KAAKq5B,YACFo6C,wCACA7lE,WAAU,SAAA0xC,GAAW,OAAA52C,EAAK62C,UAAUD,QAI3C+zB,EAAAnzE,UAAAq/C,UAAA,SAAUD,GACJA,IACFt/C,KAAK4qB,qBAAqBhe,IACxB,CAAE1L,IAAK,0CACPmqB,EAAAA,kBAAkBC,uBAEpBtrB,KAAKmjB,eAAewV,GAAG,CAAEC,QAAS,WAItCy6C,EAAAnzE,UAAA6xE,SAAA,WACE/xE,KAAKmjB,eAAewV,GAAG,CAAEC,QAAS,UAGpCy6C,EAAAnzE,UAAAm+B,SAAA,SAASnxB,OAAEkmE,EAAAlmE,EAAAkmE,YACTpzE,KAAKq5B,YAAYq6C,sBAAsBN,IAGzCC,EAAAnzE,UAAAoO,YAAA,WACEtO,KAAK+nB,aAAaxZ,cAGlBvO,KAAKq5B,YAAYi6C,sFAhDOz+D,EAAAA,sBACHI,EAAAA,mBACSb,EAAAA,wBAVrBi/D,EAAsBtyE,EAAA,CAJlCuI,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAA,4mBAEW6pE,oBCmBb,SAAAM,KAAkC,OAArBA,EAAmB5yE,EAAA,CAtB/B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACA6tC,EAAAA,YACAlX,EAAAA,oBACAoX,GACAtoC,EAAAA,YAEFxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb6jE,uBAAwB,CACtB5jE,UAAW4jE,GACX35D,OAAQ,CAACgmD,EAAAA,gBAKjB/1D,aAAc,CAAC0pE,GAAwBF,IACvChpE,QAAS,CAACkpE,GAAwBF,IAClCtjE,gBAAiB,CAACwjE,OAEPM,oBCZX,SAAAC,EACYzwD,EACA7Q,GADAtS,KAAAmjB,eAAAA,EACAnjB,KAAAsS,YAAAA,EALOtS,KAAA6zE,UAAY,aACZ7zE,KAAA8zE,qBAAuB,8BAO1CF,EAAA1zE,UAAA6zE,iBAAA,SAAiBj0B,GACf9/C,KAAKmjB,eAAewV,GAClB,CACEC,QAAS,SACTf,OAAQ,CAAE8H,MAAO3/B,KAAKg0E,iBAAiBl0B,KAEzC,CAAEm0B,WAAYn0B,EAAOC,YAIjB6zB,EAAA1zE,UAAA8zE,iBAAR,SAAyBl0B,GACvB,OAAOA,EAAOo0B,sBACVl0E,KAAK6zE,UACL7zE,KAAK6zE,UAAY7zE,KAAK8zE,qBAAuBh0B,EAAOC,UAG1D6zB,EAAA1zE,UAAAutE,cAAA,WAME,OAAO5gE,EAAAA,cAAc,CACnB7M,KAAKsS,YAAY6hD,UAAU,0BAC3Bn0D,KAAKsS,YAAY6hD,UAAU,2BAC3Bn0D,KAAKsS,YAAY6hD,UAAU,wBAC3Bn0D,KAAKsS,YAAY6hD,UAAU,2BAC1BrnD,KACDgO,EAAAA,KACE,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAMC,MAAO,CACLinE,eANFhnE,EAAA,GAOEinE,gBANFjnE,EAAA,GAOEknE,aANFlnE,EAAA,GAOEmnE,cANFnnE,EAAA,kDArCoB0H,EAAAA,sBACHR,EAAAA,yLAbdu/D,EAAyB7yE,EAAA,CAHrCmH,EAAAA,WAAW,CACVC,WAAY,UAEDyrE,oBCgDX,SAAAW,EACYC,EACAC,GADAz0E,KAAAw0E,cAAAA,EACAx0E,KAAAy0E,0BAAAA,EA1CZz0E,KAAA4L,UAAYxL,EAAAA,UAEJJ,KAAAyL,cAAgB,IAAIC,EAAAA,aAEpB1L,KAAA8sE,UAAY,GACZ9sE,KAAA00E,YAAc,CACpBP,eAAgB,gBAChBC,gBAAiB,iBACjBC,aAAc,cACdC,cAAe,gBAEjBt0E,KAAAg+C,KAAO,iBAEPh+C,KAAA20E,YAAc,CACZ,CACE9/C,KAAM,iBACN2hC,UAAU,GAEZ,CACE3hC,KAAM,kBACN2hC,UAAU,GAEZ,CACE3hC,KAAM,eACN2hC,UAAU,GAEZ,CACE3hC,KAAM,gBACN2hC,UAAU,IAoGhB,OAnFE+d,EAAAr0E,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAKw0E,cAAc71B,oBAAoB3+C,KAAK8sE,WAC5C9sE,KAAK40E,cAAgB50E,KAAKw0E,cACvB31B,mBAAmB7+C,KAAK8sE,WACxBhgE,KACCG,EAAAA,KACE,SAAA6hB,GACE,OAACpmB,EAAK6pC,WAAa,CACjBkE,YAAa3nB,EAAQyjB,WAAW9zB,KAChCmhB,SAAU9Q,EAAQyjB,WAAWuD,MAC7BU,WAAY1nB,EAAQyjB,WAAWiE,WAC/B42B,aAAct+C,EAAQyjB,WAAWsiC,WACjC72B,KAAMt1C,EAAKs1C,UAIrBh+C,KAAK80E,gBAAkB90E,KAAKw0E,cAAcO,4BAC1C/0E,KAAKg1E,2BAA6BnoE,EAAAA,cAAc,CAC9C7M,KAAKw0E,cAAcS,0CACnBj1E,KAAKw0E,cAAcU,8CAClBpoE,KACDgO,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACioE,EAAAhoE,EAAA,GAAaioE,EAAAjoE,EAAA,GAAmB,OAAAgoE,GAAeC,MAEvDp1E,KAAKq1E,WAAar1E,KAAKy0E,0BAA0BhH,gBAEjDztE,KAAKyL,cACFmB,IACC5M,KAAKw0E,cACFc,wCACA1nE,WAAU,SAAAhK,GACT8E,EAAK6sE,iBAAiB3xE,OAG3BgJ,IACC5M,KAAKw0E,cACFgB,0CACA5nE,WAAU,SAAAhK,GACT8E,EAAK6sE,iBAAiB3xE,QAKxB2wE,EAAAr0E,UAAAq1E,iBAAR,SAAyB3xE,GACnBA,GACF5D,KAAKw0E,cAAc71B,oBAAoB3+C,KAAK8sE,YAIhDyH,EAAAr0E,UAAAu1E,WAAA,SAAWz3B,GACTh+C,KAAKg+C,KAAOA,EAEZh+C,KAAKw0E,cAAc71B,oBACjB3+C,KAAK8sE,UACL9sE,KAAKuyC,WAAWkE,YAChBz2C,KAAK00E,YAAY12B,KAIrBu2B,EAAAr0E,UAAA+2C,WAAA,SAAWx4B,GACTze,KAAKw0E,cAAc71B,oBACjB3+C,KAAK8sE,UACLruD,EACAze,KAAK00E,YAAY10E,KAAKg+C,QAI1Bu2B,EAAAr0E,UAAAw1E,mBAAA,SAAmBxoE,OACjB6yC,EAAA7yC,EAAA6yC,SACA7yC,EAAAyoE,aAME31E,KAAKw0E,cAAcoB,wBAAwB71B,GAE3C//C,KAAKw0E,cAAcqB,0BAA0B91B,IAIjDw0B,EAAAr0E,UAAAoO,YAAA,WACEtO,KAAKyL,cAAc8C,wDArFMgyC,EAAAA,6BACYqzB,MA/C5BW,EAAkBxzE,EAAA,CAJ9BuI,EAAAA,UAAU,CACTC,SAAU,gBACVC,SAAA,wjGAEW+qE,oBCCX,SAAAuB,EAAsBvqE,GAAAvL,KAAAuL,aAAAA,EANtBvL,KAAA4L,UAAYxL,EAAAA,UAWd,OAHE01E,EAAA51E,UAAAmkC,aAAA,SAAap5B,GACXjL,KAAKuL,aAAaP,mBAAmBC,6CAHHV,KAFpCxJ,EAAA,CADCs/B,EAAAA,UAAU,SAAU,CAAEsE,KAAMx7B,EAAAA,2CAJlB2sE,EAAqB/0E,EAAA,CAJjCuI,EAAAA,UAAU,CACTC,SAAU,mBACVC,SAAA,uhDAEWssE,oBCiBX,SAAAC,EACYxqE,EACAkpE,GADAz0E,KAAAuL,aAAAA,EACAvL,KAAAy0E,0BAAAA,EAPZz0E,KAAAg2E,oBAAsB,IAAIluD,EAAAA,aA+B5B,OArBEiuD,EAAA71E,UAAA+1E,qBAAA,WACEj2E,KAAKg2E,oBAAoBztD,KAAK,CAC5Bw3B,SAAU//C,KAAK8/C,OAAOC,SACtB41B,cAAe31E,KAAK8/C,OAAOo2B,kBAI/BH,EAAA71E,UAAAi2E,SAAA,WAEEn2E,KAAK6lC,SAAW7lC,KAAKuL,aAAab,KAAKorE,GAAuB,CAC5D/mE,UAAU,EACVC,KAAM,OAGQhP,KAAK6lC,SAASC,kBAChBga,OAAS9/C,KAAK8/C,QAG9Bi2B,EAAA71E,UAAAk2E,aAAA,WACEp2E,KAAKy0E,0BAA0BV,iBAAiB/zE,KAAK8/C,kDAvB7Bv1C,SACaqpE,MAZ9B7yE,EAAA,CAARsI,EAAAA,sCACQtI,EAAA,CAARsI,EAAAA,0DAIDtI,EAAA,CADCooB,EAAAA,oDALU4sD,EAAmBh1E,EAAA,CAJ/BuI,EAAAA,UAAU,CACTC,SAAU,iBACVC,SAAA,68DAEWusE,oBCCX,SAAAM,EACY7B,EACArxD,EACAmzD,GAFAt2E,KAAAw0E,cAAAA,EACAx0E,KAAAmjB,eAAAA,EACAnjB,KAAAs2E,eAAAA,EAiCd,OA9BED,EAAAn2E,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAKmjB,eACFyU,iBACAhqB,WAAU,SAAA2oE,GACT,IAAMvnD,EAAaunD,EAAE37D,MAAMid,OAAO7I,WAC9BA,GACFtmB,EAAK8rE,cAAcgC,oBAAoBxnD,GACvCtmB,EAAKqf,aAAerf,EAAK8rE,cACtBiC,sCACA7oE,WAAU,SAAA0xC,GACLA,GACF52C,EAAK4tE,eAAe1pE,IAClB,CAAE1L,IAAK,iCACPmqB,EAAAA,kBAAkBC,uBAGtB5iB,EAAKya,eAAewV,GAAG,CAAEC,QAAS,gBAGtClwB,EAAKya,eAAewV,GAAG,CAAEC,QAAS,gBAGrCrqB,eAGL8nE,EAAAn2E,UAAAoO,YAAA,WACMtO,KAAK+nB,cACP/nB,KAAK+nB,aAAaxZ,wDAhCKgyC,EAAAA,6BACC1rC,EAAAA,sBACAT,EAAAA,wBANjBiiE,EAAoBt1E,EAAA,CAJhCuI,EAAAA,UAAU,CACTE,SAAA,GACAD,SAAU,qBAEC8sE,SCwBC,CAAEz9C,QAAS,eA+BzB89C,GAAA,WAAA,SAAAA,KAA8B,OAAjBA,EAAe31E,EAAA,CA9C3B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAgkC,GACA+J,GACAtoC,EAAAA,WACA2hC,EAAAA,aACAC,EAAAA,UACAznC,EACA+tC,GACAvG,EAAAA,aAAaq3B,SAAS,CACpB,CACEt3D,KAAM,KACNgK,YAAa,CAAC0kD,EAAAA,UAAWx8C,IACzBzT,UAAWkR,GACXuB,KAAIy0D,OAIVhtE,aAAc,CACZ4qE,GACAwB,GACAD,GACAO,IAEFvsE,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb+kE,mBAAoB,CAClB9kE,UAAW8kE,GACX76D,OAAQ,CAACgmD,EAAAA,YAEX2W,qBAAsB,CACpB5mE,UAAW4mE,GACX38D,OAAQ,CAACgmD,EAAAA,gBAKjBv1D,QAAS,CAACoqE,GAAoB8B,IAC9BxmE,gBAAiB,CACf0kE,GACAuB,GACAO,OAGSK,GAAb,iBCjDE,SAAAE,EACUC,GAAA72E,KAAA62E,8BAAAA,EAHA72E,KAAA82E,YAAwC,GAmCpD,OA7BEF,EAAA12E,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAK62E,8BAA8BE,+BACnC/2E,KAAKg3E,aAAeh3E,KAAK62E,8BACtBI,iBACAnqE,KAAKG,EAAAA,KAAI,SAAA6pE,GAAe,OAACpuE,EAAKouE,YAAcA,MAC/C92E,KAAK62E,8BAA8BK,kBAEnCl3E,KAAK0zD,WAAa7mD,EAAAA,cAAc,CAC9B7M,KAAK62E,8BAA8BM,wBACnCn3E,KAAK62E,8BAA8BO,sCAClCtqE,KACDgO,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACmqE,EAAAlqE,EAAA,GAAcmqE,EAAAnqE,EAAA,GAAmB,OAAAkqE,GAAgBC,OAI3DV,EAAA12E,UAAAq3E,iBAAA,SAAiBC,GACf,IAAMC,EAAqB,GAC3Bz3E,KAAK82E,YAAYhuE,SAAQ,SAAAlJ,GACnBA,EAAE83E,UAAYF,EAAWE,QAC3BD,EAAmBr0E,KAAI/C,EAAAA,EAAA,GAClBT,GAAC,CACJ6qB,SAAU7qB,EAAE6qB,WAGdgtD,EAAmBr0E,KAAKxD,MAG5BI,KAAK62E,8BAA8Bc,kBAAkBF,6CA9BdniE,EAAAA,qCAP9BshE,EAA+B71E,EAAA,CAL3CuI,EAAAA,UAAU,CACTC,SAAU,6BACVC,SAAA,69CACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9Bk1D,oBCcb,SAAAgB,KAA2C,OAA9BA,EAA4B72E,EAAA,CAhBxC2I,EAAAA,SAAS,CACRC,aAAc,CAACitE,IACfhtE,QAAS,CAACC,EAAAA,aAAc+tC,GAAetoC,EAAAA,YACvCxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbonE,gCAAiC,CAC/BnnE,UAAWmnE,GACXl9D,OAAQ,CAACgmD,EAAAA,gBAKjBv1D,QAAS,CAACysE,IACV/mE,gBAAiB,CAAC+mE,OAEPgB,oBC4BX,SAAAC,EACUC,EACApT,EACAptC,GAFAt3B,KAAA83E,uBAAAA,EACA93E,KAAA0kE,mBAAAA,EACA1kE,KAAAs3B,eAAAA,EA3BFt3B,KAAA+3E,kBAAoB,GACpB/3E,KAAA00E,YAAc,CACpBsD,UAAW,WACXC,WAAY,aAGdj4E,KAAAg+C,KAAO,YACPh+C,KAAA20E,YAAc,CACZ,CACE9/C,KAAM,YACN2hC,UAAU,GAEZ,CACE3hC,KAAM,aACN2hC,UAAU,IAyGhB,OAzFEqhB,EAAA33E,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAKk4E,WAAal4E,KAAK83E,uBACpBK,2BAA2Bn4E,KAAK+3E,mBAChCjrE,KACCG,EAAAA,KACE,SAAAmrE,GACE,OAAC1vE,EAAK6pC,WAAa,CACjBkE,YAAa2hC,EAAU7lC,WAAW9zB,KAClCmhB,SAAUw4C,EAAU7lC,WAAWuD,MAC/BU,WAAY4hC,EAAU7lC,WAAWiE,WACjC42B,aAAcgL,EAAU7lC,WAAWsiC,WACnC72B,KAAM,gBAGZljC,EAAAA,KAAI,SAAAu9D,GAAY,OAAAh4E,EAAAA,EAAA,GACXg4E,GAAQ,CACXpmB,QAASomB,EAASpmB,QACdomB,EAASpmB,QAAQn3C,KAAI,SAAA/C,GAAU,OAAA1X,EAAAA,EAAA,GAC1B0X,GAAM,CACTksC,SAAUv7C,EAAKgvB,WAAW3f,QAE5BsgE,EAASpmB,cAInBjyD,KAAKs4E,qBAAuBt4E,KAAK83E,uBAAuBS,4BACxDv4E,KAAKw4E,kBAAoB3rE,EAAAA,cAAc,CACrC7M,KAAKs4E,qBACLt4E,KAAK83E,uBAAuBW,mCAC3B3rE,KAAKgO,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACwrE,EAAAvrE,EAAA,GAAYwrE,EAAAxrE,EAAA,GAAmB,OAAAurE,GAAcC,MAE3D34E,KAAKq1E,WAAar1E,KAAKytE,iBAGjBoK,EAAA33E,UAAAutE,cAAR,WAIE,OAAO5gE,EAAAA,cAAc,CACnB7M,KAAK0kE,mBAAmBvQ,UAAU,iCAClCn0D,KAAK0kE,mBAAmBvQ,UAAU,oCACjCrnD,KACDgO,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GACH,MAAO,CACL8qE,UAFE7qE,EAAA,GAGF8qE,WAHO9qE,EAAA,SASP0qE,EAAA33E,UAAAw3B,WAAR,SACE2gD,GAEA,OAAOr4E,KAAKs3B,eAAe9f,IAAI6gE,EAAS5lE,QAAQoiB,KAAM2C,EAAAA,aAAaC,UAGrEogD,EAAA33E,UAAA04E,eAAA,SACEC,GAIA74E,KAAK83E,uBAAuBgB,qBAAqB,CAC/CrmE,QAASomE,EAASpmE,QAClBsmE,qBAAsBF,EAASE,wBAInClB,EAAA33E,UAAAu1E,WAAA,SAAWz3B,GACTh+C,KAAKg+C,KAAOA,EACZh+C,KAAK83E,uBAAuBkB,qBAC1Bh5E,KAAK+3E,kBACL,EACA/3E,KAAK00E,YAAY12B,KAIrB65B,EAAA33E,UAAA+2C,WAAA,SAAWx4B,GACTze,KAAK83E,uBAAuBkB,qBAC1Bh5E,KAAK+3E,kBACLt5D,EACAze,KAAK00E,YAAY10E,KAAKg+C,QAI1B65B,EAAA33E,UAAAoO,YAAA,WACEtO,KAAK83E,uBAAuBmB,wBAC5Bj5E,KAAK83E,uBAAuBoB,qEA5FI3jE,EAAAA,4BACJlB,EAAAA,0BACJG,EAAAA,kBA5BfqjE,EAAoB92E,EAAA,CALhCuI,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,25PACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9Bm2D,oBCUb,SAAAsB,KAAgC,OAAnBA,EAAiBp4E,EAAA,CAzB7B2I,EAAAA,SAAS,CACRC,aAAc,CAACkuE,IACfjuE,QAAS,CACPC,EAAAA,aACAyF,EAAAA,WACA2hC,EAAAA,aACAuG,GACAloC,EAAAA,WACA4hC,EAAAA,UACAH,GACA6G,IAEF9tC,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbqoE,qBAAsB,CACpBpoE,UAAWooE,GACXn+D,OAAQ,CAACgmD,EAAAA,gBAKjBv1D,QAAS,CAAC0tE,IACVhoE,gBAAiB,CAACgoE,OAEPsB,oBCpBX,SAAAC,EACS3pE,EACG8gB,EACFje,GAFDtS,KAAAyP,UAAAA,EACGzP,KAAAuwB,gBAAAA,EACFvwB,KAAAsS,YAAAA,EAyBZ,OAtBE8mE,EAAAl5E,UAAAiM,SAAA,WACEnM,KAAKixB,WACLjxB,KAAKq5E,aAGCD,EAAAl5E,UAAA+wB,SAAR,WACEjxB,KAAKs5E,OAASt5E,KAAKuwB,gBAAgBC,UAAU1jB,KAC3C4S,EAAAA,OAAO1T,SACP8O,EAAAA,KAAI,SAAC2V,GAAmB,OAAAA,EAAK8oD,SAAW9oD,EAAKC,WAIzC0oD,EAAAl5E,UAAAm5E,UAAR,WACEr5E,KAAKw5E,QAAU3sE,EAAAA,cAAc,CAC3B7M,KAAKuwB,gBAAgBC,UACrBxwB,KAAKsS,YAAY6hD,UAAU,eAAernD,KAAK2sE,EAAAA,UAAUC,EAAAA,mBACxD5sE,KACDgO,EAAAA,KAAI,SAAC5N,SAAAC,EAAAzJ,EAAAwJ,EAAA,GAACujB,EAAAtjB,EAAA,GAAMwsE,EAAAxsE,EAAA,GACV,OAAI,QAAJ2R,EAAA2R,SAAI,IAAA3R,OAAA,EAAAA,EAAEkV,aAAcvD,EAAKuD,YAAc,CAAC,CAAE5xB,MAAOu3E,EAAUjyE,KAAM,oDAvBnD4Q,SACSpE,EAAAA,uBACNG,EAAAA,sBAPZ+kE,EAAmBr4E,EAAA,CAL/BuI,EAAAA,UAAU,CACTC,SAAU,gBACVC,SAAA,6KACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B03D,oBCSb,SAAAQ,KAA+B,OAAlBA,EAAgB74E,EAAA,CAf5B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAconC,EAAAA,aAAc4oC,EAAAA,oBACtC/vE,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb4pE,oBAAqB,CACnB3pE,UAAW2pE,QAKnBzvE,aAAc,CAACyvE,IACfjvE,QAAS,CAACivE,IACVvpE,gBAAiB,CAACupE,OAEPQ,oBCXX,SAAAE,EACYhkE,EACAyN,GADAvjB,KAAA8V,WAAAA,EACA9V,KAAAujB,oBAAAA,SAGLu2D,EAAA55E,UAAA65E,iBAAP,SACE7hE,GAEA,OAAOrL,EAAAA,cAAc,CAACqL,EAAOlY,KAAKg6E,kBAAkB9hE,KAASpL,KAC3DgO,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACgV,EAAA/U,EAAA,GAAM8sE,EAAA9sE,EAAA,GACV,MAAO,CACLujB,MAAOxO,EAAKhB,KACZ6B,SAAU,CAACk3D,SAWZH,EAAA55E,UAAA85E,kBAAP,SACE9hE,GADF,IAAAxP,EAAA1I,KAGE,OAAKkY,EAGEA,EAAMpL,KACX4S,EAAAA,QAAO,SAAAwC,GAAQ,QAAEA,KACjBrD,EAAAA,WAAU,SAAAqD,GACR,IAAMg4D,EAAah4D,EAAKi4D,eAAiBj4D,EAAKi4D,eAAiBj4D,EAC/D,OAAOxZ,EAAKoN,WAAWskE,wBAAwBF,EAAWjiE,KAAKnL,KAC7DG,EAAAA,KAAI,SAAA4hC,GACF,QAAcj4B,IAAVi4B,EACFnmC,EAAK2xE,yBAAyBH,GAAY,OACrC,CAEL,IAAMI,EAAgB,GACtB5xE,EAAK2xE,yBAAyBH,GAAY,EAAOI,GACjD,IAAMC,EAAgB/6E,OAAOigB,KAAKovB,GAAO/zB,KACvC,SAAA5Z,GAAO,OAAA2tC,EAAM3tC,GAAK+W,OAEduiE,EAAeF,EAAc56D,QACjC,SAAA+6D,GAAM,OAACF,EAAcrzE,SAASuzE,EAAG9sE,OAE/B6sE,EAAa55E,OAAS,GACxB8H,EAAKoN,WAAW4kE,oBACdR,EAAWjiE,IACXuiE,OAKR96D,EAAAA,OAAO1T,SACP8O,EAAAA,KAAI,SAAA+zB,GAAS,OAAAnmC,EAAKiyE,uBAAuBT,EAAYrrC,WA7BlDzzB,EAAAA,MAyCH0+D,EAAA55E,UAAAm6E,yBAAR,SACEO,EACAC,EACAC,GAHF,IAAApyE,EAAA1I,UAGE,IAAA86E,IAAAA,EAAA,IAEIF,EAASl0D,SAAWk0D,EAASl0D,QAAQ9lB,OAAS,GAChDg6E,EAASl0D,QAAQ5d,SAAQ,SAAAge,GACvBg0D,EAAU13E,KAAK,CACb23E,UAAWj0D,EAAMk0D,cACjBrtE,GAAImZ,EAAMm0D,YAKZL,EAAS73D,UAAY63D,EAAS73D,SAASniB,OAAS,GAClDg6E,EAAS73D,SAASja,SAAQ,SAAA8hC,GACxB,OAAAliC,EAAK2xE,yBAAyBzvC,GAAO,EAAOkwC,MAI5CD,GACF76E,KAAK8V,WAAW4kE,oBAAoBE,EAAS3iE,IAAK6iE,IAS9ChB,EAAA55E,UAAAy6E,uBAAR,SAA+BC,EAAe/rC,GAA9C,IAAAnmC,EAAA1I,KACQk7E,EAAuB,GAY7B,GAVIN,EAASlqD,QAGXwqD,EAAKxqD,MAAQkqD,EAASlqD,OAGpBkqD,EAASl0D,SAAWk0D,EAASl0D,QAAQ9lB,OAAS,GAChDZ,KAAKm7E,aAAaD,EAAMN,EAASl0D,QAAQ,GAAImoB,GAG3C+rC,EAAS73D,UAAY63D,EAAS73D,SAASniB,OAAS,EAAG,CACrD,IAAMmiB,EAAW63D,EAAS73D,SACvBjI,KAAI,SAAA8vB,GAAS,OAAAliC,EAAKiyE,uBAAuB/vC,EAAOiE,MAChDnvB,OAAO1T,SACN+W,EAASniB,OAAS,IACpBs6E,EAAKn4D,SAAWA,GAKpB,OAAoC,IAA7BvjB,OAAOigB,KAAKy7D,GAAMt6E,OAAe,KAAOs6E,GAMzCpB,EAAA55E,UAAAi7E,aAAR,SAAqBD,EAAsBp0D,EAAO+nB,GAChD,IAAMza,EAAOya,EAAS/nB,EAAMm0D,OAAM,IAAIn0D,EAAMk0D,eAG5C,GAAI5mD,GAA2B,qBAAnBtN,EAAMs0D,SAAiC,CAC5CF,EAAKxqD,QACRwqD,EAAKxqD,MAAQ0D,EAAKinD,UAEpB,IAAMv1E,EAAM9F,KAAKs7E,QAAQlnD,GAErB8mD,EAAKxqD,OAAS5qB,IAChBo1E,EAAKp1E,IAAMA,EAGXo1E,EAAKj6E,OAAWmzB,EAAKnzB,OAAS,SAAW,MASvC64E,EAAA55E,UAAAo7E,QAAR,SAAgBlnD,GACd,OAAIA,EAAKtuB,IACAsuB,EAAKtuB,IACHsuB,EAAKpG,aACPhuB,KAAKujB,oBAAoBsZ,UAAU,CACxCjE,QAAS,WACTf,OAAQ,CACNhD,KAAMT,EAAKpG,aACX9M,KAAMkT,EAAKlT,aALV,4CAxJejN,EAAAA,kBACSuQ,EAAAA,uLAHtBs1D,EAAiB/4E,EAAA,CAH7BmH,EAAAA,WAAW,CACVC,WAAY,UAED2xE,oBCMX,SAAAyB,EACYzhC,EACA1T,GADApmC,KAAA85C,cAAAA,EACA95C,KAAAomC,QAAAA,EARZpmC,KAAAw7E,MAAoCx7E,KAAKomC,QAAQ4zC,kBAC/Ch6E,KAAK85C,cAAc5hC,OAGrBlY,KAAAkY,MAA4ClY,KAAK85C,cAAc5hC,MAMjE,gDAH6BI,SACNwhE,MATVyB,EAA2Bx6E,EAAA,CALvCuI,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,oMACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B65D,oBC8CX,SAAAE,EACU75D,EACArZ,EACAmzE,GAHV,IAAAhzE,EAAA1I,KACUA,KAAA4hB,OAAAA,EACA5hB,KAAAuI,SAAAA,EACAvI,KAAA07E,QAAAA,EA7BD17E,KAAA27E,mBAAoB,EAM7B37E,KAAA4G,SAAWxG,EAAAA,UAO2BJ,KAAA47E,QAAS,EAER57E,KAAA67E,QAAS,EAExC77E,KAAA87E,UAA2B,GAC3B97E,KAAAyL,cAAgB,IAAIC,EAAAA,aACpB1L,KAAA+7E,OAAS,IAAIj0D,EAAAA,aAYnB9nB,KAAKyL,cAAcmB,IACjB5M,KAAK4hB,OAAO85C,OACT5uD,KAAK4S,EAAAA,QAAO,SAAA5C,GAAS,OAAAA,aAAiBk/D,EAAAA,kBACtCpuE,WAAU,WAAM,OAAAlF,EAAKuf,YAE1BjoB,KAAKyL,cAAcmB,IACjB5M,KAAK+7E,OAAOjvE,KAAKuyB,EAAAA,aAAa,KAAKzxB,WAAU,WAC3ClF,EAAKuzE,qCAyHb,OAzIER,EAAAv7E,UAAAg8E,SAAA,WACEl8E,KAAK+7E,OAAOv5E,QAoBdi5E,EAAAv7E,UAAAi8E,WAAA,SAAWr/D,GACTA,EAAMoO,iBACN,IAAMgwD,EAAoBp+D,EAAMs/D,cAC5Bp8E,KAAK87E,UAAU50E,SAASg0E,GACP,YAAfp+D,EAAMlX,KACR5F,KAAK0uD,QAEL1uD,KAAK87E,UAAY97E,KAAK87E,UAAUp8D,QAAO,SAAAhf,GAAK,OAAAA,IAAMw6E,KAClDl7E,KAAKuI,SAASS,YAAYkyE,EAAM,YAGlCl7E,KAAK87E,UAAU14E,KAAK83E,GAGtBl7E,KAAKq8E,gBAELv/D,EAAMw/D,2BACNx/D,EAAM8qB,mBAGR6zC,EAAAv7E,UAAAwuD,KAAA,WACM1uD,KAAK87E,UAAU97E,KAAK87E,UAAUl7E,OAAS,KACzCZ,KAAKuI,SAASS,YACZhJ,KAAK87E,UAAU97E,KAAK87E,UAAUl7E,OAAS,GACvC,WAEFZ,KAAK87E,UAAU34E,MACfnD,KAAKq8E,kBAITZ,EAAAv7E,UAAA+nB,MAAA,WACEjoB,KAAK87E,UAAY,GACjB97E,KAAKq8E,iBAGPZ,EAAAv7E,UAAAq8E,aAAA,SAAaz/D,GACX9c,KAAKw8E,8BAA2C1/D,EAAMs/D,eACtDp8E,KAAKy8E,0BAA0B3/D,IAGjC2+D,EAAAv7E,UAAAw8E,SAAA,SAASxB,EAAsByB,GAA/B,IAAAj0E,EAAA1I,KACE,YAD6B,IAAA28E,IAAAA,EAAA,GACzBzB,EAAKn4D,UAAYm4D,EAAKn4D,SAASniB,OAAS,EACnCo8B,KAAK8U,IAAGhxC,MAARk8B,KAAIn5B,EAAQq3E,EAAKn4D,SAASjI,KAAI,SAAApa,GAAK,OAAAgI,EAAKg0E,SAASh8E,EAAGi8E,EAAQ,QAE5DA,GAIXlB,EAAAv7E,UAAA08E,eAAA,SAAeh8E,GACb,OAAOo8B,KAAKiN,MAAMrpC,GAAUZ,KAAK68E,WAAaj8E,KAGhD66E,EAAAv7E,UAAAu8E,0BAAA,SAA0B3/D,GACxB,IAAM7b,EACH6b,EAAM7b,QAAU6b,EAAMggE,cAQzB,OALE77E,EAAO87E,cAAclyC,cAAcmyC,QAAQ,kBAC3C/7E,EAAOyW,cAAcslE,QAAQ,YAE7B/7E,EAAOsmC,QAEFtmC,EAAO87E,eAGhBtB,EAAAv7E,UAAAoO,YAAA,WACMtO,KAAKyL,eACPzL,KAAKyL,cAAc8C,eAIfktE,EAAAv7E,UAAAs8E,8BAAR,SAAsCtB,GACpC,GAAIl7E,KAAK27E,kBAAmB,CAC1B,IAAMsB,EAAuB/B,EAAKgC,cAAc,YAC1CC,EAAsBn9E,KAAK07E,QAAQxyE,cACrC+zE,IACFj9E,KAAKuI,SAAS60E,YAAYH,EAAS,eAEjCA,EAAQ5yC,WAAa4yC,EAAQI,YAC7BF,EAAO9yC,WAAa8yC,EAAOE,aAE3Br9E,KAAKuI,SAAS+0E,SACZL,EACA,cACG/B,EAAKmC,YAAcJ,EAAQI,YAAW,SAO3C5B,EAAAv7E,UAAA+7E,+BAAR,WAAA,IAAAvzE,EAAA1I,KACQu9E,EAAuBv9E,KAAK07E,QAAQxyE,cAAcs0E,WACxD79E,MAAMqa,KAAKujE,GACR79D,QAAO,SAAAw7D,GAAQ,MAAiB,QAAjBA,EAAKx0C,WACpB59B,SAAQ,SAAAmxE,GAAO,OAAAvxE,EAAK8zE,8BAA2CvC,OAG5DwB,EAAAv7E,UAAAm8E,cAAR,WAAA,IAAA3zE,EAAA1I,KACEA,KAAK87E,UAAUhzE,SAAQ,SAACoyE,EAAMz6E,GACxBA,EAAI,EAAIiI,EAAKozE,UAAUl7E,QACzB8H,EAAKH,SAASI,SAASuyE,EAAM,aAC7BxyE,EAAKH,SAASS,YAAYkyE,EAAM,aAEhCxyE,EAAKH,SAASS,YAAYkyE,EAAM,aAChCxyE,EAAKH,SAASI,SAASuyE,EAAM,eAIjCl7E,KAAK67E,OAAS77E,KAAK87E,UAAUl7E,OAAS,GAGxC66E,EAAAv7E,UAAAu9E,WAAA,SAAWvC,GACT,OAAOl7E,KAAK47E,QAAUV,EAAKn4D,UAAYm4D,EAAKn4D,SAASniB,iDAlIrCqiB,EAAAA,cACE7Z,EAAAA,iBACDD,EAAAA,cAnCVpI,EAAA,CAARsI,EAAAA,oCAKQtI,EAAA,CAARsI,EAAAA,yCACQtI,EAAA,CAARsI,EAAAA,iDAaqCtI,EAAA,CAArCsI,EAAAA,QAAS+gB,EAAAA,YAAY,8CAEiBrpB,EAAA,CAAtCsI,EAAAA,QAAS+gB,EAAAA,YAAY,+CAOtBrpB,EAAA,CADComC,EAAAA,aAAa,+CA/BHs0C,EAAqB16E,EAAA,CALjCuI,EAAAA,UAAU,CACTC,SAAU,mBACVC,SAAA,inEACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B+5D,oBCAX,SAAAiC,EACY5jC,EACA1T,GADApmC,KAAA85C,cAAAA,EACA95C,KAAAomC,QAAAA,EAVZpmC,KAAAw7E,MAAoCx7E,KAAKomC,QAAQ2zC,iBAC/C/5E,KAAK85C,cAAc5hC,OAGrBlY,KAAA29E,YAAkC39E,KAAK85C,cAAc5hC,MAAMpL,KACzDgO,EAAAA,KAAI,SAAAxb,GAAK,OAAAA,EAAE6hB,eAOf,gDAH6B7I,SACNwhE,MAXV4D,EAAmB38E,EAAA,CAL/BuI,EAAAA,UAAU,CACTC,SAAU,gBACVC,SAAA,mGACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9Bg8D,oBCiBb,SAAAE,KAA+B,OAAlBA,EAAgB78E,EAAA,CArB5B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAonC,EAAAA,aACAxnC,EACA4oC,GACA/iC,EAAAA,YAEFxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbkuE,oBAAqB,CACnBjuE,UAAWiuE,QAKnB/zE,aAAc,CAAC+zE,GAAqBjC,IACpC5rE,gBAAiB,CAAC6tE,IAClBvzE,QAAS,CAACuzE,GAAqBjC,OAEpBmC,oBCTb,SAAAC,KAAuC,OAA1BA,EAAwB98E,EAAA,CAfpC2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAc+zE,IACxB9zE,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb+rE,4BAA6B,CAC3B9rE,UAAW8rE,QAKnB5xE,aAAc,CAAC4xE,IACf1rE,gBAAiB,CAAC0rE,IAClBpxE,QAAS,CAACoxE,OAECsC,oBCuCX,SAAAC,EACYhkC,EACA1T,EACA42B,GAHZ,IAAAt0D,EAAA1I,KACYA,KAAA85C,cAAAA,EACA95C,KAAAomC,QAAAA,EACApmC,KAAAg9D,wBAAAA,EA5CZh9D,KAAAw7E,MAAoCx7E,KAAKomC,QAAQ4zC,kBAC/Ch6E,KAAK85C,cAAc5hC,OAGrBlY,KAAA29E,YAAkC39E,KAAK85C,cAAc5hC,MAAMpL,KACzDgO,EAAAA,KAAI,SAAAxb,GAAK,OAAAA,EAAE6hB,eAIbnhB,KAAAkY,MAAQlY,KAAK85C,cAAc5hC,MAAMpL,KAC/B4S,EAAAA,QACE,SAAAvd,GACE,OAAC+6D,EAAAA,iBACCx0D,EAAKs0D,wBACLG,EAAAA,gCAgCV,gDAJ6B7kD,SACNwhE,UACiBtrE,EAAAA,2BA7C3BsvE,EAAyB/8E,EAAA,CALrCuI,EAAAA,UAAU,CACTC,SAAU,uBACVC,SAAA,gNACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9Bo8D,oBCWb,SAAAC,KAAqC,OAAxBA,EAAsBh9E,EAAA,CArBlC2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAonC,EAAAA,aACA2sC,GACAvrC,GACA/iC,EAAAA,YAEFxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbsuE,0BAA2B,CACzBruE,UAAWquE,QAKnBn0E,aAAc,CAACm0E,IACfjuE,gBAAiB,CAACiuE,IAClB3zE,QAAS,CAAC2zE,OAECC,MCZbC,GAAA,WACE,SAAAA,EACSC,EACG96D,EACAuhD,EACA1+D,GAHHhG,KAAAi+E,cAAAA,EACGj+E,KAAAmjB,eAAAA,EACAnjB,KAAA0kE,mBAAAA,EACA1kE,KAAAgG,OAAAA,SAQZg4E,EAAA99E,UAAA2tB,OAAA,SAAO8R,EAAe74B,GACf64B,GAAmB,KAAVA,EAMZ74B,EAAOo3E,4BACPv+C,EAAM/+B,OAASkG,EAAOo3E,6BAKpBp3E,EAAOq3E,iBACTn+E,KAAKi+E,cAAcpwD,OAAO8R,EAAO,CAC/BC,SAAU94B,EAAOs3E,cAIjBt3E,EAAOu3E,oBACTr+E,KAAKi+E,cAAcK,kBAAkB3+C,EAAO,CAC1CC,SAAU94B,EAAOy3E,kBAnBnBv+E,KAAKw+E,gBA6BTR,EAAA99E,UAAAu+E,WAAA,SAAW33E,GAAX,IAAA4B,EAAA1I,KACE,OAAO6M,EAAAA,cAAc,CACnB7M,KAAK0+E,kBAAkB53E,GACvB9G,KAAK2+E,sBAAsB73E,GAC3B9G,KAAK4+E,iBAAiB93E,KACrBgG,KACDgO,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAAC2xE,EAAA1xE,EAAA,GAAgB2xE,EAAA3xE,EAAA,GAAa4xE,EAAA5xE,EAAA,GACjC,MAAO,CACLw+D,SAAUkT,EAAiBA,EAAelT,SAAW,KACrDmT,YAAWA,EACXC,QAAOA,MAGX9xE,EAAAA,KAAI,SAAAglD,GACF,OAAAvpD,EAAKs2E,gBA/DmB,wBA+DsBt2E,EAAKu2E,WAAWhtB,SASpE+rB,EAAA99E,UAAAs+E,aAAA,WACEx+E,KAAKi+E,cAAcO,eACnBx+E,KAAKg/E,gBA1EuB,yBA0EkB,IAGhDhB,EAAA99E,UAAAg/E,aAAA,SAAa9e,GACX,OAAOpgE,KAAKgG,OAAOwB,SAASzF,KAAKo9E,UAAUj/C,SAASkgC,IAGtD4d,EAAA99E,UAAA8+E,gBAAA,SAAgB5e,EAAmBxzD,QACrBgK,IAARhK,EACF5M,KAAKgG,OAAOwB,SAASzF,KAAKo9E,UAAUvjB,OAAOwE,GAE3CxzD,EACI5M,KAAKgG,OAAOwB,SAASzF,KAAKo9E,UAAUvyE,IAAIwzD,GACxCpgE,KAAKgG,OAAOwB,SAASzF,KAAKo9E,UAAUvmE,OAAOwnD,IAI3C4d,EAAA99E,UAAA++E,WAAR,SAAmBhtB,GACjB,QACKA,EAAQ0Z,UAAY1Z,EAAQ0Z,SAAS/qE,OAAS,KAC9CqxD,EAAQ6sB,aAAe7sB,EAAQ6sB,YAAYl+E,OAAS,KACrDqxD,EAAQ8sB,SAINf,EAAA99E,UAAAw+E,kBAAR,SACE53E,GAEA,OAAIA,EAAOq3E,gBACFn+E,KAAKi+E,cAAcQ,aAEnBrjE,EAAAA,GAAG,KAQN4iE,EAAA99E,UAAAy+E,sBAAR,SAA8B73E,GAA9B,IAAA4B,EAAA1I,KACE,OAAK8G,EAAOu3E,mBAGHr+E,KAAKi+E,cAAcmB,uBAAuBtyE,KAC/CgO,EAAAA,KAAI,SAAA9T,GAAO,OAAAA,EAAI8T,KAAI,SAAAukE,GAAc,OAAAA,EAAWn8E,YAC5C2b,EAAAA,WAAU,SAAAigE,GACR,OAA2B,IAAvBA,EAAYl+E,OACP8H,EAAK42E,mBAAmBx4E,GAAQgG,KACrCgO,EAAAA,KAAI,SAAAwhC,GAAS,OAACA,EAAQ,CAACA,GAAS,OAG3BlhC,EAAAA,GAAG0jE,OAVT1jE,EAAAA,GAAG,KAqBN4iE,EAAA99E,UAAAo/E,mBAAR,SAA2Bx4E,GAA3B,IAAA4B,EAAA1I,KACE,OAAOA,KAAK0+E,kBAAkB53E,GAAQgG,KACpC+R,EAAAA,WAAU,SAAA0gE,GACR,OAAOA,EAAc5T,UAAY4T,EAAc5T,SAAS/qE,OAAS,EAC7D8H,EAAK82E,iBAAiB,4BAA6B,CACjDC,KAAMF,EAAcG,iBAEtBtkE,EAAAA,GAAG,WAKL4iE,EAAA99E,UAAA0+E,iBAAR,SAAyB93E,GAAzB,IAAA4B,EAAA1I,KACE,OAAO6M,EAAAA,cAAc,CACnB7M,KAAK0+E,kBAAkB53E,GACvB9G,KAAK2+E,sBAAsB73E,KAC1BgG,KACD+R,EAAAA,WAAU,SAAC3R,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACqyE,EAAApyE,EAAA,GAAe2xE,EAAA3xE,EAAA,GACzB,OACEoyE,GACAA,EAAc5T,UACoB,IAAlC4T,EAAc5T,SAAS/qE,QACvBk+E,GACuB,IAAvBA,EAAYl+E,OAEL8H,EAAK82E,iBAAiB,0BAEtBpkE,EAAAA,GAAG,WASX4iE,EAAA99E,UAAA6zE,iBAAP,SAAwBp0C,GACtB3/B,KAAKmjB,eAAewV,GAAG,CACrBC,QAAS,SACTf,OAAQ,CAAE8H,MAAKA,MAIXq+C,EAAA99E,UAAAs/E,iBAAR,SACEG,EACA/0E,GAEA,OAAO5K,KAAK0kE,mBAAmBvQ,UAAUwrB,EAAgB/0E,6CAhLnCgK,EAAAA,wBACIC,EAAAA,sBACIR,EAAAA,0BACZtM,EAAAA,6OALTi2E,EAAyBj9E,EAAA,CAHrCmH,EAAAA,WAAW,CACVC,WAAY,UAED61E,GAAb,GCHM4B,GAA4C,CAChD1B,2BAA4B,EAC5BC,iBAAiB,EACjBE,oBAAoB,EACpBD,YAAa,EACbG,eAAgB,EAChBsB,sBAAsB,GAQxBC,GAAA,WAyBE,SAAAA,EACYC,EAEAjmC,EACA9zC,GAJZ,IAAA0C,EAAA1I,KACYA,KAAA+/E,0BAAAA,EAEA//E,KAAA85C,cAAAA,EACA95C,KAAAgG,OAAAA,EAjBZhG,KAAA4L,UAAYxL,EAAAA,UAMJJ,KAAAy+C,kBAAmB,EAc3Bz+C,KAAAggF,SAAsChgF,KAAKigF,QAAQnzE,KACjDG,EAAAA,KAAI,SAAA7L,GAAK,OAACsH,EAAK5B,OAAS1F,KACxByd,EAAAA,WAAU,SAAA/X,GAAU,OAAA4B,EAAKq3E,0BAA0BtB,WAAW33E,OAsKlE,OAlMEtH,OAAAiC,eAAIq+E,EAAA5/E,UAAA,YAAS,KAAb,SAAcgD,GACRA,GACFlD,KAAK6tB,OAAO3qB,oCAgChB1D,OAAAiC,eAAYq+E,EAAA5/E,UAAA,UAAO,KAAnB,WACE,OAAIF,KAAK85C,cAC6B95C,KAAK85C,cAAc5hC,MAAMpL,KAG3DgO,EAAAA,KAAI,SAAA1Z,GACF,OAAAf,EAAAA,EAAA,GACKe,GAAC,CACJ+8E,gBAC6B,SAAtB/8E,EAAE+8E,kBAAoD,IAAtB/8E,EAAE+8E,gBACzC0B,qBACkC,SAA3Bz+E,EAAEy+E,uBACoB,IAA3Bz+E,EAAEy+E,qBACJxB,mBACgC,SAAzBj9E,EAAEi9E,qBACkB,IAAzBj9E,EAAEi9E,yBAKHjjE,EAAAA,GAAGwkE,qCAOdE,EAAA5/E,UAAA2tB,OAAA,SAAO8R,GACL3/B,KAAK+/E,0BAA0BlyD,OAAO8R,EAAO3/B,KAAK8G,QAElD9G,KAAK0K,QAMPo1E,EAAA5/E,UAAAwK,KAAA,WACE1K,KAAK+/E,0BAA0Bf,gBAAgB,uBAAuB,IAMxEc,EAAA5/E,UAAAkL,MAAA,SAAM0R,EAAgB8+B,GAAtB,IAAAlzC,EAAA1I,KAEEwsC,YAAW,aACH9jC,EAAK+1C,mBAAqB/1C,EAAKw3E,sBAAyBtkC,IAC5DlzC,EAAKy3E,cAAcrjE,OAKfgjE,EAAA5/E,UAAAigF,cAAV,SAAwBrjE,GACtB9c,KAAK+/E,0BAA0Bf,gBAC7B,uBACA,GAEEliE,GAASA,EAAM7b,QACH6b,EAAM7b,OAAQo/C,QAKxBy/B,EAAA5/E,UAAAggF,mBAAR,WACE,OACElgF,KAAKogF,oBAAoBl5E,SAASlH,KAAKqgF,sBACvCrgF,KAAKgG,OAAOwB,SAAS01E,cAAc,gCACjCl9E,KAAKqgF,qBAQXP,EAAA5/E,UAAAogF,YAAA,SAAYxjE,GACN9c,KAAK+/E,0BAA0Bb,aAAa,yBAC9Cl/E,KAAKoL,MAAM0R,GACXA,EAAMoO,mBAKF40D,EAAA5/E,UAAAkgF,kBAAR,WACE,OAAOzgF,MAAMqa,KACXha,KAAKgG,OAAOwB,SAAS4gC,iBAAiB,qCAKlC03C,EAAA5/E,UAAAmgF,kBAAR,WACE,OAAoBrgF,KAAKgG,OAAOwB,SAASqjC,eAGnCi1C,EAAA5/E,UAAAqgF,gBAAR,WACE,OAAOvgF,KAAKogF,oBAAoB3iE,QAAQzd,KAAKqgF,sBAI/CP,EAAA5/E,UAAAsgF,mBAAA,SAAmB1jE,GACjBA,EAAMoO,iBACA,IAAAhe,EAAAxJ,EAAA,qDAACuuD,EAAA/kD,EAAA,GAASuzE,EAAAvzE,EAAA,GAKZ+kD,EAAQrxD,SACN6/E,EAAe,EACjBxuB,EAAQA,EAAQrxD,OAAS,GAAG2mC,QAE5B0qB,EAAQwuB,EAAe,GAAGl5C,UAMhCu4C,EAAA5/E,UAAAwgF,eAAA,SAAe5jE,GACbA,EAAMoO,iBACA,IAAAhe,EAAAxJ,EAAA,qDAACuuD,EAAA/kD,EAAA,GAASuzE,EAAAvzE,EAAA,GAKZ+kD,EAAQrxD,SACN6/E,GAAgBxuB,EAAQrxD,OAAS,EACnCqxD,EAAQ,GAAG1qB,QAEX0qB,EAAQwuB,EAAe,GAAGl5C,UAUhCu4C,EAAA5/E,UAAAygF,mBAAA,SAAmB7jE,EAAgB6iB,GAC5BA,GAAiC,IAAxBA,EAAMF,OAAO7+B,SAG3BZ,KAAKoL,MAAM0R,GACX9c,KAAK+/E,0BAA0BhM,iBAAiBp0C,KAMlDmgD,EAAA5/E,UAAAogD,aAAA,WACEtgD,KAAKy+C,kBAAmB,GAMnBqhC,EAAA5/E,UAAA+nB,MAAP,SAAarH,GACX5gB,KAAKsgD,eACL1/B,EAAG1d,MAAQ,GACXlD,KAAK+/E,0BAA0BvB,yDA5KMR,UAEZ1lE,EAAgBtX,WAAA,CAAA,CAAA4E,KADxCgO,EAAAA,kBAEiB7L,EAAAA,aAvBpBhH,EAAA,CADCsI,EAAAA,MAAM,4CALIy2E,EAAkB/+E,EAAA,CAL9BuI,EAAAA,UAAU,CACTC,SAAU,eACVC,SAAA,s/EACAgY,gBAAiBC,EAAAA,wBAAwBC,SA6BtChgB,EAAA,EAAAkS,EAAAA,aA3BQksE,GAAb,iBCzBA,SAAAc,KAUA,OATEA,EAAA1gF,UAAA28B,UAAA,SAAUm2B,EAAc1W,GACtB,OAAKA,EAGE0W,EAAK6tB,QACVvkC,EAAM7c,OACN,2BAA2B6c,EAAM7c,OAAM,WAJhCuzB,GAHA4tB,EAAa7/E,EAAA,CADzBo8B,EAAAA,KAAK,CAAEjc,KAAM,iBACD0/D,oBCiCb,SAAAE,KAA8B,OAAjBA,EAAe//E,EAAA,CAtB3B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAonC,EAAAA,aACAF,GACAtnC,EACAynC,EAAAA,UACA5hC,EAAAA,YAEFxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbswE,mBAAoB,CAClBrwE,UAAWqwE,QAKnBn2E,aAAc,CAACm2E,GAAoBc,IACnC/wE,gBAAiB,CAACiwE,IAClB31E,QAAS,CAAC21E,OAECgB,oBCXX,SAAAC,EACYx/C,EACAmC,GADA1jC,KAAAuhC,gBAAAA,EACAvhC,KAAA0jC,iBAAAA,EANZ1jC,KAAA0hC,kBAAuCC,EAAAA,kBAAkBG,SAmB3D,OAVEi/C,EAAA7gF,UAAAiM,SAAA,WACEnM,KAAK+pE,OAAS/pE,KAAKuhC,gBAAgBH,kBACnCphC,KAAKukC,iBAAmBvkC,KAAK0jC,iBAAiBjC,mBAC5CzhC,KAAK0hC,oBAITq/C,EAAA7gF,UAAAoO,YAAA,WACEtO,KAAKuhC,gBAAgBy/C,8DAZMltE,EAAAA,uBACCutB,MAPnB0/C,EAA+BhgF,EAAA,CAL3CuI,EAAAA,UAAU,CACTC,SAAU,8BACVC,SAAA,qfACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9Bq/D,oBCMX,SAAAE,EACY1/C,EACFjvB,GADEtS,KAAAuhC,gBAAAA,EACFvhC,KAAAsS,YAAAA,EAsEZ,OAnEE2uE,EAAA/gF,UAAAiM,SAAA,WACEnM,KAAK+pE,OAAS/pE,KAAKuhC,gBAAgBH,mBAGrC6/C,EAAA/gF,UAAAoO,YAAA,WACEtO,KAAKuhC,gBAAgBy/C,qBAGvBC,EAAA/gF,UAAA4yD,sBAAA,SAAsBhF,GACpB,OAAO9tD,KAAKsS,YAAY6hD,UAAU,sBAAsBrnD,KACtD4S,EAAAA,QAAO,SAAAvd,GAAK,OAAA6J,QAAQ8hD,MACpBhzC,EAAAA,KAAI,SAAAi8C,GAAa,MAAA,CACfrmC,MAAOqmC,EACPhE,SAAajF,EAAgB8C,UAAS,IAAI9C,EAAgB+C,SAC1DmC,KAAM,CACJlF,EAAgBgD,MAChBhD,EAAgBiD,MACbjD,EAAgBkD,KAAI,KAAKlD,EAAgBmB,QAAQjU,QAAO,KAAK8S,EAAgBmD,WAChFnD,EAAgBmF,aAMxBguB,EAAA/gF,UAAAghF,2BAAA,SAA2B15B,GACzB,OAAOxnD,KAAKsS,YAAY6hD,UAAU,mCAAmCrnD,KACnE4S,EAAAA,QAAO,SAAAvd,GAAK,OAAA6J,QAAQw7C,MACpB1sC,EAAAA,KAAI,SAAAi8C,GAAa,MAAA,CACfrmC,MAAOqmC,EACPhE,SAAUvL,EAAatmC,KACvB8xC,KAAM,CAACxL,EAAa72B,mBAK1BswD,EAAA/gF,UAAA2rE,6BAAA,SAA6Bxc,GAC3B,OAAOrvD,KAAKsS,YAAY6hD,UAAU,sBAAsBrnD,KACtD4S,EAAAA,QAAO,SAAAvd,GAAK,OAAA6J,QAAQqjD,MACpBv0C,EAAAA,KAAI,SAAAi8C,GAAa,MAAA,CACfrmC,MAAOqmC,EACPhE,SAAa1D,EAAeuB,UAAS,IAAIvB,EAAewB,SACxDmC,KAAM,CACJ3D,EAAeyB,MACfzB,EAAe0B,MACZ1B,EAAe2B,KAAI,KAAK3B,EAAeJ,QAAQjU,QAAO,KAAKqU,EAAe4B,WAC7E5B,EAAe4D,aAMvBguB,EAAA/gF,UAAAihF,0BAAA,SAA0B9wB,GACxB,OAAOxjD,EAAAA,cAAc,CACnB7M,KAAKsS,YAAY6hD,UAAU,uBAC3Bn0D,KAAKsS,YAAY6hD,UAAU,sBAAuB,CAChDxB,MAAO3mD,QAAQqkD,GAAWA,EAAQI,YAAc,GAChD4B,KAAMrmD,QAAQqkD,GAAWA,EAAQK,WAAa,OAE/C5jD,KACD4S,EAAAA,QAAO,SAAAvd,GAAK,OAAA6J,QAAQqkD,MACpBv1C,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAAC6pD,EAAA5pD,EAAA,GAAWinD,EAAAjnD,EAAA,GAAiB,MAAA,CAChCujB,MAAOqmC,EACPhE,SAAU1C,EAAQC,kBAClB0C,KAAM,CAAC3C,EAAQE,WAAY6D,kDAnEJtgD,EAAAA,uBACNO,EAAAA,sBALZ4sE,EAAkClgF,EAAA,CAL9CuI,EAAAA,UAAU,CACTC,SAAU,iCACVC,SAAA,wpCACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9Bu/D,oBCFX,SAAAG,EAAsB7/C,GAAAvhC,KAAAuhC,gBAAAA,EAHtBvhC,KAAAqhF,iBAAkB,EAiBpB,OAZED,EAAAlhF,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAK+pE,OAAS/pE,KAAKuhC,gBAAgBH,kBAAkBt0B,KACnDG,EAAAA,KAAI,SAAAs1B,GACF75B,EAAK24E,gBAAkB9+C,EAAM++C,cAC7B54E,EAAK64E,UAAYh/C,EAAM0c,UAK7BmiC,EAAAlhF,UAAAoO,YAAA,WACEtO,KAAKuhC,gBAAgBy/C,8DAZgBltE,EAAAA,mBAN5BstE,EAAyCrgF,EAAA,CALrDuI,EAAAA,UAAU,CACTC,SAAU,0CACVC,SAAA,uyBACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B0/D,oBCEX,SAAAI,EAAsBjgD,GAAAvhC,KAAAuhC,gBAAAA,EASxB,OAPEigD,EAAAthF,UAAAiM,SAAA,WACEnM,KAAK+pE,OAAS/pE,KAAKuhC,gBAAgBH,mBAGrCogD,EAAAthF,UAAAoO,YAAA,WACEtO,KAAKuhC,gBAAgBy/C,8DAPgBltE,EAAAA,mBAH5B0tE,EAAgCzgF,EAAA,CAL5CuI,EAAAA,UAAU,CACTC,SAAU,+BACVC,SAAA,wQACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B8/D,oBCaX,SAAAC,EACYpoD,EACAlW,EACAgV,EACA2F,GAHA99B,KAAAq5B,YAAAA,EACAr5B,KAAAmjB,eAAAA,EACAnjB,KAAAm4B,YAAAA,EACAn4B,KAAA89B,GAAAA,EAfZ99B,KAAA0hF,kBAA+B1hF,KAAK89B,GAAGI,MACrC,CACE/D,SAAU,CACR,GACA,CAACgE,EAAAA,WAAWC,SAAUge,GAAqBM,oBAE7CilC,aAAc,CAAC,GAAIxjD,EAAAA,WAAWC,WAEhC,CAAE6yC,UAAW70B,GAAqBS,gBA6BtC,OAnBE4kC,EAAAvhF,UAAAwnE,OAAA,WAAA,IAAAh/D,EAAA1I,KACEA,KAAKq5B,YAAYuoD,cACf5hF,KAAKi/C,KACLj/C,KAAK0hF,kBAAkBx+E,MAAMi3B,UAE1Bn6B,KAAK+nB,eACR/nB,KAAK+nB,aAAe/nB,KAAKm4B,YAAYG,eAAe1qB,WAAU,SAAA2qB,GACxDA,EAAMuB,cACRpxB,EAAKya,eAAewV,GAAG,CAAEC,QAAS,cAM1C6oD,EAAAvhF,UAAAoO,YAAA,WACMtO,KAAK+nB,cACP/nB,KAAK+nB,aAAaxZ,wDAtBG0G,EAAAA,mBACGJ,EAAAA,sBACHlB,EAAAA,mBACT6qB,EAAAA,eApBPz9B,EAAA,CAARsI,EAAAA,oCACQtI,EAAA,CAARsI,EAAAA,qCAFUo4E,EAA0B1gF,EAAA,CAJtCuI,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,miFAEWi4E,oBCEX,SAAAI,EACUtgD,EACA3f,EACA2B,GAFAvjB,KAAAuhC,gBAAAA,EACAvhC,KAAA4hB,OAAAA,EACA5hB,KAAAujB,oBAAAA,SAGVs+D,EAAA3hF,UAAA8a,YAAA,WAAA,IAAAtS,EAAA1I,KACE,OAAOA,KAAKuhC,gBAAgBH,kBAAkBt0B,KAC5CgO,EAAAA,KAAI,SAAAuT,GACF,SAAIA,GAAqD,IAArC7uB,OAAOigB,KAAK4O,GAAcztB,SAGrC8H,EAAKkZ,OAAO0qC,SAAS5jD,EAAK6a,oBAAoB/L,IAAI,yDAXtC1D,EAAAA,uBACTmP,EAAAA,cACauB,EAAAA,oNAJpBq9D,EAAsB9gF,EAAA,CAHlCmH,EAAAA,WAAW,CACVC,WAAY,UAED05E,MCUPC,GAA8B,CAClCf,GACAE,GACAG,GACAI,GACAC,IAwCFM,GAAA,WAAA,SAAAA,KAAsC,OAAzBA,EAAuBhhF,EAAA,CArCnC2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAm4C,GACAnU,GACA3hB,GACAwxB,GACApuC,EAAAA,WACAkxB,EAAAA,oBACAjxB,EAAAA,sBAEFzF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbwyE,uCAAwC,CACtCvyE,UAAW2xE,GACX1nE,OAAQ,CAACmoE,KAEXd,gCAAiC,CAC/BtxE,UAAWsxE,GACXrnE,OAAQ,CAACmoE,KAEXL,iCAAkC,CAChC/xE,UAAW+xE,GACX9nE,OAAQ,CAACmoE,KAEXZ,mCAAoC,CAClCxxE,UAAWwxE,GACXvnE,OAAQ,CAACmoE,SAKjBl4E,aAAY9F,EAAMi+E,IAClB33E,QAAOtG,EAAMi+E,IACbjyE,gBAAehM,EAAMi+E,OAEVC,GAAb,iBClDE,SAAAE,EACY3qD,EACA4qD,EACA3+D,GAFAvjB,KAAAs3B,eAAAA,EACAt3B,KAAAkiF,iBAAAA,EACAliF,KAAAujB,oBAAAA,SAMZ0+D,EAAA/hF,UAAAiiF,YAAA,SAAYttD,GAAZ,IAAAnsB,EAAA1I,KACE,OAAOA,KAAKs3B,eAAe9f,IAAIqd,GAAM/nB,KACnC4S,EAAAA,OAAO1T,SACP8O,EAAAA,KAAI,SAAArI,GAAW,OAAA/J,EAAK05E,eAAe3vE,QAIvCwvE,EAAA/hF,UAAAmiF,qBAAA,SACExtD,EACAytD,EACAC,EACAC,GAJF,IAAA95E,EAAA1I,KAME,OAAOA,KAAKkiF,iBAAiB1qE,IAAIqd,EAAMytD,GAAex1E,KACpD4S,EAAAA,OAAO1T,SACP8O,EAAAA,KAAI,SAAC2nE,GACH,OAAAA,EAAK3nE,KAAI,SAAA4nE,GACP,OAAAh6E,EAAK05E,eAAeM,EAAIzhF,OAAQshF,EAAcC,WAS9CP,EAAA/hF,UAAAkiF,eAAR,SACEO,EACAJ,EACAC,QADA,IAAAD,IAAAA,GAAA,QACA,IAAAC,IAAAA,GAAA,GAEA,IAAMpuD,EAA4B,GAiBlC,OAhBImuD,IACFnuD,EAAK1D,MAAQiyD,EAAOzhE,MAElBshE,GAAwBG,EAAOztD,OAASytD,EAAOztD,MAAM2uB,iBACvDzvB,EAAKc,MAAQytD,EAAOztD,MAAM2uB,gBAExB8+B,EAAO5tD,QAAU4tD,EAAO5tD,OAAOC,UACjCZ,EAAKub,MAAQ,CACXR,UAAWwzC,EAAO5tD,OAAOC,QACzBoa,OAAQ,YAGZhb,EAAKzZ,MAAQ3a,KAAKujB,oBAAoBsZ,UAAU,CAC9CjE,QAAS,UACTf,OAAQ8qD,IAEHvuD,4CAxDmB5f,EAAAA,sBACEG,EAAAA,+BACG6P,EAAAA,oOAJtBy9D,EAAsBlhF,EAAA,CAHlCmH,EAAAA,WAAW,CACVC,WAAY,UAED85E,oBC2BX,SAAAW,EACY9oC,EACAxiB,GAFZ,IAAA5uB,EAAA1I,KACYA,KAAA85C,cAAAA,EACA95C,KAAAs3B,eAAAA,EA3BOt3B,KAAA6iF,cAAgBrrD,EAAAA,aAAahzB,KAExCxE,KAAAwgE,eAAoCxgE,KAAK85C,cAAc5hC,MAAMpL,KACnE4S,EAAAA,OAAO1T,UAMThM,KAAAs5E,OAA6Bt5E,KAAKwgE,eAAe1zD,KAC/CgO,EAAAA,KAAI,SAAAoH,GAAQ,OAAAA,EAAKwO,UAQnB1wB,KAAA2gE,OAA4C3gE,KAAKwgE,eAAe1zD,KAC9DgO,EAAAA,KAAI,SAAAoH,GAAQ,OAAAA,EAAK4gE,aAAarjD,OAAOx2B,MAAM,QAC3C6R,EAAAA,KAAI,SAAA+lD,GACF,OAAAA,EAAM/lD,KAAI,SAAA+Z,GAAQ,OAAAnsB,EAAK4uB,eAAe9f,IAAIqd,EAAMnsB,EAAKm6E,sBAQ3D,gDAH6BvqE,SACC9D,EAAAA,kBA5BjBouE,EAAwB7hF,EAAA,CALpCuI,EAAAA,UAAU,CACTC,SAAU,sBACVC,SAAA,ghBACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BkhE,oBCSb,SAAAG,KAAoC,OAAvBA,EAAqBhiF,EAAA,CAfjC2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcmnC,GAAgBD,GAAaE,EAAAA,aAAcC,EAAAA,WACnEpnC,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbozE,yBAA0B,CACxBnzE,UAAWmzE,QAKnBj5E,aAAc,CAACi5E,IACf/yE,gBAAiB,CAAC+yE,IAClBz4E,QAAS,CAACy4E,OAECG,oBC2BX,SAAAC,EACYvzE,EACA6jC,EACA4uC,GAHZ,IAAAx5E,EAAA1I,KACYA,KAAAyP,UAAAA,EACAzP,KAAAszC,QAAAA,EACAtzC,KAAAkiF,iBAAAA,EA5BZliF,KAAAs5E,OAASt5E,KAAKyP,UAAUyI,MAAMpL,KAAKgO,EAAAA,KAAI,SAAAxb,GAAK,OAAAA,EAAEoxB,UAEtC1wB,KAAAijF,oBAEJjjF,KAAKszC,QAAQ5b,aAAa5qB,KAC5B4S,EAAAA,OAAO1T,SACP8O,EAAAA,KAAI,SAAClb,GAAe,OAAAA,EAAEi1B,QACtB7nB,EAAAA,uBACAC,EAAAA,KAAI,WAAM,OAAAvE,EAAKw5E,iBAAiBgB,sBAQlCljF,KAAA2gE,OAA4C9zD,EAAAA,cAAc,CACxD7M,KAAKijF,oBACLjjF,KAAKyP,UAAUyI,QACdpL,KACD+R,EAAAA,WAAU,SAAC3R,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAAC2nB,EAAA1nB,EAAA,GAAM+U,EAAA/U,EAAA,GAChB,OAAAzE,EAAK25E,qBAAqBxtD,EAAM3S,EAAKihE,2BAmB3C,OATUH,EAAA9iF,UAAAmiF,qBAAR,SACExtD,EACAytD,GAEA,OAAOtiF,KAAKkiF,iBAAiB1qE,IAAIqd,EAAMytD,GAAex1E,KACpD4S,EAAAA,OAAO1T,SACP8O,EAAAA,KAAI,SAAC2nE,GAA6B,OAAAA,EAAK3nE,KAAI,SAAA4nE,GAAO,OAAAtnE,EAAAA,GAAGsnE,EAAIzhF,yDAXtCqX,SACF+e,UACS1iB,EAAAA,2BAhCnBquE,EAA0BjiF,EAAA,CALtCuI,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAA,2fACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BshE,oBCAb,SAAAI,KAAsC,OAAzBA,EAAuBriF,EAAA,CAfnC2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcmnC,GAAgBD,GAAaE,EAAAA,aAAcC,EAAAA,WACnEpnC,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbwzE,2BAA4B,CAC1BvzE,UAAWuzE,QAKnBr5E,aAAc,CAACq5E,IACfnzE,gBAAiB,CAACmzE,IAClB74E,QAAS,CAAC64E,OAECI,MCrBAC,GAAkC,CAC7CnnC,KAAM,CACJonC,eAAgB,CACdx5C,QAAQ,EACRy5C,aAAc,EACdC,gBAAgB,mBCyBpB,SAAAC,EAAoB5+C,GAApB,IAAAn8B,EAAA1I,KAAoBA,KAAA6kC,sBAAAA,EApBZ7kC,KAAA0jF,mBAAqB,IAAI3iE,EAAAA,gBAAgB,MAEzC/gB,KAAAikD,SAEJjkD,KAAK6kC,sBAAsBnN,aAAa5qB,KAC1C4S,EAAAA,OAAO1T,SACPgB,EAAAA,uBACAC,EAAAA,KAAI,SAACrN,GACH,OAAA8I,EAAKg7E,mBAAmBlhF,KAAK5C,EAAEm1B,OAASn1B,EAAEm1B,OAAOC,QAAU,QAI/Dh1B,KAAA2jF,QAA6B3jF,KAAKikD,SAASn3C,KACzCgO,EAAAA,KAAI,SAAClb,GAAe,OAAA8I,EAAKk7E,aAAahkF,OAGxCI,KAAA6jF,WAAah3E,EAAAA,cAAc,CAAC7M,KAAKikD,SAAUjkD,KAAK0jF,qBAAqB52E,KACnEgO,EAAAA,KAAI,SAAC5N,GAAkB,OAAlBxJ,EAAAwJ,EAAA,GAAG,OAyDZ,OApDEu2E,EAAAvjF,UAAA4jF,UAAA,SAAU1vD,GACRp0B,KAAK0jF,mBAAmBlhF,KAAK4xB,IAG/BqvD,EAAAvjF,UAAAyqC,SAAA,SAASo5C,GACP,OAAO/jF,KAAK0jF,mBAAmB52E,KAC7B4S,EAAAA,OAAO1T,SACP8O,EAAAA,KAAI,SAACq0B,GACH,OACEA,EAAU60C,MACV70C,EAAU60C,KAAKl+E,KACfi+E,EAAUC,MACVD,EAAUC,KAAKl+E,KACfqpC,EAAU60C,KAAKl+E,MAAQi+E,EAAUC,KAAKl+E,SAO9C29E,EAAAvjF,UAAAwxB,UAAA,SAAUuyD,GACR,OAAOjkF,KAAK0jF,mBAAmB52E,KAC7B4S,EAAAA,OAAO1T,SACP8O,EAAAA,KAAI,SAACq0B,GACH,IAAMmE,EAAU2wC,EAAOl9E,MACrB,SAAAxG,GACE,OAAAA,EAAEovC,OACFR,EAAU60C,MACVzjF,EAAEovC,MAAMR,WACR5uC,EAAEovC,MAAMR,UAAU60C,MAClBzjF,EAAEovC,MAAMR,UAAU60C,KAAKl+E,MAAQqpC,EAAU60C,KAAKl+E,OAElD,OAAOm+E,EAAOxmE,QAAQ61B,QASpBmwC,EAAAvjF,UAAA0jF,aAAR,SAAqBnxE,GACnB,OACGA,EAAQsiB,SACRtiB,EAAQsiB,OAAOmvD,SAChBzxE,EAAQsiB,OAAOmvD,QAAQtjF,OAAS,EAEzB,GAGM6R,EAAQsiB,OAAOmvD,QAASppE,KAAI,SAAA1Z,GAAK,OAAAga,EAAAA,GAAG,CAAE+zB,UAAW/tC,iDApDvBi2B,MArBhCosD,EAAsB1iF,EAAA,CALlCuI,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAA,ooBACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B+hE,oBCmBb,SAAAU,KAAkC,OAArBA,EAAmBpjF,EAAA,CArB/B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAonC,EAAAA,aACAF,GACA3nB,GACA4nB,IAEFlnC,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbi0E,uBAAwB,CACtBh0E,UAAWg0E,QAKnB95E,aAAc,CAAC85E,IACf5zE,gBAAiB,CAAC4zE,IAClBt5E,QAAS,CAACs5E,OAECU,oBCXX,SAAAC,EACYv/C,EACF6/B,EACE1+D,GAFAhG,KAAA6kC,sBAAAA,EACF7kC,KAAA0kE,mBAAAA,EACE1kE,KAAAgG,OAAAA,EAPZhG,KAAAqkF,oBAAsB,IAAItjE,EAAAA,iBAAyB,GAEnD/gB,KAAAikD,SAAgCjkD,KAAK6kC,sBAAsBnN,aAsE7D,OA9DE0sD,EAAAlkF,UAAAokF,sBAAA,WACEtkF,KAAKqkF,oBAAoB7hF,OAAOxC,KAAKukF,wBAIvCH,EAAAlkF,UAAAskF,YAAA,WAAA,IAAA97E,EAAA1I,KAEEA,KAAK0kE,mBACFvQ,UAAU,qDACVvmD,WAAU,SAAA62E,GACT,IAAMC,EAAgBh8E,EAAKi8E,mBACrBC,EAAal8E,EAAKm8E,cAAcJ,EAAiBC,GACjDI,EAAmBp8E,EAAK67E,sBAC1BK,GAAcE,IAChBp8E,EAAKq8E,mBAAmBH,GACxBp4C,YACE,WAAM,OAAAs4C,EAAiBE,eAAe,CAAEC,SAAU,aAClD,OAIL12E,eAKG61E,EAAAlkF,UAAAqkF,oBAAR,WACE,OAAOvkF,KAAKgG,OAAOwB,SAAS01E,cAAc,uBAIpCkH,EAAAlkF,UAAAykF,iBAAR,WACE,OAAO3kF,KAAKgG,OAAOwB,SAAS01E,cAAc,+BAIpCkH,EAAAlkF,UAAA6kF,mBAAR,SAA2Bp7C,GAEtBA,EAAIw1C,UAAUj/C,SAAS,YACxByJ,EAAIw1C,UAAUj/C,SAAS,YAEvByJ,EAAIu7C,SAKAd,EAAAlkF,UAAA2kF,cAAR,SAAsBziF,EAAesiF,WACnC,GAAIA,EAAe,CAGjB,IAAMS,EAA6CT,EAAcj9E,qBAC/D,cAIF,IAA4B,IAAA0F,EAAA5J,EAAA5D,MAAMqa,KAAKmrE,IAAYrmE,EAAA3R,EAAA3K,QAAAsc,EAAA7b,KAAA6b,EAAA3R,EAAA3K,OAAE,CAAhD,IAAM4iF,EAAatmE,EAAA5b,MACtB,GAAIkiF,EAAcjzD,UAAUjrB,SAAS9E,GACnC,OAAOgjF,gJA9DoB/tD,UACLhjB,EAAAA,0BACVtM,EAAAA,aARTq8E,EAAqBrjF,EAAA,CALjCuI,EAAAA,UAAU,CACTC,SAAU,mBACVC,SAAA,utBACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B0iE,oBCOb,SAAAiB,KAAiC,OAApBA,EAAkBtkF,EAAA,CAf9B2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcyF,EAAAA,WAAYysC,IACpCjyC,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb40E,sBAAuB,CACrB30E,UAAW20E,QAKnBz6E,aAAc,CAACy6E,IACfj6E,QAAS,CAACi6E,IACVv0E,gBAAiB,CAACu0E,OAEPiB,oBCqBX,SAAAC,EACYC,EACAzyE,EACAujC,EACAmvC,EACA/zD,EACA7P,GANZ,IAAAlZ,EAAA1I,KACYA,KAAAulF,qBAAAA,EACAvlF,KAAA8S,QAAAA,EACA9S,KAAAq2C,eAAAA,EACAr2C,KAAAwlF,gBAAAA,EACAxlF,KAAAyxB,gBAAAA,EACAzxB,KAAA4hB,OAAAA,EAZF5hB,KAAAylF,gBAAkB,GAITzlF,KAAA0lF,wBAA0B,4BAWrC1lF,KAAA2lF,eAEJ3lF,KAAKulF,qBACN9G,aACA3xE,KAAK4S,EAAAA,QAAO,SAAAkmE,GAAgB,OAAApmF,OAAOigB,KAAKmmE,GAAchlF,OAAS,MAE1DZ,KAAA6lF,iBAEJh5E,EAAAA,cAAc,CAChB7M,KAAK8S,QAAQ8kB,iBAAiB9qB,KAC5BE,EAAAA,sBAAqB,SAAC8qB,EAAG71B,GAGvB,OAAO61B,EAAEld,MAAM9U,MAAQ7D,EAAE2Y,MAAM9U,QAInC9F,KAAKyxB,gBAAgBC,YACrB1xB,KAAKwlF,gBAAgB9zD,cACpB5kB,KACDg5E,EAAAA,MAAM,EAAG,SACT74E,EAAAA,KAAI,SAAC2N,GACH,IAAMmrE,EAAWr9E,EAAKs9E,qBACpBprE,EAAMid,OACNjd,EAAMi8B,aAERnuC,EAAKmlB,OAAOk4D,OAaP/lF,KAAAimF,OAAwCp5E,EAAAA,cAAc,CAC7D7M,KAAK2lF,eACL3lF,KAAK6lF,mBACJ/4E,KAAKg5E,EAAAA,MAAM,GAAI7kD,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,YAEzDmkD,EAAAplF,UAAAgmF,mBAAA,WACElmF,KAAKulF,qBAAqB/G,gBAGpB8G,EAAAplF,UAAA8lF,qBAAR,SACEG,EACAtvC,GAEA,MAAO,CACLlX,MAAOkX,EAAYlX,OAAS3/B,KAAKomF,wBAAwBD,GACzDvmD,SAAUiX,EAAYjX,UAAY5/B,KAAKylF,gBACvChvC,YAAaI,EAAYJ,YACzBc,SAAUV,EAAYU,WAIlB+tC,EAAAplF,UAAAkmF,wBAAR,SAAgCl5E,OAC9Bm5E,EAAAn5E,EAAAm5E,UACAr4D,EAAA9gB,EAAA8gB,aACA2R,EAAAzyB,EAAAyyB,MAEA,OAAIA,IAGA3R,EACKhuB,KAAK0lF,wBAA0B13D,EAEpCq4D,EACKrmF,KAAK0lF,wBAA0BW,OADxC,IAKMf,EAAAplF,UAAA2tB,OAAR,SAAek4D,GACb,IAAMpmD,EAAQomD,EAASpmD,MACjB2mD,EAAetmF,KAAKumF,gBAAgBR,GAE1C/lF,KAAKulF,qBAAqB13D,OAAO8R,EAAO2mD,IAGlChB,EAAAplF,UAAAqmF,gBAAR,SAAwBR,GACtB,IAAMhuE,EAAuB,CAC3B0+B,YAAasvC,EAAStvC,YACtB7W,SAAUmmD,EAASnmD,SACnB2X,SAAUwuC,EAASxuC,UAMrB,OAFA/3C,OAAOigB,KAAK1H,GAAQjP,SAAQ,SAAA5H,GAAO,OAAC6W,EAAO7W,WAAe6W,EAAO7W,MAE1D6W,GAGTutE,EAAAplF,UAAAsmF,SAAA,SAAS7mD,GACP3/B,KAAKymF,eAAe,CAAE9mD,MAAKA,EAAE8W,iBAAa7/B,KAG5C0uE,EAAAplF,UAAAwmF,SAAA,SAASC,GACP3mF,KAAKymF,eAAe,CAAEhwC,YAAakwC,KAMrCrB,EAAAplF,UAAA0mF,aAAA,SAAaD,GAAb,IAAAj+E,EAAA1I,KACEA,KAAK8S,QACF8kB,iBACAhqB,WAAU,SAAA+M,GACT,IAAMksE,EAAgBn+E,EAAKs9E,qBACzBrrE,EAAMC,MAAMid,OACZld,EAAMC,MAAMi8B,aAERkvC,EAAQ1lF,EAAAA,EAAA,GACTwmF,GAAa,CAChBpwC,YAAakwC,IAEfj+E,EAAKmlB,OAAOk4D,MAEbx3E,eAGL+2E,EAAAplF,UAAA89C,KAAA,SAAKzG,GACHv3C,KAAKymF,eAAe,CAAElvC,SAAQA,KAGxB+tC,EAAAplF,UAAAumF,eAAR,SAAuB5vC,GACrB72C,KAAK4hB,OAAOklE,SAAS,GAAI,CACvBjwC,YAAWA,EACXkwC,oBAAqB,QACrBC,WAAYhnF,KAAKq2C,2DA5Ia5hC,EAAAA,4BACbI,EAAAA,sBACOqiC,EAAAA,sBACCpiC,EAAAA,uBACAC,EAAAA,uBACTkO,EAAAA,ySAdTqiE,EAA2BvkF,EAAA,CADvCmH,EAAAA,WAAW,CAAEC,WAAY,UACbm9E,O3FzBDxf,GAAAA,EAAAA,YAAAA,EAAAA,UAAS,KACnB,KAAA,OACAA,GAAA,KAAA,OAQF,I4FnBYmhB,G5FmBZC,GAAA,WAAA,SAAAA,IACElnF,KAAA4L,UAAYxL,EAAAA,UAIZJ,KAAAmnF,WAAa,IAAIr/D,EAAAA,aAwBnB,OAtBEtoB,OAAAiC,eAAIylF,EAAAhnF,UAAA,cAAW,KAAf,WAEE,MAAO,cADkBF,KAAKonF,SAASzgD,+CAQzCnnC,OAAAiC,eAAIylF,EAAAhnF,UAAA,WAAQ,KAAZ,WACE,MAAkB,SAAdF,KAAKiuD,KACAjuD,KAAK4L,UAAUrH,KACC,SAAdvE,KAAKiuD,KACPjuD,KAAK4L,UAAUpH,UADjB,mCAKT0iF,EAAAhnF,UAAAuuD,WAAA,WACE,IAAM44B,EACJrnF,KAAKiuD,OAAS6X,EAAAA,UAAUwhB,KAAOxhB,EAAAA,UAAUyhB,KAAOzhB,EAAAA,UAAUwhB,KAC5DtnF,KAAKmnF,WAAW5+D,KAAK8+D,IAxBvBtmF,EAAA,CADCsI,EAAAA,oCAGDtI,EAAA,CADCooB,EAAAA,2CAJU+9D,EAAoBnmF,EAAA,CALhCuI,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,kTACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BwlE,GAAb,iB6FuBE,SAAAM,EACU3mE,EACA4mE,EACDC,GAFC1nF,KAAA6gB,kBAAAA,EACA7gB,KAAAynF,4BAAAA,EACDznF,KAAA0nF,aAAAA,EA/BD1nF,KAAA+nB,aAAe,IAAIrc,EAAAA,aAI3B1L,KAAAimF,OAAwCjmF,KAAKynF,4BAC1CxB,OAEHjmF,KAAA2nF,UAAY,IAAI5mE,EAAAA,gBAA2B+kD,EAAAA,UAAUwhB,MACrDtnF,KAAA8lE,UAAYA,EAAAA,UAqDd,OA3BE0hB,EAAAtnF,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAK4nF,iBAAmB5nF,KAAK0nF,aAAaxrC,KAAKonC,eAAex5C,OAE9D9pC,KAAKynF,4BAA4BvB,qBAEjClmF,KAAK+nB,aAAanb,IAChB5M,KAAK6gB,kBAAkBG,cAAclU,KAAKC,EAAAA,KAAK,IAAIa,WAAU,SAAApE,GAC3Dd,EAAKi/E,UAAUnlF,KACA,4BAAbgH,EACIs8D,EAAAA,UAAUwhB,KACVxhB,EAAAA,UAAUyhB,WAMtBC,EAAAtnF,UAAAo3C,SAAA,SAASC,GACPv3C,KAAKynF,4BAA4BzpC,KAAKzG,IAGxCiwC,EAAAtnF,UAAA2nF,YAAA,SAAY55B,GACVjuD,KAAK2nF,UAAUnlF,KAAKyrD,IAGtBu5B,EAAAtnF,UAAAoO,YAAA,WACEtO,KAAK+nB,aAAaxZ,wDA9BS0P,SACUqnE,UACfnpC,MAhCbqrC,EAAoBzmF,EAAA,CAJhCuI,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,8pIAEWg+E,oBCsCX,SAAAM,EACUL,EACA/E,GADA1iF,KAAAynF,4BAAAA,EACAznF,KAAA0iF,IAAAA,EAzCF1iF,KAAA+nB,aAAe,IAAIrc,EAAAA,aAgC3B1L,KAAA8lE,UAAYA,EAAAA,UACZ9lE,KAAA+nF,gBAAiB,EACjB/nF,KAAAgoF,WAAY,EACZhoF,KAAAioF,eAAgB,EAChBjoF,KAAAkoF,YAAa,EACbloF,KAAAijD,SAAU,EAwHZ,OA1JEzjD,OAAAiC,eAAIqmF,EAAA5nF,UAAA,YAAS,KAAb,SAAcioF,GACZnoF,KAAKooF,2BAA2BD,oCAKlC3oF,OAAAiC,eAAIqmF,EAAA5nF,UAAA,WAAQ,KAAZ,SAAamoF,GACXroF,KAAKsoF,yBAAyBD,oCAKhC7oF,OAAAiC,eAAIqmF,EAAA5nF,UAAA,cAAW,KAAf,SAAgBqoF,GACdvoF,KAAKuoF,cAAgBA,EAGjBvoF,KAAKonF,SACPpnF,KAAKwoF,4BAILxoF,KAAKonF,SAAWmB,mCAoBpBT,EAAA5nF,UAAAuoF,WAAA,SAAW9B,GACT3mF,KAAK+nF,gBAAiB,EACtB/nF,KAAK0iF,IAAIz5D,eACTjpB,KAAKynF,4BAA4Bb,aAAaD,IAGhDmB,EAAA5nF,UAAAwoF,aAAA,SAAa/B,GACX3mF,KAAKioF,eAAgB,EACrBjoF,KAAKyoF,WAAW9B,IAGlBmB,EAAA5nF,UAAAyoF,YAAA,WACE/rE,OAAOgsE,OAAO,EAAG,IAGXd,EAAA5nF,UAAAkoF,2BAAR,SAAmCV,GACjC,IAAMmB,EAAWnB,EAAaxrC,KAAKonC,eAAeE,eAC5CsF,EAAqBpB,EAAaxrC,KAAKonC,eAAeC,aAI5DvjF,KAAKujF,aAAesF,EAAW,EAAIC,GAG7BhB,EAAA5nF,UAAAooF,yBAAR,SAAiCD,GAC3BroF,KAAK+oF,WAAWV,KAIhBroF,KAAK+nF,eACP/nF,KAAKgpF,MAAK3oF,EAAAA,EAAA,GACLgoF,GAAU,CACb1c,SAAU3rE,KAAKgpF,MAAMrd,SAAS7nE,OAAOukF,EAAW1c,aAGlD3rE,KAAKgpF,MAAQX,EACbroF,KAAKo+E,YAAcp+E,KAAKujF,cAE1BvjF,KAAKipF,gBACLjpF,KAAK0iF,IAAIz5D,iBAGH6+D,EAAA5nF,UAAAsoF,0BAAR,WACExoF,KAAK2oF,cACL3oF,KAAKgoF,WAAY,EACjBhoF,KAAKynF,4BAA4Bb,aAAa,IAIxCkB,EAAA5nF,UAAA+oF,cAAR,WACEjpF,KAAKijD,SAAWjjD,KAAKgpF,MAAMrd,UAA2C,IAA/B3rE,KAAKgpF,MAAMrd,SAAS/qE,OAE3DZ,KAAKkoF,WACHloF,KAAKgpF,MAAMz2C,WAAWkE,cACtBz2C,KAAKgpF,MAAMz2C,WAAWiE,WAAa,EAErCx2C,KAAKioF,cACHjoF,KAAKujF,cACiB,IAAtBvjF,KAAKujF,cACLvjF,KAAKgpF,MAAMrd,SAAS/qE,QAAUZ,KAAKo+E,YAGjCp+E,KAAKioF,gBACPjoF,KAAKo+E,YAAcp+E,KAAKgpF,MAAMrd,SAAS/qE,OAASZ,KAAKujF,cAKnDvjF,KAAKonF,WAAapnF,KAAKuoF,gBACzBvoF,KAAKonF,SAAWpnF,KAAKuoF,eAGvBvoF,KAAKgoF,WAAY,EACjBhoF,KAAK+nF,gBAAiB,GAQhBD,EAAA5nF,UAAA6oF,WAAR,SAAmBV,GACjB,IACGroF,KAAKgoF,WACNhoF,KAAKgpF,OACLhpF,KAAKgpF,MAAMh1D,aACXq0D,EAAWr0D,aACXh0B,KAAKgpF,MAAMh1D,YAAYpzB,OAAS,GAChCynF,EAAWr0D,YAAYpzB,OAAS,GAE5BZ,KAAKgpF,MAAMh1D,YAAYpzB,SAAWynF,EAAWr0D,YAAYpzB,OAC3D,IAAK,IAAIH,EAAI,EAAGA,EAAIT,KAAKgpF,MAAMh1D,YAAYpzB,OAAQH,IACjD,GACET,KAAKgpF,MAAMh1D,YAAYvzB,GAAGyoF,YACxBb,EAAWr0D,YAAYvzB,GAAGyoF,WAC5BlpF,KAAKgpF,MAAMh1D,YAAYvzB,GAAG0oF,iBACxBd,EAAWr0D,YAAYvzB,GAAG0oF,gBAC5BnpF,KAAKgpF,MAAMh1D,YAAYvzB,GAAG2oF,YAAYzpD,MAAMz8B,QAC1CmlF,EAAWr0D,YAAYvzB,GAAG2oF,YAAYzpD,MAAMz8B,OAC9ClD,KAAKgpF,MAAMz2C,WAAWkE,cACpB4xC,EAAW91C,WAAWkE,YAExB,OAAO,EAKf,OAAO,GAGTqxC,EAAA5nF,UAAAoO,YAAA,WACEtO,KAAK+nB,aAAaxZ,wDAnHmB+2E,UACxB3oD,EAAAA,qBAtCf57B,EAAA,CADCsI,EAAAA,MAAM,+CAOPtI,EAAA,CADCsI,EAAAA,MAAM,uCAOPtI,EAAA,CADCsI,EAAAA,MAAM,kDAfIy+E,EAAsB/mF,EAAA,CAJlCuI,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAA,mqFAEWs+E,oBCsBX,SAAAuB,EACU99E,EACA8qC,EACAoxC,GAFAznF,KAAAuL,aAAAA,EACAvL,KAAAq2C,eAAAA,EACAr2C,KAAAynF,4BAAAA,EAbVznF,KAAA4L,UAAYxL,EAAAA,UAMJJ,KAAAspF,gBAAkB,IAAI3vE,IAS5B3Z,KAAKupF,mBAAqB,IAAI3kE,IAC9B5kB,KAAKwpF,WAAa,IAAIC,EAAAA,qBA2E1B,OAxEEJ,EAAAnpF,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAK0pF,IAAM1pF,KAAKq2C,eAAexe,OAAOjqB,WAAU,SAAAiqB,GAC9CnvB,EAAKihF,qBAAuB9xD,EAAO7J,cAAgB6J,EAAOwuD,aAG5DrmF,KAAK4pF,cAAgB5pF,KAAKynF,4BAA4BxB,OAAOn5E,KAC3DG,EAAAA,KAAI,SAAA24E,GACEA,EAAaiE,QACfjE,EAAaiE,OAAO/gF,SAAQ,SAAA8X,GAC1BlY,EAAK6gF,mBAAmB9jE,IAAI7E,EAAGM,MAAM,UAM7ClhB,KAAK8pF,eAAiB9pF,KAAK4pF,cAAc98E,KACvCgO,EAAAA,KAAI,SAAA8qE,GACF,OAAOA,EAAaiE,OAChBjE,EAAaiE,OAAOnqE,QAAO,SAAAqqE,GAAS,OAAAA,EAAMC,WAC1C,QAKVX,EAAAnpF,UAAA+pF,gBAAA,SAAgBt/E,GACd3K,KAAKuL,aAAab,KAAKC,EAAS,CAAEu/E,eAAgB,uBAGpDb,EAAAnpF,UAAAiqF,YAAA,SAAYxqD,GACV3/B,KAAKynF,4BAA4BjB,SAC/BxmF,KAAKwpF,WAAWY,YAAYzqD,KAIhC0pD,EAAAnpF,UAAAmqF,SAAA,SAASC,GACPtqF,KAAKuqF,yBAAyBD,GAAW,IAG3CjB,EAAAnpF,UAAAsqF,SAAA,SAASF,GACPtqF,KAAKuqF,yBAAyBD,GAAW,IAGnCjB,EAAAnpF,UAAAqqF,yBAAR,SAAiCD,EAAmBG,GAClDzqF,KAAKupF,mBAAmB9jE,IAAI6kE,EAAWG,IAGzCpB,EAAAnpF,UAAAwqF,iBAAA,SAAiBJ,GACf,OAAOtqF,KAAKspF,gBAAgBqB,IAAIL,IAGlCjB,EAAAnpF,UAAA0qF,YAAA,SAAYN,GACNtqF,KAAKspF,gBAAgBqB,IAAIL,GAC3BtqF,KAAKspF,gBAAgB77C,OAAO68C,GAE5BtqF,KAAKspF,gBAAgB18E,IAAI09E,IAI7BjB,EAAAnpF,UAAA2qF,sBAAA,SAAsBd,GACpB,OAAOA,EAAMe,OAAOttE,MAClB,EACAxd,KAAKupF,mBAAmB/xE,IAAIuyE,EAAM7oE,MAC9B6oE,EAAMe,OAAOlqF,OACbmpF,EAAMgB,gBAId1B,EAAAnpF,UAAAoO,YAAA,WACMtO,KAAK0pF,KACP1pF,KAAK0pF,IAAIn7E,wDA7EWhE,SACE2sC,EAAAA,sBACaouC,MAhB5B+D,EAA+BtoF,EAAA,CAL3CuI,EAAAA,UAAU,CACTC,SAAU,8BACVC,SAAA,6hNACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B2nE,oBCbb,SAAA2B,KAEA,OADWjqF,EAAA,CAARsI,EAAAA,uCADU2hF,EAAwBjqF,EAAA,CALpCuI,EAAAA,UAAU,CACTC,SAAU,uBACVC,SAAA,srCACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BspE,oBCAb,SAAAC,KAEA,OADWlqF,EAAA,CAARsI,EAAAA,uCADU4hF,EAAwBlqF,EAAA,CALpCuI,EAAAA,UAAU,CACTC,SAAU,uBACVC,SAAA,skDACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BupE,oBCKX,SAAAC,EAAoBrmD,GAAA7kC,KAAA6kC,sBAAAA,EAEpB7kC,KAAAmrF,SAAyB,GACzBnrF,KAAAorF,YAAcC,EAAAA,YAgBhB,OAbEH,EAAAhrF,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAKikD,SAAWjkD,KAAK6kC,sBAAsBnN,aAAa5qB,KACtD4S,EAAAA,QAAO,SAAAjN,GAAW,SAAGA,IAAWA,EAAQ64E,gBACxCt+E,EAAAA,uBACAC,EAAAA,KAAI,SAAAwF,GACFA,EAAQ64E,YAAYxiF,SAAQ,SAAAyiF,GACtBA,GAAUA,EAAOH,cACnB1iF,EAAKyiF,SAASI,EAAOH,aAAeG,oDAbHl0D,MADhC6zD,EAAwBnqF,EAAA,CALpCuI,EAAAA,UAAU,CACTC,SAAU,sBACVC,SAAA,mqBACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BwpE,oBCQX,SAAAM,EACU1kF,EACAwwB,EACAnU,GAFAnjB,KAAA8G,OAAAA,EACA9G,KAAAs3B,eAAAA,EACAt3B,KAAAmjB,eAAAA,EAGVnjB,KAAAyrF,iBAAmBC,EAAAA,iBAsCrB,OAjCEF,EAAAtrF,UAAAyrF,sBAAA,SAAsBC,GACpB,IAAMzwE,EAAMywE,EAAW7kF,MAAK,SAAA8+D,GAAK,OAAAA,EAAEgmB,YAAcH,EAAAA,iBAAiBI,SAClE,OAAO3wE,EAAMA,EAAIjY,MAAQ,IAG3BsoF,EAAAtrF,UAAA6rF,uBAAA,SACEC,GAEA,IAAMH,EAAYG,EAAwBjlF,MAAK,SAAAqtB,GAAQ,OAAAA,EAAKxD,SAC5D,OAAOi7D,EACH,GAAG7rF,KAAK8G,OAAOqpC,QAAQE,IAAID,QAAUy7C,EAAUj7D,MAAM9qB,IACrD,IAGN0lF,EAAAtrF,UAAA+rF,YAAA,SAAYp3D,GAAZ,IAAAnsB,EAAA1I,KAiBE,OAhBI60B,GACF70B,KAAKs3B,eACF9f,IAAIqd,EAAM2C,EAAAA,aAAahzB,MACvBsI,KAGC4S,EAAAA,OAAO1T,SACPe,EAAAA,KAAK,IAENa,WAAU,SAAC6E,GACV/J,EAAKya,eAAewV,GAAG,CACrBC,QAAS,UACTf,OAAQplB,OAIT,+CAzCS69B,EAAAA,iBACQ97B,EAAAA,sBACAK,EAAAA,kBAM1B9T,EAAA,CADCsI,EAAAA,wCATUmiF,EAA6BzqF,EAAA,CALzCuI,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAA,+zBACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B8pE,oBCNb,SAAAU,KAAyC,OAA5BA,EAA0BnrF,EAAA,CANtC2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAconC,EAAAA,aAAcC,EAAAA,UAAW5hC,EAAAA,YACjD3F,aAAc,CAAC6hF,IACf37E,gBAAiB,CAAC27E,IAClBrhF,QAAS,CAACqhF,OAECU,oBCMX,SAAAC,EACU70D,EACAnU,GADAnjB,KAAAs3B,eAAAA,EACAt3B,KAAAmjB,eAAAA,EAgCZ,OAvBEgpE,EAAAjsF,UAAAksF,WAAA,SAAWv3D,GAAX,IAAAnsB,EAAA1I,KAiBE,OAhBI60B,GACF70B,KAAKs3B,eACF9f,IAAIqd,EAAM2C,EAAAA,aAAahzB,MACvBsI,KAGC4S,EAAAA,OAAO1T,SACPe,EAAAA,KAAK,IAENa,WAAU,SAAC6E,GACV/J,EAAKya,eAAewV,GAAG,CACrBC,QAAS,UACTf,OAAQplB,OAIT,MAET05E,EAAAjsF,UAAAyrF,sBAAA,SAAsBC,GACpB,IAAMzwE,EAAMywE,EAAW7kF,MAAK,SAAA8+D,GAAK,OAAAA,EAAEgmB,YAAcH,EAAAA,iBAAiBW,QAClE,OAAOlxE,EAAMA,EAAIjY,MAAQ,6CA/BDsR,EAAAA,sBACAK,EAAAA,kBAI1B9T,EAAA,CADCsI,EAAAA,uCAIDtI,EAAA,CADCsI,EAAAA,wCATU8iF,EAA4BprF,EAAA,CALxCuI,EAAAA,UAAU,CACTC,SAAU,2BACVC,SAAA,6qBACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9ByqE,oBCLb,SAAAG,KAAwC,OAA3BA,EAAyBvrF,EAAA,CANrC2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAconC,EAAAA,aAAcC,EAAAA,UAAW5hC,EAAAA,YACjD3F,aAAc,CAACwiF,IACft8E,gBAAiB,CAACs8E,IAClBhiF,QAAS,CAACgiF,OAECG,oBCGX,SAAAC,EAAoBppE,GAAAnjB,KAAAmjB,eAAAA,EAqBtB,OAbEopE,EAAArsF,UAAAssF,YAAA,SAAY33D,EAAc3T,GAOxB,OANI2T,GACF70B,KAAKmjB,eAAewV,GAAG,CACrBC,QAAS,UACTf,OAAQ,CAAEhD,KAAIA,EAAE3T,KAAIA,KAGjB,MAETqrE,EAAArsF,UAAAyrF,sBAAA,SAAsBC,GACpB,IAAMzwE,EAAMywE,EAAW7kF,MAAK,SAAA8+D,GAAK,OAAAA,EAAEgmB,YAAcH,EAAAA,iBAAiBe,SAClE,OAAOtxE,EAAMA,EAAIjY,MAAQ,6CAnBS2R,EAAAA,kBAGpC9T,EAAA,CADCsI,EAAAA,uCAIDtI,EAAA,CADCsI,EAAAA,wCANUkjF,EAA6BxrF,EAAA,CALzCuI,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAA,ygBACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B6qE,oBCFb,SAAAG,KAAyC,OAA5BA,EAA0B3rF,EAAA,CANtC2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAconC,EAAAA,aAAcC,EAAAA,UAAW5hC,EAAAA,YACjD3F,aAAc,CAAC4iF,IACf18E,gBAAiB,CAAC08E,IAClBpiF,QAAS,CAACoiF,OAECG,oBCSX,SAAAC,EAAoB7lF,GAAA9G,KAAA8G,OAAAA,EAKpB9G,KAAA4sF,aAA0C,GAkC5C,OAhCED,EAAAzsF,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAKmrF,SAASriF,SAAQ,SAAA+jF,GACpBnkF,EAAKkkF,aAAaC,EAAQh4D,MAAQnsB,EAAKokF,eACrCD,EAAQb,6BAKdW,EAAAzsF,UAAA6rF,uBAAA,SACEC,GAEA,IAAMjI,EAAYiI,EAAwBjlF,MACxC,SAAAqtB,GAAQ,OAAAA,EAAKy3D,YAAcH,EAAAA,iBAAiBqB,aAE9C,OAAOhJ,EACH,GAAG/jF,KAAK8G,OAAOqpC,QAAQE,IAAID,QAAU2zC,EAAUnzD,MAAM9qB,IACrD,IAGE6mF,EAAAzsF,UAAA4sF,eAAR,SACEd,GAEA,IAAMgB,EAAiBhB,EAAwBjlF,MAC7C,SAAAqtB,GAAQ,OAAAA,EAAKy3D,YAAcH,EAAAA,iBAAiBuB,mBAExCC,EAAWF,EACbhB,EAAwBjlF,MACtB,SAAAqtB,GAAQ,OAAAA,EAAKy3D,YAAcmB,EAAe9pF,SAE5C,KACJ,OAAOgqF,EAAWA,EAAShqF,MAAQ,6CArCTotC,EAAAA,aAG5BvvC,EAAA,CADCsI,EAAAA,wCAHUsjF,EAA0B5rF,EAAA,CANtCuI,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,6PAEAgY,gBAAiBC,EAAAA,wBAAwBC,gHAE9BirE,oBCRb,SAAAQ,KAAsC,OAAzBA,EAAuBpsF,EAAA,CANnC2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAconC,EAAAA,aAAcC,EAAAA,UAAW5hC,EAAAA,YACjD3F,aAAc,CAACgjF,IACf98E,gBAAiB,CAAC88E,IAClBxiF,QAAS,CAACwiF,OAECQ,oBCIX,SAAAC,EACU91D,EACAnU,GADAnjB,KAAAs3B,eAAAA,EACAt3B,KAAAmjB,eAAAA,SAGViqE,EAAAltF,UAAA8a,YAAA,WAAA,IAAAtS,EAAA1I,KACE,OAAOA,KAAKmjB,eAAeyU,iBAAiB9qB,KAC1CgO,EAAAA,KAAI,SAAAF,GAAS,OAAAA,EAAMyyE,UAAUx1D,OAAO3J,eACpCrP,EAAAA,WAAU,SAACqP,GAET,OAAKA,EAIExlB,EAAK4uB,eAAe9f,IAAI0W,EAAasJ,EAAAA,aAAa81D,UAAUxgF,KACjE4S,EAAAA,OAAO1T,SACP8O,EAAAA,KAAI,SAACrI,GACH,GAAKA,EAAQ86E,YAeX,OAAO,EAdP,IAAMV,EAAUnkF,EAAK8kF,YAAY/6E,EAAQg7E,gBAYzC,OATA/kF,EAAK4uB,eACF9f,IAAIq1E,EAAQh4D,KAAM2C,EAAAA,aAAahzB,MAC/BsI,KAAK4S,EAAAA,OAAO1T,SAAUe,EAAAA,KAAK,IAC3Ba,WAAU,SAAC8/E,GACVhlF,EAAKya,eAAewV,GAAG,CACrBC,QAAS,UACTf,OAAQ61D,QAGP,MAnBJtyE,EAAAA,IAAG,QA6BlBgyE,EAAAltF,UAAAstF,YAAA,SAAYrC,GACV,IAAMl5B,EAA2Bk5B,EAASzrE,QAAO,SAAAmtE,GAC/C,SAAOA,EAAQx3D,QAASw3D,EAAQx3D,MAAMiQ,aAAaunD,KAErD,OAAQ56B,EAAQrxD,QAAUuqF,EAASvqF,OAASuqF,EAAS,GAAKl5B,EAAQ,6CA3C1Cz9C,EAAAA,sBACAK,EAAAA,iLAHfu4E,EAAmBrsF,EAAA,CAH/BmH,EAAAA,WAAW,CACVC,WAAY,UAEDilF,oBC2Bb,SAAAO,KAAoC,OAAvBA,EAAqB5sF,EAAA,CAzBjC2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAonC,EAAAA,aACAC,EAAAA,UACA5hC,EAAAA,WACA48E,GACAI,GACAI,GACAS,IAEFrjF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbo+E,gCAAiC,CAC/Bn+E,UAAWy7E,GACXxxE,OAAQ,CAAC0zE,SAKjBzjF,aAAc,CAACuhF,IACfr7E,gBAAiB,CAACq7E,IAClB/gF,QAAS,CAACwiF,OAECgB,oBC4Cb,SAAAE,KAAgC,OAAnBA,EAAiB9sF,EAAA,CAvD7B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAonC,EAAAA,aACAF,GACAmR,GACAnQ,GACAyF,GACAtG,EAAAA,UACA5hC,EAAAA,WACAysC,GACAtyC,EACAmuC,GACAk2C,EAAAA,qBACA9xC,GACA2xC,GACAp+E,EAAAA,sBAEFzF,UAAW,CACTC,EAAAA,qBAAiCs5E,IACjCt5E,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbu+E,wBAAyB,CACvBt+E,UAAW+3E,IAEbwG,qBAAsB,CACpBv+E,UAAW+3E,IAEbyG,2BAA4B,CAC1Bx+E,UAAW+3E,IAEb0G,2BAA4B,CAC1Bz+E,UAAW45E,QAKnB1/E,aAAc,CACZ69E,GACA6B,GACA4B,GACAD,GACA9D,GACAY,IAEF39E,QAAS,CACPq9E,GACA6B,GACA4B,GACAD,GACA9D,GACAY,IAEFj4E,gBAAiB,CAAC23E,GAAsB6B,OAE7BwE,OjBtFD5G,GAAAA,EAAAA,uBAAAA,EAAAA,qBAAoB,KAC9B,MAAA,YACAA,GAAA,MAAA,YACAA,GAAA,MAAA,YACAA,GAAA,QAAA,gCkBYA,SAAAkH,EAAsBtpD,GAAA7kC,KAAA6kC,sBAAAA,EAJtB7kC,KAAAouF,QAAUnH,EAAAA,qBAEVjnF,KAAAikD,SAAgCjkD,KAAK6kC,sBAAsBnN,aAG7D,gDAD+CL,MALlC82D,EAAuBptF,EAAA,CALnCuI,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAA,yxBACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BysE,oBCUb,SAAAE,KAAmC,OAAtBA,EAAoBttF,EAAA,CAfhC2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcuf,GAAc9Z,EAAAA,YACtCxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb2+E,wBAAyB,CACvB1+E,UAAW0+E,QAKnBxkF,aAAc,CAACwkF,IACft+E,gBAAiB,CAACs+E,IAClBhkF,QAAS,CAACgkF,OAECE,oBCNX,SAAAC,EAAsBzpD,GAAA7kC,KAAA6kC,sBAAAA,EAJtB7kC,KAAAikD,SAAgCjkD,KAAK6kC,sBAAsBnN,WACzDF,EAAAA,aAAa+2D,YAOjB,OADED,EAAApuF,UAAAiM,SAAA,sDAH6CkrB,MALlCi3D,EAA0BvtF,EAAA,CALtCuI,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAA,2lBACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B4sE,oBCWb,SAAAE,KAAsC,OAAzBA,EAAuBztF,EAAA,CAfnC2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcyF,EAAAA,YACxBxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbi/E,yBAA0B,CACxBh/E,UAAW6+E,QAKnB3kF,aAAc,CAAC2kF,IACfz+E,gBAAiB,CAACy+E,IAClBnkF,QAAS,CAACmkF,OAECE,oBCRX,SAAAE,EAAsB7pD,GAAA7kC,KAAA6kC,sBAAAA,EAKxB,OAHE6pD,EAAAxuF,UAAAiM,SAAA,WACEnM,KAAKikD,SAAWjkD,KAAK6kC,sBAAsBnN,uDAHAL,MAHlCq3D,EAA0B3tF,EAAA,CALtCuI,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,4IACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BgtE,oBCWb,SAAAC,KAAsC,OAAzBA,EAAuB5tF,EAAA,CAfnC2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,cACVC,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbk/E,2BAA4B,CAC1Bj/E,UAAWi/E,QAKnB/kF,aAAc,CAAC+kF,IACf7+E,gBAAiB,CAAC6+E,IAClBvkF,QAAS,CAACukF,OAECC,oBC4BX,SAAAC,EACYl5D,EACAmP,EACF/G,EACEgH,GAJZ,IAAAp8B,EAAA1I,KACYA,KAAA01B,cAAAA,EACA11B,KAAA6kC,sBAAAA,EACF7kC,KAAA89B,GAAAA,EACE99B,KAAA8kC,GAAAA,EAxBZ9kC,KAAA6uF,iBAAkB,EAGlB7uF,KAAA8uF,oBAAsB,EAItB9uF,KAAAikD,SAAgCjkD,KAAK6kC,sBAAsBnN,aAE3D13B,KAAA+uF,SAAiC/uF,KAAKikD,SAASn3C,KAC7C4S,EAAAA,QAAO,SAAA9f,GAAK,QAAEA,KACdkb,EAAAA,KAAI,SAAAlb,GAAK,OAAAA,EAAEi1B,QACX7nB,EAAAA,uBACA6R,EAAAA,WAAU,SAAAqP,GAAe,OAAAxlB,EAAKgtB,cAAcC,iBAAiBzH,MAC7DjhB,EAAAA,KAAI,WACFvE,EAAKsmF,kBACLtmF,EAAKumF,aAAevmF,EAAKomF,wBA+E/B,OApEEF,EAAA1uF,UAAAgvF,oBAAA,WACElvF,KAAK6uF,iBAAkB,EAEvB7uF,KAAK8kC,GAAGqqD,gBAEJnvF,KAAKovF,YAAcpvF,KAAKovF,WAAWlmF,eACrClJ,KAAKovF,WAAWlmF,cAAcq+B,SAIlCqnD,EAAA1uF,UAAAmvF,kBAAA,WACErvF,KAAK6uF,iBAAkB,EACvB7uF,KAAKgvF,kBAELhvF,KAAK8kC,GAAGqqD,gBAEJnvF,KAAKsvF,mBAAqBtvF,KAAKsvF,kBAAkBpmF,eACnDlJ,KAAKsvF,kBAAkBpmF,cAAcq+B,SAIzCqnD,EAAA1uF,UAAAqvF,UAAA,SAAUj5D,GACRt2B,KAAKwvF,WAAWlxD,SAAShI,OAAOyJ,SAASzJ,IAGnCs4D,EAAA1uF,UAAAuvF,kBAAR,WAAA,IAAA/mF,EAAA1I,KACER,OAAOigB,KAAKzf,KAAKwvF,WAAWlxD,UAAUx1B,SAAQ,SAAA5H,GAC5CwH,EAAK8mF,WAAWlxD,SAASp9B,GAAKi/C,oBAIlCyuC,EAAA1uF,UAAAwvF,aAAA,SAAaj9E,GACPzS,KAAKwvF,WAAWvvC,MAClBjgD,KAAK2vF,UAAUl9E,GAEfzS,KAAKyvF,qBAITb,EAAA1uF,UAAAyvF,UAAA,SAAUl9E,GACR,IAAMm9E,EAAqB5vF,KAAKwvF,WAAWlxD,SACrCvI,EAAiB,CACrBmB,SAAU04D,EAAmBl/D,MAAMxtB,MACnCszB,QAASo5D,EAAmBp5D,QAAQtzB,MACpCozB,OAAQs5D,EAAmBt5D,OAAOpzB,MAClC2sF,MAAOD,EAAmBE,aAAa5sF,OAGzClD,KAAK01B,cAAc9oB,IAAI6F,EAAQoiB,KAAMkB,GAErC/1B,KAAK6uF,iBAAkB,EACvB7uF,KAAKgvF,kBAELhvF,KAAK8kC,GAAGqqD,gBAEJnvF,KAAKsvF,mBAAqBtvF,KAAKsvF,kBAAkBpmF,eACnDlJ,KAAKsvF,kBAAkBpmF,cAAcq+B,SAIjCqnD,EAAA1uF,UAAA8uF,gBAAR,WACEhvF,KAAKwvF,WAAaxvF,KAAK89B,GAAGI,MAAM,CAC9BxN,MAAO,CAAC,GAAIyN,EAAAA,WAAWC,UACvB5H,QAAS,CAAC,GAAI2H,EAAAA,WAAWC,UACzB9H,OAAQ,CAAC,EAAG,CAAC6H,EAAAA,WAAWiT,IAAI,GAAIjT,EAAAA,WAAW2T,IAAI,KAC/Cg+C,aAAc,+CAvESp7E,EAAAA,4BACQ2iB,UACrBmH,EAAAA,mBACE7B,EAAAA,qBA5B4B57B,EAAA,CAA3Cs/B,EAAAA,UAAU,aAAc,CAAE0vD,QAAQ,sCAEnChvF,EAAA,CADCs/B,EAAAA,UAAU,oBAAqB,CAAE0vD,QAAQ,6CAF/BnB,EAAuB7tF,EAAA,CALnCuI,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAA,onJACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9BktE,oBCKb,SAAAoB,KAAmC,OAAtBA,EAAoBjvF,EAAA,CArBhC2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACA22B,EAAAA,oBACAkX,EAAAA,YACApoC,EAAAA,WACAysC,IAEFjyC,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbygF,2BAA4B,CAC1BxgF,UAAWm/E,QAKnBjlF,aAAc,CAACilF,IACf/+E,gBAAiB,CAAC++E,IAClBzkF,QAAS,CAACykF,OAECoB,oBCjBb,SAAAE,KAAgC,OAAnBA,EAAiBnvF,EAAA,CAP7B2I,EAAAA,SAAS,CACRE,QAAS,CACP4kF,GACAG,GACAqB,OAGSE,oBCCX,SAAAC,EACU5kF,EACA6kF,GADApwF,KAAAuL,aAAAA,EACAvL,KAAAowF,iBAAAA,EAJVpwF,KAAAqwF,aAAyC,GAsB3C,OAfEF,EAAAjwF,UAAAkL,MAAA,WACEpL,KAAKuL,aAAaP,sBAGpBmlF,EAAAjwF,UAAAoO,YAAA,WAAA,IAAA5F,EAAA1I,KACMA,KAAKswF,mBACPtwF,KAAKswF,kBACF1iF,WAAU,SAAA0xC,GACLA,GACF52C,EAAK0nF,iBAAiBG,2BAGzBhiF,wDAhBiBhE,SACIgL,EAAAA,wBANjB46E,EAAgCpvF,EAAA,CAJ5CuI,EAAAA,UAAU,CACTC,SAAU,+BACVC,SAAA,mxFAEW2mF,oBCgCX,SAAAK,EACUr4D,EACA0M,EACAja,EACA85C,EACA0rB,EACA7kF,EACAklF,GANAzwF,KAAAm4B,YAAAA,EACAn4B,KAAA6kC,sBAAAA,EACA7kC,KAAA4qB,qBAAAA,EACA5qB,KAAA0kE,mBAAAA,EACA1kE,KAAAowF,iBAAAA,EACApwF,KAAAuL,aAAAA,EACAvL,KAAAywF,wBAAAA,EAdVzwF,KAAA0wF,WAAY,EAEJ1wF,KAAAqwF,aAAyC,GAGzCrwF,KAAAyL,cAAgB,IAAIC,EAAAA,aA+H9B,OAnHE8kF,EAAAtwF,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAK2wF,YAAc9jF,EAAAA,cAAc,CAC/B7M,KAAK6kC,sBAAsBnN,aAAa5qB,KAAK4S,EAAAA,OAAO1T,UACpDhM,KAAKm4B,YAAYmE,iBAChBxvB,KACDG,EAAAA,KAAI,SAACC,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACuF,EAAAtF,EAAA,GAAS+sB,EAAA/sB,EAAA,GACbzE,EAAKwlB,YAAczb,EAAQoiB,KACvBqF,IAAW8kB,EAAAA,wBACbt2C,EAAKgoF,WAAY,EACjBhoF,EAAK+nF,wBAAwBvZ,kBAC7BxuE,EAAK0nF,iBAAiBpX,qBACpB,KACA,KACA,KACAvmE,EAAQoiB,KACR+7D,EAAAA,iBAAiBC,mBAIvB/1E,EAAAA,KACE,SAAC5N,OAACuF,EAAD/O,EAAAwJ,EAAA,GAAC,GACA,QAAEuF,EAAQ4iB,OAA4C,eAAnC5iB,EAAQ4iB,MAAMC,qBAIvCt1B,KAAK8wF,qBAAuB9wF,KAAKowF,iBAC9BW,sBACAjkF,KACCgO,EAAAA,KAAI,SAAAs9D,GAAa,QAAEA,EAAUnmB,SAAwC,IAA7BmmB,EAAUnmB,QAAQrxD,WAE9DZ,KAAKswF,kBAAoBtwF,KAAKowF,iBAAiBY,+BAC/ChxF,KAAKixF,yBAA2BjxF,KAAKowF,iBAAiB3X,iCACtDz4E,KAAKkxF,cAAgBlxF,KAAKywF,wBACvBU,wBACArkF,KACCG,EAAAA,KAAI,SAAAmkF,GAAS,OAAC1oF,EAAK2nF,aAAee,KAClCt2E,EAAAA,KAAI,SAAAs2E,GAAS,OAAAA,EAAMxwF,OAAS,MAGhCZ,KAAKyL,cAAcmB,IACjB5M,KAAKowF,iBAAiBiB,6BAA6BzjF,WAAU,SAAAhK,GACvDA,GACF8E,EAAK4oF,4BAIXtxF,KAAKyL,cAAcmB,IACjB5M,KAAKowF,iBACFmB,iCACA3jF,WAAU,SAAA0xC,GACLA,GACF52C,EAAK8oF,iCAMfhB,EAAAtwF,UAAA0N,UAAA,WACE5N,KAAKoP,aACLpP,KAAKowF,iBAAiBqB,mBACpBzxF,KAAKkuB,YACL0iE,EAAAA,iBAAiBC,gBAIrBL,EAAAtwF,UAAAqO,YAAA,WACEvO,KAAKowF,iBAAiBtX,qBACpB,CACErmE,QAAS,CACPoiB,KAAM70B,KAAKkuB,aAEb6qD,qBAAsB,CACpB,CACE2Y,aAAcd,EAAAA,iBAAiBC,kBAIrC,IAIIL,EAAAtwF,UAAAsxF,0BAAR,WAAA,IAAA9oF,EAAA1I,KACEA,KAAKyL,cAAcmB,IACjB5M,KAAK0kE,mBACFvQ,UAAU,wCACVrnD,KAAKwO,EAAAA,SACL1N,WAAU,SAAAolD,GACT,OAAAtqD,EAAKkiB,qBAAqBhe,IAAIomD,EAAM3nC,EAAAA,kBAAkBsmE,mBAG5D3xF,KAAKowF,iBAAiBlX,4BAGhBsX,EAAAtwF,UAAAoxF,sBAAR,WACEtxF,KAAKuL,aAAaP,qBAClBhL,KAAKowF,iBAAiBG,yBAGhBC,EAAAtwF,UAAAkP,WAAR,WACE,IAAMw2B,EAAgB5lC,KAAKuL,aAAab,KACtCylF,GACA,CACEphF,UAAU,EACVC,KAAM,OAER82B,kBACFF,EAAc0qD,kBAAoBtwF,KAAKswF,kBACvC1qD,EAAcyqD,aAAerwF,KAAKqwF,cAGpCG,EAAAtwF,UAAAoO,YAAA,WACEtO,KAAKyL,cAAc8C,cACnBvO,KAAKowF,iBAAiBnX,wBACtBj5E,KAAKywF,wBAAwBmB,6DA1HRj+E,EAAAA,mBACU0jB,UACDjjB,EAAAA,4BACFC,EAAAA,0BACFkB,EAAAA,4BACJhL,SACW+K,EAAAA,qCAnBxBk7E,EAA0BzvF,EAAA,CALtCuI,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAA,kvEACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B8uE,oBCEb,SAAAqB,KAAsC,OAAzBA,EAAuB9wF,EAAA,CAlBnC2I,EAAAA,SAAS,CACRC,aAAc,CAAC6mF,GAA4BL,IAC3CvmF,QAAS,CAACC,EAAAA,aAAconC,EAAAA,aAAc3hC,EAAAA,WAAYsoC,GAAe1G,EAAAA,WACjEpnC,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbghF,2BAA4B,CAC1B/gF,UAAW+gF,QAKnB3gF,gBAAiB,CACf2gF,GACAL,IAEFhmF,QAAS,CAACqmF,GAA4BL,OAE3B0B,MCtBbC,GAAA,WAKE,SAAAA,EAAoBC,GAAA/xF,KAAA+xF,iBAAAA,EAFpB/xF,KAAAgyF,YAAsB,KA0CxB,OAtCEF,EAAA5xF,UAAAkoB,YAAA,SAAYC,GACV,GAAIA,EAAQrR,UAAYhX,KAAKgX,SAAU,CACrC,IAAMi7E,EAAcjyF,KAAKkyF,iBACzBlyF,KAAKgyF,YAAc,GAEnB,IAAK,IAAIvxF,EAAI,EAAGA,EAlBG,EAkBmBA,IAAK,CACzC,IAAMm2B,EAAO,IAAIC,KAAKo7D,EAAYE,WAClCv7D,EAAKw7D,QAAQx7D,EAAKK,UAAYx2B,GAC9BT,KAAKgyF,YAAY5uF,KAAKwzB,MAS5Bk7D,EAAA5xF,UAAAmyF,oBAAA,SAAoBz7D,GAClB,OAAO52B,KAAK+xF,iBAAiBM,oBAAoBryF,KAAKgX,SAAU4f,IAOlEk7D,EAAA5xF,UAAAoyF,oBAAA,SAAoB17D,GAClB,OAAO52B,KAAK+xF,iBAAiBO,oBAAoBtyF,KAAKgX,SAAU4f,IAM1Dk7D,EAAA5xF,UAAAgyF,eAAR,WACE,IAAMK,EAAc,IAAI17D,KAGxB,OAFA07D,EAAYH,QAAQG,EAAYt7D,UAAYs7D,EAAYC,UAEjDD,4CAtC6BE,EAAAA,oBAHtC1xF,EAAA,CADCsI,EAAAA,wCADUyoF,EAAiB/wF,EAAA,CAJ7BuI,EAAAA,UAAU,CACTC,SAAU,cACVC,SAAA,ukBAEWsoF,GAAb,iBCOE,SAAAY,EACUC,EACAh4E,GADA3a,KAAA2yF,mBAAAA,EACA3yF,KAAA2a,MAAAA,EAqBZ,OAlBE+3E,EAAAxyF,UAAAiM,SAAA,WACEnM,KAAK0zD,WAAa1zD,KAAK2yF,mBAAmBC,0BAC1C5yF,KAAK6yF,WAAa7yF,KAAK2yF,mBAAmBG,2BAC1C9yF,KAAK+yF,gBAAkB,GAEnB/yF,KAAK2a,MAAMm8B,SAASjf,OAAOo3B,SAC7BjvD,KAAK2yF,mBAAmBK,iBACtB,GACA,CACEpzD,UAAW,QAEbhpB,EACA5W,KAAK2a,MAAMm8B,SAASjf,OAAOo3B,UAKjCyjC,EAAAxyF,UAAAoO,YAAA,sDArB8B2kF,EAAAA,0BACb/7C,EAAAA,kBATNw7C,EAAwB3xF,EAAA,CAJpCuI,EAAAA,UAAU,CACTC,SAAU,uBACVC,SAAA,6iBAEWkpF,oBCHb,SAAAQ,KAAyC,OAA5BA,EAA0BnyF,EAAA,CAJtCuI,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,4FAEW0pF,MCDbC,GAAA,WAIE,SAAAA,EAAsBpB,GAAA/xF,KAAA+xF,iBAAAA,EAYxB,OAVEoB,EAAAjzF,UAAAkzF,cAAA,SAAcp8E,GAIZ,MAHuB,oDACNhX,KAAK+xF,iBAAiBsB,iBAAiBr8E,GAErB,IADjBhX,KAAK+xF,iBAAiBuB,kBAAkBt8E,IAI5Dm8E,EAAAjzF,UAAAqzF,yBAAA,SAAyBC,GACvB,OAAOA,EAAa9zE,OAAO1T,SAASyU,KAAK,gDAVHgyE,EAAAA,oBAFxC1xF,EAAA,CADCsI,EAAAA,wCADU8pF,EAA0BpyF,EAAA,CADtCgY,EAAAA,aACYo6E,GAAb,kBCgBE,SAAAM,EACY1B,EACAp3E,EACAwI,GAHZ,IAAAza,EAKE2B,EAAAxJ,KAAAb,KAAM+xF,IAAiB/xF,YAJb0I,EAAAqpF,iBAAAA,EACArpF,EAAAiS,MAAAA,EACAjS,EAAAya,eAAAA,EAbZza,EAAAgrF,cAAwB,KAQxBhrF,EAAAirF,eAAuC,IAAI7rE,EAAAA,eAmC7C,OA7CkDhoB,EAAA2zF,EAAAppF,GAoBhDopF,EAAAvzF,UAAA0zF,qBAAA,WAC6B,OAAvB5zF,KAAK0zF,eACP1zF,KAAK2zF,eAAeprE,KAAKvoB,KAAK0zF,gBAIlCD,EAAAvzF,UAAA2zF,UAAA,SAAU78E,GACRhX,KAAKmjB,eAAewV,GAAG,CAAC34B,KAAK8zF,gBAAgB98E,MAG/Cy8E,EAAAvzF,UAAA4zF,gBAAA,SAAgB98E,GAOd,MAAO,iBANchX,KAAK2a,MAAMm8B,SAASjf,OAAOo3B,QAC5C,WAAWjvD,KAAK2a,MAAMm8B,SAASjf,OAAOo3B,QAAO,IAC7C,KACgBjvD,KAAK2a,MAAMm8B,SAASjf,OAAO23B,OAC3C,UAAUxvD,KAAK2a,MAAMm8B,SAASjf,OAAO23B,OAAM,IAC3C,IACgDx4C,EAASkK,MAG/DuyE,EAAAvzF,UAAA6zF,MAAA,SAAMj3E,GACc,UAAdA,EAAM5b,KACRlB,KAAK4zF,iEA7BqBnB,EAAAA,wBACXv7C,EAAAA,sBACSriC,EAAAA,kBAb5B9T,EAAA,CADCsI,EAAAA,6CAGDtI,EAAA,CADCsI,EAAAA,8CAGDtI,EAAA,CADCsI,EAAAA,+CAGDtI,EAAA,CADCsI,EAAAA,6CAGDtI,EAAA,CADCooB,EAAAA,+CATUsqE,EAA4B1yF,EAAA,CAJxCuI,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAA,oyCAEWiqF,IAAqCN,kBCehD,SAAAa,EAAoBC,GAAAj0F,KAAAi0F,yBAAAA,EAFpBj0F,KAAAk0F,kBAA0C,IAAIpsE,EAAAA,aAgChD,OA5BEksE,EAAA9zF,UAAAkoB,YAAA,SAAYC,GACNA,EAAQ8rE,WAAan0F,KAAKm0F,WAC5Bn0F,KAAKo0F,aASTJ,EAAA9zF,UAAAm0F,UAAA,SAAUC,EAAkBC,GAC1Bv0F,KAAKi0F,yBAAyBI,UAAUC,EAAUC,IAGpDP,EAAA9zF,UAAAk0F,UAAA,WAAA,IAAA1rF,EAAA1I,KACEA,KAAKi0F,yBAAyBG,UAC5Bp0F,KAAKw0F,WAAWtrF,cAChBlJ,KAAKm0F,WACL,SAAAtkE,GACEnnB,EAAK+rF,2BAA2B5kE,OAK9BmkE,EAAA9zF,UAAAu0F,2BAAR,SAAmC5kE,GACjC7vB,KAAKk0F,kBAAkB3rE,KAAKsH,6CA5BgB6kE,EAAAA,4BAN9C3zF,EAAA,CADCs/B,EAAAA,UAAU,aAAc,CAAE0vD,QAAQ,sCAGnChvF,EAAA,CADCsI,EAAAA,yCAGDtI,EAAA,CADCooB,EAAAA,kDALU6qE,EAAuBjzF,EAAA,CAJnCuI,EAAAA,UAAU,CACTC,SAAU,sBACVC,SAAA,oDAEWwqF,oBCLX,SAAAW,KAmBF,OAjBEA,EAAAz0F,UAAA00F,kBAAA,WACE,GAAI50F,KAAKuyC,WAAW66B,aAAeptE,KAAKuyC,WAAW3S,SAAU,CAC3D,IAAMi1D,EACJ70F,KAAKuyC,WAAWkE,YAAcz2C,KAAKuyC,WAAW3S,SAAW,EAEvDk1D,GACD90F,KAAKuyC,WAAWkE,YAAc,GAAKz2C,KAAKuyC,WAAW3S,SAMtD,OAJIk1D,EAAiB90F,KAAKuyC,WAAW66B,eACnC0nB,EAAiB90F,KAAKuyC,WAAW66B,cAGzBynB,EAAS,MAAMC,EAEzB,MAAO,OAAO90F,KAAKuyC,WAAW66B,cAlBlCrsE,EAAA,CADCsI,EAAAA,0CADUsrF,EAAqC5zF,EAAA,CAJjDuI,EAAAA,UAAU,CACTC,SAAU,qCACVC,SAAA,4LAEWmrF,oBCiBX,SAAAI,EACUhD,EACkBvqF,GADlBxH,KAAA+xF,iBAAAA,EACkB/xF,KAAAwH,SAAAA,EAJ5BxH,KAAA4L,UAAYxL,EAAAA,UAMVJ,KAAKg1F,sBAAuB,EAiChC,OA9BED,EAAA70F,UAAA+0F,wBAAA,SAAwB3wE,EAAetN,GACrChX,KAAKk1F,iBAAiBl+E,GACtBhX,KAAKm1F,mBAAqB7wE,EAC1BtkB,KAAKo1F,cAAgBp+E,EACrBhX,KAAKq1F,SAAShB,UACZr0F,KAAK+xF,iBAAiBsB,iBAAiBrzF,KAAKm0F,UAAUmB,OAAOhxE,IAC7DtkB,KAAK+xF,iBAAiBuB,kBAAkBtzF,KAAKm0F,UAAUmB,OAAOhxE,MAIlEywE,EAAA70F,UAAAq1F,oBAAA,SAAoBjxE,GAClBtkB,KAAKm1F,mBAAqB7wE,EACJtkB,KAAKwH,SAAS8qB,eAAe,QAAUhO,GAC/C0gE,eAAe,CAC3BC,SAAU,SACV59C,MAAO,YAIX0tD,EAAA70F,UAAAg1F,iBAAA,SAAiBl+E,GACfhX,KAAKg1F,sBAAuB,EAC5Bh1F,KAAKw1F,aAAex+E,GAGtB+9E,EAAA70F,UAAAu1F,iBAAA,WACEz1F,KAAKg1F,sBAAuB,EAC5Bh1F,KAAKm1F,wBAAqBv+E,EAC1B5W,KAAKo1F,mBAAgBx+E,EACrB5W,KAAKq1F,SAASjB,sDAlCY3B,EAAAA,iDACzBjhF,EAAAA,OAAMC,KAAA,CAACC,EAAAA,eAdV3Q,EAAA,CADCsI,EAAAA,yCAGDtI,EAAA,CADCsI,EAAAA,6CAGDtI,EAAA,CADCs/B,EAAAA,UAAU,4CALA00D,EAAwBh0F,EAAA,CAJpCuI,EAAAA,UAAU,CACTC,SAAU,uBACVC,SAAA,gpJAkBG9H,EAAA,EAAA8P,EAAAA,OAAOE,EAAAA,YAhBCqjF,oBCiBX,SAAAW,EACU/C,EACAh4E,GADA3a,KAAA2yF,mBAAAA,EACA3yF,KAAA2a,MAAAA,EAPV3a,KAAA21F,YAAsB,KACtB31F,KAAAsmF,aAA6B,CAC3B7vC,YAAa,GAgEjB,OAxDEi/C,EAAAx1F,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAK+nB,aAAe/nB,KAAK2a,MAAMk8B,YAAYjpC,WAAU,SAAAiqB,GACnD,OAAAnvB,EAAK2vC,WAAWxgB,OAIpB69D,EAAAx1F,UAAAoO,YAAA,WACMtO,KAAK+nB,cACP/nB,KAAK+nB,aAAaxZ,eAItBmnF,EAAAx1F,UAAAwmF,SAAA,SAASC,GACP3mF,KAAKsmF,aAAYjmF,EAAAA,EAAA,GAAQL,KAAKsmF,cAAY,CAAE7vC,YAAakwC,IACzD3mF,KAAK2yF,mBAAmBK,iBACtBhzF,KAAK41F,YAAYC,UACjB71F,KAAKsmF,aACLtmF,KAAK81F,YACL91F,KAAK21F,YACL31F,KAAK+1F,gBAIDL,EAAAx1F,UAAAm4C,WAAR,SAAmBxgB,GACjB73B,KAAK41F,YAAc51F,KAAKg2F,gBAAgBn+D,GACxC73B,KAAK+1F,iBAAgBl+D,IAAUA,EAAOk+D,eACtC/1F,KAAKsmF,aAAYjmF,EAAAA,EAAA,GAAQL,KAAKsmF,cAAY,CAAE7vC,YAAa,IACzDz2C,KAAK2yF,mBAAmBK,iBACtBhzF,KAAK41F,YAAYC,UACjB71F,KAAKsmF,aACLtmF,KAAK81F,YACL91F,KAAK21F,YACL31F,KAAK+1F,eAGP/1F,KAAK0zD,WAAa1zD,KAAK2yF,mBAAmBsD,mBAC1Cj2F,KAAK6yF,WAAa7yF,KAAK2yF,mBAAmBuD,yBAGpCR,EAAAx1F,UAAA81F,gBAAR,SAAwBn/C,GAGtB,IAAI++C,EAYJ,OATEA,EADE/+C,EAAYlX,MACA,CAAEk2D,UAAWh/C,EAAYlX,OAEzB,CAAEk2D,UAAW,KAGjBE,cACmB,MAA7Bl/C,EAAYk/C,eACgC,SAA5Cl/C,EAAYk/C,cAAcI,cAErBP,4CA1DqB3C,EAAAA,0BACb/7C,EAAAA,kBAfNw+C,EAAgC30F,EAAA,CAJ5CuI,EAAAA,UAAU,CACTC,SAAU,gCACVC,SAAA,o0BAEWksF,oBCDX,SAAAU,EAAoBjzE,GAAAnjB,KAAAmjB,eAAAA,EAHpBnjB,KAAAq2F,UAAyB,IAAI7xD,EAAAA,YAC7BxkC,KAAA4L,UAAYxL,EAAAA,UAqBd,OAjBEg2F,EAAAl2F,UAAAo2F,WAAA,SAAWnsC,GACTnqD,KAAKmjB,eAAewV,GAAG,CAAC,qBAAsB,CAAEgH,MAAOwqB,KAGzDisC,EAAAl2F,UAAAq2F,oBAAA,WACEv2F,KAAKmjB,eAAewV,GAAG,CAAC,qBAAsB,CAAEo9D,eAAe,KAGjEK,EAAAl2F,UAAA6zF,MAAA,SAAMj3E,GAEF9c,KAAKq2F,UAAUnzF,OACflD,KAAKq2F,UAAUnzF,MAAMtC,QACP,UAAdkc,EAAM5b,KAENlB,KAAKs2F,WAAWt2F,KAAKq2F,UAAUnzF,iDAhBC2R,EAAAA,kBAJzBuhF,EAA0Br1F,EAAA,CAJtCuI,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,+7CAEW4sF,qBCGX,SAAAI,EAAsBzE,GAAtB,IAAArpF,EACE2B,EAAAxJ,KAAAb,KAAM+xF,IAAiB/xF,YADH0I,EAAAqpF,iBAAAA,IAGxB,OAP0DjyF,EAAA02F,EAAAnsF,4CAIhBooF,EAAAA,oBAH/B1xF,EAAA,CAARsI,EAAAA,wCACQtI,EAAA,CAARsI,EAAAA,0CAFUmtF,EAAoCz1F,EAAA,CAJhDuI,EAAAA,UAAU,CACTC,SAAU,oCACVC,SAAA,2qEAEWgtF,IAA6CrD,kBCIxD,SAAAsD,EAAoB9D,GAAA3yF,KAAA2yF,mBAAAA,EAOtB,OALE8D,EAAAv2F,UAAAiM,SAAA,WACEnM,KAAK2yF,mBAAmB+D,gBACxB12F,KAAK6yF,WAAa7yF,KAAK2yF,mBAAmBG,2BAC1C9yF,KAAK0zD,WAAa1zD,KAAK2yF,mBAAmBC,oEALJK,EAAAA,sBAJ7BwD,EAA+B11F,EAAA,CAJ3CuI,EAAAA,UAAU,CACTC,SAAU,+BACVC,SAAA,s5CAEWitF,oBCFb,SAAAE,KAAmC,OAAtBA,EAAoB51F,EAAA,CAJhCuI,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,sLAEWmtF,oBCgBX,SAAAC,EACUjE,EACAh4E,EACAwI,GAFAnjB,KAAA2yF,mBAAAA,EACA3yF,KAAA2a,MAAAA,EACA3a,KAAAmjB,eAAAA,EARVnjB,KAAA4L,UAAYxL,EAAAA,UA4Bd,OAjBEw2F,EAAA12F,UAAAiM,SAAA,WACOnM,KAAKgX,WACRhX,KAAK62F,oBACL72F,KAAK82F,UAAY92F,KAAK2yF,mBAAmBuD,wBACzCl2F,KAAK0zD,WAAa1zD,KAAK2yF,mBAAmBsD,qBAI9CW,EAAA12F,UAAA22F,kBAAA,WACE72F,KAAK2yF,mBAAmBoE,cAAc/2F,KAAK2a,MAAMm8B,SAASjf,OAAOzS,QAGnEwxE,EAAA12F,UAAAiwD,OAAA,WACEnwD,KAAKmjB,eAAewV,GAAG,CACrB,wBAAwB34B,KAAK2a,MAAMm8B,SAASjf,OAAOo3B,oDAnBzBgkC,EAAAA,0BACb/7C,EAAAA,sBACSriC,EAAAA,kBANjB9T,EAAA,CAARsI,EAAAA,wCACQtI,EAAA,CAARsI,EAAAA,0CANUutF,EAAyB71F,EAAA,CAJrCuI,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAA,kxBAEWotF,oBC2Gb,SAAAI,KAAgC,OAAnBA,EAAiBj2F,EAAA,CA3F7B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACA22B,EAAAA,oBACAyQ,EAAAA,aACAuG,GACAy/C,EAAAA,gBACAr/C,GACA1G,EAAAA,UACAgmD,EAAAA,sBACA5nF,EAAAA,WACA7F,GAEFK,UAAW,CACTC,EAAAA,qBAA+C,CAC7CyF,cAAe,CACbmnF,qBAAsB,CACpBlnF,UAAWknF,GACXp8E,YAAa,CACX,CACEvJ,KAAM,OACNvB,UAAWimF,IAEb,CACE1kF,KAAM,WACNvB,UAAWgnF,IAEb,CACEzlF,KAAM,mBACNvB,UAAWijF,IAEb,CACE1hF,KAAM,kCACNvB,UAAWijF,IAEb,CACE1hF,KAAM,yCACNvB,UAAWmnF,IAEb,CACE5lF,KAAM,0BACNvB,UAAWmnF,OAKnBz3E,YAAa,CACXg4E,wBAAyB,CACvBx4E,MAAO,CAAC,gBAAiB,oBAKjChV,aAAc,CACZysF,GACArB,GACAf,GACAP,GACAgD,GACA/D,GACA8D,GACA1E,GACAoB,GACAwC,GACAiB,GACAhC,GACAiC,IAEFzsF,QAAS,CACP2nF,GACA6E,GACAjE,GACAQ,GACAO,GACAO,GACAW,GACAyB,GACAV,GACAX,GACAyB,GACAC,GACAG,IAEF/mF,gBAAiB,CACf8mF,GACAjB,GACAe,GACA/D,GACAkE,OAGSI,oBC5FX,SAAAI,EACY94C,EACA4J,EACA1mB,GAFAxhC,KAAAs+C,YAAAA,EACAt+C,KAAAkoD,oBAAAA,EACAloD,KAAAwhC,kBAAAA,EAfZxhC,KAAAs9B,KAAkBt9B,KAAKs+C,YAAYpgB,MACjC,CACEuzC,MAAO,CAAC,GAAI,CAACtzC,EAAAA,WAAWC,SAAUge,GAAqBI,iBACvD66C,kBAAmB,CAAC,GAAI,CAACl5D,EAAAA,WAAWC,YAEtC,CAAE6yC,UAAWjxE,KAAKs3F,cAKZt3F,KAAA+9B,eAAgB,EAwD1B,OAhDEq5D,EAAAl3F,UAAAq+B,WAAA,SAAWhB,GACT,OAAOH,GAAUC,gBACfr9B,KAAKs9B,KACLC,EACAv9B,KAAK+9B,gBAITq5D,EAAAl3F,UAAAq3F,sBAAA,WACE,OACEv3F,KAAKs9B,KAAKu0C,SAAS,cAClB7xE,KAAK+9B,eACH/9B,KAAKs9B,KAAK9lB,IAAI,qBAAqBmmB,SAClC39B,KAAKs9B,KAAK9lB,IAAI,qBAAqBomB,QAI3Cw5D,EAAAl3F,UAAAm+B,SAAA,WAAA,IAAA31B,EAAA1I,KAGE,GAFAA,KAAK+9B,eAAgB,GAEjB/9B,KAAKs9B,KAAKI,QAAd,CAIA,IAAM+zC,EAAQzxE,KAAKs9B,KAAKp6B,MAAMuuE,MAC9BzxE,KAAKwhC,kBAAkBg2D,SAAS/lB,GAE3BzxE,KAAK0pF,MACR1pF,KAAK0pF,IAAM1pF,KAAKwhC,kBAAkB4mB,kBAAkBx6C,WAAU,SAAAzL,GACxDuG,EAAK84B,kBAAkB6mB,eACzB3/C,EAAKw/C,oBAAoBuvC,iBAMjCL,EAAAl3F,UAAAoO,YAAA,WACMtO,KAAK0pF,KACP1pF,KAAK0pF,IAAIn7E,eAIL6oF,EAAAl3F,UAAAo3F,YAAR,SAAoB1kB,GAClB,OAAOA,EAAgBp7D,IAAI,SAAStU,QAClC0vE,EAAgBp7D,IAAI,qBAAqBtU,MACvC,CAAE45C,UAAU,GACZ,+CAnDmBte,EAAAA,mBACQgqB,EAAAA,2BACF30C,EAAAA,qBAhBpBujF,EAAsBr2F,EAAA,CAJlCuI,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAA,q8CAEW4tF,oBCcb,SAAAM,KAAkC,OAArBA,EAAmB32F,EAAA,CAvB/B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAyF,EAAAA,WACAooC,EAAAA,YACAlX,EAAAA,oBACAkX,EAAAA,YACAlX,EAAAA,qBAEF12B,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACbmoF,4BAA6B,CAC3BloF,UAAW2nF,GACX19E,OAAQ,CAACmgD,SAKjBlwD,aAAc,CAACytF,IACfjtF,QAAS,CAACitF,IACVvnF,gBAAiB,CAACunF,OAEPM,oBCPX,SAAAE,EACU/lF,EACA+Y,EACAkT,EACAoqB,EACAliD,EACAqwC,EACA8R,GANAnoD,KAAA6R,KAAAA,EACA7R,KAAA4qB,qBAAAA,EACA5qB,KAAA89B,GAAAA,EACA99B,KAAAkoD,oBAAAA,EACAloD,KAAAgG,OAAAA,EACAhG,KAAAq2C,eAAAA,EACAr2C,KAAAmoD,sBAAAA,EATVnoD,KAAA63F,cAAe,EAiFjB,OArEED,EAAA13F,UAAAiM,SAAA,WAcE,GAbAnM,KAAKs9B,KAAOt9B,KAAK89B,GAAGI,MAAM,CACxBhE,OAAQ,CAAC,GAAI,CAACiE,EAAAA,WAAWC,SAAUge,GAAqBI,iBACxDriB,SAAU,CAAC,GAAIgE,EAAAA,WAAWC,YAI1Bp+B,KAAKmoD,uBACLnoD,KAAKmoD,sBAAsBN,oBAE3B7nD,KAAK63F,aAAe73F,KAAKq2C,eAAeS,SAASD,YAAoB,QAInE72C,KAAKgG,QAAUhG,KAAKgG,OAAO8X,aAAc,CAC3C,IAAMmkD,EACJjiE,KAAKgG,OAAO8X,aAAaokD,SACzBliE,KAAKgG,OAAO8X,aAAaokD,QAAQtnD,MAE/BqnD,GAAcA,EAAmB,QAAKA,EAAmB,OAAErhE,QAC7DZ,KAAK83F,YAAY,SAAU71B,EAAmB,UAKpD21B,EAAA13F,UAAAgtB,MAAA,WACMltB,KAAKs9B,KAAK2iB,MACZjgD,KAAK+3F,cAEL/3F,KAAKyvF,qBAIDmI,EAAA13F,UAAA63F,YAAR,WAAA,IAAArvF,EAAA1I,KACQkN,EAAAlN,KAAAs9B,KAAAgB,SAAEpE,EAAAhtB,EAAAgtB,OAAQC,EAAAjtB,EAAAitB,SAChBn6B,KAAK6R,KAAKmmF,UACR99D,EAAOh3B,MAAMyjC,cACbxM,EAASj3B,OAGNlD,KAAK0pF,MACR1pF,KAAK0pF,IAAM1pF,KAAK6R,KAAKymB,eAAe1qB,WAAU,SAAAsU,GACxCA,GAAQA,EAAK4X,eACfpxB,EAAKkiB,qBAAqBhS,OAAOyS,EAAAA,kBAAkB2O,gBACnDtxB,EAAKw/C,oBAAoBuvC,iBAMzBG,EAAA13F,UAAAuvF,kBAAR,WAAA,IAAA/mF,EAAA1I,KACER,OAAOigB,KAAKzf,KAAKs9B,KAAKgB,UAAUx1B,SAAQ,SAAA5H,GACtCwH,EAAK40B,KAAKgB,SAASp9B,GAAKi/C,oBAI5By3C,EAAA13F,UAAAoO,YAAA,WACMtO,KAAK0pF,KACP1pF,KAAK0pF,IAAIn7E,eAILqpF,EAAA13F,UAAA43F,YAAR,SAAoB5iC,EAAehyD,SACjClD,KAAKs9B,KAAK86B,aAAUlrD,EAAA,IACjBgoD,GAAQhyD,MAGXlD,KAAKs9B,KAAK9lB,IAAI09C,GAAO/U,0DA5EPxsC,EAAAA,mBACgBS,EAAAA,4BAClBoqB,EAAAA,mBACiBgqB,EAAAA,2BACbzgD,EAAAA,iBACQmvC,EAAAA,sBACO+O,MAZtB2xC,EAAkB72F,EAAA,CAJ9BuI,EAAAA,UAAU,CACTC,SAAU,gBACVC,SAAA,grEAEWouF,oBCkBb,SAAAK,KAA8B,OAAjBA,EAAel3F,EAAA,CAvB3B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACA6tC,EAAAA,YACAlX,EAAAA,oBACAyQ,EAAAA,aACAC,EAAAA,UACA5hC,EAAAA,YAEFxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb0oF,gCAAiC,CAC/BzoF,UAAWmoF,GACXl+E,OAAQ,CAAC8rD,EAAAA,mBAKjB77D,aAAc,CAACiuF,IACfztF,QAAS,CAACytF,IACV/nF,gBAAiB,CAAC+nF,OAEPK,oBCxBX,SAAAE,EAAoBtmF,EAA2BwnB,GAA3Br5B,KAAA6R,KAAAA,EAA2B7R,KAAAq5B,YAAAA,EAajD,OAXE8+D,EAAAj4F,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAKuzE,MAAQvzE,KAAK6R,KAAK6wC,iBAAiB51C,KACtC+R,EAAAA,WAAU,SAAA6jC,GACR,OAAIA,EACKh6C,EAAK2wB,YAAY7hB,MAEjB4D,EAAAA,QAAGxE,iDARQjD,EAAAA,mBAAkCsB,EAAAA,eAHjDkjF,EAAcp3F,EAAA,CAJ1BuI,EAAAA,UAAU,CACTC,SAAU,WACVC,SAAA,iaAEW2uF,oBCkBb,SAAAC,KAA0B,OAAbA,EAAWr3F,EAAA,CAfvB2I,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAconC,EAAAA,aAAcC,EAAAA,UAAW7mB,GAAgB/a,EAAAA,YACjExF,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb2oF,eAAgB,CACd1oF,UAAW0oF,QAKnBxuF,aAAc,CAACwuF,IACftoF,gBAAiB,CAACsoF,IAClBhuF,QAAS,CAACguF,OAECC,oBCHX,SAAAC,EACYxmF,EACAK,EACAY,EACAyQ,EACA+0E,EACAlmF,GALApS,KAAA6R,KAAAA,EACA7R,KAAAkS,IAAAA,EACAlS,KAAA8S,QAAAA,EACA9S,KAAAujB,oBAAAA,EACAvjB,KAAAs4F,gBAAAA,EACAt4F,KAAAoS,cAAAA,SAGZimF,EAAAn4F,UAAA8a,YAAA,WAAA,IAAAtS,EAAA1I,KAGE,OAFAA,KAAKstB,SAEEttB,KAAKkS,IACTqmF,QAAQ,CACP5qF,GAAI3N,KAAKujB,oBAAoB/L,IAAI,UACjC5R,KAAMgd,EAAAA,SAASC,eAEhB/V,KACCG,EAAAA,KAAI,SAAAsrF,GACGA,GACH7vF,EAAK+uF,gBAMLY,EAAAn4F,UAAAu3F,SAAV,WAEE,IAAM7+D,EACJ54B,KAAKoS,cAAcwsC,QAAQ,QAC3B5+C,KAAKs4F,iBACLt4F,KAAKs4F,gBAAgBE,cACjB,QACA,OAENx4F,KAAK8S,QAAQ6lB,GAAG,CAAEC,QAAOA,KAGjBy/D,EAAAn4F,UAAAotB,OAAV,WACEttB,KAAK6R,KAAKyb,mDAtCM3Z,EAAAA,mBACDM,EAAAA,kBACIY,EAAAA,sBACY2P,EAAAA,2BACHi0E,EAAAA,8BACFtkF,EAAAA,mUAbjBkkF,EAAWt3F,EAAA,CAHvBmH,EAAAA,WAAW,CACVC,WAAY,UAEDkwF,SCDC,CAAEz/D,QAAS,UAKzB8/D,GAAA,WAAA,SAAAA,KAA2B,OAAdA,EAAY33F,EAAA,CAbxB2I,EAAAA,SAAS,CACRE,QAAS,CACP0gB,GACA2mB,EAAAA,aAAaq3B,SAAS,CACpB,CACEt3D,KAAM,KACNgK,YAAa,CAACq9E,IACd5oF,UAAWkR,GACXuB,KAAIy2E,UAKCD,GAAb,iBCyFE,SAAAE,EACY/mF,EACAq2C,EACA7uB,EACAzO,EACAkT,EACAlc,EACAxP,EACA5G,EACAwxD,GARAh9D,KAAA6R,KAAAA,EACA7R,KAAAkoD,oBAAAA,EACAloD,KAAAq5B,YAAAA,EACAr5B,KAAA4qB,qBAAAA,EACA5qB,KAAA89B,GAAAA,EACA99B,KAAA4hB,OAAAA,EACA5hB,KAAAoS,cAAAA,EACApS,KAAAwL,yBAAAA,EACAxL,KAAAg9D,wBAAAA,EAnFJh9D,KAAA+nB,aAAe,IAAIrc,EAAAA,aAQ3B1L,KAAA64F,yBACE74F,KAAKoS,eAAiBpS,KAAKoS,cAAcwsC,QAAQ,OAEnD5+C,KAAA84F,0BACE94F,KAAKoS,eACLpS,KAAKoS,cAAc0oB,UAAUqiC,EAAAA,4BAE/Bn9D,KAAA+4F,qBAAkC/4F,KAAK89B,GAAGI,MACxC,CACEw5B,UAAW,CAAC,IACZ9G,UAAW,CAAC,GAAIzyB,EAAAA,WAAWC,UAC3ByyB,SAAU,CAAC,GAAI1yB,EAAAA,WAAWC,UAC1BqzC,MAAO,CAAC,GAAI,CAACtzC,EAAAA,WAAWC,SAAUge,GAAqBI,iBACvDriB,SAAU,CACR,GACA,CAACgE,EAAAA,WAAWC,SAAUge,GAAqBM,oBAE7CilC,aAAc,CAAC,GAAIxjD,EAAAA,WAAWC,UAC9B46D,WAAY,IAAIx0D,EAAAA,YAAY,CAC1BthC,OAAO,EACPq2B,WAAUv5B,KAAK84F,2BACX94F,KAAKi5F,sBAGXC,mBAAoB,EAAC,EAAO/6D,EAAAA,WAAWg7D,eAEzC,CAAEloB,UAAW70B,GAAqBS,gBAiOtC,OA7KE+7C,EAAA14F,UAAAiM,SAAA,WAAA,IAAAzD,EAAA1I,KACEA,KAAK43D,QAAU53D,KAAKq5B,YAAYw+B,YAAY/qD,KAC1CG,EAAAA,KAAI,SAAA6qD,GACiC,IAA/Bt4D,OAAOigB,KAAKq4C,GAAQl3D,QACtB8H,EAAK2wB,YAAY0+B,gBAGrBj9C,EAAAA,KAAI,SAAAg9C,GACF,OAAOA,EAAO9Z,KAAKX,QAKnBr9C,KAAK64F,0BACP74F,KAAKwM,SAAWxM,KAAKq5B,YAAY+/D,+BACjCp5F,KAAKq5F,2BAEDr5F,KAAK6R,MAAQ7R,KAAKkoD,sBACpBloD,KAAK+nB,aAAanb,IAChB5M,KAAKq5B,YACFigE,+BACA1rF,WAAU,SAAC0xC,GACV,GAAIA,EAAS,CACL,IAAApyC,EAAAxE,EAAA6wF,4BAAA7wF,EAAAqwF,qBAAA71F,OAAE+U,EAAA/K,EAAA+K,IAAKkiB,EAAAjtB,EAAAitB,SAGbzxB,EAAKmJ,KAAKmmF,UAAU//E,EAAKkiB,QAIjCn6B,KAAK+nB,aAAanb,IAChB5M,KAAK6R,KAAKymB,eAAe1qB,WAAU,SAAAsU,GAC7BA,GAAQA,EAAK4X,eACfpxB,EAAKkiB,qBAAqBhS,OACxByS,EAAAA,kBAAkB2O,gBAEpBtxB,EAAKw/C,oBAAoBuvC,iBAQnCz3F,KAAK+nB,aAAanb,IAChB5M,KAAK4qB,qBACFpT,MACA1K,KAAK4S,EAAAA,QAAO,SAAA85E,GAAY,QAAEh6F,OAAOigB,KAAK+5E,GAAU54F,WAChDgN,WAAU,SAAC6rF,GACV,IAAMD,EACJC,GACAA,EAAsBpuE,EAAAA,kBAAkB2O,gBAGxCw/D,GACAA,EAASvhC,MAAK,SAAA8mB,GAAW,MAAY,4BAAZA,OAEzBr2E,EAAKkiB,qBAAqBhS,OAAOyS,EAAAA,kBAAkB2O,gBACnDtxB,EAAKkiB,qBAAqBhe,IACxB,CAAE1L,IAAK,0BACPmqB,EAAAA,kBAAkB2O,qBAO1Bh6B,KAAK84F,2BACL9sF,QAAQhM,KAAKg9D,0BACbhxD,QAAQhM,KAAKg9D,wBAAwB/wD,oBACrCD,QAAQhM,KAAKg9D,wBAAwB/wD,kBAAkBytF,mBAEvD15F,KAAK25F,kBAAoB9sF,EAAAA,cAAc,CACrC7M,KAAKwL,yBAAyBouF,WAC5B55F,KAAKg9D,wBAAwB/wD,kBAAkBytF,iBAEjD15F,KAAKwL,yBAAyBquF,YAC5B75F,KAAKg9D,wBAAwB/wD,kBAAkBytF,mBAEhD5sF,KACDgO,EAAAA,KAAI,SAAC5N,OAAAC,EAAAzJ,EAAAwJ,EAAA,GAACI,EAAAH,EAAA,GAAS3D,EAAA2D,EAAA,GACb,MAAO,CACLG,QAAOA,EACP9D,SAAUA,EAAWA,EAASmnB,YAAc,QAKlD3wB,KAAK+nB,aAAanb,IAChB5M,KAAK+4F,qBACFvhF,IAAI,cACJ4nB,aAAaxxB,WAAU,SAAAzL,GACtBuG,EAAKoxF,+BAMflB,EAAA14F,UAAAwnE,OAAA,WACE1nE,KAAKq5B,YAAYjN,SACfpsB,KAAKu5F,4BAA4Bv5F,KAAK+4F,qBAAqB71F,SAI/D01F,EAAA14F,UAAAm4D,cAAA,SAAc3nC,GACZ1wB,KAAK+4F,qBAA+B,SAAErhC,UAAU33B,SAASrP,EAAMmE,OAGjE+jE,EAAA14F,UAAAq5F,4BAAA,SAA4BQ,GAClB,IAAAnpC,EAAAmpC,EAAAnpC,UAAWC,EAAAkpC,EAAAlpC,SAAU4gB,EAAAsoB,EAAAtoB,MAAOt3C,EAAA4/D,EAAA5/D,SAAUu9B,EAAAqiC,EAAAriC,UAE9C,MAAO,CACL9G,UAASA,EACTC,SAAQA,EACR54C,IAAKw5D,EAAM9qC,cACXxM,SAAQA,EACRu9B,UAASA,IAIbkhC,EAAA14F,UAAAsN,eAAA,SAAeF,GACb,OAAOtN,KAAKwL,yBAAyBgC,eAAeF,IAG9CsrF,EAAA14F,UAAA+4F,kBAAR,WACE,SACEjtF,QAAQhM,KAAKwL,2BACbQ,QAAQhM,KAAKg9D,wBAAwB/wD,oBACrCD,QAAQhM,KAAKg9D,wBAAwB/wD,kBAAkBytF,kBACvD1tF,QAAQhM,KAAKg9D,wBAAwB/wD,kBAAkBJ,oBAEhD7L,KAAKg9D,wBAAwB/wD,kBAAkBJ,iBAAiB3E,SACrElH,KAAKg9D,wBAAwB/wD,kBAAkBytF,kBAM7Cd,EAAA14F,UAAA85F,sBAAR,SAA8B16C,GACxBt/C,KAAK4hB,QAAU09B,IACjBt/C,KAAK4hB,OAAO+W,GAAG,SACf34B,KAAK4qB,qBAAqBhe,IACxB,CAAE1L,IAAK,gCACPmqB,EAAAA,kBAAkBC,yBAKxBstE,EAAA14F,UAAA45F,uBAAA,WACM9tF,QAAQhM,KAAK+4F,qBAAqBvhF,IAAI,cAActU,OACtDlD,KAAKwL,yBAAyBwC,YAC5BhO,KAAKg9D,wBAAwB/wD,kBAAkBytF,iBAGjD15F,KAAKwL,yBAAyBkC,gBAC5B1N,KAAKg9D,wBAAwB/wD,kBAAkBytF,kBAK7Cd,EAAA14F,UAAAm5F,wBAAR,WAAA,IAAA3wF,EAAA1I,KACEA,KAAKq5B,YAAY4gE,gCACjBj6F,KAAK+nB,aAAanb,IAChB5M,KAAKq5B,YAAYigE,+BAA+B1rF,WAAU,SAAA0xC,GACxD52C,EAAKsxF,sBAAsB16C,QAKjCs5C,EAAA14F,UAAAoO,YAAA,WACEtO,KAAK+nB,aAAaxZ,cAClBvO,KAAKq5B,YAAY4gE,0EAtLDtmF,EAAAA,mBACe60C,EAAAA,2BACRvzC,EAAAA,mBACSb,EAAAA,4BAClBoqB,EAAAA,mBACK3pB,EAAAA,sBACOV,EAAAA,4BACW1F,EAAAA,gCACDD,EAAAA,2BAtF3BoqF,EAAiB73F,EAAA,CAJ7BuI,EAAAA,UAAU,CACTC,SAAU,cACVC,SAAA,0oPAEWovF,oBCMb,SAAAsB,KAAsC,OAAzBA,EAAuBn5F,EAAA,CAxBnC2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAuuF,GACA53D,EAAAA,oBACAyQ,EAAAA,aACAC,EAAAA,UACA5hC,EAAAA,WACAsoC,IAEF9tC,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb2qF,0BAA2B,CACzB1qF,UAAWmpF,GACXl/E,OAAQ,CAAC8rD,EAAAA,mBAKjB77D,aAAc,CAACivF,IACfzuF,QAAS,CAACyuF,IACV/oF,gBAAiB,CAAC+oF,OAEPsB,oBCfb,SAAAE,KAAkC,OAArBA,EAAmBr5F,EAAA,CAb/B2I,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAuuF,GACAH,GACAS,GACAhB,GACAl3D,EAAAA,oBACAyQ,EAAAA,aACAC,EAAAA,UACAgpD,OAGSE,oBCVb,SAAAC,IAEEr6F,KAAA0wC,WAAY,EAIZ1wC,KAAA4Y,OAAS,IAAIkP,EAAAA,aAKf,OAHEuyE,EAAAn6F,UAAAshD,YAAA,SAAYptB,GACVp0B,KAAK4Y,OAAO2P,KAAK6L,IAPnBrzB,EAAA,CADCsI,EAAAA,yCAEQtI,EAAA,CAARsI,EAAAA,yCAGDtI,EAAA,CADCooB,EAAAA,uCALUkxE,EAAqBt5F,EAAA,CALjCuI,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAA,kuFACAgY,gBAAiBC,EAAAA,wBAAwBC,UAE9B24E,oBCFX,SAAAC,EAAsBt2C,GAAAhkD,KAAAgkD,gBAAAA,EAHtBhkD,KAAAu6F,UAA8Bv6F,KAAKgkD,gBAAgBG,cACnDnkD,KAAAwM,SAAgCxM,KAAKgkD,gBAAgBO,qBAOvD,OAHE+1C,EAAAp6F,UAAAshD,YAAA,SAAYptB,GACVp0B,KAAKgkD,gBAAgBxC,YAAYptB,6CAHIqwB,EAAAA,mBAJ5B61C,EAAiBv5F,EAAA,CAJ7BuI,EAAAA,UAAU,CACTC,SAAU,eACVC,SAAA,olCAEW8wF,oBCoCb,SAAAE,KAA6B,OAAhBA,EAAcz5F,EAAA,CAzB1B2I,EAAAA,SAAS,CACRE,QAAS,CACPs4C,GACAr4C,EAAAA,aACAyF,EAAAA,WACAyhC,GACAE,EAAAA,aACA8K,GACA7K,EAAAA,UACAa,IAEFjoC,UAAW,CACTC,EAAAA,qBAAgC,CAC9ByF,cAAe,CACb8qF,kBAAmB,CACjB7qF,UAAW6qF,GACX5gF,OAAQ,CAACgmD,EAAAA,gBAKjB/1D,aAAc,CAAC2wF,GAAmBD,IAClCxqF,gBAAiB,CAACyqF,IAClBnwF,QAAS,CAACmwF,GAAmBD,OAElBG,oBCiEb,SAAAC,KAA2B,OAAdA,EAAY15F,EAAA,CApDxB2I,EAAAA,SAAS,CACRE,QAAS,CACPyF,EACAkxB,GACAy7B,GACAwF,GACAH,GACAJ,GACA4c,GACAD,GACAG,GACAnE,GACAkH,GACA1lC,GACA7B,GACAgrB,GACAsJ,GACAlF,GACAkB,GACAqG,GACAX,GACAse,GACAqC,GACAnN,GACAK,GACA/W,GACAwE,GACAwB,GACAa,GACAS,GACAlU,GACAyF,GACAjgB,GACAwd,GACAsf,GACAiV,GACA7S,GACAkK,GACAV,GACAtI,GACAzrB,GACA2L,GACA6L,GACAtQ,GACAs5B,GACA1jB,GACA8jB,GACA5iB,GACAuB,GACA0Y,OAGS4I,MC1Eb,IAAaC,GAA8B,IAAI18E,EAAAA,eAE7C,8BAA+B,CAC/B7V,WAAY,OACZsI,QAAS,WACP,OA9BF21B,EA+BIu0D,EAAAA,OAAOC,EAAAA,mBA9BXC,EA+BIF,EAAAA,OAAOG,EAAAA,qBA7BK,SAACngF,GACf,IAAMogF,EAAiBF,EAAsBlgF,GACvCqgF,EAAmBzrE,GAAoB,CAC3CC,OAAQ,IACRC,UAAW,gBAEb,OAAO2W,EAAQ60D,YAAY,CAACF,EAAgBC,SAT9C50D,EACAy0D,QCGY,CAAEjiE,QAAS,WAgBzBsiE,GAAA,WAAA,SAAAA,KAAuC,OAA1BA,EAAwBn6F,EAAA,CAvBpC2I,EAAAA,SAAS,CACRE,QAAS,CACPqnC,EAAAA,aAAaq3B,SAAS,CACpB,CACEt3D,KAAM,KACNgK,YAAa,CAACkI,IACdzT,UAAWkR,GACXuB,KAAIi5E,OAIVrxF,UAAW,CACTC,EAAAA,qBAAoC,CAClC+I,QAAS,CACPuG,OAAQ,CACN5G,QAAS,CACP2oF,SAAU,CAACV,aAOVQ,GAAb,GCKA,IAAaG,GAA8B,IAAIr9E,EAAAA,eAE7C,8BAA+B,CAC/B7V,WAAY,OACZsI,QAAS,WACP,OA9BF21B,EA+BIu0D,EAAAA,OAAOC,EAAAA,mBA9BXC,EA+BIF,EAAAA,OAAOG,EAAAA,qBA7BK,SAACngF,GACf,IAAMogF,EAAiBF,EAAsBlgF,GACvC2gF,EAAmB/rE,GAAoB,CAC3CC,OAAQ,IACRC,UAAW,iBAEb,OAAO2W,EAAQ60D,YAAY,CAACF,EAAgBO,SAT9Cl1D,EACAy0D,QCEY,CAAEl4E,UAAW,SAAUiW,QAAS,UAAU2iE,GAM1C,CAAE3iE,QAAS,SAAS4iE,GAQpB,CAAE5iE,QAAS,YAgBzB6iE,GAAA,WAAA,SAAAA,KAAuC,OAA1BA,EAAwB16F,EAAA,CArCpC2I,EAAAA,SAAS,CACRE,QAAS,CACPqnC,EAAAA,aAAaq3B,SAAS,CACpB,CACEt3D,KAAM,KACNgK,YAAa,CAACkI,IACdzT,UAAWkR,GACXuB,KAAIw5E,IAEN,CACE1qF,KAAM,KACNgK,YAAa,CAACkI,IACdzT,UAAWkR,GACXuB,KAAIq5E,IAEN,CAGEvqF,KAAM,KACNgK,YAAa,CAACkI,IACdzT,UAAWkR,GACXuB,KAAIs5E,OAIV1xF,UAAW,CACTC,EAAAA,qBAAoC,CAClC+I,QAAS,CACPuG,OAAQ,CACNyU,SAAU,CACRstE,SAAU,CAACC,aAOVI,GAAb,GCzCaE,GAAgC,CAK3Cx8E,YAAa,CACXm2C,OAAQ,CACN54C,GAAI,CACFiC,MAAO,CACL,cACA,YACA,WACA,YACA,YACA,WACA,kBAGJA,MAAO,CAAC,YAAa,WAAY,YAAa,aAEhDu7D,WAAY,CACVx9D,GAAI,CAAEiC,MAAO,IACbA,MAAO,CAAC,YAAa,gBAAiB,cAAe,cAEvDi9E,OAAQ,CACNj9E,MAAO,CAAC,WAEVk9E,qBAAsB,CACpBv8E,SAAU,YACVX,MAAO,CACL,WACA,YACA,YACA,YACA,WACA,WACA,aAIJm9E,qBAAsB,CACpBn9E,MAAO,CAAC,YAAa,cAEvBo9E,qBAAsB,CACpBz8E,SAAU,WACVX,MAAO,CAAC,WAAY,WAAY,aAElCq9E,wBAAyB,CACvBr9E,MAAO,CAAC,yBAA0B,oBAEpCs9E,wBAAyB,CACvBt9E,MAAO,CAAC,yBAA0B,oBAEpCu9E,8BAA+B,CAC7Bv9E,MAAO,CACL,WACA,yBACA,wBACA,aAGJw9E,8BAA+B,CAC7Bx9E,MAAO,CACL,WACA,yBACA,wBACA,aAGJy9E,2BAA4B,CAC1B1/E,GAAI,CACF4C,SAAU,aAGZA,SAAU,UAEVX,MAAO,CACL,UACA,YACA,eACA,OACA,2BAGJ09E,iBAAkB,CAChB19E,MAAO,CAAC,aAAc,yBAA0B,2BAElD29E,oBAAqB,CACnB39E,MAAO,CAAC,cAAe,gBAEzB49E,kBAAmB,CACjB59E,MAAO,CAAC,kBAAmB,qBAE7B69E,kBAAmB,CACjB79E,MAAO,CAAC,aAAc,gBAAiB,kBAEzC89E,8BAA+B,CAC7B99E,MAAO,CAAC,cAAe,gBAEzB+9E,qCAAsC,CACpC/9E,MAAO,CAAC,aAAc,cAAe,cAAe,kBAEtDg+E,0BAA2B,CACzBh+E,MAAO,CAAC,uBCvGDi+E,GAET,CACF9gC,uBAAwB,CACtB1rD,SAAU,yBACV+F,SAAU,0BAEZgiF,eAAgB,CACd/nF,SAAU,iBACV+F,SAAU,iBACV8B,IAAK,mBAII4kF,GAA8C,CACzDC,UAAW,CACTC,aAAc,CAAC,2BAEjBC,UAAW,CACTD,aAAc,CAAC,6BCfHE,KACd,MAAO,CACLC,aAAc,CACZpzE,WAAUzpB,EAAA,GACLu8F,IAELj+E,MAAKte,EAAA,GACAw8F,IAELtpD,MAAO,uBCgCb,SAAA4pD,KAAyC,OAA5BA,EAA0Bp8F,EAAA,CAxBtC2I,EAAAA,SAAS,CACRE,QAAS,CACPwzF,EAAAA,YAAYjuE,UACZkuE,EAAAA,WAAWluE,UACXwwC,EAAAA,wBAAwBxwC,UACxBisC,EAAAA,aAAajsC,UACbmuE,EAAAA,wBAAwBnuE,UACxBouE,EAAAA,sBAAsBpuE,UACtBD,GAAcC,UACd7f,EAAAA,WAAW6f,UACXquE,EAAAA,UAAUruE,UACVsuE,EAAAA,oBAAoBtuE,UACpBuuE,EAAAA,cAAcvuE,UACd+1B,EAAAA,WAAW/1B,UACXwuE,EAAAA,eAAexuE,UACfyuE,EAAAA,WAAWzuE,UACX0uE,EAAAA,cAAc1uE,UACd6sB,GAAiB7sB,UACjB5f,EAAAA,qBAAqB4f,QAAQ,OAC7B8sC,IAEF9xD,QAAS,CAAC8xD,IACVnyD,UAASjG,EAAMi6F,EAAAA,gCAEJX,oBCCb,SAAAY,WASA,SATaA,EACJA,EAAA1iC,WAAP,SACEv0D,GAEA,MAAO,CACLsoB,SAAU4uE,EACVl0F,UAAW,CAACm0F,EAAAA,cAAcn3F,MANnBi3F,EAAgBC,EAAAj9F,EAAA,CA7B5B2I,EAAAA,SAAS,CACRE,QAAS,CACPqnC,EAAAA,aAAa9hB,QAAQ,GAAI,CACvB+uE,0BAA2B,UAC3BC,gBAAiB,YAGnBC,EAAAA,YAAYjvE,QAAQ,IACpBkvE,EAAAA,cAAclvE,QAAQ,IAItBoR,GAEA48D,GACA78B,GACAjlB,EAAAA,kBAAkBlsB,UAElBmvE,EAAAA,gBAAgBnvE,UAChBovE,EAAAA,sBAAsBpvE,UAGtBqvE,EAAAA,UAAUrvE,UACV+rE,GACAO,GACAgD,EAAAA,qBAAqBtvE,WAEvBhlB,QAAS,CAACm2D,GAAY68B,OAEXY,oBCjBb,SAAAW,WASA,SATaA,EACJA,EAAArjC,WAAP,SACEv0D,GAEA,MAAO,CACLsoB,SAAUuvE,EACV70F,UAAW,CAACm0F,EAAAA,cAAcn3F,MANnB43F,EAAmBC,EAAA59F,EAAA,CAnB/B2I,EAAAA,SAAS,CACRE,QAAS,CACPm0F,GAGAtD,IAEF3wF,UAAW,CACTC,EAAAA,qBAAqB,CACnBygB,IAAK,CACHC,SAAS,EACTC,iBAAiB,KAGrB3gB,EAAAA,qBAAqB4xF,IACrBiD,EAAAA,4BAA4B3B,KAE9B9yF,QAAS,CAAC4zF,OAECW,+B/XzBwB,q7JgYCqB,CACxDv/E,YAAa,CACX68E,wBAAyB,CACvBr9E,MAAO,CAAC,yBAA0B,s/GhYHL,0sCiENT","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n}\n\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        res =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach(cls =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach(cls => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(fontawesomeIconConfig),\n    { provide: IconConfig, useExisting: Config },\n  ],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  isFeatureLevel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.config, '1.3');\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(_ => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, FeaturesConfigModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  BaseSiteService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  SelectiveCartService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: ActiveCartService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    @Optional() public selectiveCartService: SelectiveCartService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { DeferLoadingStrategy } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return this.winRef.resize$.pipe(\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\n   * configuration. If no configuration is available for the given breakpoint, the\n   * method will return the default values:\n   * - xs: 567\n   * - sm: 768\n   * - md: 992\n   * - lg: 1200\n   */\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints?.hasOwnProperty(breakpoint)\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  /**\n   * Returns all available breakpoints for the system.\n   */\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  /**\n   * Indicates whether the current screen size is smaller than the maximum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n   */\n  isDown(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map(br =>\n        this.breakpoints\n          .slice(0, this.breakpoints.indexOf(breakpoint) + 1)\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size is larger than the minimum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n   */\n  isUp(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map(br =>\n        this.breakpoints\n          .slice(this.breakpoints.indexOf(breakpoint))\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size fits to the given breakpoint\n   */\n  isEqual(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(map(br => br === breakpoint));\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth > this.getSize(BREAKPOINT.lg)\n      ? BREAKPOINT.xl\n      : this.breakpoints.find(br => windowWidth <= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map(breakpoint => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter(slot => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(page => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap(templateName =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  ProtectedRoutesGuard,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService,\n    protectedRoutesGuard: ProtectedRoutesGuard // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since version 1.2.0\n   * Use constructor with more dependencies and make them all required.\n   *\n   * TODO(issue:4646) deprecated since version 1.2.0\n   */\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService\n  );\n  constructor(\n    // expose as `protected` only services from public API:\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutesGuard?: ProtectedRoutesGuard\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:4646) Expect that `ProtectedRoutesGuard` dependency is required (remove `if` logic)\n     */\n    return this.protectedRoutesGuard\n      ? this.protectedRoutesGuard\n          .canActivate(route)\n          .pipe(\n            switchMap(result =>\n              result ? this.getCmsPage(route, state) : of(result)\n            )\n          )\n      : this.getCmsPage(route, state);\n  }\n\n  private getCmsPage(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService\n          .getPage(pageContext, true)\n          .pipe(first(), withLatestFrom(of(pageContext)))\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap(notFoundPage => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, T[]>();\n  private templatesRefsBefore = new Map<string, T[]>();\n  private templatesRefsAfter = new Map<string, T[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  private store(store: Map<string, T[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned obervable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first(v => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable(observer => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin };\n      const intersectionObserver = new IntersectionObserver(entries => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options?: IntersectionOptions) {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evalutes whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>,\n    // tslint:disable-next-line: unified-signatures\n    intersectionService: DeferLoaderService\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(vcr: ViewContainerRef, templateRef: TemplateRef<any>, outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>, intersectionService?: IntersectionService) instead\n   */\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>\n  );\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService?: DeferLoaderService\n  ) {}\n\n  private initializeOutlet(): void {\n    this.vcr.clear();\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.render();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.initializeOutlet();\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.render();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private render() {\n    this.renderOutlet(OutletPosition.BEFORE);\n    this.renderOutlet(OutletPosition.REPLACE);\n    this.renderOutlet(OutletPosition.AFTER);\n  }\n\n  private renderOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    templates.forEach(obj => {\n      this.create(obj);\n    });\n  }\n\n  private create(tmplOrFactory: any): void {\n    if (tmplOrFactory instanceof ComponentFactory) {\n      this.vcr.createComponent(tmplOrFactory);\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n    }\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent elements of the given element.\n   *\n   * @param element\n   */\n  private getHostElement(element: Element): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentElement);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DeferLoadingStrategy,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\n\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position is used to find the CMS page slot (and optional outlet)\n   * that is rendered in the PageSlotComponent. Furthermore, the position\n   * is added as a CSS class name to the host element.\n   */\n  @Input()\n  set position(position: string) {\n    this.position$.next(position);\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  @HostBinding('class.cx-pending') isPending = true;\n  @HostBinding('class.has-components') hasComponents = false;\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  private pendingComponentCount: number;\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   *\n   * @deprecated we'll stop supporting this property in 2.0 as\n   * it is not used separately.\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    )\n  );\n\n  private subscription = new Subscription();\n\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef,\n    // tslint:disable-next-line:unified-signatures\n    config: CmsConfig\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(cmsService: CmsService, dynamicAttributeService: DynamicAttributeService, renderer: Renderer2, hostElement: ElementRef, config?: CmsConfig) instead\n   */\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef\n  );\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef,\n    protected config?: CmsConfig\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.components$.subscribe(components => {\n        this.hasComponents = components && components.length > 0;\n        this.pendingComponentCount = components ? components.length : 0;\n        this.isPending = this.pendingComponentCount > 0;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n   * Is triggered when a component is added to the view.\n   * We use this information to dropthe `is-pending` class from the page slot\n   * when all nested components have been added.\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pendingComponentCount--;\n    }\n    this.isPending = this.pendingComponentCount > 0;\n  }\n\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.getDeferLoadingStrategy(componentType);\n    return { deferLoading };\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether component rendering\n   * should be deferred.\n   */\n  private getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    if (this.config) {\n      return ((this.config as CmsConfig).cmsComponents[componentType] || {})\n        .deferLoading;\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(this.builders.map(builder => builder.build())).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map(review => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter(rev => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter(rev => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${date.getMonth() +\n        1}-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE = ProductScope.DETAILS;\n\n  /**\n   * Will emit current product or null, if there is no current product (i.e. we are not on PDP)\n   *\n   * @param scopes\n   */\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product | null> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      switchMap((productCode: string) => {\n        return productCode\n          ? this.productService.get(\n              productCode,\n              scopes || this.DEFAULT_PRODUCT_SCOPE\n            )\n          : of(null);\n      }),\n      filter(x => x !== undefined),\n      distinctUntilChanged()\n    );\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map(builder => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe(token => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap(userToken =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe(customerSupportAgentToken =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import { Location } from '@angular/common';\nimport {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injectable,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { OutletPosition, OutletService } from '../../../cms-structure/index';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\nimport { AsmMainUiComponent } from '../asm-main-ui/asm-main-ui.component';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  /** indicates whether the ASM UI has been added already */\n  private isUiAdded = false;\n\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletService: OutletService<ComponentFactory<any>>\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  private isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  private isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  private addUi(): void {\n    if (this.isUiAdded) {\n      return;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      AsmMainUiComponent\n    );\n    this.outletService.add('cx-storefront', factory, OutletPosition.BEFORE);\n    this.isUiAdded = true;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe(isNavigating => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(_ => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import { FormGroup, AbstractControl } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Validates a field of the given form group\n   *\n   * If the field is NOT valid (or invalid), the method returns `true`.\n   *\n   * @param form Form with fields to check\n   * @param formControlName Name of the form field to check\n   * @param submitted Has the form been submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    const control: AbstractControl = form.get(formControlName);\n    return control.invalid && (submitted || (control.touched && control.dirty));\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  form: FormGroup;\n  private submitClicked = false;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submitEvent.emit({\n      userId: this.form.controls.userId.value,\n      password: this.form.controls.password.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe(user => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      searchTerm: [''],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.form.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe(searchTermValue => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.form.controls.searchTerm.setValue(this.selectedCustomer.name);\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsmModule as AsmCoreModule, I18nModule } from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map(cart => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map(order => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map(order => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map(cart =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map(order =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map(order =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  ActiveCartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter(e => !!e),\n        map(entry => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap(valueChange => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class BaseFocusService {}\n","import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseFocusConfig } from '../keyboard-focus.model';\nimport { BaseFocusService } from './base-focus.service';\n\n/**\n * Abstract directive that provides a common interface for all focus directives:\n * - Block Focus\n * - Persist Focus\n * - Escape Focus\n * - Auto Focus\n * - Tab Focus\n * - Trap Focus\n * - Lock Focus\n */\n@Directive()\nexport abstract class BaseFocusDirective implements OnInit {\n  /**\n   * Optional configuration for the focus directive drives the behaviour of the keyboard\n   * focus directive.\n   */\n  protected config: BaseFocusConfig;\n\n  /**\n   * A default config can be provided for each directive if a specific focus directive\n   * is used directly. i.e. `<div cxAutoFocus></div>`\n   */\n  protected defaultConfig: BaseFocusConfig = {};\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected service: BaseFocusService\n  ) {}\n\n  ngOnInit() {\n    this.setDefaultConfiguration();\n    this.requiredTabindex = -1;\n  }\n\n  /**\n   * Override the (input) config if it undefined or an empty string, with the\n   * `defaultConfig`. The `defaultConfig` might be specified for each directive\n   * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\n   * specific (inherited) defaultConfig will be used.\n   */\n  protected setDefaultConfiguration(): void {\n    if ((!this.config || this.config === '') && this.defaultConfig) {\n      this.config = this.defaultConfig;\n    }\n  }\n\n  /**\n   * Helper method to return the host element for the directive\n   * given by the `elementRef`.\n   */\n  protected get host(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /**\n   * Force a tabindex on the host element if it is _requried_ to make the element\n   * focusable. If the element is focusable by nature or by a given tabindex, the\n   * `tabindex` is not applied.\n   *\n   * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\n   */\n  protected set requiredTabindex(tabindex: number) {\n    if (this.requiresExplicitTabIndex) {\n      this.tabindex = tabindex;\n    }\n  }\n\n  /**\n   * Returns true if the host element does not have a tabindex defined\n   * and it also doesn't get focus by browsers nature (i.e. button or\n   * active link).\n   *\n   * We keep this utility method private to not pollute the API.\n   */\n  private get requiresExplicitTabIndex(): boolean {\n    return (\n      this.tabindex === undefined &&\n      ['button', 'input', 'select', 'textarea'].indexOf(\n        this.host.tagName.toLowerCase()\n      ) === -1 &&\n      !(this.host.tagName === 'A' && this.host.hasAttribute('href'))\n    );\n  }\n}\n","import { Directive, HostBinding, HostListener } from '@angular/core';\nimport { BaseFocusDirective } from '../base/base-focus.directive';\nimport { VisibleFocusConfig } from '../keyboard-focus.model';\n\n/**\n * Directive implementation that adds a CSS class to the host element\n * when the moused is used to focus an element. As soon as the keyboard\n * is used, the class is removed.\n */\n@Directive() // selector: '[cxVisibleFocus]'\nexport class VisibleFocusDirective extends BaseFocusDirective {\n  protected defaultConfig: VisibleFocusConfig = { disableMouseFocus: true };\n\n  // @Input('cxVisibleFocus')\n  protected config: VisibleFocusConfig;\n\n  /** controls a polyfill class for the lacking focus-visible feature */\n  @HostBinding('class.mouse-focus') mouseFocus = false;\n\n  @HostListener('mousedown') handleMousedown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = true;\n    }\n  }\n\n  @HostListener('keydown') handleKeydown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = false;\n    }\n  }\n\n  protected get shouldFocusVisible(): boolean {\n    return this.config?.disableMouseFocus;\n  }\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { BlockFocusConfig } from '../keyboard-focus.model';\nimport { VisibleFocusDirective } from '../visible/visible-focus.directive';\n\n@Directive()\n// { selector: '[cxBlockFocus]' }\nexport class BlockFocusDirective extends VisibleFocusDirective\n  implements OnInit {\n  protected defaultConfig: BlockFocusConfig = { block: true };\n\n  // @Input('cxBlockFocus')\n  protected config: BlockFocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: BaseFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.config.block) {\n      this.tabindex = -1;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { FOCUS_GROUP_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\n\nconst GLOBAL_GROUP = '_g_';\n\n/**\n * Shared service to persist the focus for an element or a group\n * of elements. The persisted element focus can be used to persist\n * the focus for a DOM tree, so that the focus remains after a repaint\n * or reoccurs when a DOM tree is \"unlocked\".\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersistFocusService extends BaseFocusService {\n  // this is going to fail as we have sub services. They will al have their own map.\n  // We must bring this to a singlton map.\n  protected focus = new Map<string, string>();\n\n  get(group?: string): string {\n    return this.focus.get(group || GLOBAL_GROUP);\n  }\n\n  set(value: string, group?: string) {\n    if (value) {\n      this.focus.set(group || GLOBAL_GROUP, value);\n    }\n  }\n\n  getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string {\n    return config?.group ? config.group : host.getAttribute(FOCUS_GROUP_ATTR);\n  }\n}\n","/** The element attribute used to store the focus state */\nexport const FOCUS_ATTR = 'data-cx-focus';\n/** The element attribute used to store the focus group state */\nexport const FOCUS_GROUP_ATTR = 'data-cx-focus-group';\n\nexport const enum MOVE_FOCUS {\n  NEXT = 1,\n  PREV = -1,\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseFocusConfig {}\n\nexport interface VisibleFocusConfig {\n  /**\n   * When set to true, the mouse-focus class is added to the host element,\n   * indicating that the element focus was not caused by the keyboard.\n   */\n  disableMouseFocus?: boolean;\n}\n\nexport interface BlockFocusConfig extends VisibleFocusConfig {\n  block?: boolean;\n}\n\nexport interface PersistFocusConfig extends BlockFocusConfig {\n  /**\n   * A key to maintain the focus of an element in case the component is\n   * recreated (which often is the case when an `*ngIf` or `*ngFor` is used).\n   */\n  key?: string;\n\n  /**\n   * Optional group identifier that can be used to persist the focus. This allows\n   * to have separate persisted focus available when the DOM is partially rebuild.\n   */\n  group?: string;\n}\n\nexport interface EscapeFocusConfig extends PersistFocusConfig {\n  focusOnEscape?: boolean;\n  /**\n   * Force an autofocus in case of double-escape\n   */\n  focusOnDoubleEscape?: boolean;\n}\n\nexport interface AutoFocusConfig extends EscapeFocusConfig {\n  /**\n   * Autofocus is enabled by default, and will try to focus an _autofocus_ element.\n   * In case the focus is explicitly set to `true`, the first accessible element\n   * is focussed in case there is no _autofocus_ element found.\n   * If the focus is set to false, autofocus will be disabled completely.\n   *\n   * If a string value is given, the autofocus will be restored based on the persisted\n   * focus group, which is driven by `PersistFocusConfig.key` and `PersistFocusConfig.group`.\n   *\n   * Defaults to `true`.\n   */\n  autofocus?: boolean | string;\n\n  // whenever the target autofocus element is selected by the `skipFocus` selector,\n  // autofocus is ignored.\n  skipFocus?: string;\n}\n\nexport interface TabFocusConfig extends AutoFocusConfig {\n  tab?: boolean | 'scroll' | string;\n}\n\n/**\n * The keyboard navigation (tab, shift-tab and up down keys) is _trapped_\n * for the nested focusable elements. This means that the focus can not\n * \"leave\" the elements. If the last element is focused, the keyboard will\n * navigate to the first element and visa versa.\n */\nexport interface TrapFocusConfig extends TabFocusConfig {\n  /** traps the focus */\n  trap?: boolean | 'start' | 'end';\n}\n\nexport interface LockFocusConfig extends TrapFocusConfig {\n  /**\n   * Indicates that the nested DOM is locked for keyboarding (`TAB`).\n   */\n  lock?: boolean;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface FocusConfig extends LockFocusConfig {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { BlockFocusDirective } from '../block/block-focus.directive';\nimport { FOCUS_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from './persist-focus.service';\n\n/**\n * Directive that provides persistence of the focused state. This is useful\n * when a group of focusable elements got refocused or even recreated. That\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\n *\n * The focus state is based on a configured _key_, which can be passed in the\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\n *\n * ```html\n * <button cxPersistFocus=\"myKey\"></button>\n * <button cxFocus=\"myKey\"></button>\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\n * ```\n *\n * The focus state can be part of a focus _group_, so that the state is shared\n * and remember for the given group. In order to detect the persistence for a\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\n *\n * ```html\n * <button data-cx-focus=\"myKey\"></button>\n * ```\n *\n * Other keyboard focus directives can read the key to understand whether the element\n * should retrieve focus.\n *\n */\n@Directive() // selector: '[cxPersistFocus]',\nexport class PersistFocusDirective extends BlockFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: PersistFocusConfig = {};\n\n  /**\n   * The persistence key can be passed directly or through the `FocusConfig.key`.\n   * While this could be considered a global key, the likeliness of conflicts\n   * is very small since the key is cleared when the focus is changed.\n   */\n  // @Input('cxPersistFocus')\n  protected config: PersistFocusConfig = {};\n\n  /**\n   * The persistance key is maintained in an element attribute for other\n   * implementations. This is needed to ensure that we can resolve the focus\n   * state in case of a repaint.\n   */\n  @HostBinding(`attr.${FOCUS_ATTR}`) attr: string;\n\n  /**\n   * The persistence key is maintained in a singleton cross the app to ensure we\n   * can reset the focus if the DOM gets rebuild.\n   */\n\n  @HostListener('focus', ['$event'])\n  handleFocus(event?: KeyboardEvent) {\n    this.service.set(this.key, this.group);\n\n    event?.preventDefault();\n    event?.stopPropagation();\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: PersistFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.attr = this.key ? this.key : undefined;\n  }\n\n  protected setDefaultConfiguration() {\n    if (typeof this.config === 'string' && this.config !== '') {\n      this.config = { key: this.config };\n    }\n    super.setDefaultConfiguration();\n  }\n\n  /**\n   * Focus the element explicitly if it was focused before.\n   */\n  ngAfterViewInit() {\n    if (this.isPersisted) {\n      this.host.focus({ preventScroll: true });\n    }\n  }\n\n  protected get isPersisted(): boolean {\n    return !!this.key && this.service.get(this.group) === this.key;\n  }\n\n  /**\n   * Returns the key for the host element, which is used to persist the\n   * focus state. This is useful in cases where the DOM is rebuild.\n   */\n  protected get key(): string {\n    return (this.config as PersistFocusConfig)?.key;\n  }\n\n  /**\n   * returns the persistence group (if any) for the focusable elements.\n   */\n  protected get group(): string {\n    return this.service.getPersistenceGroup(\n      this.host,\n      this.config as PersistFocusConfig\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectFocusUtility {\n  /**\n   * Query selectors used to query focusable child elements of the host element.\n   * The selectors are supplemented with `:not([disabled])` and `:not([hidden])`.\n   */\n  protected focusableSelectors: string[] = [\n    'a[href]',\n    'button',\n    '[tabindex]',\n    'input',\n    'select',\n    'textarea',\n  ];\n\n  // like to leave out the following as we don't use it, and make this list exensible.\n  //   `[contentEditable=true]`, // very unlikely to suport as we're not a business tool\n  //   `iframe`, // we really don't like iframes...\n  //   `area[href]`, // very debatable!\n\n  protected focusableSelectorSuffix = ':not([disabled]):not([hidden])';\n\n  query(host: HTMLElement, selector: string): HTMLElement[] {\n    if (!selector || selector === '') {\n      return [];\n    }\n    return Array.from(\n      host.querySelectorAll(selector) as NodeListOf<HTMLElement>\n    );\n  }\n\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    const selector =\n      typeof config?.autofocus === 'string' ? config.autofocus : '[autofocus]';\n\n    // fallback to first focusable\n    return (\n      this.query(host, selector).find(Boolean) ||\n      this.findFocusable(host).find(Boolean)\n    );\n  }\n\n  /**\n   * returns all focusable child elements of the host element. The element selectors\n   * are build from the `focusableSelectors`.\n   *\n   * @param host the `HTMLElement` used to query focusable elements\n   * @param locked indicates whether inactive (`tabindex=\"-1\"`) focusable elements should be returend as well\n   */\n  findFocusable(host: HTMLElement, locked = false): HTMLElement[] {\n    let suffix = this.focusableSelectorSuffix;\n    if (!locked) {\n      suffix += `:not([tabindex='-1'])`;\n    }\n    const selector = this.focusableSelectors.map(s => (s += suffix)).join(',');\n    return this.query(host, selector);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from '../persist/persist-focus.service';\nimport { SelectFocusUtility } from '../services/select-focus.util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EscapeFocusService extends PersistFocusService {\n  constructor(protected selectFocusUtil: SelectFocusUtility) {\n    super();\n  }\n\n  shouldFocus(config: EscapeFocusConfig): boolean {\n    return !!config?.focusOnEscape;\n  }\n\n  handleEscape(\n    host: HTMLElement,\n    config: EscapeFocusConfig,\n    event: KeyboardEvent\n  ): void {\n    if (this.shouldFocus(config)) {\n      if (host !== event.target) {\n        host.focus({ preventScroll: true });\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        if (config?.focusOnDoubleEscape) {\n          this.selectFocusUtil\n            .findFirstFocusable(host, { autofocus: true })\n            ?.focus();\n        }\n      }\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusDirective } from '../persist/persist-focus.directive';\nimport { EscapeFocusService } from './escape-focus.service';\n\n/**\n * Directive to focus the host element whenever the `escape` key is captured.\n * UiEvents bubble up by nature, which is why the `cxEscGroup` can be used\n * on a tree of elements. Each time the escape key is used, the focus will\n * move up in the DOM tree.\n *\n */\n@Directive() // selector: '[cxEscFocus]',\nexport class EscapeFocusDirective extends PersistFocusDirective\n  implements OnInit {\n  protected defaultConfig: EscapeFocusConfig = { focusOnEscape: true };\n\n  // @Input('cxEscFocus')\n  protected config: EscapeFocusConfig;\n\n  @Output() esc = new EventEmitter<boolean>();\n\n  /**\n   * Handles the escape key event.\n   * @param event the native keyboard event which contains the escape keydown event\n   */\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    if (this.service.shouldFocus(this.config)) {\n      this.service.handleEscape(this.host, this.config, event);\n    }\n    this.esc.emit(this.service.shouldFocus(this.config));\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: EscapeFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    if (this.service.shouldFocus(this.config)) {\n      this.requiredTabindex = -1;\n    }\n    super.ngOnInit();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusService } from '../escape/escape-focus.service';\nimport {\n  AutoFocusConfig,\n  FOCUS_ATTR,\n  PersistFocusConfig,\n} from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AutoFocusService extends EscapeFocusService {\n  /**\n   * Returns the first focusable child element of the host element.\n   */\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    if (config?.autofocus === ':host') {\n      return host;\n    } else if (this.hasPersistedFocus(host, config)) {\n      return this.getPersisted(host, this.getPersistenceGroup(host, config));\n    } else {\n      return this.selectFocusUtil.findFirstFocusable(host, config);\n    }\n  }\n\n  /**\n   * Indicates whether any of the focusabe child elements is focused.\n   */\n  hasPersistedFocus(host: HTMLElement, config: PersistFocusConfig): boolean {\n    return !!this.getPersisted(host, this.getPersistenceGroup(host, config));\n  }\n\n  /**\n   * Returns the element that has a persisted focus state.\n   *\n   * @param host the `HTMLElement` used to query for focusable children\n   * @param group the optional group for the persistent state, to separate different focus\n   *   groups and remain the persistance\n   */\n  protected getPersisted(host: HTMLElement, group?: string): HTMLElement {\n    if (!this.get(group)) {\n      return;\n    }\n    const focussed = Array.from(\n      host.querySelectorAll(\n        `[${FOCUS_ATTR}='${this.get(group)}']`\n      ) as NodeListOf<HTMLElement>\n    );\n    return focussed.length > 0 ? focussed[0] : null;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\nimport { AutoFocusService } from './auto-focus.service';\n\n/**\n * Directive that focus the first nested _focusable_ element based on state and configuration:\n *\n * 1. focusable element that was left in a focused state\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\n * 4. first focusable element\n * 5. the host element, in case the configured CSS selector is `:host`.\n *\n * Example configurations:\n *\n * `<div cxAutoFocus>[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\n *\n */\n@Directive() // selector: '[cxAutoFocus]'\nexport class AutoFocusDirective extends EscapeFocusDirective\n  implements AfterViewInit {\n  /** The AutoFocusDirective will be using autofocus by default  */\n  protected defaultConfig: AutoFocusConfig = { autofocus: true };\n\n  // @Input('cxAutoFocus')\n  protected config: AutoFocusConfig;\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: AutoFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Focus the element explicitly if it was focussed before.\n   */\n  ngAfterViewInit(): void {\n    if (this.shouldAutofocus) {\n      this.handleFocus();\n    }\n    if (!this.shouldAutofocus || this.hasPersistedFocus) {\n      super.ngAfterViewInit();\n    }\n  }\n\n  /**\n   * Mimic the focus without setting the actual focus on the host. The first\n   * focusable child element will be focussed.\n   */\n  handleFocus(event?: KeyboardEvent) {\n    if (this.shouldAutofocus) {\n      if (!event?.target || event.target === this.host) {\n        this.firstFocusable?.focus();\n      } else {\n        (event.target as HTMLElement).focus();\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  /**\n   * Helper function to get the first focusable child element\n   */\n  protected get hasPersistedFocus() {\n    return this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Helper function to indicate whether we should use autofocus for the\n   * child elements.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get shouldAutofocus(): boolean {\n    return !!this.config?.autofocus;\n  }\n\n  /**\n   * Helper function to get the first focusable child element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get firstFocusable(): HTMLElement {\n    return this.service.findFirstFocusable(this.host, this.config);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusService } from '../autofocus/auto-focus.service';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TabFocusService extends AutoFocusService {\n  /**\n   * Moves to the next (or previous) tab.\n   */\n  moveTab(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS,\n    event: KeyboardEvent\n  ): void {\n    if (config?.tab) {\n      const next =\n        config.tab === 'scroll'\n          ? this.findNextScrollable(host, config, increment)\n          : this.findNext(host, config, increment);\n\n      next?.focus();\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * builds out virtual slides out of the full scrollable area, to allow\n   * for maximum flexibility for the underlying layout without using hardcoded\n   * slide sizes.\n   */\n  protected findNextScrollable(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const active = this.getActiveChild(host, config);\n\n    if (!active) {\n      return;\n    }\n    // slide count\n    const virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);\n\n    // find current virtual slide\n    const currentVirtualSlide = Math.round(\n      active.offsetLeft / (host.scrollWidth / virtualSlideCount)\n    );\n\n    let nextVirtualSlide = currentVirtualSlide + increment;\n    if (\n      increment === MOVE_FOCUS.NEXT &&\n      nextVirtualSlide >= virtualSlideCount\n    ) {\n      nextVirtualSlide = 0;\n    }\n    if (increment === MOVE_FOCUS.PREV && nextVirtualSlide < 0) {\n      nextVirtualSlide = virtualSlideCount - 1;\n    }\n\n    const firstItemOnNextSlide = this.getChildren(host, config)?.find(\n      tab =>\n        tab.offsetLeft >=\n        (host.scrollWidth / virtualSlideCount) * nextVirtualSlide\n    );\n\n    return firstItemOnNextSlide;\n  }\n\n  protected findNext(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const childs = this.getChildren(host, config);\n    let activeIndex = childs?.findIndex(\n      c => c === this.getActiveChild(host, config)\n    );\n\n    if (!activeIndex || activeIndex === -1) {\n      activeIndex = 0;\n    }\n    activeIndex += increment;\n\n    if (increment === MOVE_FOCUS.NEXT && activeIndex >= childs?.length) {\n      activeIndex = childs.length - 1;\n    }\n    if (increment === MOVE_FOCUS.PREV && activeIndex < 0) {\n      activeIndex = 0;\n    }\n    return childs ? childs[activeIndex] : undefined;\n  }\n\n  /**\n   * Returns the active focusable child element. If there's no active\n   * focusable child element, the first focusable child is returned.\n   */\n  protected getActiveChild(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement {\n    const persisted = this.getPersisted(host, config?.group);\n    if (persisted) {\n      return persisted;\n    }\n    const children = this.getChildren(host, config);\n    let index = children.findIndex(tab => this.isActive(tab));\n    if (!index || index === -1) {\n      index = 0;\n    }\n    return children[index];\n  }\n\n  protected getChildren(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement[] {\n    if (typeof config.tab === 'string' && config.tab !== 'scroll') {\n      return this.selectFocusUtil.query(host, config.tab);\n    } else {\n      return this.findFocusable(host, true);\n    }\n  }\n\n  /**\n   * returns all focusable child elements of the host element.\n   */\n  findFocusable(host: HTMLElement, locked = false): HTMLElement[] {\n    return this.selectFocusUtil.findFocusable(host, locked);\n  }\n\n  protected isActive(el: HTMLElement): boolean {\n    const child = document.activeElement;\n    const selector = child.tagName;\n\n    return (\n      el === child ||\n      !!Array.from(el.querySelectorAll(selector)).find(e => e === child)\n    );\n  }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { AutoFocusDirective } from '../autofocus/auto-focus.directive';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from './tab-focus.service';\n\n/**\n * Directive to move the focus of (\"locked\") child elements. This is useful\n * for a nested list of tabs, carousel slides or any group of elements that\n * requires horizontal navigation.\n */\n@Directive() // selector: '[cxTabFocus]'\nexport class TabFocusDirective extends AutoFocusDirective {\n  /** `tab` defaults to true if the directive `cxTabFocus` is used. */\n  protected defaultConfig: TabFocusConfig = { tab: true };\n\n  // @Input('cxTabFocus')\n  protected config: TabFocusConfig = {};\n\n  @HostListener('keydown.arrowRight', ['$event'])\n  handleNextTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.NEXT, event);\n    }\n  }\n\n  @HostListener('keydown.arrowLeft', ['$event'])\n  handlePreviousTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.PREV, event);\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TabFocusService\n  ) {\n    super(elementRef, service);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from '../tab/tab-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrapFocusService extends TabFocusService {\n  /**\n   * Indicates whether any of the child elements of the host are focusable.\n   *\n   * @param host `HTMLElement` that is used to query the focusable elements.\n   */\n  hasFocusableChildren(host: HTMLElement): boolean {\n    return this.findFocusable(host).length > 0;\n  }\n\n  /**\n   * Focus the next or previous element of all available focusable elements.\n   * The focus is _trapped_ in case there's no next or previous available element.\n   * The focus will automatically move the start or end of the list.\n   */\n  moveFocus(\n    host: HTMLElement,\n    config: TrapFocusConfig,\n    increment: MOVE_FOCUS,\n    event: UIEvent\n  ): void {\n    const focusable: HTMLElement[] = this.findFocusable(host);\n\n    let index = focusable.findIndex(v => v === event.target) + increment;\n\n    const shouldMoveFocus =\n      (index >= 0 && index < focusable.length) ||\n      (index < 0 && this.getTrapStart(config.trap)) ||\n      (index >= focusable.length && this.getTrapEnd(config.trap));\n\n    if (shouldMoveFocus) {\n      if (index >= focusable.length) {\n        index = 0;\n      }\n      if (index < 0) {\n        index = focusable.length - 1;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const el = focusable[index];\n\n      el.focus();\n    }\n  }\n\n  protected getTrapStart(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'start';\n  }\n\n  protected getTrapEnd(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'end';\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\nimport { TrapFocusService } from './trap-focus.service';\n\n/**\n * Directive that keeps the focus inside the focussable child elements,\n * also known as a _focus trap_.\n */\n@Directive() // selector: '[cxTrapFocus]'\nexport class TrapFocusDirective extends TabFocusDirective implements OnInit {\n  protected defaultConfig: TrapFocusConfig = { trap: true };\n\n  // @Input('cxTrapFocus')\n  protected config: TrapFocusConfig = {};\n\n  @HostListener('keydown.arrowdown', ['$event'])\n  @HostListener('keydown.tab', ['$event'])\n  handleTrapDown = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.NEXT);\n    }\n  };\n\n  @HostListener('keydown.arrowup', ['$event'])\n  @HostListener('keydown.shift.tab', ['$event'])\n  handleTrapUp = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.PREV);\n    }\n  };\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TrapFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Moves the focus of the element reference up or down, depending on the increment.\n   * The focus of the element is trapped to avoid it from going out of the group.\n   *\n   * @param event UIEvent that is used to get the target element. The event is blocked\n   *   from standard execution and further bubbling.\n   * @param increment indicates whether the next or previous is focussed.\n   */\n  protected moveFocus(event: UIEvent, increment: number) {\n    if (this.service.hasFocusableChildren(this.host)) {\n      this.service.moveFocus(\n        this.host,\n        this.config,\n        increment,\n        event as UIEvent\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TrapFocusService } from '../trap/trap-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LockFocusService extends TrapFocusService {}\n","import {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { FOCUS_GROUP_ATTR, LockFocusConfig } from '../keyboard-focus.model';\nimport { TrapFocusDirective } from '../trap/trap-focus.directive';\nimport { LockFocusService } from './lock-focus.service';\n\n/**\n * Directive that adds persistence for focussed element in case\n * the elements are being rebuild. This happens often when change\n * detection kicks in because of new data set from the backend.\n */\n@Directive() // selector: '[cxLockFocus]'\nexport class LockFocusDirective extends TrapFocusDirective\n  implements OnInit, AfterContentInit {\n  protected defaultConfig: LockFocusConfig = { lock: true };\n\n  // @Input('cxLockFocus')\n  protected config: LockFocusConfig = {};\n\n  /**\n   * Indicates that the host is configured to use locking. This is available as a\n   * CSS class `focus-lock`.\n   */\n  @HostBinding('class.focus-lock') shouldLock: boolean;\n  /**\n   * Indicates that the host is locked. This is available as a CSS class `is-locked`.\n   */\n  @HostBinding('class.is-locked') isLocked: boolean;\n\n  /**\n   * Emits an event when the host is unlocked.\n   */\n  @Output() unlock = new EventEmitter<boolean>();\n\n  /**\n   * When the user selects enter or space, the focusable childs are\n   * unlocked, which means that the tabindex is set to 0.\n   */\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  handleEnter(event: KeyboardEvent) {\n    if (this.shouldLock && this.host === (event.target as HTMLElement)) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * In case any of the children elements is touched by the mouse,\n   * we unlock the group to not break the mouse-experience.\n   */\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    if (this.shouldLock && this.isLocked) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: LockFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service);\n  }\n\n  protected lockFocus() {\n    this.addTabindexToChildren(-1);\n  }\n\n  protected unlockFocus(event?: UIEvent) {\n    this.unlock.emit(true);\n    this.addTabindexToChildren(0);\n    // we focus the host if the event target was a nested child\n    if (event?.target === this.host) {\n      super.handleFocus(event as KeyboardEvent);\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.shouldLock = this.config?.lock;\n\n    if (this.shouldLock) {\n      this.tabindex = 0;\n\n      // Locked elements will be set to `autofocus` by default if it's not\n      // been configured. This will ensure that autofocus kicks in upon unlock.\n      if (!this.config.hasOwnProperty('autofocus')) {\n        this.config.autofocus = true;\n      }\n      // Locked elements will be set to `focusOnEscape` by default if it's not\n      // been configured. This will ensure that  the host gets locked again when\n      // `escape` is pressed.\n      if (!this.config.hasOwnProperty('focusOnEscape')) {\n        this.config.focusOnEscape = !(this.config?.focusOnEscape === false);\n      }\n    }\n  }\n\n  ngAfterContentInit() {\n    if (this.shouldLock) {\n      /**\n       * If the component hosts a group of focusable children elmenents,\n       * we persist the group key to the children, so that they can taken this\n       * into account when they persist their focus state.\n       */\n      if (!!this.group) {\n        this.service\n          .findFocusable(this.host)\n          .forEach(el =>\n            this.renderer.setAttribute(el, FOCUS_GROUP_ATTR, this.group)\n          );\n      }\n\n      this.lockFocus();\n    }\n  }\n\n  handleFocus(event?: KeyboardEvent): void {\n    if (this.shouldLock) {\n      this.lockFocus();\n\n      if (this.shouldUnlockAfterAutofocus(event)) {\n        // Delay unlocking in case the host is using `ChangeDetectionStrategy.Default`\n        setTimeout(() => this.unlockFocus(event));\n      } else {\n        this.lockFocus();\n      }\n\n      // let's not bubble up the handleFocus event if the host is locked\n      if (this.isLocked) {\n        event?.stopPropagation();\n        return;\n      }\n    }\n\n    super.handleFocus(event);\n  }\n\n  /**\n   * When the handleFocus is called without an actual event, it's coming from Autofocus.\n   * In this case we unlock the focusable children in case there's a focusable child that\n   * was unlocked before.\n   *\n   * We keep this private to not polute the API.\n   */\n  private shouldUnlockAfterAutofocus(event?: KeyboardEvent) {\n    return !event && this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Add the tabindex attribute to the focusable children elements\n   */\n  protected addTabindexToChildren(i = 0): void {\n    if (this.shouldLock) {\n      this.isLocked = i === -1;\n      if (!(this.hasFocusableChildren && i === 0) || i === 0) {\n        this.focusable.forEach(el => {\n          this.renderer.setAttribute(el, 'tabindex', i.toString());\n        });\n      }\n    }\n  }\n\n  /**\n   * Utility method, returns all focusable children for the host element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get hasFocusableChildren(): boolean {\n    return this.service.hasFocusableChildren(this.host);\n  }\n\n  /**\n   * Returns the focusable children of the host element. If the host element\n   * is configured to be locked, the query is restricted to child elements\n   * with a tabindex !== `-1`.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get focusable(): HTMLElement[] {\n    return this.service.findFocusable(this.host, this.shouldLock);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { LockFocusService } from '../lock/lock-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeyboardFocusService extends LockFocusService {}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { FocusConfig } from './keyboard-focus.model';\nimport { LockFocusDirective } from './lock/lock-focus.directive';\nimport { KeyboardFocusService } from './services/keyboard-focus.service';\n\n@Directive({\n  selector: '[cxFocus]',\n})\nexport class FocusDirective extends LockFocusDirective {\n  protected defaultConfig: FocusConfig = {};\n  // tslint:disable-next-line: no-input-rename\n  @Input('cxFocus') protected config: FocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: KeyboardFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service, renderer);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusDirective } from './focus.directive';\n\nconst directives = [\n  // PersistFocusDirective,\n  // VisibleFocusDirective,\n  // BlockFocusDirective,\n  // AutoFocusDirective,\n  // EscapeFocusDirective,\n  // LockFocusDirective,\n  // TrapFocusDirective,\n  // TabFocusDirective,\n  FocusDirective,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...directives],\n  exports: [...directives],\n})\nexport class KeyboardFocusModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { CardComponent } from './card.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map(totalWidth => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else if (media && media[this.getHighestAvailableFormat(media)]) {\n      return this.getImageUrl(media[this.getHighestAvailableFormat(media)].url);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * returns highest resolution format name from media formats\n   */\n  private getHighestAvailableFormat(media): string {\n    if (media) {\n      let mediaFormat: MediaFormats;\n\n      this.mediaFormats.forEach(format => {\n        if (\n          !mediaFormat ||\n          (mediaFormat.threshold < format.threshold && media[format.code])\n        ) {\n          mediaFormat = format;\n        }\n      });\n\n      return mediaFormat.code;\n    }\n\n    return null;\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functinality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive inteteger or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Inidicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  private _control$: Observable<FormControl>;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Returns an observable with the control. The value changes of the\n   * control are intercepted in order to suppress invalid values.\n   */\n  getControl(): Observable<FormControl> {\n    if (!this._control$) {\n      this._control$ = this.control.valueChanges.pipe(\n        startWith(this.control.value),\n        tap(value =>\n          this.control.setValue(this.getValidCount(value), { emitEvent: false })\n        ),\n        map(() => this.control)\n      );\n    }\n    return this._control$;\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\n\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig, PaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultPaginationConfig),\n    { provide: PaginationConfig, useExisting: Config },\n  ],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(_ =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter(loaded => loaded),\n      switchMap(_ => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap(dataLoaded => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: `\n    <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container>\n  `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter(s => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(protected el: ElementRef, protected renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'style',\n        `--star-fill:${value || this.initialRate};`\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(EMAIL_PATTERN) ? null : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(PASSWORD_PATTERN) ? null : { InvalidPassword: true };\n  }\n\n  static matchPassword(control: AbstractControl): { NotEqual: boolean } {\n    if (control.get('password').value !== control.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\nimport { FeaturesConfigModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, FeaturesConfigModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  FeatureConfigService,\n  OCC_USER_ID_ANONYMOUS,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  form: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected cartVoucherService: CartVoucherService,\n    protected formBuilder: FormBuilder,\n    protected customerCouponService: CustomerCouponService,\n    protected featureConfig: FeatureConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n    if (this.featureConfig && this.featureConfig.isLevel('1.5')) {\n      this.cart$ = combineLatest([\n        this.activeCartService.getActive(),\n        this.authService.getOccUserId(),\n        this.customerCouponService.getCustomerCoupons(\n          this.MAX_CUSTOMER_COUPON_PAGE\n        ),\n      ]).pipe(\n        tap(\n          ([cart, userId, customerCoupons]: [\n            Cart,\n            string,\n            CustomerCouponSearchResult\n          ]) => {\n            this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code;\n            this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n          }\n        ),\n        map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n    else {\n      this.cart$ = combineLatest([\n        this.activeCartService.getActive(),\n        this.authService.getOccUserId(),\n      ]).pipe(\n        tap(\n          ([cart, userId]: [Cart, string]) =>\n            (this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code)\n        ),\n        map(([cart]: [Cart, string]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n\n    this.cartIsLoading$ = this.activeCartService\n      .getLoaded()\n      .pipe(map(loaded => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.form = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe(success => {\n          this.onSuccess(success);\n        })\n    );\n\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe(error => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.form.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach(appliedVoucher => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          coupon => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (!this.form.valid) {\n      this.form.markAsTouched();\n      return;\n    }\n    this.cartVoucherService.addVoucher(this.form.value.couponCode, this.cartId);\n  }\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    FeaturesConfigModule,\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  ConsignmentEntry,\n  FeatureConfigService,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every(item => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map(consignmentEntry => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach(item => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.activeCartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map(value => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport {\n  FeatureConfigService,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    promotionService: PromotionService,\n    // tslint:disable-next-line:unified-signatures\n    featureConfig: FeatureConfigService\n  );\n  /**\n   * @deprecated Since 1.5\n   * Add featureConfig for save for later.\n   * Remove issue: #5958\n   */\n  constructor(promotionService: PromotionService);\n\n  constructor(\n    protected promotionService: PromotionService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  Cart,\n  ActiveCartService,\n  FeatureConfigService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private featureConfig: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n\n    if (this.isSaveForLaterEnabled()) {\n      this.cartLoaded$ = combineLatest([\n        this.activeCartService.getLoaded(),\n        this.selectiveCartService.getLoaded(),\n        this.authService.isUserLoggedIn(),\n      ]).pipe(\n        tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n        map(([cartLoaded, sflLoaded, loggedIn]) =>\n          loggedIn ? cartLoaded && sflLoaded : cartLoaded\n        )\n      );\n    }\n    //TODO remove for #5958\n    else {\n      this.cartLoaded$ = this.activeCartService.getLoaded();\n    }\n    //TODO  remove for #5958 end\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958 end\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.getLoaded(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.getCart(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else if (selectiveCart.totalItems) {\n            return slots.filter(\n              slot =>\n                slot !== 'EmptyCartMiddleContent' &&\n                slot !== 'CenterRightContentSlot'\n            );\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter(product => Boolean(product)),\n    tap(product => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter(wishlist => Boolean(wishlist)),\n    map(wishList => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find(entry => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  SelectiveCartService,\n  Cart,\n  OrderEntry,\n  ActiveCartService,\n  CmsParagraphComponent,\n  CmsService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map(cart => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.getLoaded(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SaveForLaterComponent } from './save-for-later.component';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n      features: {\n        saveForLater: '1.5',\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","export abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          deliveryMode => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          deliveryMode => deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map(cartData => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find(address => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find(address => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map(data => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutConfigService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n    { provide: CheckoutConfig, useExisting: Config },\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.activeCartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n    { provide: CheckoutConfig, useExisting: Config },\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  LoaderState,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<LoaderState<void>>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address !== undefined &&\n          address.country !== undefined &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  ActiveCartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutConfigService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.address.controls['region'].value.isocode) {\n      this.regionsSub = this.regions$.pipe(take(1)).subscribe(regions => {\n        const obj = regions.find(\n          region =>\n            region.isocode === this.address.controls['region'].value.isocode\n        );\n        Object.assign(this.address.value.region, {\n          isocodeShort: obj.isocodeShort,\n        });\n      });\n    }\n\n    if (this.address.dirty) {\n      this.checkoutDeliveryService.verifyAddress(this.address.value);\n    } else {\n      // address form value not changed\n      // ignore duplicate address\n      this.submitAddress.emit(undefined);\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n  isGuestCheckout = false;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected || Object.keys(selected).length === 0)\n          ) {\n            const defaultAddress = addresses.find(\n              address => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  addAddress(address: Address): void {\n    const selectedSub = this.selectedAddress$.subscribe(selected => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    this.existingAddresses$.pipe(take(1)).subscribe(addresses => {\n      addresses.includes(address)\n        ? this.selectAddress(address)\n        : this.checkoutDeliveryService.createAndSetAddress(address);\n    });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { KeyboardFocusService } from '../../keyboard-focus';\nimport { SkipLink, SkipLinkConfig } from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(\n    protected config: SkipLinkConfig,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      skipLink => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      skipLink => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter(skipLink => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(skipLink: SkipLink): void {\n    const target =\n      skipLink.target instanceof HTMLElement\n        ? skipLink.target\n        : (skipLink.target as Element).parentElement;\n\n    // focus first focusable element in the\n    const firstFocusable =\n      this.keyboardFocusService.findFirstFocusable(target) || target;\n\n    // we force a tabindex if not available, to ensure we can focus into the element\n    const hasTabindex = firstFocusable.hasAttribute('tabindex');\n    if (!hasTabindex) {\n      firstFocusable.setAttribute('tabindex', '-1');\n    }\n\n    firstFocusable.focus();\n\n    // drop the tmp tabindex\n    if (!hasTabindex) {\n      firstFocusable.removeAttribute('tabindex');\n    }\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      skipLink => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          skipLink => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService.getSkipLinks();\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink): void {\n    this.skipLinkService.scrollToTarget(skipLink);\n  }\n}\n","import { SkipLinkConfig } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'cx-header',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'cx-main',\n      i18nKey: 'skipLink.labels.main',\n    },\n    { key: 'cx-footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport {\n  Config,\n  ConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkConfig } from './config/skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n    KeyboardFocusModule,\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    { provide: SkipLinkConfig, useExisting: Config },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\n@NgModule({\n  imports: [OutletRefModule],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  isAnonymousConsentsEnabled = false;\n\n  @Input()\n  consent: AnonymousConsent;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  @Input()\n  isLevel13 = false;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.isAnonymousConsentsEnabled && this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.isAnonymousConsentsEnabled\n      ? this.requiredConsents.includes(templateId)\n      : false;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  isFeatureEnabled,\n  isFeatureLevel,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  isAnonymousConsentsEnabled = isFeatureEnabled(\n    this.anonymousConsentsConfig,\n    ANONYMOUS_CONSENTS_FEATURE\n  );\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.anonymousConsentsConfig, '1.3');\n\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    anonymousConsentsService: AnonymousConsentsService,\n    authService: AuthService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   ```ts\n   constructor(\n     userConsentService: UserConsentService,\n     globalMessageService: GlobalMessageService,\n     anonymousConsentsConfig : AnonymousConsentsConfig,\n     anonymousConsentsService : AnonymousConsentsService,\n     authService: AuthService,\n   ) \n   ```\n   */\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService\n  );\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService,\n    private anonymousConsentsConfig?: AnonymousConsentsConfig,\n    private anonymousConsentsService?: AnonymousConsentsService,\n    private authService?: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (!this.isAnonymousConsentsEnabled) {\n          return templateList;\n        }\n\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map(template => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    if (!this.isAnonymousConsentsEnabled) {\n      return false;\n    }\n\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  FocusConfig,\n  KeyboardFocusService,\n} from '../a11y/keyboard-focus/index';\nimport { SkipLinkComponent } from '../a11y/skip-link/index';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  // required by esc focus\n  @HostBinding('tabindex') tabindex = '0';\n\n  @ViewChild(SkipLinkComponent) child: SkipLinkComponent;\n\n  private keyboardFocusConfig: FocusConfig = {\n    focusOnEscape: true,\n    focusOnDoubleEscape: true,\n  };\n\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    this.keyboardFocusService.handleEscape(\n      this.elementRef.nativeElement,\n      this.keyboardFocusConfig,\n      event\n    );\n  }\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { KeyboardFocusModule } from '../a11y/keyboard-focus/keyboard-focus.module';\nimport { SkipLinkModule } from '../a11y/skip-link/skip-link.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n\n    SkipLinkModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map(data => data.banners.trim().split(' ')),\n    map(codes => codes.map(code => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  map,\n  switchMap,\n} from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    // tslint:disable-next-line:unified-signatures\n    winRef: WindowRef\n  );\n  /**\n   * @deprecated since 1.4\n   *\n   * TODO(issue:#5813) Deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService,\n    private winRef?: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilKeyChanged('components'),\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['activeTab']) {\n        this.activeTabNum = routeState['activeTab'];\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach(comp => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n    AddressBookComponentService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe(error => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() isValid: string;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantity(control: FormControl) {\n  let q = 0;\n  Object.keys(control.value).forEach(key => (q += control.value[key]));\n\n  return q > 0 ? null : { required: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap(form => {\n        return this.getEntries().pipe(\n          map(entries =>\n            entries.filter(entry => this.getFormControl(form, entry).value > 0)\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap(order => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup({}, { validators: [ValidateQuantity] });\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach(entry => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    if (this.isConfirmation) {\n      control.disable();\n    }\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach(entry =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter(order => Boolean(order)),\n      map(order =>\n        order.entries.filter(\n          entry => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter(entryNumber => <number>entries[entryNumber] > 0)\n      .map(\n        entryNumber =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map(form => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter(order => !!order.entries),\n      map(order =>\n        order.entries.filter(\n          entry => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter(entryNumber => <number>entries[entryNumber] > 0)\n      .map(\n        entryNumber =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first(r => !!r))\n      .subscribe(returnRequest => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map(form => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map(order => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(consignment =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map(order => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            consignment => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map(order => order.pagination.totalResults),\n    filter(totalResults => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap(returnRequest => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      success => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map(returnRequests => returnRequests.pagination.totalResults),\n    filter(totalResults => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Observable, combineLatest, Subscription } from 'rxjs';\nimport {\n  CustomerCouponService,\n  CustomerCouponSearchResult,\n  PaginationModel,\n} from '@spartacus/core';\nimport { tap, map } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          coupons =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe(error => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe(error => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe(k => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe(success => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap(preferences => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach(p => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          interests =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map(interest => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map(result => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { asyncScheduler, combineLatest, Observable } from 'rxjs';\nimport { filter, map, observeOn } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home').pipe(observeOn(asyncScheduler)),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(data => !!data),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                key => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                it => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map(items => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach(child =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map(child => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    event.preventDefault();\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter(n => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n\n  isTabbable(node: any) {\n    return this.flyout && node.children && node.children.length;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  ANONYMOUS_CONSENTS_FEATURE,\n  CmsNavigationComponent,\n  isFeatureEnabled,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  // in order to preserve the backwards compatibility, this should render only if anonymous consents feature is disabled\n  data$ = this.componentData.data$.pipe(\n    filter(\n      _ =>\n        !isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        )\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService,\n    // tslint:disable-next-line: unified-signatures\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   * \n    ```ts\n      constructor(\n      componentData: CmsComponentData<CmsNavigationComponent>,\n      service: NavigationService,\n      anonymousConsentsConfig: AnonymousConsentsConfig\n    )\n    ```\n   */\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService\n  );\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(_ => Boolean(deliveryAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(_ => Boolean(deliveryMode)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(_ => Boolean(billingAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(_ => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap(order => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    this.userService.registerGuest(\n      this.guid,\n      this.guestRegisterForm.value.password\n    );\n    if (!this.subscription) {\n      this.subscription = this.authService.getUserToken().subscribe(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE = ProductScope.LIST;\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map(data => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map(data => data.productCodes.trim().split(' ')),\n    map(codes =>\n      codes.map(code => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map(ref => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map((p: Product) => this.createThumbs(p))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe(route => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n        this.viewMode$.next(\n          template === 'ProductGridPageTemplate'\n            ? ViewModes.Grid\n            : ViewModes.List\n        );\n      })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet: Facet): Facet[] {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : facet.topValueCount\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter(product => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap(product => {\n        product.baseOptions.forEach(option => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find(item => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach(variant => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      item => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      item => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          item => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter(variant => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  // TODO deprecated since 1.4, remove\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(p => !!p),\n    map(p => p.code),\n    distinctUntilChanged(),\n    switchMap(productCode => this.reviewService.getByProductCode(productCode)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  private markFormAsTouched(): void {\n    Object.keys(this.reviewForm.controls).forEach(key => {\n      this.reviewForm.controls[key].markAsTouched();\n    });\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.markFormAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/components/star-rating/star-rating.module';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe(success => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(interests => !!interests.results && interests.results.length === 1)\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap(prefs => (this.enabledPrefs = prefs)),\n        map(prefs => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe(error => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe(success => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe(text =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { ActivatedRoute } from '@angular/router';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService, RoutingService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(\n    protected storeDataService: StoreDataService,\n    protected route: ActivatedRoute,\n    protected routingService: RoutingService\n  ) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      markerIndex => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe(params =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  form: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    { validator: this.emailsMatch }\n  );\n\n  sub: Subscription;\n\n  private submitClicked = false;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isEmailConfirmInvalid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('emailConfirmation').touched &&\n          this.form.get('emailConfirmation').dirty))\n    );\n  }\n\n  onSubmit() {\n    this.submitClicked = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const email = this.form.value.email;\n    this.activeCartService.addEmail(email);\n\n    if (!this.sub) {\n      this.sub = this.activeCartService.getAssignedUser().subscribe(_ => {\n        if (this.activeCartService.isGuestCart()) {\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private emailsMatch(abstractControl: AbstractControl): { NotEqual: boolean } {\n    return abstractControl.get('email').value !==\n      abstractControl.get('emailConfirmation').value\n      ? { NotEqual: true }\n      : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService,\n    private winRef: WindowRef,\n    private activatedRoute: ActivatedRoute,\n    private checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n\n    if (\n      this.checkoutConfigService &&\n      this.checkoutConfigService.isGuestCheckout()\n    ) {\n      this.loginAsGuest = this.activatedRoute.snapshot.queryParams['forced'];\n    }\n\n    // TODO(issue:#4055) Deprecated since 1.1.0\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['newUid'] && routeState['newUid'].length) {\n        this.prefillForm('userId', routeState['newUid']);\n      }\n    }\n  }\n\n  login(): void {\n    if (this.form.valid) {\n      this.submitLogin();\n    } else {\n      this.markFormAsTouched();\n    }\n  }\n\n  private submitLogin(): void {\n    const { userId, password } = this.form.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  private markFormAsTouched(): void {\n    Object.keys(this.form.controls).forEach(key => {\n      this.form.controls[key].markAsTouched();\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private prefillForm(field: string, value: string): void {\n    this.form.patchValue({\n      [field]: value,\n    });\n\n    this.form.get(field).markAsTouched(); // this action will check field validity on load\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap(isUserLoggedIn => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n  ProtectedRoutesService,\n  FeatureConfigService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  /**\n   * @deprecated since 1.4\n   * Check #5666 for more info\n   *\n   * TODO(issue:5666) Deprecated since 1.4\n   */\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes?: ProtectedRoutesService,\n    protected featureConfig?: FeatureConfigService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  protected redirect(): void {\n    // TODO(issue:5666) Deprecated since 1.4\n    const cxRoute: string =\n      this.featureConfig.isLevel('1.4') &&\n      this.protectedRoutes &&\n      this.protectedRoutes.shouldProtect\n        ? 'login'\n        : 'home';\n\n    this.routing.go({ cxRoute });\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthRedirectService,\n  AuthService,\n  ConsentTemplate,\n  FeatureConfigService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles } from '../../../shared/utils/forms/title-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  // TODO(issue:4237) Register flow\n  isNewRegisterFlowEnabled: boolean =\n    this.featureConfig && this.featureConfig.isLevel('1.1');\n\n  isAnonymousConsentEnabled =\n    this.featureConfig &&\n    this.featureConfig.isEnabled(ANONYMOUS_CONSENTS_FEATURE);\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isAnonymousConsentEnabled\n          ? this.isConsentRequired()\n          : false,\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    // tslint:disable-next-line:unified-signatures\n    router: RoutingService,\n    featureConfig: FeatureConfigService,\n    anonymousConsentsService: AnonymousConsentsService,\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   *\n   * Use constructor(\n   * protected auth: AuthService,\n   * protected authRedirectService: AuthRedirectService,\n   * protected userService: UserService,\n   * protected globalMessageService: GlobalMessageService,\n   * protected fb: FormBuilder,\n   * protected router?: RoutingService,\n   * protected featureConfig?: FeatureConfigService,\n   * protected anonymousConsentsService?: AnonymousConsentsService,\n   * protected anonymousConsentsConfig?: AnonymousConsentsConfig) instead\n   *\n   * TODO(issue:4237) Register flow\n   * TODO(issue:4989) Anonymous consents\n   */\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder\n  );\n  constructor(\n    protected auth: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router?: RoutingService,\n    protected featureConfig?: FeatureConfigService,\n    protected anonymousConsentsService?: AnonymousConsentsService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    // TODO(issue:4237) Register flow\n    if (this.isNewRegisterFlowEnabled) {\n      this.loading$ = this.userService.getRegisterUserResultLoading();\n      this.registerUserProcessInit();\n    } else {\n      if (this.auth && this.authRedirectService) {\n        this.subscription.add(\n          this.userService\n            .getRegisterUserResultSuccess()\n            .subscribe((success: boolean) => {\n              if (success) {\n                const { uid, password } = this.collectDataFromRegisterForm(\n                  this.userRegistrationForm.value\n                );\n                this.auth.authorize(uid, password);\n              }\n            })\n        );\n        this.subscription.add(\n          this.auth.getUserToken().subscribe(data => {\n            if (data && data.access_token) {\n              this.globalMessageService.remove(\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n              this.authRedirectService.redirect();\n            }\n          })\n        );\n      }\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(messages => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some(message => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    if (\n      this.isAnonymousConsentEnabled &&\n      Boolean(this.anonymousConsentsConfig) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent)\n    ) {\n      this.anonymousConsent$ = combineLatest([\n        this.anonymousConsentsService.getConsent(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n        this.anonymousConsentsService.getTemplate(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n      ]).pipe(\n        map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n          return {\n            consent,\n            template: template ? template.description : '',\n          };\n        })\n      );\n\n      this.subscription.add(\n        this.userRegistrationForm\n          .get('newsletter')\n          .valueChanges.subscribe(_ => {\n            this.toggleAnonymousConsent();\n          })\n      );\n    }\n  }\n\n  submit(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.userRegistrationForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.userRegistrationForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    if (\n      Boolean(this.anonymousConsentsService) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.requiredConsents)\n    ) {\n      return this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (this.router && success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    if (Boolean(this.userRegistrationForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    } else {\n      this.anonymousConsentsService.withdrawConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe(success => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n  MyCouponsModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      lg: {\n        slots: [\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n    },\n    navigation: {\n      lg: { slots: [] },\n      slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      lg: {\n        pageFold: 'UpSelling',\n      },\n\n      pageFold: 'Summary',\n\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2cLayoutConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","/**\n * @deprecated since 2.0.0\n * NOTE: delete this file altogether, move below slots to the main default layout config\n */\n\nimport { LayoutConfig } from '../../../layout/config/layout-config';\n\nexport const PLPAccessibilityLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n  },\n};\n"]}