{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/recipes/config/optional-layouts/plp-accessibility-layout-config.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","ICON_TYPE","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","ar","error","__spread","concat","IconResourceType","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","resources","type","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getStyleClasses","iconType","resourceType","config","find","res","types","includes","svgResource","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","IconConfig","DomSanitizer","Injectable","providedIn","IconComponent","iconLoader","elementRef","renderer","setIcon","addStyleClasses","_this","addClass","host","styleClasses","forEach","cls","removeClass","split","nativeElement","ElementRef","Renderer2","Input","Component","selector","template","IconModule","NgModule","declarations","imports","CommonModule","providers","provideDefaultConfig","provide","useExisting","Config","exports","ModalRef","_super","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","requiredConsents","isLevel13","isFeatureLevel","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","cmsComponents","component","deferLoading","DeferLoadingStrategy","INSTANT","entryComponents","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","console","warn","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","componentType","Promise","resolve","path","script","setAttribute","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","CmsConfig","Inject","args","DOCUMENT","PLATFORM_ID","CxApiService","auth","cart","checkout","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","translation","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","selectiveCartService","ngZone","AuthService","Optional","ActiveCartService","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","CmsService","PageMetaService","FeatureConfigService","GlobalMessageService","TranslationService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","RoutingService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserConsentService","UserOrderService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","SelectiveCartService","NgZone","ComponentWrapperDirective","vcr","componentMapper","injector","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","cmpRef","createComponent","undefined","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","get","CmsComponentData","element","parentElement","P","reject","fulfilled","rejected","result","then","uid","data$","getComponentData","configProviders","Injector","useValue","parent","addDynamicAttributes","properties","destroy","remove","ViewContainerRef","DynamicAttributeService","Directive","PageComponentModule","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","guards","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","state","canActivateObservables","map","guardClass","canActivate","isCanActivate","isObservable","obj","of","wrapIntoObservable","first","Error","skipWhile","endWith","BREAKPOINT","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","OutletPosition","LayoutConfig","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","getSize","breakpoint","breakpoints","window","fromEvent","debounceTime","startWith","event","getBreakpoint","innerWidth","xl","windowWidth","getClosest","reverse","br","nativeWindow","PAGE_LAYOUT_HANDLER","InjectionToken","PageLayoutService","breakpointService","handlers","warnLogMessages","logSlots","getSlots","section","page$","breakpoint$","page","pageTemplate","slots","resolveSlots","switchMap","_c","_d","handle","a","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","keys","filter","slot","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","isDevMode","info","join","cacheKey","PageLayoutComponent","el","pageLayoutService","section$","BehaviorSubject","templateName$","layoutName$","name","styleClass","slots$","pageFoldSlot$","templateName","currentClass","changeDetection","ChangeDetectionStrategy","OnPush","CmsRoutesService","router","cmsRouteExist","isCmsDrivenRoute","startsWith","routePath","substr","data","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","children","resetConfig","Router","CmsPageGuard","routingService","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","protectedRoutesGuard","getCmsPage","getNextPageContext","getPage","withLatestFrom","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","index","guardName","SemanticPathService","ProtectedRoutesGuard","SkipLinkScrollPosition","OutletService","templatesRefs","Map","templatesRefsBefore","templatesRefsAfter","outlet","templateOrFactory","position","REPLACE","BEFORE","store","AFTER","stacked","templateRef","newValue","set","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","IntersectionService","isIntersected","intersects","Observable","observer","rootMargin","getRootMargin","intersectionObserver","IntersectionObserver","entries","observe","disconnect","flatMap","entry","isIntersecting","layoutConfig","deferredLoading","intersectionMargin","DeferLoaderService","intersectionService","globalLoadStrategy","strategy","load","shouldLoadInstantly","elementLoadingStrategy","DEFER","OutletDirective","deferLoaderService","loaded","EventEmitter","subscription","initializeOutlet","clear","cxOutletDefer","render","ngOnChanges","changes","cxOutlet","emit","hostElement","getHostElement","renderOutlet","isArray","tmplOrFactory","ComponentFactory","createEmbeddedView","$implicit","cxOutletContext","markForCheck","HTMLElement","Output","OutletModule","PageSlotComponent","isPending","hasComponents","isPageFold","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","pendingComponentCount","isLoaded","loadState","getComponentDeferOptions","getDeferLoadingStrategy","HostBinding","SkipLinkService","skipLinks$","getSkipLinks","found","skipLinks","skipLink","existing","getSkipLinkIndexInArray","i18nKey","scrollToTarget","parentNode","blur","inline","scrollIntoView","findIndex","previous","this_1","SkipLinkConfig","SkipLinkComponent","skipLinkService","observeOn","asyncScheduler","tabNext","isElement","nextSibling","focus","tabPrev","previousSibling","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","SkipLinkModule","APP_INITIALIZER","useFactory","skipLinkFactory","deps","multi","PageSlotModule","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","globalMessageService","canPrompt","canPrompt$","asObservable","init","addEventListener","preventDefault","deferredEvent","enableAddToHomeScreen","GlobalMessageType","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","paths","notFound","login","protected","forgotPassword","resetPassword","logout","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","productCode","termsAndConditions","orders","orderDetails","orderCode","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","coupons","couponClaim","couponCode","defaultRoutingConfig","RoutingModule","forRoot","ngModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","slice","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","title","description","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","htmlLangProvider","setHtmlLangAttribute","languageService","getActive","lang","documentElement","JsonLdScriptFactory","rendererFactory","build","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","createRenderer","JSON","stringify","_key","SecurityContext","HTML","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","item","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","code","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","stock","stockLevelStatus","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","rev","rating","reviewCount","comment","reviewSchema","principal","author","date","Date","datePublished","getFullYear","getMonth","getDate","headline","reviewRating","toString","CurrentProductService","productService","features","DEFAULT_PRODUCT_SCOPE","isLevel","ProductScope","DETAILS","getProduct","scopes","getRouterState","params","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","AsmComponentService","authService","asmAuthService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","go","cxRoute","isCustomerEmulationSessionInProgress","mergeMap","userToken","unload","localStorage","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","disabled","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","password","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","encapsulation","ViewEncapsulation","None","AsmEnablerService","isUiAdded","isEnabled","addUi","isLaunched","isUsedBefore","setItem","getItem","Location","AsmLoaderModule","asmFactory","asmEnablerService","PaginationItemType","PaginationNavigationPosition","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","Math","floor","seconds","Pipe","FormUtils","isNotValidField","form","formControlName","submitted","control","invalid","touched","dirty","CSAgentLoginFormComponent","fb","submitClicked","csAgentTokenLoading","submitEvent","group","Validators","required","onSubmit","controls","isNotValid","FormBuilder","CustomerEmulationComponent","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","valueChanges","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","query","pageSize","maxResults","selectCustomerFromList","setValue","onDocumentClick","resultList","contains","closeResults","AsmService","ViewChild","(document:click)","AsmModule","ReactiveFormsModule","AsmCoreModule","OrderDetailsService","userOrderService","orderCode$","routingData","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","consumedEntries","e_2","consumedEntry","isConsumedByEntry","consumedEntryNumber","orderEntryNumber","entryNumber","AddedToCartDialogComponent","cartService","promotionService","quantity","modalIsOpen","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","increment","addToCartForm","cartEntry$","getEntry","setStockInfo","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","getLoaded","AutoFocusDirective","ngAfterViewInit","AutoFocusDirectiveModule","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","delete","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","clientWidth","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","CarouselComponent","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","MediaService","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","getHighestAvailableFormat","mediaFormat_1","mediaFormats","altText","reduce","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","isInitialized","isLoading","isMissing","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","ItemCounterComponent","min","allowZero","readonly","handleClick","input","markAsDirty","decrement","getControl","_control$","getValidCount","emitEvent","max","HostListener","ItemCounterModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","test","GenericLinkModule","defaultPaginationConfig","pagination","addStart","addEnd","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","number","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","round","minStart","maxStart","PaginationConfig","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","isInactive","getQueryParams","queryParams","snapshot","queryParam","defaultPage","pageChange","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","FormsModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","isQualtricsConfigured","initialize","setup","qualtricsScript","defer","idScript","qualtrics","projectId","qsi","isDataLoaded","dataLoaded","API","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getLabel","setActive","getInjectedService","nativeName","symbol","isocode","ContextServiceMap","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","StarRatingComponent","change","initialRate","setRate","force","style","setProperty","saveRate","setRateOnEvent","StarRatingModule","ViewConfigModule","ViewConfigModule_1","view","ViewConfig","CustomFormValidators","emailDomainValidator","match","InvalidEmail","emailValidator","EMAIL_PATTERN","passwordValidator","PASSWORD_PATTERN","InvalidPassword","matchPassword","NotEqual","titleScores","mr","mrs","miss","ms","dr","sortTitles","title1","title2","DeliveryModePreferences","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","sort","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","getCustomerCoupons","customerCoupons","cartId","OCC_USER_ID_ANONYMOUS","guid","getApplicableCustomerCoupons","cartIsLoading$","resetAddVoucherProcessingState","getAddVoucherResultSuccess","success","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","valid","addVoucher","markAsTouched","applyCustomerCoupon","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","isSaveForLaterEnabled","every","consignmentEntry","orderEntry","updateable","removeEntry","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","cartLoaded$","isUserLoggedIn","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","isEmpty","totalItems","CartPageLayoutHandler","getCart","selectiveCart","CartTotalsComponent","CartTotalsModule","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","CartComponentModule","CartModule","CheckoutStepType","CheckoutConfig","AmendOrderType","defaultCheckoutConfig","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isActive","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","selectedCountry$","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","goBack","closeForm","payment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","year","j","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","catch","verifyAddress","paymentDetails","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","msg","field","cardLabels","img","actions","header","goNext","goPrevious","paymentMethodSelected","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","cards","goTo","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","tempAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","addressSelected","addNewAddress","setAddressSub","selectedAddressSub","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","LayoutModule","ConsentManagementFormComponent","consentGiven","isAnonymousConsentsEnabled","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","isFeatureEnabled","ANONYMOUS_CONSENTS_FEATURE","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","navigateSubscription","val","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","distinctUntilKeyChanged","tab","select","tabNum","routeState","history","getTitleParams","tabComps","comp","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","AmendOrderActionsModule","ValidateQuantity","q","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","activeTab","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","paymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","validator","isPasswordReset","ac","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","getLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","child","node","populateLink","itemType","linkName","getLink","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","stopPropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","activeElement","matches","wrapper","querySelector","navBar","removeStyle","offsetLeft","offsetWidth","setStyle","navs","childNodes","tagName","isTabbable","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","classList","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","setTimeout","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","querySelectorAll","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","replace","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","active","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","thumbs","isThumbsEmpty","mainImage$","openImage","thumbnail","zoom","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","x","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","ProductDetailOutlets","ProductViewComponent","modeChange","viewMode","toLowerCase","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","ProductFacetNavigationComponent","collapsedFacets","showAllPerFacetMap","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","visible","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","topValueCount","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","property","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductRefinementComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","markFormAsTouched","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","viewStore","prepareRouteUrl","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","block","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","emailConfirmation","emailsMatch","isEmailConfirmInvalid","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","prefillForm","submitLogin","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","isNewRegisterFlowEnabled","isAnonymousConsentEnabled","userRegistrationForm","newsletter","isConsentRequired","termsandconditions","requiredTrue","getRegisterUserResultLoading","registerUserProcessInit","getRegisterUserResultSuccess","collectDataFromRegisterForm","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","formData","onRegisterUserSuccess","resetRegisterUserProcessState","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","StorefrontFoundationModule","StateModule","AuthModule","ConfigModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","withConfig","StorefrontModule_1","provideConfig","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n}\n\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        res =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach(cls =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach(cls => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(fontawesomeIconConfig),\n    { provide: IconConfig, useExisting: Config },\n  ],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  isFeatureLevel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.config, '1.3');\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(_ => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, FeaturesConfigModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  BaseSiteService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  SelectiveCartService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: ActiveCartService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    @Optional() public selectiveCartService: SelectiveCartService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: cmsComponentData, // TODO: remove / deprecated since 1.0.x\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { DeferLoadingStrategy } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map(breakpoint => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter(slot => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(page => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap(templateName =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  ProtectedRoutesGuard,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService,\n    protectedRoutesGuard: ProtectedRoutesGuard // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since version 1.2.0\n   * Use constructor with more dependencies and make them all required.\n   *\n   * TODO(issue:4646) deprecated since version 1.2.0\n   */\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService\n  );\n  constructor(\n    // expose as `protected` only services from public API:\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutesGuard?: ProtectedRoutesGuard\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:4646) Expect that `ProtectedRoutesGuard` dependency is required (remove `if` logic)\n     */\n    return this.protectedRoutesGuard\n      ? this.protectedRoutesGuard\n          .canActivate(route)\n          .pipe(\n            switchMap(result =>\n              result ? this.getCmsPage(route, state) : of(result)\n            )\n          )\n      : this.getCmsPage(route, state);\n  }\n\n  private getCmsPage(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService\n          .getPage(pageContext, true)\n          .pipe(first(), withLatestFrom(of(pageContext)))\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap(notFoundPage => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","export abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, T[]>();\n  private templatesRefsBefore = new Map<string, T[]>();\n  private templatesRefsAfter = new Map<string, T[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  private store(store: Map<string, T[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned obervable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first(v => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable(observer => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin };\n      const intersectionObserver = new IntersectionObserver(entries => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options?: IntersectionOptions) {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evalutes whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>,\n    // tslint:disable-next-line: unified-signatures\n    intersectionService: DeferLoaderService\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(vcr: ViewContainerRef, templateRef: TemplateRef<any>, outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>, intersectionService?: IntersectionService) instead\n   */\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>\n  );\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService?: DeferLoaderService\n  ) {}\n\n  private initializeOutlet(): void {\n    this.vcr.clear();\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.render();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.initializeOutlet();\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.render();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private render() {\n    this.renderOutlet(OutletPosition.BEFORE);\n    this.renderOutlet(OutletPosition.REPLACE);\n    this.renderOutlet(OutletPosition.AFTER);\n  }\n\n  private renderOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    templates.forEach(obj => {\n      this.create(obj);\n    });\n  }\n\n  private create(tmplOrFactory: any): void {\n    if (tmplOrFactory instanceof ComponentFactory) {\n      this.vcr.createComponent(tmplOrFactory);\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n    }\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent elements of the given element.\n   *\n   * @param element\n   */\n  private getHostElement(element: Element): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentElement);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DeferLoadingStrategy,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\n\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position is used to find the CMS page slot (and optional outlet)\n   * that is rendered in the PageSlotComponent. Furthermore, the position\n   * is added as a CSS class name to the host element.\n   */\n  @Input()\n  set position(position: string) {\n    this.position$.next(position);\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  @HostBinding('class.cx-pending') isPending = true;\n  @HostBinding('class.has-components') hasComponents = false;\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  private pendingComponentCount: number;\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   *\n   * @deprecated we'll stop supporting this property in 2.0 as\n   * it is not used separately.\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    )\n  );\n\n  private subscription = new Subscription();\n\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef,\n    // tslint:disable-next-line:unified-signatures\n    config: CmsConfig\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(cmsService: CmsService, dynamicAttributeService: DynamicAttributeService, renderer: Renderer2, hostElement: ElementRef, config?: CmsConfig) instead\n   */\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef\n  );\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef,\n    protected config?: CmsConfig\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.components$.subscribe(components => {\n        this.hasComponents = components && components.length > 0;\n        this.pendingComponentCount = components ? components.length : 0;\n        this.isPending = this.pendingComponentCount > 0;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n   * Is triggered when a component is added to the view.\n   * We use this information to dropthe `is-pending` class from the page slot\n   * when all nested components have been added.\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pendingComponentCount--;\n    }\n    this.isPending = this.pendingComponentCount > 0;\n  }\n\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.getDeferLoadingStrategy(componentType);\n    return { deferLoading };\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether component rendering\n   * should be deferred.\n   */\n  private getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    if (this.config) {\n      return ((this.config as CmsConfig).cmsComponents[componentType] || {})\n        .deferLoading;\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport {\n  SkipLink,\n  SkipLinkConfig,\n  SkipLinkScrollPosition,\n} from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(protected config: SkipLinkConfig) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      skipLink => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target: target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key: key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      skipLink => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter(skipLink => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(\n    target: HTMLElement,\n    position: SkipLinkScrollPosition,\n    event: MouseEvent\n  ): void {\n    target = <HTMLElement>target.parentNode;\n    (<HTMLElement>event.target).blur();\n    const options: ScrollIntoViewOptions =\n      position === SkipLinkScrollPosition.AFTER ? { inline: 'end' } : {};\n\n    target.scrollIntoView(options);\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      skipLink => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          skipLink => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable, asyncScheduler } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\nimport { observeOn } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService\n    .getSkipLinks()\n    .pipe(observeOn(asyncScheduler)); // delay view's update to avoid ExpressionChangedAfterItHasBeenCheckedError\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink, event: MouseEvent): void {\n    this.skipLinkService.scrollToTarget(\n      skipLink.target,\n      skipLink.position,\n      event\n    );\n  }\n\n  /**\n   * Hides the skip link by removing the focus.\n   */\n  blur(event: MouseEvent): void {\n    (<HTMLElement>event.target).blur();\n  }\n\n  tabNext(event: MouseEvent): void {\n    if (this.isElement((<HTMLElement>event.target).nextSibling)) {\n      (<HTMLElement>(<HTMLElement>event.target).nextSibling).focus();\n    }\n  }\n  tabPrev(event: MouseEvent): void {\n    if (this.isElement((<HTMLElement>event.target).previousSibling)) {\n      (<HTMLElement>(<HTMLElement>event.target).previousSibling).focus();\n    }\n  }\n\n  private isElement(element: Node): boolean {\n    return !!element && element instanceof HTMLElement;\n  }\n}\n","import { SkipLinkConfig, SkipLinkScrollPosition } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'SiteContext',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'BottomHeaderSlot',\n      position: SkipLinkScrollPosition.AFTER,\n      i18nKey: 'skipLink.labels.main',\n    },\n    {\n      key: 'ProductLeftRefinements',\n      i18nKey: 'skipLink.labels.productFacets',\n    },\n    { key: 'ProductListSlot', i18nKey: 'skipLink.labels.productList' },\n    { key: 'Footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkConfig } from './config/skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    { provide: SkipLinkConfig, useExisting: Config },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\nimport { SkipLinkModule } from '../../../layout/a11y/skip-link/skip-link.module';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule, SkipLinkModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(this.builders.map(builder => builder.build())).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map(review => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter(rev => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter(rev => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${date.getMonth() +\n        1}-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  FeatureConfigService,\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    routingService: RoutingService,\n    productService: ProductService,\n    // tslint:disable-next-line: unified-signatures\n    features?: FeatureConfigService\n  );\n\n  /**\n   * @deprecated since 1.4\n   */\n  constructor(routingService: RoutingService, productService: ProductService);\n\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService,\n    protected features?: FeatureConfigService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE =\n    this.features && this.features.isLevel('1.4') ? ProductScope.DETAILS : '';\n\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) =>\n        this.productService.get(\n          productCode,\n          // TODO deprecated since 1.4 - should be replaced with 'scopes || this.DEFAULT_PRODUCT_SCOPE'\n          this.features && this.features.isLevel('1.4')\n            ? scopes || this.DEFAULT_PRODUCT_SCOPE\n            : undefined\n          // deprecated END\n        )\n      )\n    );\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      startWith(null as Product),\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map(builder => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe(token => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap(userToken =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe(customerSupportAgentToken =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import { Location } from '@angular/common';\nimport {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injectable,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { OutletPosition, OutletService } from '../../../cms-structure/index';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\nimport { AsmMainUiComponent } from '../asm-main-ui/asm-main-ui.component';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  /** indicates whether the ASM UI has been added already */\n  private isUiAdded = false;\n\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletService: OutletService<ComponentFactory<any>>\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  private isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  private isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  private addUi(): void {\n    if (this.isUiAdded) {\n      return;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      AsmMainUiComponent\n    );\n    this.outletService.add('cx-storefront', factory, OutletPosition.BEFORE);\n    this.isUiAdded = true;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe(isNavigating => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(_ => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import { FormGroup, AbstractControl } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Validates a field of the given form group\n   *\n   * If the field is NOT valid (or invalid), the method returns `true`.\n   *\n   * @param form Form with fields to check\n   * @param formControlName Name of the form field to check\n   * @param submitted Has the form been submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    const control: AbstractControl = form.get(formControlName);\n    return control.invalid && (submitted || (control.touched && control.dirty));\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  form: FormGroup;\n  private submitClicked = false;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submitEvent.emit({\n      userId: this.form.controls.userId.value,\n      password: this.form.controls.password.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe(user => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      searchTerm: [''],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.form.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe(searchTermValue => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.form.controls.searchTerm.setValue(this.selectedCustomer.name);\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsmModule as AsmCoreModule, I18nModule } from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map(cart => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map(order => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map(order => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map(cart =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map(order =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map(order =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  ActiveCartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter(e => !!e),\n        map(entry => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap(valueChange => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AutoFocusDirectiveModule } from '../../directives/auto-focus/auto-focus.directive.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, AutoFocusDirectiveModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map(totalWidth => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else if (media && media[this.getHighestAvailableFormat(media)]) {\n      return this.getImageUrl(media[this.getHighestAvailableFormat(media)].url);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * returns highest resolution format name from media formats\n   */\n  private getHighestAvailableFormat(media): string {\n    if (media) {\n      let mediaFormat: MediaFormats;\n\n      this.mediaFormats.forEach(format => {\n        if (\n          !mediaFormat ||\n          (mediaFormat.threshold < format.threshold && media[format.code])\n        ) {\n          mediaFormat = format;\n        }\n      });\n\n      return mediaFormat.code;\n    }\n\n    return null;\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functinality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive inteteger or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Inidicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  private _control$: Observable<FormControl>;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Returns an observable with the control. The value changes of the\n   * control are intercepted in order to suppress invalid values.\n   */\n  getControl(): Observable<FormControl> {\n    if (!this._control$) {\n      this._control$ = this.control.valueChanges.pipe(\n        startWith(this.control.value),\n        tap(value =>\n          this.control.setValue(this.getValidCount(value), { emitEvent: false })\n        ),\n        map(() => this.control)\n      );\n    }\n    return this._control$;\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\n\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig, PaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultPaginationConfig),\n    { provide: PaginationConfig, useExisting: Config },\n  ],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(_ =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter(loaded => loaded),\n      switchMap(_ => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap(dataLoaded => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: `\n    <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container>\n  `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter(s => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(el: ElementRef, renderer: Renderer2); // tslint:disable-line\n  /**\n   * @deprecated since version 1.0.2\n   *  Use constructor(el: ElementRef, renderer: Renderer2) instead\n   *\n   *  TODO(issue:#3803) deprecated since 1.0.2\n   */\n  constructor(el: ElementRef);\n  constructor(protected el: ElementRef, protected renderer?: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      // TODO(issue:#3803) deprecated since 1.0.2\n      if (this.renderer) {\n        this.renderer.setAttribute(\n          this.el.nativeElement,\n          'style',\n          `--star-fill:${value || this.initialRate};`\n        );\n      } else {\n        this.el.nativeElement.style.setProperty(\n          '--star-fill',\n          value || this.initialRate\n        );\n      }\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(EMAIL_PATTERN) ? null : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(PASSWORD_PATTERN) ? null : { InvalidPassword: true };\n  }\n\n  static matchPassword(control: AbstractControl): { NotEqual: boolean } {\n    if (control.get('password').value !== control.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\nimport { FeaturesConfigModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, FeaturesConfigModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  FeatureConfigService,\n  OCC_USER_ID_ANONYMOUS,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  form: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected cartVoucherService: CartVoucherService,\n    protected formBuilder: FormBuilder,\n    protected customerCouponService: CustomerCouponService,\n    protected featureConfig: FeatureConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n    if (this.featureConfig && this.featureConfig.isLevel('1.5')) {\n      this.cart$ = combineLatest([\n        this.activeCartService.getActive(),\n        this.authService.getOccUserId(),\n        this.customerCouponService.getCustomerCoupons(\n          this.MAX_CUSTOMER_COUPON_PAGE\n        ),\n      ]).pipe(\n        tap(\n          ([cart, userId, customerCoupons]: [\n            Cart,\n            string,\n            CustomerCouponSearchResult\n          ]) => {\n            this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code;\n            this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n          }\n        ),\n        map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n    else {\n      this.cart$ = combineLatest([\n        this.activeCartService.getActive(),\n        this.authService.getOccUserId(),\n      ]).pipe(\n        tap(\n          ([cart, userId]: [Cart, string]) =>\n            (this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code)\n        ),\n        map(([cart]: [Cart, string]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n\n    this.cartIsLoading$ = this.activeCartService\n      .getLoaded()\n      .pipe(map(loaded => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.form = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe(success => {\n          this.onSuccess(success);\n        })\n    );\n\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe(error => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.form.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach(appliedVoucher => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          coupon => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (!this.form.valid) {\n      this.form.markAsTouched();\n      return;\n    }\n    this.cartVoucherService.addVoucher(this.form.value.couponCode, this.cartId);\n  }\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    FeaturesConfigModule,\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  ConsignmentEntry,\n  FeatureConfigService,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every(item => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map(consignmentEntry => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach(item => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.activeCartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map(value => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport {\n  FeatureConfigService,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    promotionService: PromotionService,\n    // tslint:disable-next-line:unified-signatures\n    featureConfig: FeatureConfigService\n  );\n  /**\n   * @deprecated Since 1.5\n   * Add featureConfig for save for later.\n   * Remove issue: #5958\n   */\n  constructor(promotionService: PromotionService);\n\n  constructor(\n    protected promotionService: PromotionService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  Cart,\n  ActiveCartService,\n  FeatureConfigService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private featureConfig: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n\n    if (this.isSaveForLaterEnabled()) {\n      this.cartLoaded$ = combineLatest([\n        this.activeCartService.getLoaded(),\n        this.selectiveCartService.getLoaded(),\n        this.authService.isUserLoggedIn(),\n      ]).pipe(\n        tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n        map(([cartLoaded, sflLoaded, loggedIn]) =>\n          loggedIn ? cartLoaded && sflLoaded : cartLoaded\n        )\n      );\n    }\n    //TODO remove for #5958\n    else {\n      this.cartLoaded$ = this.activeCartService.getLoaded();\n    }\n    //TODO  remove for #5958 end\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958 end\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.getLoaded(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.getCart(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else if (selectiveCart.totalItems) {\n            return slots.filter(\n              slot =>\n                slot !== 'EmptyCartMiddleContent' &&\n                slot !== 'CenterRightContentSlot'\n            );\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter(product => Boolean(product)),\n    tap(product => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter(wishlist => Boolean(wishlist)),\n    map(wishList => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find(entry => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  SelectiveCartService,\n  Cart,\n  OrderEntry,\n  ActiveCartService,\n  CmsParagraphComponent,\n  CmsService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map(cart => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.getLoaded(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SaveForLaterComponent } from './save-for-later.component';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n      features: {\n        saveForLater: '1.5',\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          deliveryMode => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          deliveryMode => deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map(cartData => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find(address => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find(address => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map(data => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutConfigService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n    { provide: CheckoutConfig, useExisting: Config },\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.activeCartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n    { provide: CheckoutConfig, useExisting: Config },\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  LoaderState,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<LoaderState<void>>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address !== undefined &&\n          address.country !== undefined &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use selectPaymentMethod() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  paymentMethodSelected(paymentDetails: PaymentDetails): void {\n    this.selectPaymentMethod(paymentDetails);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  ActiveCartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutConfigService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.address.controls['region'].value.isocode) {\n      this.regionsSub = this.regions$.pipe(take(1)).subscribe(regions => {\n        const obj = regions.find(\n          region =>\n            region.isocode === this.address.controls['region'].value.isocode\n        );\n        Object.assign(this.address.value.region, {\n          isocodeShort: obj.isocodeShort,\n        });\n      });\n    }\n\n    if (this.address.dirty) {\n      this.checkoutDeliveryService.verifyAddress(this.address.value);\n    } else {\n      // address form value not changed\n      // ignore duplicate address\n      this.submitAddress.emit(undefined);\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { CheckoutStepType } from '../..';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use cards$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  cards: Card[] = [];\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  goTo: CheckoutStepType = null;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddress: Address;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getNextCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n    this.activatedRoute\n  );\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getPreviousCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlPrevious = 'cart';\n\n  isGuestCheckout = false;\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddress: Address;\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected ||\n              Object.keys(selected).length === 0 ||\n              !this.selectedAddress)\n          ) {\n            const defaultAddress = addresses.find(\n              address => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.selectedAddress = address;\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addAddress(address: { newAddress: boolean; address: Address } | any);\n  addAddress(\n    address: Address | { newAddress: boolean; address: Address }\n  ): void {\n    // TODO(issue:#3921) deprecated since 1.3 - Remove temp address\n    const tempAddress: Address = address['address']\n      ? address['address']\n      : address;\n\n    const selectedSub = this.selectedAddress$.subscribe(selected => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    // TODO(issue:#3921) deprecated since 1.3 - Remove this condition\n    if (address['address'] || address['newAddress']) {\n      address['newAddress']\n        ? this.checkoutDeliveryService.createAndSetAddress(tempAddress)\n        : this.selectAddress(tempAddress);\n    } else {\n      // TODO(issue:#3921) deprecated since 1.3 - Use instead of condition\n      this.existingAddresses$.pipe(take(1)).subscribe(addresses => {\n        addresses.includes(tempAddress)\n          ? this.selectAddress(tempAddress)\n          : this.checkoutDeliveryService.createAndSetAddress(tempAddress);\n      });\n    }\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addressSelected(address: Address): void {\n    this.selectAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addNewAddress(address: Address): void {\n    this.addAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Remove.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\n@NgModule({\n  imports: [OutletRefModule],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  isAnonymousConsentsEnabled = false;\n\n  @Input()\n  consent: AnonymousConsent;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  @Input()\n  isLevel13 = false;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.isAnonymousConsentsEnabled && this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.isAnonymousConsentsEnabled\n      ? this.requiredConsents.includes(templateId)\n      : false;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  isFeatureEnabled,\n  isFeatureLevel,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  isAnonymousConsentsEnabled = isFeatureEnabled(\n    this.anonymousConsentsConfig,\n    ANONYMOUS_CONSENTS_FEATURE\n  );\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.anonymousConsentsConfig, '1.3');\n\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    anonymousConsentsService: AnonymousConsentsService,\n    authService: AuthService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   ```ts\n   constructor(\n     userConsentService: UserConsentService,\n     globalMessageService: GlobalMessageService,\n     anonymousConsentsConfig : AnonymousConsentsConfig,\n     anonymousConsentsService : AnonymousConsentsService,\n     authService: AuthService,\n   ) \n   ```\n   */\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService\n  );\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService,\n    private anonymousConsentsConfig?: AnonymousConsentsConfig,\n    private anonymousConsentsService?: AnonymousConsentsService,\n    private authService?: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (!this.isAnonymousConsentsEnabled) {\n          return templateList;\n        }\n\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map(template => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    if (!this.isAnonymousConsentsEnabled) {\n      return false;\n    }\n\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map(data => data.banners.trim().split(' ')),\n    map(codes => codes.map(code => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  map,\n  switchMap,\n} from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    // tslint:disable-next-line:unified-signatures\n    winRef: WindowRef\n  );\n  /**\n   * @deprecated since 1.4\n   *\n   * TODO(issue:#5813) Deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService,\n    private winRef?: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilKeyChanged('components'),\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['activeTab']) {\n        this.activeTabNum = routeState['activeTab'];\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach(comp => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n    AddressBookComponentService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe(error => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() isValid: string;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantity(control: FormControl) {\n  let q = 0;\n  Object.keys(control.value).forEach(key => (q += control.value[key]));\n\n  return q > 0 ? null : { required: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap(form => {\n        return this.getEntries().pipe(\n          map(entries =>\n            entries.filter(entry => this.getFormControl(form, entry).value > 0)\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap(order => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup({}, { validators: [ValidateQuantity] });\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach(entry => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    if (this.isConfirmation) {\n      control.disable();\n    }\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach(entry =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter(order => Boolean(order)),\n      map(order =>\n        order.entries.filter(\n          entry => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter(entryNumber => <number>entries[entryNumber] > 0)\n      .map(\n        entryNumber =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map(form => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter(order => !!order.entries),\n      map(order =>\n        order.entries.filter(\n          entry => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter(entryNumber => <number>entries[entryNumber] > 0)\n      .map(\n        entryNumber =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first(r => !!r))\n      .subscribe(returnRequest => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map(form => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map(order => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(consignment =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map(order => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            consignment => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map(order => order.pagination.totalResults),\n    filter(totalResults => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap(returnRequest => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      success => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map(returnRequests => returnRequests.pagination.totalResults),\n    filter(totalResults => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Observable, combineLatest, Subscription } from 'rxjs';\nimport {\n  CustomerCouponService,\n  CustomerCouponSearchResult,\n  PaginationModel,\n} from '@spartacus/core';\nimport { tap, map } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          coupons =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe(error => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe(error => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe(k => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe(success => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap(preferences => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach(p => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          interests =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map(interest => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map(result => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { asyncScheduler, combineLatest, Observable } from 'rxjs';\nimport { filter, map, observeOn } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home').pipe(observeOn(asyncScheduler)),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(data => !!data),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                key => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                it => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map(items => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach(child =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map(child => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    event.preventDefault();\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter(n => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n\n  isTabbable(node: any) {\n    return this.flyout && node.children && node.children.length;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  ANONYMOUS_CONSENTS_FEATURE,\n  CmsNavigationComponent,\n  isFeatureEnabled,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  // in order to preserve the backwards compatibility, this should render only if anonymous consents feature is disabled\n  data$ = this.componentData.data$.pipe(\n    filter(\n      _ =>\n        !isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        )\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService,\n    // tslint:disable-next-line: unified-signatures\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   * \n    ```ts\n      constructor(\n      componentData: CmsComponentData<CmsNavigationComponent>,\n      service: NavigationService,\n      anonymousConsentsConfig: AnonymousConsentsConfig\n    )\n    ```\n   */\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService\n  );\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(_ => Boolean(deliveryAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(_ => Boolean(deliveryMode)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(_ => Boolean(billingAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(_ => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap(order => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    this.userService.registerGuest(\n      this.guid,\n      this.guestRegisterForm.value.password\n    );\n    if (!this.subscription) {\n      this.subscription = this.authService.getUserToken().subscribe(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  FeatureConfigService,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE =\n    this.features && this.features.isLevel('1.4') ? ProductScope.LIST : '';\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map(data => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map(data => data.productCodes.trim().split(' ')),\n    map(codes =>\n      codes.map(code => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<model>,\n    productService: ProductService,\n    // tslint:disable-next-line: unified-signatures\n    features?: FeatureConfigService\n  );\n\n  /**\n   * @deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<model>,\n    productService: ProductService\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService,\n    protected features?: FeatureConfigService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map(ref => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  /**\n   * @deprecated since version 1.5\n   * This variable will no longer be in use. Use thumbs$ observable instead.\n   * TODO(issue:#6166).\n   */\n  isThumbsEmpty: boolean;\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map(product => this.createThumbs(product)),\n    // TODO: deprecated, remove the below tap (issue:#6166)\n    tap(thumbs => {\n      this.isThumbsEmpty = thumbs.length === 0;\n    })\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe(route => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n        this.viewMode$.next(\n          template === 'ProductGridPageTemplate'\n            ? ViewModes.Grid\n            : ViewModes.List\n        );\n      })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet: Facet): Facet[] {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : facet.topValueCount\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter(product => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap(product => {\n        product.baseOptions.forEach(option => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find(item => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach(variant => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      item => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      item => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          item => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter(variant => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  // TODO deprecated since 1.4, remove\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(p => !!p),\n    map(p => p.code),\n    distinctUntilChanged(),\n    switchMap(productCode => this.reviewService.getByProductCode(productCode)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  private markFormAsTouched(): void {\n    Object.keys(this.reviewForm.controls).forEach(key => {\n      this.reviewForm.controls[key].markAsTouched();\n    });\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.markFormAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/components/star-rating/star-rating.module';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe(success => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(interests => !!interests.results && interests.results.length === 1)\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap(prefs => (this.enabledPrefs = prefs)),\n        map(prefs => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe(error => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe(success => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe(text =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { ActivatedRoute } from '@angular/router';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService, RoutingService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(\n    protected storeDataService: StoreDataService,\n    protected route: ActivatedRoute,\n    protected routingService: RoutingService\n  ) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      markerIndex => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe(params =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  form: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    { validator: this.emailsMatch }\n  );\n\n  sub: Subscription;\n\n  private submitClicked = false;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isEmailConfirmInvalid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('emailConfirmation').touched &&\n          this.form.get('emailConfirmation').dirty))\n    );\n  }\n\n  onSubmit() {\n    this.submitClicked = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const email = this.form.value.email;\n    this.activeCartService.addEmail(email);\n\n    if (!this.sub) {\n      this.sub = this.activeCartService.getAssignedUser().subscribe(_ => {\n        if (this.activeCartService.isGuestCart()) {\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private emailsMatch(abstractControl: AbstractControl): { NotEqual: boolean } {\n    return abstractControl.get('email').value !==\n      abstractControl.get('emailConfirmation').value\n      ? { NotEqual: true }\n      : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService,\n    private winRef: WindowRef,\n    private activatedRoute: ActivatedRoute,\n    private checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n\n    if (\n      this.checkoutConfigService &&\n      this.checkoutConfigService.isGuestCheckout()\n    ) {\n      this.loginAsGuest = this.activatedRoute.snapshot.queryParams['forced'];\n    }\n\n    // TODO(issue:#4055) Deprecated since 1.1.0\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['newUid'] && routeState['newUid'].length) {\n        this.prefillForm('userId', routeState['newUid']);\n      }\n    }\n  }\n\n  login(): void {\n    if (this.form.valid) {\n      this.submitLogin();\n    } else {\n      this.markFormAsTouched();\n    }\n  }\n\n  private submitLogin(): void {\n    const { userId, password } = this.form.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  private markFormAsTouched(): void {\n    Object.keys(this.form.controls).forEach(key => {\n      this.form.controls[key].markAsTouched();\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private prefillForm(field: string, value: string): void {\n    this.form.patchValue({\n      [field]: value,\n    });\n\n    this.form.get(field).markAsTouched(); // this action will check field validity on load\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap(isUserLoggedIn => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n  ProtectedRoutesService,\n  FeatureConfigService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  /**\n   * @deprecated since 1.4\n   * Check #5666 for more info\n   *\n   * TODO(issue:5666) Deprecated since 1.4\n   */\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes?: ProtectedRoutesService,\n    protected featureConfig?: FeatureConfigService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  protected redirect(): void {\n    // TODO(issue:5666) Deprecated since 1.4\n    const cxRoute: string =\n      this.featureConfig.isLevel('1.4') &&\n      this.protectedRoutes &&\n      this.protectedRoutes.shouldProtect\n        ? 'login'\n        : 'home';\n\n    this.routing.go({ cxRoute });\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthRedirectService,\n  AuthService,\n  ConsentTemplate,\n  FeatureConfigService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles } from '../../../shared/utils/forms/title-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  // TODO(issue:4237) Register flow\n  isNewRegisterFlowEnabled: boolean =\n    this.featureConfig && this.featureConfig.isLevel('1.1');\n\n  isAnonymousConsentEnabled =\n    this.featureConfig &&\n    this.featureConfig.isEnabled(ANONYMOUS_CONSENTS_FEATURE);\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isAnonymousConsentEnabled\n          ? this.isConsentRequired()\n          : false,\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    // tslint:disable-next-line:unified-signatures\n    router: RoutingService,\n    featureConfig: FeatureConfigService,\n    anonymousConsentsService: AnonymousConsentsService,\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   *\n   * Use constructor(\n   * protected auth: AuthService,\n   * protected authRedirectService: AuthRedirectService,\n   * protected userService: UserService,\n   * protected globalMessageService: GlobalMessageService,\n   * protected fb: FormBuilder,\n   * protected router?: RoutingService,\n   * protected featureConfig?: FeatureConfigService,\n   * protected anonymousConsentsService?: AnonymousConsentsService,\n   * protected anonymousConsentsConfig?: AnonymousConsentsConfig) instead\n   *\n   * TODO(issue:4237) Register flow\n   * TODO(issue:4989) Anonymous consents\n   */\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder\n  );\n  constructor(\n    protected auth: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router?: RoutingService,\n    protected featureConfig?: FeatureConfigService,\n    protected anonymousConsentsService?: AnonymousConsentsService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    // TODO(issue:4237) Register flow\n    if (this.isNewRegisterFlowEnabled) {\n      this.loading$ = this.userService.getRegisterUserResultLoading();\n      this.registerUserProcessInit();\n    } else {\n      if (this.auth && this.authRedirectService) {\n        this.subscription.add(\n          this.userService\n            .getRegisterUserResultSuccess()\n            .subscribe((success: boolean) => {\n              if (success) {\n                const { uid, password } = this.collectDataFromRegisterForm(\n                  this.userRegistrationForm.value\n                );\n                this.auth.authorize(uid, password);\n              }\n            })\n        );\n        this.subscription.add(\n          this.auth.getUserToken().subscribe(data => {\n            if (data && data.access_token) {\n              this.globalMessageService.remove(\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n              this.authRedirectService.redirect();\n            }\n          })\n        );\n      }\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(messages => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some(message => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    if (\n      this.isAnonymousConsentEnabled &&\n      Boolean(this.anonymousConsentsConfig) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent)\n    ) {\n      this.anonymousConsent$ = combineLatest([\n        this.anonymousConsentsService.getConsent(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n        this.anonymousConsentsService.getTemplate(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n      ]).pipe(\n        map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n          return {\n            consent,\n            template: template ? template.description : '',\n          };\n        })\n      );\n\n      this.subscription.add(\n        this.userRegistrationForm\n          .get('newsletter')\n          .valueChanges.subscribe(_ => {\n            this.toggleAnonymousConsent();\n          })\n      );\n    }\n  }\n\n  submit(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.userRegistrationForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.userRegistrationForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    if (\n      Boolean(this.anonymousConsentsService) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.requiredConsents)\n    ) {\n      return this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (this.router && success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    if (Boolean(this.userRegistrationForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    } else {\n      this.anonymousConsentsService.withdrawConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe(success => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n  MyCouponsModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      md: {\n        pageFold: 'UpSelling',\n      },\n      xs: {\n        pageFold: 'Summary',\n      },\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2cLayoutConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","/**\n * @deprecated since 2.0.0\n * NOTE: delete this file altogether, move below slots to the main default layout config\n */\n\nimport { LayoutConfig } from '../../../layout/config/layout-config';\n\nexport const PLPAccessibilityLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n  },\n};\n"]}