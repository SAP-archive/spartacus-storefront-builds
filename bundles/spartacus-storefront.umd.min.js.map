{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","Injectable","args","providedIn","NgbModal","CurrentProductService","routingService","productService","getProduct","_this","getRouterState","pipe","map","state","params","filter","Boolean","switchMap","productCode","get","RoutingService","ProductService","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","CLOSE","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","EXPAND","COLLAPSE","RESET","CIRCLE","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","WindowRef","IconConfig","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","staticStyleClasses","undefined","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","AddedToCartDialogComponent","modalService","cartService","fb","iconTypes","ICON_TYPE","quantity","firstUpdate","form","group","ngOnInit","entry$","tap","entry","code","product","controls","setValue","setControl","createEntryFormGroup","markAsPristine","showItemIncrLabel","dismissModal","removeEntry","item","updateEntry","_a","updatedQuantity","entryNumber","CartService","FormBuilder","ViewChild","static","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","cartEntry$","getEntry","subscribe","stock","stockLevelStatus","stockLevel","maxQuantity","markForCheck","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","centered","size","componentInstance","cart$","getActive","loaded$","getLoaded","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","AutoFocusDirective","hostElement","ngAfterViewInit","focus","Directive","AutoFocusDirectiveModule","CardComponent","deleteCard","EventEmitter","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","emit","delete","setDefault","send","edit","Output","CardModule","I18nModule","CarouselService","getSize","itemWidth","fromEvent","nativeWindow","clientWidth","startWith","debounceTime","totalWidth","Math","round","distinctUntilChanged","CarouselComponent","el","service","minItemPixelSize","hideIndicators","indicatorIcon","previousIcon","nextIcon","activeSlide","_items","select","size$","slide","onOpen","groupIndex","itemIndex","items","xs","sm","md","lg","xl","LayoutConfig","ServerConfig","DEFAULT_BREAKPOINTS","BREAKPOINT","BreakpointService","breakpoint","breakpoints","window","target","event","getBreakpoint","innerWidth","of","windowWidth","getClosest","reverse","br","MediaService","breakpointService","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","altText","mediaFormats","reduce","set","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","renderer","async","cartIsLoading","isValueChangeable","update","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","valueChanges","manualChange","Number","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","setProperty","input","onKeyDown","handlers","ArrowDown","decrement","ArrowUp","increment","preventDefault","stopPropagation","onBlur","onFocus","setFocus","registerOnTouched","fn","registerOnChange","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","Renderer2","OnlyNumberDirective","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","onKeyUp","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","replace","keyCode","String","fromCharCode","HostListener","OnlyNumberDirectiveModule","ItemCounterModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","GenericLinkModule","PaginationComponent","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","floor","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","GlobalMessageModule","forRoot","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","tslib_1.__values","items_1_1","getOptionLabel","getActiveItem","getLabel","setActive","take","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","decorators","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","cmsComponents","CMSSiteContextComponent","component","useClass","deps","SiteContextModule","entryComponents","StarRatingComponent","change","initialRate","setRate","rating","force","style","saveRate","StarRatingModule","FormUtils","isNotValidField","formControlName","submitted","invalid","touched","dirty","PromotionsComponent","PromotionsModule","CartItemListComponent","isReadOnly","hasHeader","potentialProductPromotions","forEach","getPotentialProductPromotionsForItem","entryPromotions","_c","_d","promotion","description","consumedEntries","_e","_f","consumedEntry","isConsumedByEntry","consumendEntryNumber","orderEntryNumber","entries","_b","CartItemComponent","compact","view","isProductOutOfStock","updateItem","removeItem","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","entries$","getEntries","cartLoaded$","getAllPromotionsForCart","cart","potentialOrderPromotions","appliedOrderPromotions","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","skipWhile","isEmpty","go","cxRoute","CartPageLayoutHandler","handle","slots$","pageTemplate","section","combineLatest","slots","totalItems","slot","CartTotalsComponent","CartTotalsModule","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","CartModule","PAGE_LAYOUT_HANDLER","InjectionToken","CartComponentModule","CheckoutConfigService","checkoutConfig","routingConfigService","steps","checkout","getCheckoutStep","currentStepType","getCheckoutStepIndex","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","routeName","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","snapshot","join","stepRoute","getRouteConfig","paths","findIndex","CheckoutConfig","RoutingConfigService","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","id","name","CheckoutStepType","CheckoutGuard","router","parseUrl","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","guards","AuthGuard","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","CheckoutDetailsService","checkoutService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","cartId","getCheckoutDetailsLoaded$","loadCheckoutDetails","shareReplay","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","ShippingAddressSetGuard","checkoutDetailsService","checkoutConfigService","serverConfig","checkoutStep","production","console","warn","deliveryAddress","keys","DeliveryModeComponent","mode","deliveryModeId","Validators","required","checkoutStepUrlNext","checkoutStepUrlPrevious","changedOption","supportedDeliveryModes$","getSupportedDeliveryModes","selectedDeliveryMode$","getSelectedDeliveryMode","loadSupportedDeliveryModes","deliveryMode","currentDeliveryModeId","changeMode","setDeliveryMode","deliveryModeSub","back","ngOnDestroy","unsubscribe","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","userAddressService","selectedCountry$","BehaviorSubject","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","UserAddressService","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","closeModal","PaymentFormComponent","userPaymentService","months","years","sameAsShippingAddress","goBack","closeForm","addPaymentInfo","payment","defaultPayment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","clearAddressVerificationResults","decision","add","MSG_TYPE_ERROR","openSuggestedAddress","year","Date","getFullYear","j","toString","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","address","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","then","catch","verifyAddress","paymentDetails","UserPaymentService","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","newPayment","isLoading$","getPaymentMethodsLoading","loadPaymentMethods","getDeliveryAddressSub","existingPaymentMethods$","getPaymentMethods","getPaymentDetailsSub","paymentInfo","selectedPayment","field","clearCheckoutStep","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","title","img","getCardIcon","actions","header","paymentMethodSelected","showNewPaymentForm","hideNewPaymentForm","addNewPaymentMethod","createPaymentDetails","setPaymentDetails","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","UserService","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","getOrderDetails","order","PlaceOrderModule","CheckoutModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","deliveryAddress$","paymentDetails$","deliveryMode$","selected","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","userService","showCancelBtn","submitAddress","backToAddress","defaultAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","AddressFormModule","ShippingAddressComponent","newAddressFormManuallyOpened","cards","selectedAddress$","goTo","getAddressesLoading","existingAddresses$","getAddresses","cards$","asObservable","addresses","textDefaultShippingAddress","textShipToThisAddress","loadDetails","loadAddresses","setAddressSub","setAddress","goNext","selectedAddressSub","addressSelected","addAddress","newAddress","createAndSetAddress","setDeliveryAddress","addNewAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","outlet","position","OutletPosition","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","OutletDirective","vcr","_context","nodes","renderTemplate","cxOutlet","ref","createEmbeddedView","$implicit","rootNodes","ViewContainerRef","OutletModule","CustomFormValidators","emailDomainValidator","control","match","InvalidEmail","emailValidator","passwordValidator","InvalidPassword","LoginFormComponent","auth","authRedirectService","userId","password","login","emailToLowerCase","authorize","sub","getUserToken","access_token","redirect","toLowerCase","AuthService","AuthRedirectService","LoginFormModule","UserModule","ReturningCustomerLoginComponent","NotAuthGuard","LoginComponent","user$","token","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","componentType","Promise","resolve","split","path","script","setAttribute","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","CmsConfig","Inject","DOCUMENT","PLATFORM_ID","ComponentWrapperDirective","componentMapper","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","cmpRef","createComponent","getInjectorForComponent","detectChanges","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cxApi","CxApiService","getCmsDataForComponent","element","parentElement","P","reject","fulfilled","rejected","uid","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","removeChild","CmsService","DynamicAttributeService","PageComponentModule","PageSlotComponent","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","a","addComponentClass","addClass","PageSlotModule","LoginModule","LogoutGuard","cms","routing","semanticPathService","logout","hasPage","PageType","CONTENT_PAGE","SemanticPathService","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","breakpoint$","resolveSlots","getSlotConfig","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","layoutSlots","pageTemplateConfig","getSlotConfigForSection","getResponsiveSlotConfig","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","cls","currentClass","removeClass","PageLayoutModule","ɵ0","LogoutModule","forChild","RegisterComponent","userRegistrationForm","email","passwordconf","newsletter","termsandconditions","requiredTrue","validator","matchPassword","submit","userRegisterFormData","register","subscription","globalMessageEntities","message","ac","NotEqual","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","obj","wrapIntoObservable","first","Error","endWith","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesService","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","componentRoutes","updateRouting","navigateByUrl","newRoute","children","resetConfig","CmsPageGuard","cmsRoutes","cmsI18n","cmsGuards","getNextPageContext","withLatestFrom","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","hasNotFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","PWAModuleConfig","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","useFactory","APP_INITIALIZER","cmsRoute","addCmsRoute","ɵ0$1","CmsRouteModule","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","PageMetaService","htmlLangProvider","setHtmlLangAttribute","LanguageService","languageService","lang","documentElement","initSeoService","SeoModule","StorefrontComponent","isExpanded$","navigateSubscription","isNavigating","val","startNavigating","stopNavigating","collapseMenu","MainModule","layoutModules","LayoutModule","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tab","tabNum","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","authService","translationService","Subscription","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","success","onSuccess","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ConsentManagementFormComponent","consentChanged","consentGiven","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","onConsentChange","given","ConsentManagementComponent","userConsentService","subscriptions","loading$","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","getConsents","templateList","consentsExists","loadConsents","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","giveConsent","version","withdrawConsent","UserConsentService","ConsentManagementModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","OrderDetailsService","userOrderService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","bufferSize","refCount","UserOrderService","OrderDetailHeadlineComponent","orderDetailsService","order$","OrderDetailItemsComponent","getConsignmentProducts","consignment","products","orderEntry","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","moduleComponents","OrderDetailsModule","ɵ0$2","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","sort","isLoaded$","getOrderHistoryListLoaded","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","AccountOrderHistoryComponent","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","userServiceSub","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","queryParams","isPasswordReset","reset","resetPassword","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","isNotValid","onSubmit","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitClicked","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","user","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","breadcrumbs","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","createNode","nodeData","root","itemsList","superType","itemSuperType","itemId","processChildren","rootUid","loadNavigationItems","node","child","addLinkToNode","createChildren","itemType","linkName","getLink","categoryCode","transform","childNode","CategoryNavigationComponent","node$","NavigationUIComponent","flyout","isOpen","openNodes","NavigationEnd","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","getDepth","depth","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","search","query","minCharactersBeforeRequest","displayProducts","pageSize","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","toggleBodyClass","hasResults","hasBodyClass","className","contains","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","launchSearchPage","translationKey","SearchboxService","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","ignoreCloseEvent","results$","config$","c","blur","avoidReopen","launchSearchResult","disableClose","HighlightPipe","trim","Pipe","SearchBoxModule","ProductModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationThankYouMessageComponent","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationTotalsComponent","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","source","price","images","PRIMARY","ProductReferenceService","ProductCarouselComponent","items$","productCodes","codes","products$","ProductCarouselModule","ProductReferencesComponent","current","productCode$","productReferenceTypes","JSON","parse","displayProductTitles","ProductReferencesModule","ProductIntroComponent","reviewsTabAvailable","product$","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","scrollIntoView","behavior","querySelector","click","h3Elements","h3Element","innerHTML","ProductIntroModule","Grid","List","ProductViewComponent","modeChange","viewMode","newMode","ViewModes","ProductListComponent","productSearchService","searchConfig","gridMode$","createOptionsByUrlParams","brandCode","newConfig","itemPerPage","updateParams$","model$","searchResult","viewPage","pageNumber","setGridMode","ProductSearchService","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","Map","queryCodec","HttpUrlEncodingCodec","facets","facet","visible","activeFacetValueCode","searchResult$","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","slice","ProductGridItemComponent","ProductListItemComponent","ProductListModule","CMSProductListComponent","SearchResultsListComponent","ProductRefinementComponent","INTRO","PRICE","SHARE","SUMMARY","ProductSummaryComponent","outlets","ProductDetailOutlets","ProductSummaryModule","CmsModule","ProductAttributesComponent","ProductReviewsComponent","reviewService","isWritingReview","initialMaxListItems","reviews$","getByProductCode","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","review","headline","comment","alias","reviewerName","ProductReviewService","ProductReviewsModule","ProductReviewsTabComponent","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductTabsModule","ProductImagesComponent","mainMediaContainer","thumbs$","createCarouselItems","mainImage$","getThumbs","getMain","openImage","thumbs","zoom","GALLERY","ProductImagesModule","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","ɵ0$3","ɵ1","ProductDetailsPageModule","matcher","ɵ0$4","ɵ1$1","pageLabel","ɵ2","ɵ3","ProductListingPageModule","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","SearchResultsListPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","pages","defaultStorefrontRoutesConfig","home","notFound","forgotPassword","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","brand","termsAndConditions","defaultRoutingConfig","RoutingModule","CoreRoutingModule","StorefrontFoundationModule","StateModule","AuthModule","provideConfigFromMetaTags","StorefrontModule","ngModule","provideConfig","scrollPositionRestoration","anchorScrolling","StoreModule","runtimeChecks","strictStateImmutability","strictStateSerializability","strictActionImmutability","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","B2cStorefrontModule","withConfigFactory","LANGUAGE","CURRENCY"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  getProduct(): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) => this.productService.get(productCode))\n    );\n  }\n}\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n\n  quantity = 0;\n  firstUpdate = true;\n  showItemIncrLabel: boolean;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n\n          // Announce in header if Add To Cart button has incremented product\n          this.showItemIncrLabel = this.firstUpdate && entry.quantity > 1;\n          // Any updates after the first will be flagged as false\n          this.firstUpdate = false;\n        }\n      })\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit {\n  @Input() productCode: string;\n\n  @Input() showQuantity = true;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n\n  cartEntry$: Observable<OrderEntry>;\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.hasStock = true;\n    } else {\n      this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe(product => {\n          this.productCode = product.code;\n\n          if (\n            product.stock &&\n            product.stock.stockLevelStatus !== 'outOfStock' &&\n            product.stock.stockLevel > 0\n          ) {\n            this.maxQuantity = product.stock.stockLevel;\n            this.hasStock = true;\n          } else {\n            this.hasStock = false;\n          }\n\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    this.openModal();\n    this.cartService.addEntry(this.productCode, this.quantity);\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items shown in the carousel is calculated dividing\n   * the host element width with the minimum item width.\n   */\n  getSize(nativeElement: HTMLElement, itemWidth: number) {\n    return fromEvent(this.winRef.nativeWindow, 'resize').pipe(\n      map(_ => (nativeElement as HTMLElement).clientWidth),\n      startWith((nativeElement as HTMLElement).clientWidth),\n      debounceTime(100),\n      map((totalWidth: any) => {\n        return Math.round(totalWidth / itemWidth);\n      }),\n      distinctUntilChanged()\n    );\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CarouselItem } from './carousel.model';\nimport { CarouselService } from './carousel.service';\n\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n})\nexport class CarouselComponent implements OnInit {\n  @Input() title: string;\n\n  private _items: CarouselItem[];\n  @Input('items')\n  set items(value: CarouselItem[]) {\n    this._items = value;\n    this.select();\n  }\n  get items(): CarouselItem[] {\n    return this._items;\n  }\n\n  /** Indicates the current active item in carousel (if any)  */\n  @Input() activeItem: number;\n\n  /**\n   * Specifies the min pixel used per product. This value is used\n   * to calculate the amount of items we can fit into the available with\n   * of the host element. The number of items is not related the breakpoints,\n   * which means that a carousel can be placed in different layouts,\n   * regardless of the overall size.\n   */\n  @Input() minItemPixelSize = 300;\n\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  @Output() open = new EventEmitter<CarouselItem>();\n\n  /**\n   * The group with items which is currently active.\n   */\n  activeSlide = 0;\n\n  /**\n   * The number of items that should be rendered in the carousel.\n   */\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    this.size$ = this.service\n      .getSize(this.el.nativeElement, this.minItemPixelSize)\n      .pipe(tap(() => this.select()));\n  }\n\n  select(slide = 0) {\n    this.activeSlide = slide;\n  }\n\n  onOpen(groupIndex: number, itemIndex: number): void {\n    this.select(groupIndex);\n    this.open.emit(this.items[groupIndex + itemIndex]);\n  }\n}\n","import { ServerConfig } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig extends ServerConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else {\n      return null;\n    }\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges {\n  @ViewChild('itemCounterInput', { static: false })\n  public input: ElementRef;\n  @ViewChild('incrementBtn', { static: false })\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn', { static: false })\n  public decrementBtn: ElementRef;\n\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.inputValue.valueChanges.pipe(debounceTime(300)).subscribe(value => {\n      if (value) {\n        this.manualChange(Number(value));\n      }\n    });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return incomingValue < this.min || !this.min\n      ? this.min\n      : incomingValue > this.max || !this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    value = value.replace(/[^0-9]+/g, '');\n    this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    if (e.key) {\n      return e.key;\n    } else {\n      // for old browsers\n      if (e.keyCode && String.fromCharCode) {\n        switch (e.keyCode) {\n          case 8:\n            return 'Backspace';\n          case 9:\n            return 'Tab';\n          case 27:\n            return 'Escape';\n          case 37:\n            return 'ArrowLeft';\n          case 39:\n            return 'ArrowRight';\n          default:\n            return String.fromCharCode(e.keyCode);\n        }\n      }\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OnlyNumberDirective } from './only-number.directive';\n\n@NgModule({\n  declarations: [OnlyNumberDirective],\n  exports: [OnlyNumberDirective],\n})\nexport class OnlyNumberDirectiveModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ItemCounterComponent } from './item-counter.component';\nimport { OnlyNumberDirectiveModule } from '../../directives/only-number/only-number.directive.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    OnlyNumberDirectiveModule,\n  ],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { GlobalMessageModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    IconModule,\n    I18nModule,\n    GlobalMessageModule.forRoot(),\n  ],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"LANGUAGE\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"CURRENCY\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map(ctx => this.getInjectedService(ctx)),\n      filter(Boolean)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(map(data => data.context));\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private el: ElementRef) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.el.nativeElement.style.setProperty(\n        '--star-fill',\n        value || this.initialRate\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { FormGroup } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Checks is the `formControlName` field valid in the provided `form`.\n   *\n   * If it's NOT valid, the method returns `true`.\n   *\n   * @param form a form whose field to check\n   * @param formControlName a field name\n   * @param submitted is the form submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    return (\n      form.get(formControlName).invalid &&\n      (submitted ||\n        (form.get(formControlName).touched && form.get(formControlName).dirty))\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { CartService, PromotionResult } from '@spartacus/core';\nimport { Item } from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  items: Item[] = [];\n\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(protected cartService: CartService, protected fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.items.forEach(item => {\n      const { code } = item.product;\n      if (!this.form.controls[code]) {\n        this.form.setControl(code, this.createEntryFormGroup(item));\n      } else {\n        const entryForm = this.form.controls[code] as FormGroup;\n        entryForm.controls.quantity.setValue(item.quantity);\n      }\n    });\n  }\n\n  removeEntry(item: Item): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumendEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumendEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumendEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n  @Input()\n  potentialProductPromotions: any[];\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  ngOnInit() {}\n\n  isProductOutOfStock(product) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\nimport { CartService, Cart, OrderEntry } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = this.cartService.getLoaded();\n  }\n\n  getAllPromotionsForCart(cart: Cart): Cart[] {\n    const potentialPromotions = cart.potentialOrderPromotions || [];\n    const appliedPromotions = cart.appliedOrderPromotions || [];\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { skipWhile, map, switchMap } from 'rxjs/operators';\n\nimport { CartService, RoutingService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.cartService.getLoaded().pipe(\n      skipWhile(loaded => !loaded),\n      switchMap(() => this.cartService.getActive()),\n      map(cart => {\n        if (this.cartService.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n}\n","import { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { CartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(private cartService: CartService) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest(slots$, this.cartService.getActive()).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Cart, OrderEntry, CartService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport {\n  UrlModule,\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n} from '@spartacus/core';\nimport { CartTotalsComponent } from './cart-totals.component';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService\n    .getActive()\n    .pipe(map(cart => cart.deliveryItemsQuantity || 0));\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CartModule,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\n\n@NgModule({\n  imports: [\n    CartModule,\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n  ],\n  exports: [\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n  ],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useClass: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    steps: Array<CheckoutStep>;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { CheckoutConfig } from './config/checkout-config';\nimport { ActivatedRoute } from '@angular/router';\nimport { CheckoutStep, CheckoutStepType } from './model/checkout-step.model';\nimport { RoutingConfigService } from '@spartacus/core';\n\n@Injectable()\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute) {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  private getStepUrlFromActivatedRoute(activatedRoute: ActivatedRoute) {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string) {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutConfig } from './checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\n\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { Observable, of } from 'rxjs';\nimport { RoutingConfigService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.config.checkout.steps[0].routeName\n        ).paths[0]\n      )\n    );\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AuthGuard, CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [AuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutService,\n  PaymentDetails,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n  filter,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => cartData.code),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ServerConfig, Address, RoutingConfigService } from '@spartacus/core';\nimport { CheckoutConfigService } from '../checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router,\n    private serverConfig: ServerConfig\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && !this.serverConfig.production) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.SHIPPING_ADDRESS\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\n\nimport {\n  DeliveryMode,\n  CheckoutDeliveryService,\n  RoutingService,\n} from '@spartacus/core';\n\nimport { Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ActivatedRoute } from '@angular/router';\nimport { CheckoutConfigService } from '../../checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n\n  changedOption: boolean;\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.changedOption = false;\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n    this.selectedDeliveryMode$ = this.checkoutDeliveryService.getSelectedDeliveryMode();\n\n    this.checkoutDeliveryService.loadSupportedDeliveryModes();\n\n    this.selectedDeliveryMode$\n      .pipe(\n        map((deliveryMode: DeliveryMode) =>\n          deliveryMode && deliveryMode.code ? deliveryMode.code : null\n        )\n      )\n      .subscribe(code => {\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n          this.currentDeliveryModeId = code;\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.changedOption = true;\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    if (this.changedOption) {\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n\n    this.deliveryModeSub = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .subscribe(data => {\n        if (data && data.code === this.currentDeliveryModeId) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n      });\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [AuthGuard, CartNotEmptyGuard, ShippingAddressSetGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutConfigService } from '../checkout-config.service';\nimport { ServerConfig, RoutingConfigService } from '@spartacus/core';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router,\n    private serverConfig: ServerConfig\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && !this.serverConfig.production) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.DELIVERY_MODE\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  addPaymentInfo = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return !!countries.filter(\n          (country: Country): boolean =>\n            country.isocode === address.country.isocode\n        ).length;\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.addPaymentInfo.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  newPayment = false;\n\n  private getPaymentDetailsSub: Subscription;\n  private getDeliveryAddressSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.getDeliveryAddressSub = this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(\n          paymentInfo => paymentInfo && Object.keys(paymentInfo).length !== 0\n        ),\n        tap(paymentInfo => {\n          if (paymentInfo === this.selectedPayment || this.newPayment) {\n            this.routingService.go(this.checkoutStepUrlNext);\n          }\n        })\n      )\n      .subscribe(paymentInfo => {\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.globalMessageService.add(\n                {\n                  key: 'paymentMethods.invalidField',\n                  params: { field: paymentInfo[key] },\n                },\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          const card: Card = {\n            title: payment.defaultPayment ? textDefaultPaymentMethod : '',\n            textBold: payment.accountHolderName,\n            text: [payment.cardNumber, textExpires],\n            img: this.getCardIcon(payment.cardType.code),\n            actions: [{ name: textUseThisPayment, event: 'send' }],\n          };\n          if (this.selectedPayment && this.selectedPayment.id === payment.id) {\n            card.header = textSelected;\n          }\n          return card;\n        }\n      )\n    );\n  }\n\n  paymentMethodSelected(paymentDetails: PaymentDetails) {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  next(): void {\n    this.addPaymentInfo({\n      payment: this.selectedPayment,\n      newPayment: false,\n    });\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  addNewPaymentMethod({\n    paymentDetails,\n    billingAddress,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress: Address;\n  }): void {\n    this.addPaymentInfo({\n      payment: paymentDetails,\n      billingAddress,\n      newPayment: true,\n    });\n  }\n\n  addPaymentInfo({\n    newPayment,\n    payment,\n    billingAddress,\n  }: {\n    newPayment: boolean;\n    payment: PaymentDetails;\n    billingAddress?: Address;\n  }): void {\n    if (newPayment) {\n      payment.billingAddress = billingAddress\n        ? billingAddress\n        : this.deliveryAddress;\n\n      this.checkoutPaymentService.createPaymentDetails(payment);\n      this.checkoutService.clearCheckoutStep(3);\n      this.newPayment = newPayment;\n    } else if (this.selectedPayment && this.selectedPayment.id === payment.id) {\n      this.checkoutPaymentService.setPaymentDetails(payment);\n      this.checkoutService.clearCheckoutStep(3);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n    if (this.getDeliveryAddressSub) {\n      this.getDeliveryAddressSub.unsubscribe();\n    }\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            AuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CheckoutModule,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ServerConfig, RoutingConfigService } from '@spartacus/core';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router,\n    private serverConfig: ServerConfig\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && !this.serverConfig.production) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.PAYMENT_DETAILS\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            AuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Observable, Subscription, BehaviorSubject } from 'rxjs';\nimport { map, tap, switchMap } from 'rxjs/operators';\n\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    this.checkoutDeliveryService.verifyAddress(this.address.value);\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent],\n})\nexport class AddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../checkout-config.service';\nimport { CheckoutStepType } from '../../model/checkout-step.model';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  cards: Card[] = [];\n  isLoading$: Observable<boolean>;\n  selectedAddress: Address;\n  goTo: CheckoutStepType;\n  setAddress: Address;\n  setAddressSub: Subscription;\n  selectedAddressSub: Subscription;\n  selectedAddress$: BehaviorSubject<Address> = new BehaviorSubject<Address>(\n    null\n  );\n  cards$: Observable<CardWithAddress[]>;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.cards$ = combineLatest(\n      this.existingAddresses$,\n      this.selectedAddress$.asObservable(),\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected')\n    ).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    this.cartService.loadDetails();\n    this.userAddressService.loadAddresses();\n\n    this.setAddressSub = this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .subscribe(address => {\n        this.setAddress = address;\n        this.selectedAddress$.next(address);\n        if (this.goTo) {\n          this.goNext();\n          this.goTo = null;\n        }\n      });\n    this.selectedAddressSub = this.selectedAddress$.subscribe(address => {\n      this.selectedAddress = address;\n    });\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n    const card: Card = {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n\n    this.cards.push(card);\n\n    return card;\n  }\n\n  addressSelected(address: Address): void {\n    this.selectedAddress$.next(address);\n  }\n\n  next(): void {\n    this.addAddress({ address: this.selectedAddress, newAddress: false });\n  }\n\n  addAddress({\n    newAddress,\n    address,\n  }: {\n    newAddress: boolean;\n    address: Address;\n  }): void {\n    if (newAddress) {\n      this.checkoutDeliveryService.createAndSetAddress(address);\n      this.goTo = CheckoutStepType.DELIVERY_MODE;\n      return;\n    }\n    if (\n      this.setAddress &&\n      this.selectedAddress &&\n      this.setAddress.id === this.selectedAddress.id\n    ) {\n      this.goNext();\n    } else {\n      this.goTo = CheckoutStepType.DELIVERY_MODE;\n      this.checkoutDeliveryService.setDeliveryAddress(address);\n    }\n  }\n\n  addNewAddress(address: Address): void {\n    this.addAddress({ address, newAddress: true });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goBack: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goBack) {\n      this.back();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutModule } from '@spartacus/core';\nimport { CartComponentModule } from '../cart/cart.module';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartComponentModule,\n    CheckoutModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n  // @todo: should we keep below provider here?\n  providers: [CheckoutConfigService],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService {\n  private templatesRefs = {};\n  private templatesRefsBefore = {};\n  private templatesRefsAfter = {};\n\n  add(\n    outlet: string,\n    template: TemplateRef<any>,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.templatesRefsBefore[outlet] = template;\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.templatesRefs[outlet] = template;\n    }\n    if (position === OutletPosition.AFTER) {\n      this.templatesRefsAfter[outlet] = template;\n    }\n  }\n\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): TemplateRef<any> {\n    let templateRef;\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore[outlet];\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter[outlet];\n        break;\n      default:\n        templateRef = this.templatesRefs[outlet];\n    }\n    return templateRef;\n    // return this.templatesRefs[outlet] ? this.templatesRefs[outlet] : null;\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { OutletPosition } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnInit {\n  @Input() cxOutlet: string;\n\n  private _context: any;\n  @Input()\n  set cxOutletContext(value: any) {\n    this._context = value;\n  }\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit(): void {\n    const nodes = [];\n    nodes.push(...this.renderTemplate(OutletPosition.BEFORE));\n    nodes.push(...this.renderTemplate(OutletPosition.REPLACE, true));\n    nodes.push(...this.renderTemplate(OutletPosition.AFTER));\n  }\n\n  private renderTemplate(position: OutletPosition, replace = false): any[] {\n    const nodes = [];\n    const template = this.outletService.get(this.cxOutlet, position);\n    if (template || replace) {\n      const ref = this.vcr.createEmbeddedView(template || this.templateRef, {\n        $implicit: this._context,\n      });\n      nodes.push(...ref.rootNodes);\n    }\n    return nodes;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(\n      // Email Standard RFC 5322:\n      /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/ // tslint:disable-line\n    )\n      ? null\n      : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(\n      /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_\\-+{};:.,]).{6,}$/\n    )\n      ? null\n      : { InvalidPassword: true };\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n  }\n\n  login(): void {\n    const userId = this.emailToLowerCase();\n    this.auth.authorize(userId, this.form.controls.password.value);\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  /*\n   * Change the inputed email to lowercase because\n   * the backend only accepts lowercase emails\n   */\n  emailToLowerCase() {\n    return this.form.controls.userId.value.toLowerCase();\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n  UserModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import {\n  Injectable,\n  ComponentFactoryResolver,\n  Inject,\n  Renderer2,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        script = renderer.createElement('script');\n        this.loadedWebComponents[path] = script;\n        script.setAttribute('src', path);\n        renderer.appendChild(this.document.body, script);\n\n        if (isPlatformBrowser(this.platform)) {\n          script.onload = () => {\n            script.onload = null;\n          };\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ChangeDetectorRef,\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  CxApiService,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private cd: ChangeDetectorRef,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      this.cd.detectChanges();\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: this.getCmsDataForComponent(),\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.renderer.removeChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-page-slot',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent {\n  @Input() set position(position: string) {\n    this.position$.next(position);\n    // add the position name as a css class so that\n    // layout can be applied to it, using the position based class.\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  /**\n   * observable with components (`ContentSlotComponentData[]`)\n   * for the current slot\n   */\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    ),\n    tap(components => this.addComponentClass(components))\n  );\n\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef\n  ) {}\n\n  // add a class to indicate whether the class is empty or not\n  private addComponentClass(components): void {\n    if (components && components.length > 0) {\n      this.renderer.addClass(this.hostElement.nativeElement, 'has-components');\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.routing.go({ cxRoute: 'home' });\n          }\n        })\n      );\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PAGE_LAYOUT_HANDLER, PageLayoutHandler } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // we print warn messages on missing layout configs\n  // only once to not polute the console log\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest(this.page$, this.breakpointService.breakpoint$).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      return config.slots;\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(Boolean));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (this.config.production) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  subscription: Subscription;\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: [false],\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private auth: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n  }\n\n  submit(): void {\n    this.emailToLowerCase();\n    const {\n      firstName,\n      lastName,\n      email,\n      password,\n      titleCode,\n    } = this.userRegistrationForm.value;\n    const userRegisterFormData: UserSignUp = {\n      firstName,\n      lastName,\n      uid: email,\n      password,\n      titleCode,\n    };\n    this.userService.register(userRegisterFormData);\n\n    if (!this.subscription) {\n      this.subscription = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.globalMessageService\n      .get()\n      .pipe(filter(data => Object.keys(data).length > 0))\n      .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n        if (\n          globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR].some(\n            message => message === 'This field is required.'\n          )\n        ) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.globalMessageService.add(\n            { key: 'register.titleRequired' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n        }\n      });\n  }\n\n  private matchPassword(ac: AbstractControl): { NotEqual: boolean } {\n    if (ac.get('password').value !== ac.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n  }\n\n  /*\n   * Change the inputed email to lowercase because\n   * the backend only accepts lowercase emails\n   */\n  emailToLowerCase(): void {\n    this.userRegistrationForm.value.email = this.userRegistrationForm.value.email.toLowerCase();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n  UserModule,\n} from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule, UserModule } from '@spartacus/core';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(pageContext: PageContext, routes: Route[]): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageContext.id.startsWith('/') &&\n      pageContext.id.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageContext.id.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: pageContext,\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\n\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  PageContext,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\n\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    private routingService: RoutingService,\n    private cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.hasPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([hasPage, pageContext]) =>\n        hasPage\n          ? this.resolveCmsPageLogic(pageContext, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageContext.id)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.hasPage(notFoundCmsPageContext).pipe(\n      switchMap(hasNotFoundPage => {\n        if (hasNotFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() => this.resolveCmsPageLogic(pageContext, route, state))\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { ServerConfig } from '@spartacus/core';\n\nexport abstract class PWAModuleConfig extends ServerConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { PWAModuleConfig } from '../pwa.module-config';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (pwaConfig.production && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { Injectable } from '@angular/core';\nimport { Title, Meta, MetaDefinition } from '@angular/platform-browser';\nimport { PageMetaService, PageMeta, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { SeoMetaService } from './seo-meta.service';\nimport { htmlLangProvider } from './html-lang-provider';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { UserComponentModule } from '../../cms-components/user/index';\nimport { SeoModule } from '../../cms-structure/index';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/index';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/index';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    UserComponentModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/index';\nimport { LayoutConfig } from './config/layout-config';\nimport { MainModule } from './main/main.module';\n\nconst layoutModules = [OutletRefModule];\n\n@NgModule({\n  imports: [MainModule, ...layoutModules],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [MainModule, ...layoutModules],\n})\nexport class LayoutModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsService, CMSTabParagraphContainer } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent {\n  activeTabNum = 0;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n              return {\n                ...tab,\n                title: `CMSTabParagraphContainer.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport { Address, UserAddressService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(private userAddressService: UserAddressService) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Address, UserAddressService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(private userAddressService: UserAddressService) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ConsentTemplate } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  consentGiven = false;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consentTemplate && this.consentTemplate.currentConsent) {\n      if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n        this.consentGiven = false;\n      } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n        this.consentGiven = true;\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentChanged.emit({\n      given: !this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, skipWhile, tap, withLatestFrom } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest(\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      map(\n        ([consentLoading, giveConsentLoading, withdrawConsentLoading]) =>\n          consentLoading || giveConsentLoading || withdrawConsentLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      tap(templateList => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      })\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order, Consignment, OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${\n              address.postalCode\n            }`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${\n              billingAddress.postalCode\n            }`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n    }),\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n})\nexport class OrderHistoryComponent implements OnInit, OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  orders$: Observable<OrderHistoryList>;\n  isLoaded$: Observable<boolean>;\n\n  private PAGE_SIZE = 5;\n\n  sortType: string;\n\n  ngOnInit(): void {\n    this.orders$ = this.userOrderService\n      .getOrderHistoryList(this.PAGE_SIZE)\n      .pipe(\n        tap((orders: OrderHistoryList) => {\n          if (orders.pagination) {\n            this.sortType = orders.pagination.sort;\n          }\n        })\n      );\n\n    this.isLoaded$ = this.userOrderService.getOrderHistoryListLoaded();\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { NgModule } from '@angular/core';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { OrderDetailsModule } from './order-details/order-details.module';\n\n@NgModule({\n  imports: [OrderHistoryModule, OrderDetailsModule],\n})\nexport class OrderModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit, OnDestroy {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  loading$: Observable<boolean>;\n\n  userServiceSub: Subscription;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  ngOnDestroy(): void {\n    if (this.userServiceSub) {\n      this.userServiceSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest(\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home')\n    ).pipe(\n      map(([meta, textHome]) =>\n        meta.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(Boolean),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.getNavigationEntryItems(navigation, true);\n            }\n          }),\n          filter(Boolean),\n          map(items => this.createNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Get all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private getNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ) {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      this.processChildren(nodeData, itemsList);\n    }\n\n    if (root) {\n      const rootUid = nodeData.uid;\n      this.cmsService.loadNavigationItems(rootUid, itemsList);\n    }\n  }\n\n  private processChildren(node, itemsList): void {\n    for (const child of node.children) {\n      this.getNavigationEntryItems(child, false, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for display\n   * @param nodeData\n   * @param items\n   */\n  private createNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    node.title = nodeData.title;\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.addLinkToNode(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = this.createChildren(nodeData, items);\n      node.children = children;\n    }\n\n    return node;\n  }\n\n  private addLinkToNode(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (entry.itemType === 'CMSLinkComponent' && item !== undefined) {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n\n      node.url = this.getLink(item);\n\n      // if \"NEWWINDOW\", target is true\n      node.target = item.target;\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n\n  private createChildren(node, items) {\n    const children = [];\n\n    for (const child of node.children) {\n      const childNode = this.createNode(child, items);\n      children.push(childNode);\n    }\n\n    return children;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n\n  constructor(private router: Router, private renderer: Renderer2) {\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe(() => this.clear());\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (this.openNodes.includes(<HTMLElement>event.currentTarget)) {\n      this.openNodes = this.openNodes.filter(n => n !== event.currentTarget);\n      this.renderer.removeClass(<HTMLElement>event.currentTarget, 'is-open');\n    } else {\n      this.openNodes.push(<HTMLElement>event.currentTarget);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  data$ = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n    GenericLinkModule,\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest(\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config)\n    ).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest(\n      this.getProductResults(config),\n      this.getProductSuggestions(config)\n    ).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a singe product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  ProductModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ProductModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${\n            deliveryAddress.postalCode\n          }`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${\n            billingAddress.postalCode\n          }`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CheckoutModule,\n  I18nModule,\n  ConfigModule,\n  CmsConfig,\n  AuthGuard,\n} from '@spartacus/core';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { OrderConfirmationGuard } from './guards/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    CheckoutModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CarouselItem } from '../../../shared/components/carousel/carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<CarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<CarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map(refs =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): CarouselItem {\n    const item: CarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsProductCarouselComponent } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CarouselItem } from '../../../../shared/components/carousel/carousel.model';\nimport { ProductCarouselService } from '../product-carousel.service';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  title$: Observable<string> = this.component.data$.pipe(\n    map(data => data.title)\n  );\n\n  items$: Observable<CarouselItem[]> = this.component.data$.pipe(\n    filter(Boolean),\n    map(data => data.productCodes.split(' ')),\n    map(codes => codes.map(code => this.service.loadProduct(code))),\n    switchMap((products$: Observable<CarouselItem>[]) =>\n      combineLatest(products$)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductCarouselComponent>,\n    protected service: ProductCarouselService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsProductReferencesComponent } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\nimport { ProductCarouselService } from '../product-carousel.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  items$ = combineLatest([this.productCode$, this.component.data$]).pipe(\n    switchMap(([code, data]) =>\n      this.service.getProductReferences(\n        code,\n        data.productReferenceTypes,\n        Boolean(JSON.parse(data.displayProductTitles)),\n        Boolean(JSON.parse(data.displayProductPrices))\n      )\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected service: ProductCarouselService,\n    protected current: CurrentProductService\n  ) {}\n\n  get productCode$(): Observable<string> {\n    return this.current.getProduct().pipe(\n      filter(Boolean),\n      map(p => p.code)\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('CMSTabParagraphContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  ProductSearchPage,\n  ProductSearchService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit {\n  query: string;\n  categoryCode: string;\n  brandCode: string;\n  itemPerPage: number;\n\n  model$: Observable<ProductSearchPage>;\n  searchConfig: SearchConfig = {};\n  options: SearchConfig;\n  updateParams$: Observable<Params>;\n  gridMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    private activatedRoute: ActivatedRoute,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  update(): void {\n    const { queryParams } = this.activatedRoute.snapshot;\n    this.options = this.createOptionsByUrlParams();\n\n    if (this.categoryCode && this.categoryCode !== queryParams.categoryCode) {\n      this.query = ':relevance:category:' + this.categoryCode;\n    }\n    if (this.brandCode && this.brandCode !== queryParams.brandCode) {\n      this.query = ':relevance:brand:' + this.brandCode;\n    }\n    if (!this.query && queryParams.query) {\n      this.query = queryParams.query;\n    }\n    this.search(this.query, this.options);\n  }\n\n  createOptionsByUrlParams(): SearchConfig {\n    const { queryParams } = this.activatedRoute.snapshot;\n    const newConfig = {\n      ...queryParams,\n    };\n    delete newConfig.query;\n    const options = {\n      ...this.searchConfig,\n      ...newConfig,\n      pageSize: this.itemPerPage || 10,\n    };\n    if (this.categoryCode) {\n      options.categoryCode = this.categoryCode;\n    }\n    if (this.brandCode) {\n      options.brandCode = this.brandCode;\n    }\n\n    return options;\n  }\n\n  ngOnInit(): void {\n    this.updateParams$ = this.activatedRoute.params.pipe(\n      tap(params => {\n        this.categoryCode = params.categoryCode;\n        this.brandCode = params.brandCode;\n        this.query = params.query;\n        this.update();\n      })\n    );\n\n    this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n      this.gridMode$.next(\n        template === 'ProductGridPageTemplate' ? ViewModes.Grid : ViewModes.List\n      );\n    });\n\n    // clean previous search result\n    this.productSearchService.clearResults();\n\n    this.model$ = this.productSearchService.getResults().pipe(\n      tap(searchResult => {\n        if (Object.keys(searchResult).length === 0) {\n          this.search(this.query, this.options);\n        }\n      }),\n      filter(searchResult => Object.keys(searchResult).length > 0)\n    );\n  }\n\n  viewPage(pageNumber: number): void {\n    const { queryParams } = this.activatedRoute.snapshot;\n    this.search(queryParams.query, { currentPage: pageNumber });\n  }\n\n  sortList(sortCode: string): void {\n    const { queryParams } = this.activatedRoute.snapshot;\n    this.search(queryParams.query, { sortCode: sortCode });\n  }\n\n  setGridMode(mode: ViewModes): void {\n    this.gridMode$.next(mode);\n  }\n\n  protected search(query: string, options?: SearchConfig): void {\n    if (this.query) {\n      if (options) {\n        // Overide default options\n        this.searchConfig = {\n          ...this.searchConfig,\n          ...options,\n        };\n      }\n\n      this.productSearchService.search(query, this.searchConfig);\n    }\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  Facet,\n  ProductSearchPage,\n  ProductSearchService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\n\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  updateParams$: Observable<Params>;\n\n  get visibleFacets(): Facet[] {\n    if (!this.searchResult.facets) {\n      return [];\n    }\n    return this.searchResult.facets.filter(facet => facet.visible);\n  }\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productSearchService: ProductSearchService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.updateParams$ = this.activatedRoute.params.pipe(\n      tap(params => {\n        this.activeFacetValueCode = params.categoryCode || params.brandCode;\n      })\n    );\n\n    this.searchResult$ = this.productSearchService.getResults().pipe(\n      tap(searchResult => {\n        this.searchResult = searchResult;\n        if (this.searchResult.facets) {\n          this.searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      }),\n      filter(searchResult => Object.keys(searchResult).length > 0)\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productSearchService.search(this.queryCodec.decodeValue(query));\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  CmsModule,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CmsModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { CurrentProductService } from '../../current-product.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(Boolean),\n    switchMap(product => this.reviewService.getByProductCode(product.code)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CarouselItem } from '../../../shared/components/carousel/index';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  private thumbs$: Observable<CarouselItem[]> = this.product$.pipe(\n    map(product => this.createCarouselItems(product))\n  );\n\n  private mainImage$ = combineLatest([\n    this.product$,\n    this.mainMediaContainer,\n  ]).pipe(map(([_, container]) => container));\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  getThumbs(): Observable<CarouselItem[]> {\n    return this.thumbs$;\n  }\n\n  getMain(): Observable<any> {\n    return this.mainImage$;\n  }\n\n  openImage(item: CarouselItem): void {\n    this.mainMediaContainer.next(item.media.container);\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: CarouselItem[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createCarouselItems(product: Product): CarouselItem[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return null;\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => {\n      return {\n        media: {\n          container: c,\n          format: 'thumbnail',\n        },\n      };\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n    CarouselModule,\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\n\n@NgModule({\n  imports: [\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    // TODO:#2811 - uncomment to enable\n    // StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  UrlSegment,\n  UrlMatchResult,\n  Route,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName [ / ** ]'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      slots: [\n        'TopHeaderSlot',\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'] },\n  logout: { paths: ['logout'] },\n  register: { paths: ['login/register'] },\n  forgotPassword: { paths: ['login/forgot-password'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { NgModule } from '@angular/core';\nimport {\n  ConfigModule,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [\n    CoreRoutingModule,\n    ConfigModule.withConfig(defaultRoutingConfig),\n    CmsRouteModule,\n  ],\n})\nexport class RoutingModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  AuthModule,\n  ConfigModule,\n  I18nModule,\n  provideConfigFromMetaTags,\n  StateModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\n\n@NgModule({\n  imports: [\n    StateModule,\n    AuthModule.forRoot(),\n    ConfigModule.forRoot(),\n    RoutingModule,\n    I18nModule.forRoot(),\n\n    LayoutModule,\n  ],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot(\n      {},\n      {\n        runtimeChecks: {\n          strictStateImmutability: true,\n          strictStateSerializability: true,\n          strictActionImmutability: true,\n          // TODO:#3010 - enable\n          // strictActionSerializability: true,\n        },\n      }\n    ),\n    EffectsModule.forRoot([]),\n\n    StorefrontFoundationModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitely\n    OccModule,\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n  ],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [LayoutModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n"]}