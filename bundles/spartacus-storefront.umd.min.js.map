{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","Injectable","args","providedIn","NgbModal","CurrentProductService","routingService","productService","getProduct","_this","getRouterState","pipe","map","state","params","filter","Boolean","switchMap","productCode","get","RoutingService","ProductService","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","CLOSE","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","EXPAND","COLLAPSE","RESET","CIRCLE","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","WindowRef","IconConfig","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","undefined","staticStyleClasses","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","AddedToCartDialogComponent","modalService","cartService","fb","iconTypes","ICON_TYPE","quantity","form","group","ngOnInit","entry$","tap","entry","code","product","controls","setValue","setControl","createEntryFormGroup","markAsPristine","dismissModal","removeEntry","item","updateEntry","_a","updatedQuantity","entryNumber","CartService","FormBuilder","ViewChild","static","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","increment","cartEntry$","getEntry","subscription","subscribe","stock","stockLevelStatus","stockLevel","maxQuantity","markForCheck","updateCount","addToCart","openModal","addEntry","unsubscribe","modalInstance","modalRef","centered","size","componentInstance","cart$","getActive","loaded$","getLoaded","ngOnDestroy","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","AutoFocusDirective","hostElement","ngAfterViewInit","focus","Directive","AutoFocusDirectiveModule","CardComponent","deleteCard","EventEmitter","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","emit","delete","setDefault","send","edit","Output","CardModule","I18nModule","CarouselService","getItemsPerSlide","itemWidth","resize$","clientWidth","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","Math","floor","CarouselComponent","el","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","isDevMode","size$","console","xs","sm","md","lg","xl","DEFAULT_BREAKPOINTS","BREAKPOINT","BreakpointService","getSize","breakpoint","breakpoints","window","fromEvent","debounceTime","startWith","target","event","getBreakpoint","innerWidth","distinctUntilChanged","of","windowWidth","getClosest","reverse","br","nativeWindow","LayoutConfig","MediaService","breakpointService","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","altText","mediaFormats","reduce","set","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","renderer","async","cartIsLoading","isValueChangeable","update","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","valueChanges","manualChange","Number","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","setProperty","input","onKeyDown","handlers","ArrowDown","decrement","ArrowUp","preventDefault","stopPropagation","onBlur","onFocus","setFocus","registerOnTouched","fn","registerOnChange","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","Renderer2","OnlyNumberDirective","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","onKeyUp","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","replace","HostListener","OnlyNumberDirectiveModule","ItemCounterModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","GenericLinkModule","PaginationComponent","hideOnSinglePage","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","showPagination","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","tslib_1.__values","items_1_1","getOptionLabel","getActiveItem","getLabel","setActive","take","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","decorators","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","cmsComponents","CMSSiteContextComponent","component","useClass","deps","SiteContextModule","entryComponents","StarRatingComponent","change","initialRate","setRate","rating","force","setAttribute","style","saveRate","StarRatingModule","FormUtils","isNotValidField","formControlName","submitted","invalid","touched","dirty","PromotionsComponent","PromotionsModule","CartItemListComponent","isReadOnly","hasHeader","potentialProductPromotions","forEach","getPotentialProductPromotionsForItem","entryPromotions","_c","_d","promotion","description","consumedEntries","_e","e_2","_f","consumedEntry","isConsumedByEntry","consumendEntryNumber","orderEntryNumber","entries","_b","CartItemComponent","compact","view","isProductOutOfStock","updateItem","removeItem","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","entries$","getEntries","cartLoaded$","getAllPromotionsForCart","cart","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","appliedProductPromotions","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","go","cxRoute","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","combineLatest","slots","slot","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","CartComponentModule","CartModule","FREE","LEAST_EXPENSIVE","MOST_EXPENSIVE","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","checkout","steps","id","name","routeName","CheckoutStepType","express","defaultDeliveryMode","DeliveryModePreferences","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","leastExpensiveFound","deliveryMode","codeFound","getPreferredDeliveryMode","sort","isExpressCheckout","snapshot","join","stepRoute","getRouteConfig","paths","findIndex","CheckoutConfig","RoutingConfigService","CheckoutDetailsService","checkoutService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","cartId","getCheckoutDetailsLoaded$","loadCheckoutDetails","shareReplay","getCheckoutDetailsLoaded","skipWhile","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","checkoutConfigService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","keys","success","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","UserAddressService","UserPaymentService","CheckoutGuard","router","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","guards","AuthGuard","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","warn","deliveryAddress","DeliveryModeComponent","mode","deliveryModeId","Validators","required","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","valid","back","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","selectedCountry$","BehaviorSubject","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","closeModal","PaymentFormComponent","months","years","sameAsShippingAddress","goBack","closeForm","payment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","clearAddressVerificationResults","decision","add","MSG_TYPE_ERROR","openSuggestedAddress","year","Date","getFullYear","j","toString","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","then","catch","verifyAddress","paymentDetails","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","field","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","title","img","getCardIcon","actions","header","paymentMethodSelected","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","UserService","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","getOrderDetails","order","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","FeaturesConfigModule","CheckoutReviewOrder","AddressFormComponent","userService","showCancelBtn","submitAddress","backToAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","AddressFormModule","ShippingAddressComponent","newAddressFormManuallyOpened","cards","selectedAddress$","goTo","getAddressesLoading","existingAddresses$","cards$","asObservable","textDefaultShippingAddress","textShipToThisAddress","setAddressSub","setAddress","goNext","selectedAddressSub","addressSelected","addAddress","newAddress","createAndSetAddress","addNewAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","outlet","position","OutletPosition","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","layoutModules","LayoutModule","OutletDirective","vcr","_context","nodes","renderTemplate","cxOutlet","ref","createEmbeddedView","$implicit","rootNodes","ViewContainerRef","OutletModule","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","componentType","Promise","resolve","split","path","script","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","CmsConfig","Inject","DOCUMENT","PLATFORM_ID","CxApiService","auth","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","kyma","occEndpoints","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","ngZone","AuthService","CartDataService","CmsService","PageMetaService","FeatureConfigService","KymaService","OccEndpointsService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","CurrencyService","LanguageService","BaseSiteService","UserConsentService","UserOrderService","NgZone","ComponentWrapperDirective","componentMapper","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","cmpRef","createComponent","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","element","parentElement","P","reject","fulfilled","rejected","uid","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","DynamicAttributeService","PageComponentModule","PageSlotComponent","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","a","addComponentClass","addClass","PageSlotModule","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","breakpoint$","resolveSlots","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","layoutSlots","pageTemplateConfig","getSlotConfigForSection","getResponsiveSlotConfig","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","cls","currentClass","removeClass","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","useFactory","APP_INITIALIZER","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","initSeoService","SeoModule","StorefrontComponent","isExpanded$","navigateSubscription","isNavigating","val","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","obj","wrapIntoObservable","first","Error","endWith","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesService","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","children","resetConfig","CmsPageGuard","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","getNextPageContext","getPage","withLatestFrom","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","SemanticPathService","cmsRoute","addCmsRoute","ɵ0","CmsRouteModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","trim","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tab","select","tabNum","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","featureConfigService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","isLevel","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","authService","translationService","Subscription","userToken$","getUserToken","resetRemoveUserProcessState","getRemoveUserResultSuccess","onSuccess","getRemoveUserResultError","onError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ConsentManagementFormComponent","consentChanged","consentGiven","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","onConsentChange","given","ConsentManagementComponent","userConsentService","subscriptions","loading$","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","getConsents","templateList","consentsExists","loadConsents","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","giveConsent","version","withdrawConsent","ConsentManagementModule","CustomFormValidators","emailDomainValidator","control","match","InvalidEmail","emailValidator","passwordValidator","InvalidPassword","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","OrderDetailsService","userOrderService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","bufferSize","refCount","OrderDetailHeadlineComponent","orderDetailsService","order$","OrderDetailItemsComponent","getConsignmentProducts","consignment","products","orderEntry","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentStatus","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","moduleComponents","OrderDetailsModule","forChild","ɵ0$1","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","features","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","isLoaded$","getOrderHistoryListLoaded","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","AccountOrderHistoryComponent","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","password","repassword","validator","matchPassword","token","queryParams","isPasswordReset","reset","resetPassword","ac","NotEqual","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","isNotValid","onSubmit","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","logout","UpdateEmailModule","UpdatePasswordFormComponent","submitClicked","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","breadcrumbs","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","createNode","nodeData","root","itemsList","superType","itemSuperType","itemId","processChildren","rootUid","loadNavigationItems","node","child","addLinkToNode","createChildren","itemType","linkName","getLink","categoryCode","transform","childNode","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","relatedTarget","ownerDocument","activeElement","matches","wrapper","querySelector","navBar","removeStyle","offsetLeft","offsetWidth","setStyle","navs","tagName","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","search","query","minCharactersBeforeRequest","displayProducts","pageSize","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","contains","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","launchSearchPage","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","ignoreCloseEvent","results$","config$","c","blur","avoidReopen","launchSearchResult","disableClose","HighlightPipe","Pipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","OrderConfirmationTotalsComponent","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","source","price","images","PRIMARY","ProductCarouselComponent","productCodes","ProductCarouselModule","ProductReferencesComponent","current","currentProductCode$","productReferenceTypes","ProductReferencesModule","ProductIntroComponent","reviewsTabAvailable","product$","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","scrollIntoView","behavior","click","h3Elements","h3Element","innerHTML","ProductIntroModule","Grid","List","ProductViewComponent","modeChange","viewMode","toLowerCase","newMode","ViewModes","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_CATEGORY","RELEVANCE_BRAND","searchResults$","searchResult","searchByRouting$","x","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","infiniteScroll","active","setViewMode","ViewConfig","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","Map","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","visible","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","slice","ProductGridItemComponent","ProductListItemComponent","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","showMoreButton","configProductLimit","productLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","defaultScrollConfig","ViewConfigModule","forRoot","ngModule","provideConfig","ProductListModule","CMSProductListComponent","SearchResultsListComponent","ProductRefinementComponent","InfiniteScrollModule","INTRO","PRICE","SHARE","SUMMARY","ProductSummaryComponent","outlets","ProductDetailOutlets","ProductSummaryModule","ProductAttributesComponent","ProductReviewsComponent","reviewService","isWritingReview","initialMaxListItems","reviews$","getByProductCode","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","review","headline","comment","alias","reviewerName","ProductReviewsModule","ProductReviewsTabComponent","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductTabsModule","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","isActive","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","LoginFormComponent","authRedirectService","userId","routeState","history","prefillForm","login","authorize","access_token","redirect","markAsTouched","AuthRedirectService","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","hasPage","ɵ0$2","LogoutModule","RegisterComponent","userRegistrationForm","passwordconf","newsletter","termsandconditions","requiredTrue","isNewRegisterFlowEnabled","getRegisterUserResultLoading","registerUserProcessInit","getRegisterUserResultSuccess","collectDataFromRegisterForm","messages","globalMessageEntities","submit","formData","onRegisterUserSuccess","resetRegisterUserProcessState","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","ScheduleComponent","storeDataService","displayDays","changes","initialDate","getInitialDate","date","valueOf","setDate","getDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","viewStore","prepareRouteUrl","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","markerIndex","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","totalResults","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","getElementById","block","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","initialize","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","onKey","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","store","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","ɵ0$3","ɵ1","ProductDetailsPageModule","matcher","ɵ0$4","ɵ1$1","ɵ2","ɵ3","ProductListingPageModule","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","SearchResultsListPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","pages","defaultStorefrontRoutesConfig","home","notFound","forgotPassword","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","brand","termsAndConditions","defaultRoutingConfig","RoutingModule","CoreRoutingModule","StorefrontFoundationModule","StateModule","AuthModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","scrollPositionRestoration","anchorScrolling","StoreModule","runtimeChecks","strictStateImmutability","strictStateSerializability","strictActionImmutability","strictActionSerializability","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","withConfigFactory","LANGUAGE","CURRENCY"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  getProduct(): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) => this.productService.get(productCode))\n    );\n  }\n}\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n\n  quantity = 0;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n        }\n      })\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.hasStock = true;\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.quantity = 1;\n\n          if (\n            product.stock &&\n            product.stock.stockLevelStatus !== 'outOfStock' &&\n            product.stock.stockLevel > 0\n          ) {\n            this.maxQuantity = product.stock.stockLevel;\n            this.hasStock = true;\n          } else {\n            this.hasStock = false;\n          }\n\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.cartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.cartService.addEntry(this.productCode, this.quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map(totalWidth => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the itesm can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","export enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else {\n      return null;\n    }\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges, OnDestroy {\n  @ViewChild('itemCounterInput', { static: false })\n  public input: ElementRef;\n  @ViewChild('incrementBtn', { static: false })\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn', { static: false })\n  public decrementBtn: ElementRef;\n\n  @Input()\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  subscription: Subscription;\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.subscription = this.inputValue.valueChanges\n      .pipe(debounceTime(300))\n      .subscribe(value => {\n        if (value) {\n          this.manualChange(Number(value));\n        }\n      });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return incomingValue < this.min || !this.min\n      ? this.min\n      : incomingValue > this.max || !this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    value = value.replace(/[^0-9]+/g, '');\n    this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    return e.key;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OnlyNumberDirective } from './only-number.directive';\n\n@NgModule({\n  declarations: [OnlyNumberDirective],\n  exports: [OnlyNumberDirective],\n})\nexport class OnlyNumberDirectiveModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ItemCounterComponent } from './item-counter.component';\nimport { OnlyNumberDirectiveModule } from '../../directives/only-number/only-number.directive.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    OnlyNumberDirectiveModule,\n  ],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Input() hideOnSinglePage = false;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n\n  showPagination() {\n    return !(this.hideOnSinglePage && this.pagination.totalPages <= 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter(s => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(el: ElementRef, renderer: Renderer2); // tslint:disable-line\n  /**\n   * @deprecated since version 1.0.2\n   *  Use constructor(el: ElementRef, renderer: Renderer2) instead\n   *\n   *  TODO(issue:#3803) deprecated since 1.0.2\n   */\n  constructor(el: ElementRef);\n  constructor(protected el: ElementRef, protected renderer?: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      // TODO(issue:#3803) deprecated since 1.0.2\n      if (this.renderer) {\n        this.renderer.setAttribute(\n          this.el.nativeElement,\n          'style',\n          `--star-fill:${value || this.initialRate};`\n        );\n      } else {\n        this.el.nativeElement.style.setProperty(\n          '--star-fill',\n          value || this.initialRate\n        );\n      }\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { FormGroup } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Checks is the `formControlName` field valid in the provided `form`.\n   *\n   * If it's NOT valid, the method returns `true`.\n   *\n   * @param form a form whose field to check\n   * @param formControlName a field name\n   * @param submitted is the form submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    return (\n      form.get(formControlName).invalid &&\n      (submitted ||\n        (form.get(formControlName).touched && form.get(formControlName).dirty))\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { CartService, PromotionResult } from '@spartacus/core';\nimport { Item } from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  items: Item[] = [];\n\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(protected cartService: CartService, protected fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.items.forEach(item => {\n      const { code } = item.product;\n      if (!this.form.controls[code]) {\n        this.form.setControl(code, this.createEntryFormGroup(item));\n      } else {\n        const entryForm = this.form.controls[code] as FormGroup;\n        entryForm.controls.quantity.setValue(item.quantity);\n      }\n    });\n  }\n\n  removeEntry(item: Item): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumendEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumendEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumendEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n  @Input()\n  potentialProductPromotions: any[];\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  ngOnInit() {}\n\n  isProductOutOfStock(product) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = this.cartService.getLoaded();\n  }\n\n  getAllPromotionsForCart(cart: Cart): any[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n    potentialPromotions.push(...(cart.potentialProductPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n    appliedPromotions.push(...(cart.appliedProductPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Cart, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.cartService.getActive().pipe(\n      map(cart => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable()\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(private cartService: CartService) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([slots$, this.cartService.getActive()]).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Cart, OrderEntry, CartService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport {\n  UrlModule,\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n} from '@spartacus/core';\nimport { CartTotalsComponent } from './cart-totals.component';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\n\n@NgModule({\n  imports: [NgbModule, CartDetailsModule, CartTotalsModule, CartSharedModule],\n  exports: [\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n  ],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useClass: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    steps: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n  };\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          deliveryMode => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          deliveryMode => deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutService,\n  PaymentDetails,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n  filter,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => cartData.code),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find(address => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find(address => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map(data => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { switchMap } from 'rxjs/operators';\nimport { Observable, of } from 'rxjs';\n\nimport { RoutingConfigService } from '@spartacus/core';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig } from '../config/checkout-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService,\n    checkoutConfigService: CheckoutConfigService,\n    expressCheckoutService: ExpressCheckoutService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(router: Router,\n   *  config: CheckoutConfig - @deprecated since 2.x,\n   *  routingConfigService: RoutingConfigService,\n   *  checkoutConfigService: CheckoutConfigService,\n   *  expressCheckoutService: ExpressCheckoutService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService\n  );\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService,\n    protected checkoutConfigService?: CheckoutConfigService,\n    protected expressCheckoutService?: ExpressCheckoutService\n  ) {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (this.checkoutConfigService) {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.checkoutConfigService.getFirstCheckoutStepRoute()\n          ).paths[0]\n        )\n      );\n    } else {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.config.checkout.steps[0].routeName\n          ).paths[0]\n        )\n      );\n    }\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (this.checkoutConfigService && this.expressCheckoutService) {\n      if (this.checkoutConfigService.isExpressCheckout()) {\n        return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n          switchMap((expressCheckoutPossible: boolean) => {\n            return expressCheckoutPossible\n              ? of(\n                  this.router.parseUrl(\n                    this.routingConfigService.getRouteConfig(\n                      this.checkoutConfigService.getCheckoutStepRoute(\n                        CheckoutStepType.REVIEW_ORDER\n                      )\n                    ).paths[0]\n                  )\n                )\n              : this.firstStep$;\n          })\n        );\n      }\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AuthGuard, CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [AuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        map((deliveryMode: DeliveryMode) =>\n          deliveryMode && deliveryMode.code ? deliveryMode.code : null\n        )\n      )\n      .subscribe(code => {\n        if (!!code && code === this.currentDeliveryModeId) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [AuthGuard, CartNotEmptyGuard, ShippingAddressSetGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return !!countries.filter(\n          (country: Country): boolean =>\n            country.isocode === address.country.isocode\n        ).length;\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.globalMessageService.add(\n                {\n                  key: 'paymentMethods.invalidField',\n                  params: { field: paymentInfo[key] },\n                },\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          const card: Card = {\n            title: payment.defaultPayment ? textDefaultPaymentMethod : '',\n            textBold: payment.accountHolderName,\n            text: [payment.cardNumber, textExpires],\n            img: this.getCardIcon(payment.cardType.code),\n            actions: [{ name: textUseThisPayment, event: 'send' }],\n          };\n          if (!this.selectedPayment && payment.defaultPayment) {\n            this.selectedPayment = payment;\n          }\n          if (this.selectedPayment && this.selectedPayment.id === payment.id) {\n            card.header = textSelected;\n          }\n          return card;\n        }\n      )\n    );\n  }\n\n  paymentMethodSelected(paymentDetails: PaymentDetails) {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  next(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            AuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/index';\nimport { CheckoutStepType } from '../../model/index';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * NOTE: check issue:#4121 for more info\n   *\n   * TODO(issue:#4121) Deprecated since 1.1.0\n   */\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService\n  );\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    // TODO(issue:#4121) Deprecated since 1.1.0\n    if (this.checkoutConfigService) {\n      const step = this.checkoutConfigService.getCheckoutStep(stepType);\n\n      return step && step.routeName;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            AuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Observable, Subscription, BehaviorSubject } from 'rxjs';\nimport { map, tap, switchMap } from 'rxjs/operators';\n\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    this.checkoutDeliveryService.verifyAddress(this.address.value);\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/checkout-step.model';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  cards: Card[] = [];\n  isLoading$: Observable<boolean>;\n  selectedAddress: Address;\n  goTo: CheckoutStepType;\n  setAddress: Address;\n  setAddressSub: Subscription;\n  selectedAddressSub: Subscription;\n  selectedAddress$: BehaviorSubject<Address> = new BehaviorSubject<Address>(\n    null\n  );\n  cards$: Observable<CardWithAddress[]>;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$.asObservable(),\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (selected && Object.keys(selected).length > 0) {\n            this.selectedAddress = selected;\n          } else {\n            const defaultAddress = addresses.find(\n              address => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectedAddress = defaultAddress;\n          }\n\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    this.userAddressService.loadAddresses();\n\n    this.setAddressSub = this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .subscribe(address => {\n        this.setAddress = address;\n        this.selectedAddress$.next(address);\n        if (this.goTo) {\n          this.goNext();\n          this.goTo = null;\n        }\n      });\n    this.selectedAddressSub = this.selectedAddress$.subscribe(address => {\n      this.selectedAddress = address;\n    });\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n    const card: Card = {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n\n    this.cards.push(card);\n\n    return card;\n  }\n\n  addressSelected(address: Address): void {\n    this.selectedAddress$.next(address);\n  }\n\n  next(): void {\n    this.addAddress({ address: this.selectedAddress, newAddress: false });\n  }\n\n  addAddress({\n    newAddress,\n    address,\n  }: {\n    newAddress: boolean;\n    address: Address;\n  }): void {\n    if (newAddress) {\n      this.checkoutDeliveryService.createAndSetAddress(address);\n      this.goTo = CheckoutStepType.DELIVERY_MODE;\n      return;\n    }\n    if (\n      this.setAddress &&\n      this.selectedAddress &&\n      this.setAddress.id === this.selectedAddress.id\n    ) {\n      this.goNext();\n    } else {\n      this.goTo = CheckoutStepType.DELIVERY_MODE;\n      this.checkoutDeliveryService.setDeliveryAddress(address);\n    }\n  }\n\n  addNewAddress(address: Address): void {\n    this.addAddress({ address, newAddress: true });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goBack: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goBack) {\n      this.back();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService {\n  private templatesRefs = {};\n  private templatesRefsBefore = {};\n  private templatesRefsAfter = {};\n\n  add(\n    outlet: string,\n    template: TemplateRef<any>,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.templatesRefsBefore[outlet] = template;\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.templatesRefs[outlet] = template;\n    }\n    if (position === OutletPosition.AFTER) {\n      this.templatesRefsAfter[outlet] = template;\n    }\n  }\n\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): TemplateRef<any> {\n    let templateRef;\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore[outlet];\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter[outlet];\n        break;\n      default:\n        templateRef = this.templatesRefs[outlet];\n    }\n    return templateRef;\n    // return this.templatesRefs[outlet] ? this.templatesRefs[outlet] : null;\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\nconst layoutModules = [OutletRefModule];\n\n@NgModule({\n  imports: [...layoutModules],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [...layoutModules],\n})\nexport class LayoutModule {}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { OutletPosition } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnInit {\n  @Input() cxOutlet: string;\n\n  private _context: any;\n  @Input()\n  set cxOutletContext(value: any) {\n    this._context = value;\n  }\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit(): void {\n    const nodes = [];\n    nodes.push(...this.renderTemplate(OutletPosition.BEFORE));\n    nodes.push(...this.renderTemplate(OutletPosition.REPLACE, true));\n    nodes.push(...this.renderTemplate(OutletPosition.AFTER));\n  }\n\n  private renderTemplate(position: OutletPosition, replace = false): any[] {\n    const nodes = [];\n    const template = this.outletService.get(this.cxOutlet, position);\n    if (template || replace) {\n      const ref = this.vcr.createEmbeddedView(template || this.templateRef, {\n        $implicit: this._context,\n      });\n      nodes.push(...ref.rootNodes);\n    }\n    return nodes;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  AuthService,\n  BaseSiteService,\n  CartDataService,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: CartService,\n    @Optional() public cartData: CartDataService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: cmsComponentData, // TODO: remove / deprecated since 1.0.x\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-page-slot',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent {\n  @Input() set position(position: string) {\n    this.position$.next(position);\n    // add the position name as a css class so that\n    // layout can be applied to it, using the position based class.\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  /**\n   * observable with components (`ContentSlotComponentData[]`)\n   * for the current slot\n   */\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    ),\n    tap(components => this.addComponentClass(components))\n  );\n\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef\n  ) {}\n\n  // add a class to indicate whether the class is empty or not\n  private addComponentClass(components): void {\n    if (components && components.length > 0) {\n      this.renderer.addClass(this.hostElement.nativeElement, 'has-components');\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // we print warn messages on missing layout configs\n  // only once to not polute the console log\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter(slot => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(page => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injectable } from '@angular/core';\nimport { Title, Meta, MetaDefinition } from '@angular/platform-browser';\nimport { PageMetaService, PageMeta, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { SeoMetaService } from './seo-meta.service';\nimport { htmlLangProvider } from './html-lang-provider';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    private routingService: RoutingService,\n    private cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.getPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap(notFoundPage => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map(data => data.banners.trim().split(' ')),\n    map(codes => codes.map(code => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/index';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n    PageComponentModule,\n    CarouselModule,\n    MediaModule,\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsService, CMSTabParagraphContainer } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent {\n  activeTabNum = 0;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n              return {\n                ...tab,\n                title: `CMSTabParagraphContainer.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe(error => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ConsentTemplate } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  consentGiven = false;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consentTemplate && this.consentTemplate.currentConsent) {\n      if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n        this.consentGiven = false;\n      } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n        this.consentGiven = true;\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentChanged.emit({\n      given: !this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, skipWhile, tap, withLatestFrom } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n    ]).pipe(\n      map(\n        ([consentLoading, giveConsentLoading, withdrawConsentLoading]) =>\n          consentLoading || giveConsentLoading || withdrawConsentLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      tap(templateList => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      })\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(\n      // Email Standard RFC 5322:\n      /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/ // tslint:disable-line\n    )\n      ? null\n      : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(\n      /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_\\-+{};:.,]).{6,}$/\n    )\n      ? null\n      : { InvalidPassword: true };\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order, Consignment, OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    SpinnerModule,\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n})\nexport class OrderHistoryComponent implements OnInit, OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  orders$: Observable<OrderHistoryList>;\n  isLoaded$: Observable<boolean>;\n\n  private PAGE_SIZE = 5;\n\n  sortType: string;\n\n  ngOnInit(): void {\n    this.orders$ = this.userOrderService\n      .getOrderHistoryList(this.PAGE_SIZE)\n      .pipe(\n        tap((orders: OrderHistoryList) => {\n          if (orders.pagination) {\n            this.sortType = orders.pagination.sort;\n          }\n        })\n      );\n\n    this.isLoaded$ = this.userOrderService.getOrderHistoryListLoaded();\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { NgModule } from '@angular/core';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { OrderDetailsModule } from './order-details/order-details.module';\n\n@NgModule({\n  imports: [OrderHistoryModule, OrderDetailsModule],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta && meta.breadcrumbs\n          ? meta.breadcrumbs\n          : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(data => !!data),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.getNavigationEntryItems(navigation, true);\n            }\n          }),\n          filter(Boolean),\n          map(items => this.createNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Get all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private getNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ) {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      this.processChildren(nodeData, itemsList);\n    }\n\n    if (root) {\n      const rootUid = nodeData.uid;\n      this.cmsService.loadNavigationItems(rootUid, itemsList);\n    }\n  }\n\n  private processChildren(node, itemsList): void {\n    for (const child of node.children) {\n      this.getNavigationEntryItems(child, false, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for display\n   * @param nodeData\n   * @param items\n   */\n  private createNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    node.title = nodeData.title;\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.addLinkToNode(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = this.createChildren(nodeData, items);\n      node.children = children;\n    }\n\n    return node;\n  }\n\n  private addLinkToNode(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (entry.itemType === 'CMSLinkComponent' && item !== undefined) {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n\n      node.url = this.getLink(item);\n\n      // if \"NEWWINDOW\", target is true\n      node.target = item.target;\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n\n  private createChildren(node, items) {\n    const children = [];\n\n    for (const child of node.children) {\n      const childNode = this.createNode(child, items);\n      children.push(childNode);\n    }\n\n    return children;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      this.openNodes = this.openNodes.filter(n => n !== node);\n      this.renderer.removeClass(node, 'is-open');\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  data$ = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n    GenericLinkModule,\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a singe product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map(data => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map(data => data.productCodes.trim().split(' ')),\n    map(codes => codes.map(code => this.productService.get(code)))\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code)\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map(ref => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('CMSTabParagraphContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_CATEGORY = ':relevance:category:';\n  protected readonly RELEVANCE_BRAND = ':relevance:brand:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(\n    pluck(0),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_CATEGORY + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_BRAND + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe(route => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Subscription, Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\nimport { ViewConfig } from '../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n        this.viewMode$.next(\n          template === 'ProductGridPageTemplate'\n            ? ViewModes.Grid\n            : ViewModes.List\n        );\n      })\n    );\n  }\n\n  viewPage(pageNumber: number): void {\n    this.productListComponentService.viewPage(pageNumber);\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  StarRatingModule,\n  SpinnerModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport { ViewConfig } from '../../../shared/config/view-config';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<ViewConfig>defaultScrollConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { CurrentProductService } from '../../current-product.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(p => !!p),\n    switchMap(product => this.reviewService.getByProductCode(product.code)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map(product => this.createThumbs(product))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([_, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n    CarouselModule,\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService,\n    winRef: WindowRef // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * NOTE: check issue:#4055 for more info\n   *\n   * TODO(issue:#4055) Deprecated since 1.1.0\n   */\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService\n  );\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService,\n    private winRef?: WindowRef\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n\n    // TODO(issue:#4055) Deprecated since 1.1.0\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['newUid'] && routeState['newUid'].length) {\n        this.prefillForm('userId', routeState['newUid']);\n      }\n    }\n  }\n\n  login(): void {\n    const { userId, password } = this.form.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private prefillForm(field: string, value: string): void {\n    this.form.patchValue({\n      [field]: value,\n    });\n\n    this.form.get(field).markAsTouched(); // this action will check field validity on load\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.routing.go({ cxRoute: 'home' });\n          }\n        })\n      );\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n  FeatureConfigService,\n  AuthService,\n  AuthRedirectService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: [false],\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: this.matchPassword }\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   *\n   * TODO(issue:4237) Register flow\n   */\n  constructor(\n    protected auth: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router?: RoutingService,\n    protected featureConfig?: FeatureConfigService\n  ) {}\n\n  // TODO(issue:4237) Register flow\n  isNewRegisterFlowEnabled: boolean =\n    this.featureConfig && this.featureConfig.isLevel('1.1');\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n\n    // TODO(issue:4237) Register flow\n    if (this.isNewRegisterFlowEnabled) {\n      this.loading$ = this.userService.getRegisterUserResultLoading();\n      this.registerUserProcessInit();\n    } else {\n      if (this.auth && this.authRedirectService) {\n        this.subscription.add(\n          this.userService\n            .getRegisterUserResultSuccess()\n            .subscribe((success: boolean) => {\n              if (success) {\n                const { uid, password } = this.collectDataFromRegisterForm(\n                  this.userRegistrationForm.value\n                );\n                this.auth.authorize(uid, password);\n              }\n            })\n        );\n        this.subscription.add(\n          this.auth.getUserToken().subscribe(data => {\n            if (data && data.access_token) {\n              this.globalMessageService.remove(\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n              this.authRedirectService.redirect();\n            }\n          })\n        );\n      }\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(messages => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some(message => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n  }\n\n  submit(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.userRegistrationForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.userRegistrationForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (this.router && success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe(success => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  private matchPassword(ac: AbstractControl): { NotEqual: boolean } {\n    if (ac.get('password').value !== ac.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    SpinnerModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RoutingService, StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      markerIndex => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap', { static: false })\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe(params =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { UserComponentModule } from './user/user.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\n\n@NgModule({\n  imports: [\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  Route,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      slots: [\n        'TopHeaderSlot',\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'] },\n  logout: { paths: ['logout'] },\n  register: { paths: ['login/register'] },\n  forgotPassword: { paths: ['login/forgot-password'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    ConfigModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('1.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot(\n      {},\n      {\n        runtimeChecks: {\n          strictStateImmutability: true,\n          strictStateSerializability: true,\n          strictActionImmutability: true,\n          strictActionSerializability: true,\n        },\n      }\n    ),\n    EffectsModule.forRoot([]),\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n"]}