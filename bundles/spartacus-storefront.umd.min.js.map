{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/components/form-components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/form-components/form-components.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/order-confirmation/order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/order-confirmation-page.guard.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/layout/config/default-layout-config.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-style.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/outlet/style-ref/style-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/style-ref/style-ref.module.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-structure/cms.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.service.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-structure/page/config/default-cart-page.config.ts","ng://@spartacus/storefront/cms-structure/page/config/default-header.config.ts","ng://@spartacus/storefront/cms-structure/page/config/default-pdp-config.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/shared-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-details/container/product-details.component.ts","ng://@spartacus/storefront/cms-components/product/product-details/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-details/product-details.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/cart-page/cart-page.component.ts","ng://@spartacus/storefront/cms-pages/cart-page/cart-page.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.component.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/config/provide-config-from-meta-tags.ts","ng://@spartacus/storefront/cms-pages/order-confirmation-page/order-confirmation-page.component.ts","ng://@spartacus/storefront/cms-pages/order-confirmation-page/order-confirmation-page.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/cms-structure/page/config/default-cms-content.config.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","step","op","TypeError","done","value","pop","push","e","__values","o","m","__read","r","ar","error","__spread","concat","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","Injectable","args","providedIn","NgbModal","CurrentProductService","routingService","productService","getProduct","_this","getRouterState","pipe","map","state","params","filter","productCode","switchMap","get","RoutingService","ProductService","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","TIMES","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","PLUS","MINUS","RESET","IconConfig","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","WindowRef","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","staticStyleClasses","undefined","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","AddedToCartDialogComponent","modalService","cartService","fb","iconTypes","ICON_TYPE","quantity","firstUpdate","form","group","ngOnInit","entry$","tap","entry","code","product","controls","setValue","setControl","createEntryFormGroup","markAsPristine","showItemIncrLabel","dismissModal","removeEntry","item","updateEntry","_a","updatedQuantity","entryNumber","CartService","FormBuilder","ViewChild","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","cartEntry$","getEntry","Boolean","subscribe","stock","stockLevelStatus","stockLevel","maxQuantity","markForCheck","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","centered","size","componentInstance","cart$","getActive","loaded$","getLoaded","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","AutoFocusDirective","hostElement","ngAfterViewInit","focus","Directive","AutoFocusDirectiveModule","OnlyNumberDirective","renderer","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","preventDefault","onKeyUp","target","onKeyDown","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","replace","setProperty","keyCode","String","fromCharCode","Renderer2","HostListener","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","async","cartIsLoading","isValueChangeable","update","EventEmitter","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","valueChanges","debounceTime","manualChange","Number","ngOnChanges","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","input","event","handlers","ArrowDown","decrement","ArrowUp","increment","stopPropagation","onBlur","onFocus","setFocus","registerOnTouched","fn","registerOnChange","emit","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","Output","FormComponentsModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","startsWith","GenericLinkModule","RouterModule","PaginationComponent","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","Math","floor","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","xs","sm","md","lg","xl","LayoutConfig","ServerConfig","DEFAULT_MEDIA_FORMAT","MediaService","layoutConfig","mediaFormats","threshold","breakpoints","BREAKPOINT","getImageUrl","getBaseUrl","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","altText","reduce","set","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","handleMissing","loadHandler","errorHandler","MediaModule","SpinnerComponent","SpinnerModule","I18nModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","GlobalMessageModule","forRoot","LanguageCurrencyComponent","CmsComponentData","LABELS","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","service","getAll","items","getContext","ctx","forEach","getOptionLabel","of","getActiveItem","getLabel","setActive","take","getInjectedService","data$","data","nativeName","symbol","isocode","decorators","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","cmsComponents","CMSSiteContextComponent","useClass","deps","SiteContextModule","entryComponents","StarRatingComponent","el","change","initialRate","setRate","rating","force","style","saveRate","StarRatingModule","FormUtils","isNotValidField","formControlName","submitted","invalid","touched","dirty","PromotionsComponent","PromotionsModule","CartItemListComponent","isReadOnly","hasHeader","potentialProductPromotions","getPotentialProductPromotionsForItem","entryPromotions","_c","tslib_1.__values","_d","promotion","description","consumedEntries","_e","_f","consumedEntry","isConsumedByEntry","consumendEntryNumber","orderEntryNumber","entries","_b","CartItemComponent","compact","view","isProductOutOfStock","updateItem","removeItem","viewItem","OrderSummaryComponent","CartSharedModule","UrlModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","entries$","getEntries","cartLoaded$","getAllPromotionsForCart","cart","potentialOrderPromotions","appliedOrderPromotions","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","skipWhile","isEmpty","go","cxRoute","CartTotalsComponent","CartTotalsModule","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","CartModule","CartComponentModule","CheckoutConfig","CheckoutConfigService","checkoutConfig","routingConfigService","steps","checkout","getCheckoutStep","currentStepType","getCheckoutStepIndex","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","routeName","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","snapshot","join","stepRoute","getRouteConfig","paths","findIndex","RoutingConfigService","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","id","name","CheckoutStepType","CheckoutGuard","router","parseUrl","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","guards","AuthGuard","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","CheckoutDetailsService","checkoutService","cartId$","cartData","cartId","getCheckoutDetailsLoaded$","loadCheckoutDetails","shareReplay","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutService","ShippingAddressSetGuard","checkoutDetailsService","checkoutConfigService","serverConfig","checkoutStep","production","console","warn","deliveryAddress","keys","DeliveryModeComponent","mode","deliveryModeId","Validators","required","checkoutStepUrlNext","checkoutStepUrlPrevious","changedOption","supportedDeliveryModes$","getSupportedDeliveryModes","selectedDeliveryMode$","getSelectedDeliveryMode","loadSupportedDeliveryModes","deliveryMode","currentDeliveryModeId","changeMode","setDeliveryMode","deliveryModeSub","back","ngOnDestroy","unsubscribe","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","PWAModuleConfig","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","BehaviorSubject","canPrompt$","asObservable","init","nativeWindow","addEventListener","deferredEvent","enableAddToHomeScreen","add","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","RegistrationOptions","useFactory","APP_INITIALIZER","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","delete","setDefault","send","edit","CardModule","OrderConfirmationComponent","translation","order$","getOrderDetails","clearCheckoutData","getAddressCardContent","combineLatest","translate","title","textBold","firstName","lastName","text","line1","line2","town","country","postalCode","phone","getDeliveryModeCardContent","getBillingAddressCardContent","billingAddress","getPaymentInfoCardContent","payment","month","expiryMonth","year","expiryYear","textTitle","textExpires","accountHolderName","cardNumber","TranslationService","OrderConfirmationModule","CheckoutModule","DeliveryModeSetGuard","BillingAddressFormComponent","countrySelected","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","closeModal","PaymentFormComponent","userService","months","years","sameAsShippingAddress","goBack","closeForm","addPaymentInfo","defaultPayment","cardType","cvn","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","clearAddressVerificationResults","decision","MSG_TYPE_ERROR","openSuggestedAddress","Date","getFullYear","j","toString","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","address","region","suggestedAddressModalRef","result","then","catch","verifyAddress","paymentDetails","UserService","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","isLoading$","getPaymentMethodsLoading","loadPaymentMethods","existingPaymentMethods$","getPaymentMethods","getPaymentDetailsSub","paymentInfo","field","clearCheckoutStep","selectedPayment","getCardContent","textUseThisPayment","textDefaultPaymentMethod","textSelected","img","getCardIcon","actions","header","paymentMethodSelected","showNewPaymentForm","hideNewPaymentForm","newPayment","addNewPaymentMethod","getDeliveryAddressSub","createPaymentDetails","setPaymentDetails","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","order","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","deliveryAddress$","paymentDetails$","deliveryMode$","selected","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","getDeliveryModeCard","getPaymentMethodCard","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","defaultAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","regions$","getRegions","regions","regionControl","countryIsoCode","loadRegions","errors","some","subject","addressData","patchValue","regionSelected","titleSelected","toggleDefaultAddress","AddressFormModule","ShippingAddressComponent","newAddressFormManuallyOpened","cards","selectedAddress$","goTo","getAddressesLoading","existingAddresses$","getAddresses","cards$","addresses","textDefaultShippingAddress","textShipToThisAddress","loadDetails","loadAddresses","setAddressSub","setAddress","goNext","selectedAddressSub","addressSelected","addAddress","newAddress","createAndSetAddress","setDeliveryAddress","addNewAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","OrderConfirmationPageGuard","orderDetails","BreakpointService","window","fromEvent","startWith","getBreakpoint","innerWidth","distinctUntilChanged","windowWidth","breakpoint","getClosest","getSize","reverse","br","defaultLayoutConfig","layoutSlots","slots","navigation","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","SearchResultsListPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","outlet","position","OutletPosition","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","OutletStyleService","templateRefs","elem","OutletDirective","vcr","outletStyleService","_context","nodes","renderTemplate","renderStyleLink","cxOutlet","ref","createEmbeddedView","$implicit","rootNodes","styleElement","parentElement","node","HTMLElement","shadowRoot","ViewContainerRef","OutletModule","StyleRefDirective","element","cssOutletService","cxCssRef","StyleRefModule","CustomFormValidators","emailDomainValidator","control","match","InvalidEmail","emailValidator","passwordValidator","InvalidPassword","LoginFormComponent","auth","authRedirectService","userId","password","login","authorize","sub","getUserToken","access_token","redirect","AuthService","AuthRedirectService","CmsModule","defaultCmsModuleConfig","CmsCoreModule","CmsConfig","LoginFormModule","UserModule","ReturningCustomerLoginComponent","NotAuthGuard","LoginComponentService","_isLogin","LoginComponent","loginService","token","isLogin","load","ComponentWrapperDirective","componentMapper","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","isWebComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","factory","getComponentFactoryByCode","cmpRef","createComponent","getInjectorForComponent","detectChanges","isLaunchInSmartEdit","addSmartEditContract","location","__awaiter","_arguments","P","generator","Promise","resolve","reject","fulfilled","rejected","initWebComponent","elementName","webElement","cxApi","CxApiService","getCmsDataForComponent","uid","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","removeChild","ComponentMapperService","CmsService","DynamicAttributeService","Inject","PLATFORM_ID","PageComponentModule","PageSlotComponent","position$","slot$","getContentSlot","slot","addSmartEditSlotClass","components$","components","a","addComponentClass","addClass","PageSlotModule","LoginModule","LogoutGuard","cms","routing","semanticPathService","logout","hasPage","PageType","CONTENT_PAGE","SemanticPathService","cartComponents","emptyCartText","typeCode","defaultCartPageConfig","ignoreBackend","pageId","EmptyCartMiddleContent","componentIds","headerComponents","LanguageComponent","CurrencyComponent","BreadcrumbComponent","Logo","mime","urlLink","SearchBox","MiniCart","CategoryNavigationComponent","navigationNode","children","itemId","itemSuperType","itemType","defaultPageHeaderConfig","PreHeader","SiteContext","SiteLinks","SiteLogo","SiteLogin","NavigationBar","BottomHeaderSlot","defaultPdpComponents","CMSProductImages","defaultPdpSlots","ProductDetails","PageLayoutService","breakpointService","warnLogMessages","logSlots","getSlots","section","breakpoint$","page$","getSlotConfig","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","pageTemplateConfig","getSlotConfigForSection","getResponsiveSlotConfig","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","layoutName$","templateName$","styleClass","slots$","cls","currentClass","removeClass","PageLayoutModule","ɵ0","LogoutModule","forChild","path","component","RegisterComponent","userRegistrationForm","email","passwordconf","newsletter","termsandconditions","requiredTrue","validator","matchPassword","submit","userRegisterFormData","subscription","globalMessageEntities","message","ac","NotEqual","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","componentType","getRoutesForComponent","getGuardsForComponents","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isFunction","wrapIntoObservable","isObservable","isPromise","obj","first","Error","endWith","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesService","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","componentRoutes","updateRouting","navigateByUrl","newRoute","resetConfig","CmsPageGuard","cmsRoutes","cmsI18n","cmsGuards","getNextPageContext","withLatestFrom","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","hasNotFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","cmsRoute","addCmsRoute","ɵ0$1","CmsRouteModule","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","PageMetaService","htmlLangProvider","setHtmlLangAttribute","LanguageService","languageService","lang","documentElement","initSeoService","SeoModule","StorefrontComponent","isExpanded$","navigateSubscription","isNavigating","val","startNavigating","stopNavigating","collapseMenu","MainModule","layoutModules","LayoutModule","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","split","tab","select","tabNum","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","authService","translationService","Subscription","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","success","onSuccess","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ConsentManagementFormComponent","consentChanged","consentGiven","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","onConsentChange","given","ConsentManagementComponent","subscriptions","loading$","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","getConsents","templateList","consentsExists","loadConsents","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","giveConsent","version","withdrawConsent","onDone","ConsentManagementModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","OrderDetailsService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","bufferSize","refCount","OrderDetailHeadlineComponent","orderDetailsService","OrderDetailItemsComponent","getConsignmentProducts","consignment","products","orderEntry","OrderDetailShippingComponent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","moduleComponents","OrderDetailsModule","ɵ0$2","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","sort","isLoaded$","getOrderHistoryListLoaded","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","AccountOrderHistoryComponent","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","userServiceSub","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","queryParams","isPasswordReset","reset","resetPassword","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","isNotValid","onSubmit","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitClicked","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","user","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","setCrumbs","title$","heading","crumbs$","textHome","breadcrumbs","BreadcrumbModule","CmsPageTitleModule","NavigationComponentService","createNavigation","getNavigationNode","nav","getNavigationEntryItems","createNode","nodeData","root","itemsList","superType","processChildren","rootUid","loadNavigationItems","child","addLinkToNode","createChildren","linkName","childNode","node$","styleClass$","NavigationUIComponent","flyout","isOpen","openNodes","NavigationEnd","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","getDepth","depth","NavigationComponent","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","HAS_SEARCH_RESULT_CLASS","SearchBoxComponentService","searchService","search","query","minCharactersBeforeRequest","displayProducts","pageSize","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","toggleBodyClass","hasResults","hasBodyClass","className","contains","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","launchSearchPage","translationKey","SearchboxService","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","ignoreCloseEvent","results$","config$","c","blur","avoidReopen","launchSearchResult","disableClose","HighlightPipe","transform","trim","Pipe","SearchBoxModule","ProductModule","SharedCarouselService","MAX_WIDTH","MAX_ITEM_SIZE","SPEED","itemSize$","activeItem$","activeItemWithDelay$","getActiveItemWithDelay","getItemSize","setItemSize","clientWidth","itemsPerPage","round","setItemAsActive","newActiveItem","itemSize","setItem","setPreviousItemAsActive","activeItem","setNextItemAsActive","delay","getDelayValue","ProductCarouselService","getTitle","fetchTitle","items$","fetchItems","productCodes","ProductCarouselComponent","productCarouselService","sharedCarouselService","ProductCarouselModule","ProductReferencesService","referenceService","routerService","getDisplayProductTitles","displayProductTitles$","JSON","parse","toLowerCase","fetchDisplayProductTitles","displayProductTitles","getDisplayProductPrices","displayProductPrices$","fetchDisplayProductPrices","displayProductPrices","getReferenceType","productReferenceTypes","getProductCode","getReferenceList","setReferenceList","referenceType","ProductReferenceService","ProductReferencesComponent","productReferencesService","ProductReferencesModule","WAITING_CLASS","ProductImagesComponent","product$","_imageContainer$","imageContainer$","images","PRIMARY","showImage","imageContainer","startWaiting","isMainImageContainer","currentContainer","zoom","clearWaitList","waiting","SUMMARY","IMAGES","TITLE","RATING","PRICE","SHARE","ProductDetailsComponent","currentPageService","outlets","ProductDetailOutlets","ProductSummaryComponent","translatePipe","itemCount","getReviewsComponent","querySelector","getTabsComponent","getTabByLabel","tabsComponent","h3Elements","h3Element","innerHTML","clickTabIfInactive","click","showReviews","reviewsTabLabel","reviewsTab","reviewsComponent","scrollIntoView","reviewsTabAvailable","TranslatePipe","ProductDetailsModule","Grid","List","ProductViewComponent","modeChange","viewMode","newMode","ViewModes","ProductListComponent","productSearchService","searchConfig","gridMode$","createOptionsByUrlParams","categoryCode","brandCode","newConfig","itemPerPage","updateParams$","model$","searchResult","getCategoryTitle","categoryTitle","facetValueName","totalResults","viewPage","pageNumber","setGridMode","ProductSearchService","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","Map","queryCodec","HttpUrlEncodingCodec","facets","facet","visible","activeFacetValueCode","searchResult$","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","slice","ProductGridItemComponent","ProductListItemComponent","ProductListModule","CMSProductListComponent","SearchResultsListComponent","ProductRefinementComponent","ProductAttributesComponent","ProductReviewsComponent","reviewService","isWritingReview","initialMaxListItems","reviews$","getByProductCode","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","review","headline","comment","alias","reviewerName","ProductReviewService","ProductReviewsModule","ProductDetailsTabComponent","ProductDetailsTabModule","ProductTabsModule","ProductSpecsTabComponent","ProductReviewsTabComponent","ProductImagesModule","CmsLibModule","CartPageComponent","CartPageModule","ProductDetailsPageComponent","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","markerIndex","findLastIndex","elements","predicate","isMarkerLastSegment","paramIndex","posParams","consumed","matcher","ProductDetailsPageModule","ɵ0$5","ɵ1$1","pageLabel","ɵ2","ɵ3","ProductListingPageModule","provideConfigFromMetaTags","provideConfigFactory","occServerConfigFromMetaTagFactory","mediaServerConfigFromMetaTagFactory","OrderConfirmationPageComponent","OrderConfirmationPageModule","defaultStorefrontRoutesConfig","home","notFound","forgotPassword","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","paramsMapping","category","brand","termsAndConditions","defaultRoutingConfig","RoutingModule","CoreRoutingModule","StorefrontModule","ngModule","provideConfig","OccModule","StateModule","AuthModule","CxApiModule","SmartEditModule","PersonalizationModule","LANGUAGE","CURRENCY","DESCRIPTION","SPECIFICATIONS","REVIEWS","SHIPPING","defaultCmsContentConfig","cmsStructure","pages"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductService, RoutingService, Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  getProduct(): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(productCode => !!productCode),\n      switchMap((productCode: string) => this.productService.get(productCode))\n    );\n  }\n}\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  TIMES = 'TIMES',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  PLUS = 'PLUS',\n  MINUS = 'MINUS',\n  RESET = 'RESET',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      TIMES: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      MINUS: 'fas fa-minus',\n      PLUS: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n\n  quantity = 0;\n  firstUpdate = true;\n  showItemIncrLabel: boolean;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n\n          // Announce in header if Add To Cart button has incremented product\n          this.showItemIncrLabel = this.firstUpdate && entry.quantity > 1;\n          // Any updates after the first will be flagged as false\n          this.firstUpdate = false;\n        }\n      })\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit {\n  @Input() productCode: string;\n\n  @Input() showQuantity = true;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n\n  cartEntry$: Observable<OrderEntry>;\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.hasStock = true;\n    } else {\n      this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe(product => {\n          this.productCode = product.code;\n\n          if (\n            product.stock &&\n            product.stock.stockLevelStatus !== 'outOfStock' &&\n            product.stock.stockLevel > 0\n          ) {\n            this.maxQuantity = product.stock.stockLevel;\n            this.hasStock = true;\n          } else {\n            this.hasStock = false;\n          }\n\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    this.openModal();\n    this.cartService.addEntry(this.productCode, this.quantity);\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    value = value.replace(/[^0-9]+/g, '');\n    this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    if (e.key) {\n      return e.key;\n    } else {\n      // for old browsers\n      if (e.keyCode && String.fromCharCode) {\n        switch (e.keyCode) {\n          case 8:\n            return 'Backspace';\n          case 9:\n            return 'Tab';\n          case 27:\n            return 'Escape';\n          case 37:\n            return 'ArrowLeft';\n          case 39:\n            return 'ArrowRight';\n          default:\n            return String.fromCharCode(e.keyCode);\n        }\n      }\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges {\n  @ViewChild('itemCounterInput')\n  public input: ElementRef;\n  @ViewChild('incrementBtn')\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn')\n  public decrementBtn: ElementRef;\n\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.inputValue.valueChanges.pipe(debounceTime(300)).subscribe(value => {\n      if (value) {\n        this.manualChange(Number(value));\n      }\n    });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return incomingValue < this.min || !this.min\n      ? this.min\n      : incomingValue > this.max || !this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { OnlyNumberDirective } from '../../directives/only-number/only-number.directive';\nimport { ItemCounterComponent } from './item-counter/item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent, OnlyNumberDirective],\n  exports: [ItemCounterComponent],\n})\nexport class FormComponentsModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { ServerConfig } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig extends ServerConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BREAKPOINT, LayoutConfig } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected layoutConfig: LayoutConfig\n  ) {}\n\n  private mediaFormats: MediaFormats[] = [\n    { code: 'mobile', threshold: this.layoutConfig.breakpoints[BREAKPOINT.xs] },\n    { code: 'tablet', threshold: this.layoutConfig.breakpoints[BREAKPOINT.sm] },\n    {\n      code: 'desktop',\n      threshold: this.layoutConfig.breakpoints[BREAKPOINT.md],\n    },\n    {\n      code: 'widescreen',\n      threshold: this.layoutConfig.breakpoints[BREAKPOINT.lg],\n    },\n  ];\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else {\n      return null;\n    }\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl = (url: string) => {\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  };\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n  styleUrls: ['./global-message.component.scss'],\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { GlobalMessageModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    IconModule,\n    I18nModule,\n    GlobalMessageModule.forRoot(),\n  ],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"LANGUAGE\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"CURRENCY\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            items.forEach(item => {\n              return (item.label = this.getOptionLabel(item, ctx));\n            });\n            return of(items);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map(ctx => this.getInjectedService(ctx)),\n      filter(Boolean)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(map(data => data.context));\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          selector: 'cx-site-context-selector',\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          selector: 'cx-language-currency-selector',\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private el: ElementRef) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.el.nativeElement.style.setProperty(\n        '--star-fill',\n        value || this.initialRate\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { FormGroup } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Checks is the `formControlName` field valid in the provided `form`.\n   *\n   * If it's NOT valid, the method returns `true`.\n   *\n   * @param form a form whose field to check\n   * @param formControlName a field name\n   * @param submitted is the form submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    return (\n      form.get(formControlName).invalid &&\n      (submitted ||\n        (form.get(formControlName).touched && form.get(formControlName).dirty))\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { CartService, PromotionResult } from '@spartacus/core';\nimport { Item } from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  items: Item[] = [];\n\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(protected cartService: CartService, protected fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.items.forEach(item => {\n      const { code } = item.product;\n      if (!this.form.controls[code]) {\n        this.form.setControl(code, this.createEntryFormGroup(item));\n      } else {\n        const entryForm = this.form.controls[code] as FormGroup;\n        entryForm.controls.quantity.setValue(item.quantity);\n      }\n    });\n  }\n\n  removeEntry(item: Item): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumendEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumendEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumendEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n  @Input()\n  potentialProductPromotions: any[];\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  ngOnInit() {}\n\n  isProductOutOfStock(product) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { FormComponentsModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    FormComponentsModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { FormComponentsModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: { selector: 'cx-add-to-cart' },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    FormComponentsModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\nimport { CartService, Cart, OrderEntry } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = this.cartService.getLoaded();\n  }\n\n  getAllPromotionsForCart(cart: Cart): Cart[] {\n    const potentialPromotions = cart.potentialOrderPromotions || [];\n    const appliedPromotions = cart.appliedOrderPromotions || [];\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          selector: 'cx-cart-details',\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { skipWhile, map, switchMap } from 'rxjs/operators';\n\nimport { CartService, RoutingService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.cartService.getLoaded().pipe(\n      skipWhile(loaded => !loaded),\n      switchMap(() => this.cartService.getActive()),\n      map(cart => {\n        if (this.cartService.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Cart, OrderEntry, CartService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport {\n  UrlModule,\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n} from '@spartacus/core';\nimport { CartTotalsComponent } from './cart-totals.component';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          selector: 'cx-cart-totals',\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService\n    .getActive()\n    .pipe(map(cart => cart.deliveryItemsQuantity || 0));\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CartModule,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: { selector: 'cx-mini-cart' },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\n\n@NgModule({\n  imports: [\n    CartModule,\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n  ],\n  exports: [\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    steps: Array<CheckoutStep>;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { CheckoutConfig } from './config/checkout-config';\nimport { ActivatedRoute } from '@angular/router';\nimport { CheckoutStep, CheckoutStepType } from './model/checkout-step.model';\nimport { RoutingConfigService } from '@spartacus/core';\n\n@Injectable()\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute) {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  private getStepUrlFromActivatedRoute(activatedRoute: ActivatedRoute) {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string) {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutConfig } from './checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\n\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { Observable, of } from 'rxjs';\nimport { RoutingConfigService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.config.checkout.steps[0].routeName\n        ).paths[0]\n      )\n    );\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AuthGuard, CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          selector: 'cx-checkout-orchestrator',\n          guards: [AuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          selector: 'cx-checkout-order-summary',\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          selector: 'cx-checkout-progress-mobile-bottom',\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          selector: 'cx-checkout-progress-mobile-top',\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          selector: 'cx-checkout-progress',\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutService,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n  filter,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => cartData.code),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutService.getSelectedDeliveryModeCode())\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ServerConfig, Address, RoutingConfigService } from '@spartacus/core';\nimport { CheckoutConfigService } from '../checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router,\n    private serverConfig: ServerConfig\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && !this.serverConfig.production) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.SHIPPING_ADDRESS\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\n\nimport { DeliveryMode, CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ActivatedRoute } from '@angular/router';\nimport { CheckoutConfigService } from '../../checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n\n  changedOption: boolean;\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.changedOption = false;\n\n    this.supportedDeliveryModes$ = this.checkoutService.getSupportedDeliveryModes();\n    this.selectedDeliveryMode$ = this.checkoutService.getSelectedDeliveryMode();\n\n    this.checkoutService.loadSupportedDeliveryModes();\n\n    this.selectedDeliveryMode$\n      .pipe(\n        map((deliveryMode: DeliveryMode) =>\n          deliveryMode && deliveryMode.code ? deliveryMode.code : null\n        )\n      )\n      .subscribe(code => {\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n          this.currentDeliveryModeId = code;\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.changedOption = true;\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    if (this.changedOption) {\n      this.checkoutService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n\n    this.deliveryModeSub = this.checkoutService\n      .getSelectedDeliveryMode()\n      .subscribe(data => {\n        if (data && data.code === this.currentDeliveryModeId) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n      });\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          selector: 'cx-delivery-mode',\n          guards: [AuthGuard, CartNotEmptyGuard, ShippingAddressSetGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { ServerConfig } from '@spartacus/core';\n\nexport abstract class PWAModuleConfig extends ServerConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { PWAModuleConfig } from '../pwa.module-config';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  Éµangular_packages_service_worker_service_worker_b as RegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): RegistrationOptions {\n  return { enabled: (pwaConfig.production && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: RegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss'],\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation',\n  templateUrl: './order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${\n              deliveryAddress.postalCode\n            }`,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${\n              billingAddress.postalCode\n            }`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutModule, I18nModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { PwaModule } from '../../../../cms-structure/pwa/index';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { OrderConfirmationComponent } from './order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    CheckoutModule,\n    I18nModule,\n  ],\n  declarations: [OrderConfirmationComponent],\n  exports: [OrderConfirmationComponent],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutConfigService } from '../checkout-config.service';\nimport { ServerConfig, RoutingConfigService } from '@spartacus/core';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router,\n    private serverConfig: ServerConfig\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && !this.serverConfig.production) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.DELIVERY_MODE\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Country } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent {\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  addPaymentInfo = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    country: this.fb.group({\n      isocode: ['', Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutService.getDeliveryAddress();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest(this.countries$, this.shippingAddress$).pipe(\n      map(([countries, address]) => {\n        return !!countries.filter(\n          (country: Country): boolean =>\n            country.isocode === address.country.isocode\n        ).length;\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.addPaymentInfo.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingConfigService,\n  RoutingService,\n  TranslationService,\n  UserService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  getPaymentDetailsSub: Subscription;\n  getDeliveryAddressSub: Subscription;\n  selectedPayment: PaymentDetails;\n  deliveryAddress: Address;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userService: UserService,\n    protected checkoutService: CheckoutService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingConfigService: RoutingConfigService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userService.getPaymentMethodsLoading();\n    this.userService.loadPaymentMethods();\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.existingPaymentMethods$ = this.userService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutService\n      .getPaymentDetails()\n      .pipe(\n        filter(\n          paymentInfo => paymentInfo && Object.keys(paymentInfo).length !== 0\n        )\n      )\n      .subscribe(paymentInfo => {\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.globalMessageService.add(\n                {\n                  key: 'paymentMethods.invalidField',\n                  params: { field: paymentInfo[key] },\n                },\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          const card: Card = {\n            title: payment.defaultPayment ? textDefaultPaymentMethod : '',\n            textBold: payment.accountHolderName,\n            text: [payment.cardNumber, textExpires],\n            img: this.getCardIcon(payment.cardType.code),\n            actions: [{ name: textUseThisPayment, event: 'send' }],\n          };\n          if (this.selectedPayment && this.selectedPayment.id === payment.id) {\n            card.header = textSelected;\n          }\n          return card;\n        }\n      )\n    );\n  }\n\n  paymentMethodSelected(paymentDetails: PaymentDetails) {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  next(): void {\n    this.addPaymentInfo({\n      payment: this.selectedPayment,\n      newPayment: false,\n    });\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  addNewPaymentMethod({\n    paymentDetails,\n    billingAddress,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress: Address;\n  }): void {\n    this.getDeliveryAddressSub = this.checkoutService\n      .getDeliveryAddress()\n      .subscribe(address => {\n        billingAddress = address;\n      });\n    this.addPaymentInfo({\n      payment: paymentDetails,\n      billingAddress,\n      newPayment: true,\n    });\n  }\n\n  addPaymentInfo({\n    newPayment,\n    payment,\n    billingAddress,\n  }: {\n    newPayment: boolean;\n    payment: PaymentDetails;\n    billingAddress?: Address;\n  }): void {\n    payment.billingAddress = billingAddress\n      ? billingAddress\n      : this.deliveryAddress;\n\n    if (newPayment) {\n      this.checkoutService.createPaymentDetails(payment);\n      this.checkoutService.clearCheckoutStep(3);\n    }\n\n    // if the selected payment is the same as the cart's one\n    if (this.selectedPayment && this.selectedPayment.id === payment.id) {\n      this.checkoutService.setPaymentDetails(payment);\n      this.checkoutService.clearCheckoutStep(3);\n    }\n\n    this.getPaymentDetailsSub = this.checkoutService\n      .getPaymentDetails()\n      .subscribe(data => {\n        if (data.accountHolderName && data.cardNumber) {\n          this.routingService.go(this.checkoutStepUrlNext);\n\n          return;\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n    if (this.getDeliveryAddressSub) {\n      this.getDeliveryAddressSub.unsubscribe();\n    }\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          selector: 'cx-payment-method',\n          guards: [\n            AuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CheckoutModule,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          selector: 'cx-place-order',\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ServerConfig, RoutingConfigService } from '@spartacus/core';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router,\n    private serverConfig: ServerConfig\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && !this.serverConfig.production) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.PAYMENT_DETAILS\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n  Address,\n  CartService,\n  CheckoutService,\n  Country,\n  DeliveryMode,\n  PaymentDetails,\n  Cart,\n  OrderEntry,\n  UserService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected userService: UserService,\n    protected cartService: CartService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutService.getPaymentDetails();\n\n    this.deliveryMode$ = this.checkoutService.getSelectedDeliveryMode().pipe(\n      tap((selected: DeliveryMode) => {\n        if (selected === null) {\n          this.checkoutService.loadSupportedDeliveryModes();\n        }\n      })\n    );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          selector: 'cx-review-submit',\n          guards: [\n            AuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\nimport {\n  Address,\n  AddressValidation,\n  CheckoutService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserService,\n} from '@spartacus/core';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutService: CheckoutService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.userService.getRegions().pipe(\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n\n        if (Object.keys(regions).length === 0) {\n          regionControl.disable();\n          const countryIsoCode = this.address.get('country.isocode').value;\n          if (countryIsoCode) {\n            this.userService.loadRegions(countryIsoCode);\n          }\n        } else {\n          regionControl.enable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.userService.loadRegions(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    this.checkoutService.verifyAddress(this.address.value);\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent],\n})\nexport class AddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutService,\n  RoutingService,\n  TranslationService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../checkout-config.service';\nimport { CheckoutStepType } from '../../model/checkout-step.model';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  cards: Card[] = [];\n  isLoading$: Observable<boolean>;\n  selectedAddress: Address;\n  goTo: CheckoutStepType;\n  setAddress: Address;\n  setAddressSub: Subscription;\n  selectedAddressSub: Subscription;\n  selectedAddress$: BehaviorSubject<Address> = new BehaviorSubject<Address>(\n    null\n  );\n  cards$: Observable<CardWithAddress[]>;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userService: UserService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutService: CheckoutService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n\n    this.isLoading$ = this.userService.getAddressesLoading();\n    this.existingAddresses$ = this.userService.getAddresses();\n    this.cards$ = combineLatest(\n      this.existingAddresses$,\n      this.selectedAddress$.asObservable(),\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected')\n    ).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    this.cartService.loadDetails();\n    this.userService.loadAddresses();\n\n    this.setAddressSub = this.checkoutService\n      .getDeliveryAddress()\n      .subscribe(address => {\n        this.setAddress = address;\n        this.selectedAddress$.next(address);\n        if (this.goTo) {\n          this.goNext();\n          this.goTo = null;\n        }\n      });\n    this.selectedAddressSub = this.selectedAddress$.subscribe(address => {\n      this.selectedAddress = address;\n    });\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n    const card: Card = {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n\n    this.cards.push(card);\n\n    return card;\n  }\n\n  addressSelected(address: Address): void {\n    this.selectedAddress$.next(address);\n  }\n\n  next(): void {\n    this.addAddress({ address: this.selectedAddress, newAddress: false });\n  }\n\n  addAddress({\n    newAddress,\n    address,\n  }: {\n    newAddress: boolean;\n    address: Address;\n  }): void {\n    if (newAddress) {\n      this.checkoutService.createAndSetAddress(address);\n      this.goTo = CheckoutStepType.DELIVERY_MODE;\n      return;\n    }\n    if (\n      this.setAddress &&\n      this.selectedAddress &&\n      this.setAddress.id === this.selectedAddress.id\n    ) {\n      this.goNext();\n    } else {\n      this.goTo = CheckoutStepType.DELIVERY_MODE;\n      this.checkoutService.setDeliveryAddress(address);\n    }\n  }\n\n  addNewAddress(address: Address): void {\n    this.addAddress({ address, newAddress: true });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goBack: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goBack) {\n      this.back();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          selector: 'cx-shipping-address',\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutModule } from '@spartacus/core';\nimport { CartComponentModule } from '../cart/cart.module';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { OrderConfirmationModule } from './components/order-confirmation/order-confirmation.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartComponentModule,\n    CheckoutModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    OrderConfirmationModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n  // @todo: should we keep below provider here?\n  providers: [CheckoutConfigService],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { RoutingService, CheckoutService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationPageGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          this.routingService.go({ cxRoute: 'orders' });\n          return false;\n        }\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  protected getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints ? this.config.breakpoints[breakpoint] : 576;\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { LayoutConfig } from './layout-config';\n\nexport const defaultLayoutConfig: LayoutConfig = {\n  breakpoints: {\n    xs: 576,\n    sm: 768,\n    md: 992,\n    lg: 1200,\n  },\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      slots: [\n        'TopHeaderSlot',\n        'ProductDetails',\n        'VariantSelectorSlot',\n        // 'AddToCart', // the add to cart is currently hard coded in the PDP component\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: { selector: 'cx-hamburger-menu' },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService {\n  private templatesRefs = {};\n  private templatesRefsBefore = {};\n  private templatesRefsAfter = {};\n\n  add(\n    outlet: string,\n    template: TemplateRef<any>,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.templatesRefsBefore[outlet] = template;\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.templatesRefs[outlet] = template;\n    }\n    if (position === OutletPosition.AFTER) {\n      this.templatesRefsAfter[outlet] = template;\n    }\n  }\n\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): TemplateRef<any> {\n    let templateRef;\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore[outlet];\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter[outlet];\n        break;\n      default:\n        templateRef = this.templatesRefs[outlet];\n    }\n    return templateRef;\n    // return this.templatesRefs[outlet] ? this.templatesRefs[outlet] : null;\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable, ElementRef } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletStyleService {\n  private templateRefs = {};\n\n  add(outlet: string, elem: ElementRef<any>): void {\n    this.templateRefs[outlet] = elem;\n  }\n\n  get(outlet: string): ElementRef<any> {\n    return this.templateRefs[outlet];\n  }\n}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  Renderer2,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { OutletStyleService } from './outlet-style.service';\nimport { OutletPosition } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnInit {\n  @Input() cxOutlet: string;\n\n  private _context: string;\n  @Input()\n  set cxOutletContext(value: string) {\n    this._context = value;\n  }\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService,\n    private outletStyleService: OutletStyleService,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnInit(): void {\n    const nodes = [];\n    nodes.push(...this.renderTemplate(OutletPosition.BEFORE));\n    nodes.push(...this.renderTemplate(OutletPosition.REPLACE, true));\n    nodes.push(...this.renderTemplate(OutletPosition.AFTER));\n\n    this.renderStyleLink(nodes);\n  }\n\n  private renderTemplate(position: OutletPosition, replace = false): any[] {\n    const nodes = [];\n    const template = this.outletService.get(this.cxOutlet, position);\n    if (template || replace) {\n      const ref = this.vcr.createEmbeddedView(template || this.templateRef, {\n        $implicit: this.context,\n      });\n      nodes.push(...ref.rootNodes);\n    }\n    return nodes;\n  }\n\n  private renderStyleLink(nodes: any[]) {\n    const styleElement = this.outletStyleService.get(this.cxOutlet);\n\n    if (styleElement) {\n      let parentElement = nodes.find(node => node instanceof HTMLElement);\n\n      if (parentElement.shadowRoot) {\n        parentElement = parentElement.shadowRoot;\n      }\n      styleElement.nativeElement.rel = 'stylesheet';\n      this.renderer.appendChild(parentElement, styleElement.nativeElement);\n    }\n  }\n\n  private get context() {\n    // return specific context if provided\n    if (this._context) {\n      return this._context;\n    }\n    const ctx = (<any>this.vcr.injector).view.context;\n\n    // the context might already be given $implicit\n    // by a parent *ngIf or *ngFor\n    return ctx.$implicit || ctx;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import { ElementRef, OnInit, Input, Directive } from '@angular/core';\n\nimport { OutletStyleService } from '../outlet-style.service';\n\n@Directive({\n  selector: '[cxCssRef]',\n})\nexport class StyleRefDirective implements OnInit {\n  @Input() cxCssRef: string;\n\n  constructor(\n    private element: ElementRef,\n    private cssOutletService: OutletStyleService\n  ) {}\n\n  ngOnInit() {\n    this.cssOutletService.add(this.cxCssRef, this.element);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { StyleRefDirective } from './style-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [StyleRefDirective],\n  exports: [StyleRefDirective],\n})\nexport class StyleRefModule {}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(\n      // Email Standard RFC 5322:\n      /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/ // tslint:disable-line\n    )\n      ? null\n      : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(\n      '^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_+{};:.,]).{6,}$'\n    )\n      ? null\n      : { InvalidPassword: true };\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n  }\n\n  login(): void {\n    this.auth.authorize(\n      this.form.controls.userId.value,\n      this.form.controls.password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  CmsModule as CmsCoreModule,\n  Config,\n  ConfigModule,\n  defaultCmsModuleConfig,\n} from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCmsModuleConfig),\n    CmsCoreModule,\n  ],\n  providers: [{ provide: CmsConfig, useExisting: Config }],\n})\nexport class CmsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n  UserModule,\n} from '@spartacus/core';\nimport { CmsModule } from '../../../cms-structure/cms.module';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    CmsModule,\n    UserModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          selector: 'cx-login-form',\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoginComponentService {\n  private _isLogin = false;\n\n  get isLogin(): boolean {\n    return this._isLogin;\n  }\n\n  set isLogin(login: boolean) {\n    this._isLogin = login;\n  }\n}\n","import { Component } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { LoginComponentService } from './login.component.service';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent {\n  constructor(\n    private auth: AuthService,\n    private userService: UserService,\n    private loginService: LoginComponentService\n  ) {}\n\n  get user$(): Observable<User> {\n    return this.auth.getUserToken().pipe(\n      map(token => {\n        if (token && !!token.access_token && !this.loginService.isLogin) {\n          this.loginService.isLogin = true;\n          this.userService.load();\n        } else if (token && !token.access_token && this.loginService.isLogin) {\n          this.loginService.isLogin = false;\n        }\n        return token;\n      }),\n      filter(token => token && !!token.access_token),\n      switchMap(() => this.userService.get())\n    );\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ChangeDetectorRef,\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ComponentMapperService,\n  ContentSlotComponentData,\n  CxApiService,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private cd: ChangeDetectorRef,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      this.cd.detectChanges();\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: this.getCmsDataForComponent(),\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.renderer.removeChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-page-slot',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent {\n  @Input() set position(position: string) {\n    this.position$.next(position);\n    // add the position name as a css class so that\n    // layout can be applied to it, using the position based class.\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  /**\n   * observable with components (`ContentSlotComponentData[]`)\n   * for the current slot\n   */\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    ),\n    tap(components => this.addComponentClass(components))\n  );\n\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef\n  ) {}\n\n  // add a class to indicate whether the class is empty or not\n  private addComponentClass(components): void {\n    if (components && components.length > 0) {\n      this.renderer.addClass(this.hostElement.nativeElement, 'has-components');\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          selector: 'cx-login',\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.routing.go({ cxRoute: 'home' });\n          }\n        })\n      );\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { CmsPageConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const cartComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  emptyCartText: {\n    flexType: 'CMSParagraphComponent',\n    typeCode: 'CMSParagraphComponent',\n    content: `\n      <h2>Your shopping cart is empty</h2>\n      <p>Suggestions</p>\n      <ul>\n          <li>\n          Browse our products by selecting a category above\n          </li>\n      </ul>`,\n  },\n};\n\nexport const defaultCartPageConfig: CmsPageConfig = {\n  ignoreBackend: false,\n  pageId: 'cartPage',\n  type: 'ContentPage',\n  template: 'CartPageTemplate',\n  title: 'Cart',\n  slots: {\n    EmptyCartMiddleContent: {\n      componentIds: ['emptyCartText'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LanguageComponent: {\n    typeCode: 'CMSSiteContextComponent',\n    flexType: 'CMSSiteContextComponent',\n    context: 'LANGUAGE',\n  },\n  CurrencyComponent: {\n    typeCode: 'CMSSiteContextComponent',\n    flexType: 'CMSSiteContextComponent',\n    context: 'CURRENCY',\n  },\n  LanguageCurrencyComponent: {\n    typeCode: 'LanguageCurrencyComponent',\n    flexType: 'LanguageCurrencyComponent',\n  },\n  // TODO:#2811 - uncomment to enable\n  // StoreFinder: {\n  //   typeCode: 'CMSLinkComponent',\n  //   flexType: 'CMSLinkComponent',\n  //   linkName: 'Find a Store',\n  //   url: '/store-finder',\n  // },\n  BreadcrumbComponent: {\n    typeCode: 'BreadcrumbComponent',\n    flexType: 'BreadcrumbComponent',\n  },\n  Logo: {\n    typeCode: 'SimpleBannerComponent',\n    flexType: 'SimpleBannerComponent',\n    uid: 'logo',\n    media: {\n      mime: 'svg/image/svg+xml',\n      url: 'https://www.sap.com/dam/application/shared/logos/sap-logo-svg.svg',\n    },\n    urlLink: '/',\n  },\n  SearchBox: {\n    typeCode: 'SearchBoxComponent',\n    flexType: 'SearchBoxComponent',\n    uid: 'SearchBoxComponent',\n  },\n  MiniCart: {\n    typeCode: 'MiniCartComponent',\n    flexType: 'MiniCartComponent',\n    uid: 'MiniCartComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n  CategoryNavigationComponent: {\n    typeCode: 'CategoryNavigationComponent',\n    flexType: 'CategoryNavigationComponent',\n    uid: 'ElectronicsCategoryNavComponent',\n    navigationNode: {\n      uid: 'ElectronicsCategoryNavNode',\n      children: [\n        {\n          uid: 'CameraLensesNavNode',\n          title: 'Electronic catalog',\n          entries: [\n            {\n              itemId: 'CameraLensesCategoryLink',\n              itemSuperType: 'AbstractCMSComponent',\n              itemType: 'CMSLinkComponent',\n            },\n          ],\n        },\n      ],\n    },\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['SkipLinkComponent', 'HamburgerMenuComponent'],\n  },\n  SiteContext: {\n    componentIds: ['LanguageComponent', 'CurrencyComponent'],\n  },\n  SiteLinks: {\n    componentIds: ['StoreFinder'],\n  },\n  SiteLogo: {\n    componentIds: ['Logo'],\n  },\n  SearchBox: {\n    componentIds: ['SearchBox'],\n  },\n  MiniCart: {\n    componentIds: ['MiniCart'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n  NavigationBar: {\n    componentIds: ['CategoryNavigationComponent'],\n  },\n  BottomHeaderSlot: {\n    componentIds: ['BreadcrumbComponent'],\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const defaultPdpComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  CMSProductImages: {\n    typeCode: 'CMSProductImages',\n    flexType: 'CMSProductImages',\n    uid: 'CMSProductImages',\n  },\n};\n\nexport const defaultPdpSlots: CmsPageSlotsConfig = {\n  ProductDetails: {\n    componentIds: ['CMSProductImages'],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService\n  ) {}\n\n  // we print warn messages on missing layout configs\n  // only once to not polute the console log\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return this.breakpointService.breakpoint$.pipe(\n      switchMap(breakpoint =>\n        this.page$.pipe(\n          map(page => {\n            const config = this.getSlotConfig(\n              page.template,\n              'slots',\n              section,\n              breakpoint\n            );\n            if (config && config.slots) {\n              return config.slots;\n            } else if (!section) {\n              this.logMissingLayoutConfig(page);\n              return Object.keys(page.slots);\n            } else {\n              this.logMissingLayoutConfig(page, section);\n              return [];\n            }\n          })\n        )\n      ),\n      distinctUntilChanged()\n    );\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(Boolean));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (this.config.production) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section =>\n      section ? of(section) : this.pageLayoutService.templateName$\n    ),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  Title,\n  UserSignUp,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  subscription: Subscription;\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: [false],\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private auth: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n  }\n\n  submit(): void {\n    const {\n      firstName,\n      lastName,\n      email,\n      password,\n      titleCode,\n    } = this.userRegistrationForm.value;\n    const userRegisterFormData: UserSignUp = {\n      firstName,\n      lastName,\n      uid: email,\n      password,\n      titleCode,\n    };\n    this.userService.register(userRegisterFormData);\n\n    if (!this.subscription) {\n      this.subscription = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.globalMessageService\n      .get()\n      .pipe(filter(data => Object.keys(data).length > 0))\n      .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n        if (\n          globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR].some(\n            message => message === 'This field is required.'\n          )\n        ) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.globalMessageService.add(\n            { key: 'register.titleRequired' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  private matchPassword(ac: AbstractControl): { NotEqual: boolean } {\n    if (ac.get('password').value !== ac.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n  UserModule,\n} from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          selector: 'cx-register',\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule, UserModule } from '@spartacus/core';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(pageContext: PageContext, routes: Route[]): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageContext.id.startsWith('/') &&\n      pageContext.id.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageContext.id.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: pageContext,\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\n\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  PageContext,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\n\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    private routingService: RoutingService,\n    private cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.hasPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([hasPage, pageContext]) =>\n        hasPage\n          ? this.resolveCmsPageLogic(pageContext, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageContext.id)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.hasPage(notFoundCmsPageContext).pipe(\n      switchMap(hasNotFoundPage => {\n        if (hasNotFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() => this.resolveCmsPageLogic(pageContext, route, state))\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { Injectable } from '@angular/core';\nimport { Title, Meta, MetaDefinition } from '@angular/platform-browser';\nimport { PageMetaService, PageMeta, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { SeoMetaService } from './seo-meta.service';\nimport { htmlLangProvider } from './html-lang-provider';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { UserComponentModule } from '../../cms-components/user/index';\nimport { CmsModule } from '../../cms-structure/cms.module';\nimport { SeoModule } from '../../cms-structure/index';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/index';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/index';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    UserComponentModule,\n    CmsModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/index';\nimport { StyleRefModule } from '../cms-structure/outlet/style-ref/style-ref.module';\nimport { defaultLayoutConfig } from './config/default-layout-config';\nimport { LayoutConfig } from './config/layout-config';\nimport { MainModule } from './main/main.module';\n\nconst layoutModules = [OutletRefModule, StyleRefModule];\n\n@NgModule({\n  imports: [\n    MainModule,\n    ...layoutModules,\n    ConfigModule.withConfig(defaultLayoutConfig),\n  ],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [MainModule, ...layoutModules],\n})\nexport class LayoutModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          selector: 'cx-banner',\n        },\n        BannerComponent: {\n          selector: 'cx-banner',\n        },\n        SimpleBannerComponent: {\n          selector: 'cx-banner',\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { selector: 'cx-link' },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: { selector: 'cx-paragraph' },\n        CMSTabParagraphComponent: { selector: 'cx-paragraph' },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsService, CMSTabParagraphContainer } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent {\n  activeTabNum = 0;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            map(tab => {\n              if (!tab.flexType) {\n                tab.flexType = tab.typeCode;\n              }\n              return {\n                ...tab,\n                title: `CMSTabParagraphContainer.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: { selector: 'cx-tab-paragraph-container' },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport { Address, UserService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(private userService: UserService) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userService.updateUserAddress(addressId, address);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Address, UserService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(private userService: UserService) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userService.setAddressAsDefault(addressId);\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userService.deleteUserAddress(addressId);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          selector: 'cx-address-book',\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  styleUrls: ['./close-account-modal.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          selector: 'cx-close-account',\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ConsentTemplate } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  consentGiven = false;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consentTemplate && this.consentTemplate.currentConsent) {\n      if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n        this.consentGiven = false;\n      } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n        this.consentGiven = true;\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentChanged.emit({\n      given: !this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, skipWhile, tap, withLatestFrom } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userService: UserService,\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest(\n      this.userService.getConsentsResultLoading(),\n      this.userService.getGiveConsentResultLoading(),\n      this.userService.getWithdrawConsentResultLoading()\n    ).pipe(\n      map(\n        ([consentLoading, giveConsentLoading, withdrawConsentLoading]) =>\n          consentLoading || giveConsentLoading || withdrawConsentLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userService.getConsents().pipe(\n      tap(templateList => {\n        if (!this.consentsExists(templateList)) {\n          this.userService.loadConsents();\n        }\n      })\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(this.userService.getWithdrawConsentResultSuccess()),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userService.giveConsent(template.id, template.version);\n    } else {\n      this.userService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  onDone(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.userService.resetGiveConsentProcessState();\n    this.userService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          selector: 'cx-consent-management',\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss'],\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          selector: 'cx-forgot-password',\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userService.loadOrderDetails(orderCode);\n        } else {\n          this.userService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userService.getOrderDetails())\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order, Consignment, OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${\n              address.postalCode\n            }`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${\n              billingAddress.postalCode\n            }`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderDetailsHeadlineComponent: {\n          selector: 'cx-order-details-headline',\n        },\n        AccountOrderDetailsItemsComponent: {\n          selector: 'cx-order-details-items',\n        },\n        AccountOrderDetailsTotalsComponent: {\n          selector: 'cx-order-details-totals',\n        },\n        AccountOrderDetailsShippingComponent: {\n          selector: 'cx-order-details-shipping',\n        },\n      },\n    }),\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n})\nexport class OrderHistoryComponent implements OnInit, OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userService: UserService,\n    private translation: TranslationService\n  ) {}\n\n  orders$: Observable<OrderHistoryList>;\n  isLoaded$: Observable<boolean>;\n\n  private PAGE_SIZE = 5;\n\n  sortType: string;\n\n  ngOnInit(): void {\n    this.orders$ = this.userService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n      tap((orders: OrderHistoryList) => {\n        if (orders.pagination) {\n          this.sortType = orders.pagination.sort;\n        }\n      })\n    );\n\n    this.isLoaded$ = this.userService.getOrderHistoryListLoaded();\n  }\n\n  ngOnDestroy(): void {\n    this.userService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          selector: 'cx-order-history',\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { NgModule } from '@angular/core';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { OrderDetailsModule } from './order-details/order-details.module';\n\n@NgModule({\n  imports: [OrderHistoryModule, OrderDetailsModule],\n})\nexport class OrderModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit, OnDestroy {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  loading$: Observable<boolean>;\n\n  userServiceSub: Subscription;\n\n  constructor(\n    private userService: UserService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userService.getPaymentMethodsLoading();\n    this.userService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  ngOnDestroy(): void {\n    if (this.userServiceSub) {\n      this.userServiceSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          selector: 'cx-payment-methods',\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          selector: 'cx-reset-password-form',\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n  styleUrls: ['./update-email-form.component.scss'],\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n  styleUrls: ['./update-email.component.scss'],\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          selector: 'cx-update-email',\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n  styleUrls: ['./update-password-form.component.scss'],\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          selector: 'cx-update-password',\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n  styleUrls: ['./update-profile-form.component.scss'],\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          selector: 'cx-update-profile',\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest(\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home')\n    ).pipe(\n      map(([meta, textHome]) =>\n        meta.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: { selector: 'cx-breadcrumb' },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable, Optional } from '@angular/core';\nimport { CmsNavigationComponent, CmsService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable()\nexport class NavigationComponentService {\n  constructor(\n    protected cmsService: CmsService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsNavigationComponent>\n  ) {}\n\n  public getComponentData(): Observable<CmsNavigationComponent> {\n    return this.componentData.data$;\n  }\n\n  public createNavigation(): Observable<NavigationNode> {\n    return combineLatest(\n      this.getComponentData(),\n      this.getNavigationNode()\n    ).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  public getNavigationNode(): Observable<NavigationNode> {\n    return this.getComponentData().pipe(\n      filter(Boolean),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.getNavigationEntryItems(navigation, true);\n            }\n          }),\n          filter(Boolean),\n          map(items => this.createNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Get all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private getNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ) {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      this.processChildren(nodeData, itemsList);\n    }\n\n    if (root) {\n      const rootUid = nodeData.uid;\n      this.cmsService.loadNavigationItems(rootUid, itemsList);\n    }\n  }\n\n  private processChildren(node, itemsList): void {\n    for (const child of node.children) {\n      this.getNavigationEntryItems(child, false, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for display\n   * @param nodeData\n   * @param items\n   */\n  private createNode(nodeData: any, items: any): NavigationNode {\n    const node = {};\n\n    node['title'] = nodeData.title;\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.addLinkToNode(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = this.createChildren(nodeData, items);\n      node['children'] = children;\n    }\n\n    return node;\n  }\n\n  private addLinkToNode(node, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (entry.itemType === 'CMSLinkComponent' && item !== undefined) {\n      if (!node['title']) {\n        node['title'] = item.linkName;\n      }\n      node['url'] = item.url;\n      // if \"NEWWINDOW\", target is true\n      node['target'] = item.target;\n    }\n  }\n\n  private createChildren(node, items) {\n    const children = [];\n    for (const child of node.children) {\n      const childNode = this.createNode(child, items);\n      children.push(childNode);\n    }\n    return children;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationComponentService } from '../navigation/navigation.component.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode();\n\n  styleClass$: Observable<string> = this.service\n    .getComponentData()\n    .pipe(map(d => d.styleClass));\n\n  constructor(public service: NavigationComponentService) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n\n  constructor(private router: Router, private renderer: Renderer2) {\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe(() => this.clear());\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (this.openNodes.includes(<HTMLElement>event.currentTarget)) {\n      this.openNodes = this.openNodes.filter(n => n !== event.currentTarget);\n      this.renderer.removeClass(<HTMLElement>event.currentTarget, 'is-open');\n    } else {\n      this.openNodes.push(<HTMLElement>event.currentTarget);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationComponentService } from './navigation.component.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation();\n\n  styleClass$: Observable<string> = this.service\n    .getComponentData()\n    .pipe(map(d => d.styleClass));\n\n  constructor(public service: NavigationComponentService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsService,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\nimport { NavigationComponentService } from './navigation.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          selector: 'cx-navigation',\n          providers: [\n            {\n              provide: NavigationComponentService,\n              useClass: NavigationComponentService,\n              deps: [CmsService, CmsComponentData],\n            },\n          ],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, CmsService, ConfigModule } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationComponentService } from '../navigation/navigation.component.service';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          selector: 'cx-category-navigation',\n          providers: [\n            {\n              provide: NavigationComponentService,\n              useClass: NavigationComponentService,\n              deps: [CmsService, CmsComponentData],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationComponentService } from '../navigation/navigation.component.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode();\n\n  styleClass$: Observable<string> = this.service\n    .getComponentData()\n    .pipe(map(d => d.styleClass));\n\n  constructor(public service: NavigationComponentService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, CmsService, ConfigModule } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationComponentService } from '../navigation/navigation.component.service';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          selector: 'cx-footer-navigation',\n          providers: [\n            {\n              provide: NavigationComponentService,\n              useClass: NavigationComponentService,\n              deps: [CmsService, CmsComponentData],\n            },\n          ],\n        },\n      },\n    }),\n    GenericLinkModule,\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest(\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config)\n    ).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest(\n      this.getProductResults(config),\n      this.getProductSuggestions(config)\n    ).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a singe product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  ProductModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ProductModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          selector: 'cx-searchbox',\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import { Injectable } from '@angular/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  delay,\n  distinctUntilChanged,\n  map,\n  startWith,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Injectable()\nexport class SharedCarouselService {\n  MAX_WIDTH = 360;\n  MAX_ITEM_SIZE = 4;\n  SPEED = 250;\n\n  private itemSize$ = of(this.MAX_ITEM_SIZE);\n  private activeItem$ = of(0);\n  private activeItemWithDelay$ = of(0);\n\n  constructor() {}\n\n  getActiveItem(): Observable<number> {\n    return this.activeItem$;\n  }\n\n  getActiveItemWithDelay(): Observable<number> {\n    return this.activeItemWithDelay$;\n  }\n\n  getItemSize(): Observable<number> {\n    return this.itemSize$;\n  }\n\n  /**\n   * The number of items shown in the carousel can be calculated\n   * the standard implemenattions uses the element size to calculate\n   * the items that fit in the carousel.\n   * This method is called in `ngOnInit`.\n   */\n  setItemSize(window, nativeElement) {\n    this.itemSize$ = !window\n      ? of(this.MAX_ITEM_SIZE)\n      : fromEvent(window, 'resize').pipe(\n          map(() => (nativeElement as HTMLElement).clientWidth),\n          startWith((nativeElement as HTMLElement).clientWidth),\n          // avoid to much calls\n          debounceTime(100),\n          map((innerWidth: any) => {\n            const itemsPerPage = Math.round(innerWidth / this.MAX_WIDTH);\n            return itemsPerPage > 2 ? this.MAX_ITEM_SIZE : itemsPerPage;\n          }),\n          // only emit new size when the size changed\n          distinctUntilChanged()\n        );\n  }\n\n  setItemAsActive(newActiveItem: number) {\n    this.activeItem$ = this.itemSize$.pipe(\n      map(itemSize => this.setItem(newActiveItem, itemSize))\n    );\n  }\n\n  setPreviousItemAsActive(): void {\n    this.activeItem$ = this.activeItem$.pipe(\n      withLatestFrom(this.itemSize$),\n      map(([activeItem, itemSize]: [number, number]) =>\n        this.setItem(activeItem - itemSize, itemSize)\n      )\n    );\n  }\n\n  setNextItemAsActive(): void {\n    this.activeItem$ = this.activeItem$.pipe(\n      withLatestFrom(this.itemSize$),\n      map(([activeItem, itemSize]: [number, number]) =>\n        this.setItem(activeItem + itemSize, itemSize)\n      )\n    );\n  }\n\n  private setItem(newActiveItem: number, itemSize: number) {\n    this.activeItemWithDelay$ = of(newActiveItem).pipe(\n      delay(this.getDelayValue(itemSize))\n    );\n    return newActiveItem;\n  }\n\n  private getDelayValue(itemSize) {\n    return (itemSize - 1) * this.SPEED;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsProductCarouselComponent,\n  Product,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Injectable()\nexport class ProductCarouselService {\n  private items$: Observable<Observable<Product>[]>;\n  private title$: Observable<string>;\n\n  constructor(\n    protected component: CmsComponentData<CmsProductCarouselComponent>,\n    private productService: ProductService\n  ) {}\n\n  getTitle(): Observable<string> {\n    return this.title$;\n  }\n\n  fetchTitle(): void {\n    this.title$ = this.component.data$.pipe(\n      map(data => {\n        return data.title;\n      })\n    );\n  }\n\n  getItems(): Observable<Observable<Product>[]> {\n    return this.items$;\n  }\n\n  /**\n   * Maps the item codes from CMS component to an array of `Product` observables.\n   */\n  fetchItems(): void {\n    this.items$ = this.component.data$.pipe(\n      filter(data => data && !!data.productCodes),\n      map(data => {\n        const productCodes = data.productCodes.split(' ');\n        return productCodes.map(code => this.productService.get(code));\n      })\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnInit,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { SharedCarouselService } from '../shared-carousel.service';\nimport { ProductCarouselService } from './product-carousel.component.service';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent implements OnInit {\n  private window: Window;\n\n  constructor(\n    winRef: WindowRef,\n    private el: ElementRef,\n    public productCarouselService: ProductCarouselService,\n    public sharedCarouselService: SharedCarouselService\n  ) {\n    this.window = winRef.nativeWindow;\n  }\n\n  ngOnInit() {\n    this.productCarouselService.fetchTitle();\n    this.sharedCarouselService.setItemSize(this.window, this.el.nativeElement);\n    this.productCarouselService.fetchItems();\n    this.sharedCarouselService.setItemAsActive(0);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ProductService,\n  UrlModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { SharedCarouselService } from '../shared-carousel.service';\nimport { ProductCarouselComponent } from './product-carousel.component';\nimport { ProductCarouselService } from './product-carousel.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          selector: 'cx-product-carousel',\n          providers: [\n            {\n              provide: ProductCarouselService,\n              useClass: ProductCarouselService,\n              deps: [CmsComponentData, ProductService],\n            },\n            {\n              provide: SharedCarouselService,\n              useClass: SharedCarouselService,\n              deps: [],\n            },\n          ],\n        },\n      },\n    }),\n    UrlModule,\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  ProductReference,\n  ProductReferenceService,\n  RoutingService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Injectable()\nexport class ProductReferencesService {\n  private title$: Observable<string>;\n  private items$: Observable<ProductReference[]>;\n  private displayProductTitles$: Observable<string>;\n  private displayProductPrices$: Observable<string>;\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    private referenceService: ProductReferenceService,\n    private routerService: RoutingService\n  ) {}\n\n  getTitle(): Observable<string> {\n    return this.title$;\n  }\n\n  fetchTitle(): void {\n    this.title$ = this.component.data$.pipe(\n      map(data => {\n        return data.title;\n      })\n    );\n  }\n\n  getDisplayProductTitles(): Observable<boolean> {\n    return this.displayProductTitles$.pipe(\n      map(data => Boolean(JSON.parse(data.toLowerCase())))\n    );\n  }\n\n  fetchDisplayProductTitles(): void {\n    this.displayProductTitles$ = this.component.data$.pipe(\n      map(data => {\n        return data.displayProductTitles;\n      })\n    );\n  }\n\n  getDisplayProductPrices(): Observable<boolean> {\n    return this.displayProductPrices$.pipe(\n      map(data => Boolean(JSON.parse(data.toLowerCase())))\n    );\n  }\n\n  fetchDisplayProductPrices(): void {\n    this.displayProductPrices$ = this.component.data$.pipe(\n      map(data => {\n        return data.displayProductPrices;\n      })\n    );\n  }\n\n  getReferenceType(): Observable<string> {\n    return this.component.data$.pipe(map(data => data.productReferenceTypes));\n  }\n\n  getProductCode(): Observable<string> {\n    return this.routerService\n      .getRouterState()\n      .pipe(map(data => data.state.params.productCode));\n  }\n\n  getReferenceList(): Observable<ProductReference[]> {\n    return this.items$;\n  }\n\n  setReferenceList(pageSize?: number): void {\n    this.items$ = combineLatest(\n      this.getProductCode(),\n      this.getReferenceType()\n    ).pipe(\n      map(data => ({ productCode: data[0], referenceType: data[1] })),\n      switchMap(data => {\n        return this.referenceService.get(\n          data.productCode,\n          data.referenceType,\n          pageSize\n        );\n      })\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnInit,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { SharedCarouselService } from '../shared-carousel.service';\nimport { ProductReferencesService } from './product-references.component.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent implements OnInit {\n  private window: Window;\n\n  constructor(\n    winRef: WindowRef,\n    private el: ElementRef,\n    public productReferencesService: ProductReferencesService,\n    public sharedCarouselService: SharedCarouselService\n  ) {\n    this.window = winRef.nativeWindow;\n  }\n\n  ngOnInit() {\n    this.productReferencesService.fetchTitle();\n    this.productReferencesService.fetchDisplayProductTitles();\n    this.productReferencesService.fetchDisplayProductPrices();\n    this.sharedCarouselService.setItemSize(this.window, this.el.nativeElement);\n    this.productReferencesService.setReferenceList();\n    this.sharedCarouselService.setItemAsActive(0);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ProductReferenceService,\n  RoutingService,\n  UrlModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { SharedCarouselService } from '../shared-carousel.service';\nimport { ProductReferencesComponent } from './product-references.component';\nimport { ProductReferencesService } from './product-references.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          selector: 'cx-product-references',\n          providers: [\n            {\n              provide: ProductReferencesService,\n              useClass: ProductReferencesService,\n              deps: [CmsComponentData, ProductReferenceService, RoutingService],\n            },\n            {\n              provide: SharedCarouselService,\n              useClass: SharedCarouselService,\n              deps: [],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\nconst WAITING_CLASS = 'is-waiting';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  waiting: HTMLElement;\n\n  product$: Observable<Product> = this.currentProductService\n    .getProduct()\n    .pipe(filter(Boolean));\n\n  private _imageContainer$ = new BehaviorSubject(null);\n\n  imageContainer$ = combineLatest(this.product$, this._imageContainer$).pipe(\n    map(([product, container]) =>\n      container\n        ? container\n        : product.images && product.images.PRIMARY\n        ? product.images.PRIMARY\n        : {}\n    )\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  showImage(event: MouseEvent, imageContainer): void {\n    this.startWaiting(<HTMLElement>event.target);\n    this._imageContainer$.next(imageContainer);\n  }\n\n  isMainImageContainer(currentContainer): Observable<boolean> {\n    return this.imageContainer$.pipe(\n      map(\n        (container: any) =>\n          container &&\n          container.zoom &&\n          currentContainer.zoom &&\n          container.zoom.url === currentContainer.zoom.url\n      )\n    );\n  }\n\n  loadHandler(): void {\n    this.clearWaitList();\n  }\n\n  private startWaiting(el: HTMLElement): void {\n    this.clearWaitList();\n    el.classList.add(WAITING_CLASS);\n    this.waiting = el;\n  }\n\n  private clearWaitList(): void {\n    if (this.waiting) {\n      this.waiting.classList.remove(WAITING_CLASS);\n      delete this.waiting;\n    }\n  }\n}\n","export enum ProductDetailOutlets {\n  SUMMARY = 'PDP.SUMMARY',\n  IMAGES = 'PDP.IMAGES',\n  TITLE = 'PDP.TITLE',\n  RATING = 'PDP.RATING',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n}\n\nexport enum ProductTabsOutlets {\n  DESCRIPTION = 'PDP.DESCRIPTION',\n  SPECIFICATIONS = 'PDP.SPECIFICATIONS',\n  REVIEWS = 'PDP.REVIEWS',\n  SHIPPING = 'PDP.SHIPPING',\n}\n","import { Component, OnInit } from '@angular/core';\nimport { CmsService, Page, Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\nimport { ProductDetailOutlets } from '../../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-details',\n  templateUrl: './product-details.component.html',\n})\nexport class ProductDetailsComponent implements OnInit {\n  static outlets = ProductDetailOutlets;\n\n  product$: Observable<Product>;\n  page$: Observable<Page>;\n\n  get outlets(): any {\n    return ProductDetailsComponent.outlets;\n  }\n\n  constructor(\n    protected currentPageService: CurrentProductService,\n    private cmsService: CmsService\n  ) {}\n\n  ngOnInit(): void {\n    this.product$ = this.currentPageService.getProduct();\n\n    this.page$ = this.cmsService.getCurrentPage();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { TranslatePipe, TranslationService } from '@spartacus/core';\nimport { ProductDetailOutlets } from '../../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [TranslatePipe],\n})\nexport class ProductSummaryComponent implements OnInit {\n  static outlets = ProductDetailOutlets;\n\n  itemCount = 1;\n  reviewsTabAvailable: boolean;\n\n  @Input() product: any;\n\n  get outlets() {\n    return ProductSummaryComponent.outlets;\n  }\n\n  updateCount(value) {\n    this.itemCount = value;\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Get Tab by label if exists on page\n  getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n\n  // Click to activate tab if not already active\n  clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('productDetails.reviews')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n\n        const reviewsComponent = this.getReviewsComponent();\n\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          reviewsComponent.scrollIntoView();\n        }\n      });\n  }\n\n  constructor(\n    protected translatePipe: TranslatePipe,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.reviewsTabAvailable = !!this.getReviewsComponent();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CmsModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport {\n  FormComponentsModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule, CartSharedModule } from '../../cart/index';\nimport { ProductDetailsComponent } from './container/product-details.component';\nimport { ProductSummaryComponent } from './product-summary/product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    CmsModule,\n    AddToCartModule,\n    OutletModule,\n    I18nModule,\n    FormComponentsModule,\n    MediaModule,\n    StarRatingModule,\n    UrlModule,\n    PageSlotModule,\n  ],\n  declarations: [ProductDetailsComponent, ProductSummaryComponent],\n  exports: [ProductDetailsComponent, ProductSummaryComponent],\n})\nexport class ProductDetailsModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  ProductSearchPage,\n  ProductSearchService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit {\n  query: string;\n  categoryCode: string;\n  brandCode: string;\n  itemPerPage: number;\n\n  model$: Observable<ProductSearchPage>;\n  searchConfig: SearchConfig = {};\n  categoryTitle: string;\n  options: SearchConfig;\n  updateParams$: Observable<Params>;\n  gridMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    private activatedRoute: ActivatedRoute,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  update(): void {\n    const { queryParams } = this.activatedRoute.snapshot;\n    this.options = this.createOptionsByUrlParams();\n\n    if (this.categoryCode && this.categoryCode !== queryParams.categoryCode) {\n      this.query = ':relevance:category:' + this.categoryCode;\n    }\n    if (this.brandCode && this.brandCode !== queryParams.brandCode) {\n      this.query = ':relevance:brand:' + this.brandCode;\n    }\n    if (!this.query && queryParams.query) {\n      this.query = queryParams.query;\n    }\n    this.search(this.query, this.options);\n  }\n\n  createOptionsByUrlParams(): SearchConfig {\n    const { queryParams } = this.activatedRoute.snapshot;\n    const newConfig = {\n      ...queryParams,\n    };\n    delete newConfig.query;\n    const options = {\n      ...this.searchConfig,\n      ...newConfig,\n      pageSize: this.itemPerPage || 10,\n    };\n    if (this.categoryCode) {\n      options.categoryCode = this.categoryCode;\n    }\n    if (this.brandCode) {\n      options.brandCode = this.brandCode;\n    }\n\n    return options;\n  }\n\n  ngOnInit(): void {\n    this.updateParams$ = this.activatedRoute.params.pipe(\n      tap(params => {\n        this.categoryCode = params.categoryCode;\n        this.brandCode = params.brandCode;\n        this.query = params.query;\n        this.update();\n      })\n    );\n\n    this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n      this.gridMode$.next(\n        template === 'ProductGridPageTemplate' ? ViewModes.Grid : ViewModes.List\n      );\n    });\n\n    // clean previous search result\n    this.productSearchService.clearResults();\n\n    this.model$ = this.productSearchService.getResults().pipe(\n      tap(searchResult => {\n        if (Object.keys(searchResult).length === 0) {\n          this.search(this.query, this.options);\n        } else {\n          this.getCategoryTitle(searchResult);\n        }\n      }),\n      filter(searchResult => Object.keys(searchResult).length > 0)\n    );\n  }\n\n  protected getCategoryTitle(data: ProductSearchPage): string {\n    if (data.breadcrumbs && data.breadcrumbs.length > 0) {\n      this.categoryTitle = data.breadcrumbs[0].facetValueName;\n    } else if (!this.query.includes(':relevance:')) {\n      this.categoryTitle = this.query;\n    }\n    if (this.categoryTitle) {\n      this.categoryTitle =\n        data.pagination.totalResults + ' results for ' + this.categoryTitle;\n    }\n\n    return this.categoryTitle;\n  }\n\n  viewPage(pageNumber: number): void {\n    this.search(this.query, { currentPage: pageNumber });\n  }\n\n  sortList(sortCode: string): void {\n    this.search(this.query, { sortCode: sortCode });\n  }\n\n  setGridMode(mode: ViewModes): void {\n    this.gridMode$.next(mode);\n  }\n\n  protected search(query: string, options?: SearchConfig): void {\n    if (this.query) {\n      if (options) {\n        // Overide default options\n        this.searchConfig = {\n          ...this.searchConfig,\n          ...options,\n        };\n      }\n\n      this.productSearchService.search(query, this.searchConfig);\n    }\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  Facet,\n  ProductSearchPage,\n  ProductSearchService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\n\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  updateParams$: Observable<Params>;\n\n  get visibleFacets(): Facet[] {\n    if (!this.searchResult.facets) {\n      return [];\n    }\n    return this.searchResult.facets.filter(facet => facet.visible);\n  }\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productSearchService: ProductSearchService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.updateParams$ = this.activatedRoute.params.pipe(\n      tap(params => {\n        this.activeFacetValueCode = params.categoryCode || params.brandCode;\n      })\n    );\n\n    this.searchResult$ = this.productSearchService.getResults().pipe(\n      tap(searchResult => {\n        this.searchResult = searchResult;\n        if (this.searchResult.facets) {\n          this.searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      }),\n      filter(searchResult => Object.keys(searchResult).length > 0)\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productSearchService.search(this.queryCodec.decodeValue(query));\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  FormComponentsModule,\n  ListNavigationModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: { selector: 'cx-product-list' },\n        SearchResultsListComponent: { selector: 'cx-product-list' },\n        ProductRefinementComponent: { selector: 'cx-product-facet-navigation' },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    FormComponentsModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { CurrentProductService } from '../../current-product.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(Boolean),\n    switchMap(product => this.reviewService.getByProductCode(product.code)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule } from '@spartacus/core';\nimport {\n  FormComponentsModule,\n  StarRatingModule,\n} from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    FormComponentsModule,\n    I18nModule,\n    StarRatingModule,\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsModule,\n  ConfigModule,\n  I18nModule,\n  ProductService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { PageComponentModule } from '../../../cms-structure/page/index';\nimport { CartSharedModule } from '../../cart/index';\n// guards\nimport { ProductAttributesComponent } from './product-attributes/product-attributes.component';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsComponent } from './product-reviews/product-reviews.component';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    CmsModule,\n    OutletModule,\n    ProductReviewsModule,\n    ProductDetailsTabModule,\n    PageComponentModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          selector: 'cx-product-details-tab',\n        },\n        ProductSpecsTabComponent: {\n          selector: 'cx-product-attributes',\n        },\n        ProductReviewsTabComponent: {\n          selector: 'cx-product-reviews',\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent, ProductReviewsComponent],\n  entryComponents: [ProductAttributesComponent],\n  providers: [ProductService, WindowRef, RoutingService],\n})\nexport class ProductTabsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductImages: {\n          selector: 'cx-product-images',\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport {\n  ProductCarouselModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\n\n@NgModule({\n  imports: [\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    // TODO:#2811 - uncomment to enable\n    // StoreFinderModule,\n    ProductImagesModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Cart, CartService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-cart-page',\n  templateUrl: './cart-page.component.html',\n})\nexport class CartPageComponent implements OnInit {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CartDetailsModule } from '../../cms-components/cart/cart-details/cart-details.module';\nimport { CmsModule, CmsPageGuard } from '../../cms-structure/index';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/index';\nimport { CartPageComponent } from './cart-page.component';\n\nconst routes: Routes = [\n  {\n    path: null,\n    canActivate: [CmsPageGuard],\n    component: CartPageComponent,\n    data: { cxRoute: 'cart' },\n  },\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    PageLayoutModule,\n    CartDetailsModule,\n    OutletRefModule,\n    CmsModule,\n  ],\n  declarations: [CartPageComponent],\n})\nexport class CartPageModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-details-page',\n  templateUrl: './product-details-page.component.html',\n})\nexport class ProductDetailsPageComponent {}\n","import {\n  UrlSegment,\n  UrlMatchResult,\n  Route,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName [ / ** ]'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ProductDetailsModule } from '../../cms-components/product/product-details/index';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\nimport { ProductDetailsPageComponent } from './product-details-page.component';\n\nconst routes: Routes = [\n  {\n    path: null,\n    canActivate: [CmsPageGuard],\n    component: ProductDetailsPageComponent,\n    data: { cxRoute: 'product' },\n  },\n  {\n    matcher: suffixUrlMatcher,\n    canActivate: [CmsPageGuard],\n    component: ProductDetailsPageComponent,\n    data: {\n      cxSuffixUrlMatcher: {\n        marker: 'p',\n        paramName: 'productCode',\n      },\n    },\n  },\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    ProductDetailsModule,\n    PageLayoutModule,\n    OutletRefModule,\n  ],\n  declarations: [ProductDetailsPageComponent],\n  exports: [ProductDetailsPageComponent],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { Provider } from '@angular/core';\nimport { Meta } from '@angular/platform-browser';\nimport {\n  mediaServerConfigFromMetaTagFactory,\n  occServerConfigFromMetaTagFactory,\n  provideConfigFactory,\n} from '@spartacus/core';\n\nexport function provideConfigFromMetaTags(): Provider[] {\n  return [\n    provideConfigFactory(occServerConfigFromMetaTagFactory, [Meta]),\n    provideConfigFactory(mediaServerConfigFromMetaTagFactory, [Meta]),\n  ];\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-order-confirmation-page',\n  templateUrl: './order-confirmation-page.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationPageComponent {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from '@spartacus/core';\nimport { OrderConfirmationPageGuard } from '../../cms-components/checkout/guards/order-confirmation-page.guard';\nimport { OrderConfirmationModule } from '../../cms-components/checkout/index';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { OutletRefModule } from '../../cms-structure/outlet/index';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { OrderConfirmationPageComponent } from './order-confirmation-page.component';\n\nconst routes: Routes = [\n  // TODO: as soon as the components are moved to CMS driven components we can drop this specific OrderConfirmationPageComponent\n  {\n    path: null,\n    canActivate: [AuthGuard, CmsPageGuard, OrderConfirmationPageGuard],\n    component: OrderConfirmationPageComponent,\n    data: { cxRoute: 'orderConfirmation' },\n  },\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OrderConfirmationModule,\n    PageLayoutModule,\n    OutletRefModule,\n    RouterModule.forChild(routes),\n  ],\n  declarations: [OrderConfirmationPageComponent],\n  exports: [OrderConfirmationPageComponent],\n})\nexport class OrderConfirmationPageModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n  search: { paths: ['search/:query'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'] },\n  logout: { paths: ['logout'] },\n  register: { paths: ['login/register'] },\n  forgotPassword: { paths: ['login/forgot-password'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n  product: {\n    paths: ['product/:productCode'],\n    paramsMapping: { productCode: 'code' },\n  },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n  termsAndConditions: { paths: ['termsAndConditions'] },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { NgModule } from '@angular/core';\nimport {\n  ConfigModule,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [\n    CoreRoutingModule,\n    ConfigModule.withConfig(defaultRoutingConfig),\n    CmsRouteModule,\n  ],\n})\nexport class RoutingModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  AuthModule,\n  ConfigModule,\n  CxApiModule,\n  I18nModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SmartEditModule,\n  StateModule,\n} from '@spartacus/core';\nimport { CmsLibModule } from './cms-components/index';\nimport { CartPageModule } from './cms-pages/cart-page/cart-page.module';\nimport { OrderConfirmationPageModule } from './cms-pages/order-confirmation-page/order-confirmation-page.module';\nimport { ProductDetailsPageModule } from './cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from './cms-pages/product-listing-page/product-listing-page.module';\nimport { CmsModule } from './cms-structure/cms.module';\nimport { CmsRouteModule } from './cms-structure/routing/cms-route/cms-route.module';\nimport { RoutingModule } from './cms-structure/routing/routing.module';\nimport { provideConfigFromMetaTags } from './config/provide-config-from-meta-tags';\nimport { StorefrontModuleConfig } from './config/storefront-config';\nimport { LayoutModule } from './layout/layout.module';\n\n@NgModule({\n  imports: [\n    OccModule,\n    StateModule,\n    AuthModule.forRoot(),\n    CmsLibModule,\n    CmsModule,\n    CmsRouteModule,\n    ConfigModule.forRoot(),\n    RoutingModule,\n    CxApiModule,\n    SmartEditModule.forRoot(),\n    PersonalizationModule.forRoot(),\n    I18nModule.forRoot(),\n    LayoutModule,\n    // pages\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    CartPageModule, // as longs as we do not have #2661 in place we need a specific cart page module\n    OrderConfirmationPageModule, // temp add here till it gets removed by #2691\n  ],\n  providers: [...provideConfigFromMetaTags()],\n  declarations: [],\n})\nexport class StorefrontModule {\n  static withConfig(config?: StorefrontModuleConfig): ModuleWithProviders {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config), ...provideConfigFromMetaTags()],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  cartComponents,\n  defaultCartPageConfig,\n} from './default-cart-page.config';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\nimport { defaultPdpComponents, defaultPdpSlots } from './default-pdp-config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n        ...cartComponents,\n        ...defaultPdpComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n        ...defaultPdpSlots,\n      },\n      pages: [defaultCartPageConfig],\n    },\n  };\n}\n"]}