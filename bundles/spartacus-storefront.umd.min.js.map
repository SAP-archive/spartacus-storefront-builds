{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consents-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/form/anonymous-consent-form.component.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-root/asm-root.component.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/assisted-service.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","CLOSE","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","EXPAND","COLLAPSE","RESET","CIRCLE","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","Injectable","args","providedIn","WindowRef","IconConfig","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","undefined","staticStyleClasses","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","NgbModal","AnonymousConsentsDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","ICON_TYPE","requiredConsents","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","closeModal","rejectAll","_this","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","forEach","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","tslib_1.__values","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","anonymousConsentsFeature","ANONYMOUS_CONSENTS_FEATURE","templatesUpdated$","getTemplatesUpdated","updated","toggleAnonymousConsentsBannerVisibility","bannerVisible$","isAnonymousConsentsBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","cmsComponents","component","entryComponents","CurrentProductService","routingService","productService","getProduct","getRouterState","map","state","params","filter","switchMap","productCode","get","RoutingService","ProductService","AddedToCartDialogComponent","cartService","fb","quantity","form","group","entry$","entry","code","product","controls","setValue","setControl","createEntryFormGroup","markAsPristine","dismissModal","removeEntry","item","updateEntry","updatedQuantity","entryNumber","CartService","FormBuilder","ViewChild","static","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","increment","cartEntry$","getEntry","subscription","setStockInfo","markForCheck","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","getActive","loaded$","getLoaded","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","decorators","Optional","AutoFocusDirective","hostElement","ngAfterViewInit","focus","Directive","AutoFocusDirectiveModule","CardComponent","deleteCard","EventEmitter","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","emit","delete","setDefault","send","edit","Output","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","clientWidth","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","Math","floor","CarouselComponent","el","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","isDevMode","size$","console","xs","sm","md","lg","xl","DEFAULT_BREAKPOINTS","BREAKPOINT","BreakpointService","getSize","breakpoint","breakpoints","window","fromEvent","debounceTime","startWith","target","event","getBreakpoint","innerWidth","of","windowWidth","getClosest","reverse","br","nativeWindow","LayoutConfig","MediaService","breakpointService","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","altText","mediaFormats","reduce","set","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","renderer","async","cartIsLoading","isValueChangeable","update","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","valueChanges","manualChange","Number","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","setProperty","input","onKeyDown","handlers","ArrowDown","decrement","ArrowUp","preventDefault","stopPropagation","onBlur","onFocus","setFocus","registerOnTouched","fn","registerOnChange","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","Renderer2","OnlyNumberDirective","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","onKeyUp","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","replace","HostListener","OnlyNumberDirectiveModule","ItemCounterModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","GenericLinkModule","PaginationComponent","hideOnSinglePage","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","showPagination","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","CMSSiteContextComponent","useClass","deps","SiteContextModule","StarRatingComponent","change","initialRate","setRate","rating","force","setAttribute","style","saveRate","StarRatingModule","FormUtils","isNotValidField","formControlName","submitted","control","invalid","touched","dirty","CustomFormValidators","emailDomainValidator","match","InvalidEmail","emailValidator","EMAIL_PATTERN","passwordValidator","PASSWORD_PATTERN","InvalidPassword","matchPassword","NotEqual","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","PromotionsComponent","PromotionsModule","CartItemListComponent","isReadOnly","hasHeader","potentialProductPromotions","getPotentialProductPromotionsForItem","entryPromotions","_c","_d","promotion","description","consumedEntries","_e","e_2","_f","consumedEntry","isConsumedByEntry","consumendEntryNumber","orderEntryNumber","entries","CartItemComponent","compact","view","isProductOutOfStock","updateItem","removeItem","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","entries$","getEntries","cartLoaded$","getAllPromotionsForCart","cart","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","appliedProductPromotions","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","go","cxRoute","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","slots","slot","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","CartComponentModule","CartModule","FREE","LEAST_EXPENSIVE","MOST_EXPENSIVE","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","checkout","steps","name","routeName","CheckoutStepType","express","defaultDeliveryMode","DeliveryModePreferences","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","leastExpensiveFound","deliveryMode","codeFound","getPreferredDeliveryMode","sort","isExpressCheckout","isGuestCheckout","snapshot","join","stepRoute","getRouteConfig","paths","findIndex","CheckoutConfig","RoutingConfigService","CheckoutAuthGuard","authService","authRedirectService","checkoutConfigService","getUserToken","getAssignedUser","token","user","access_token","isGuestCart","forced","reportAuthGuard","AuthService","AuthRedirectService","CheckoutDetailsService","checkoutService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","uid","OCC_USER_ID_ANONYMOUS","guid","cartId","getCheckoutDetailsLoaded$","loadCheckoutDetails","shareReplay","getCheckoutDetailsLoaded","skipWhile","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","keys","success","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","UserAddressService","UserPaymentService","CheckoutGuard","router","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","guards","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","warn","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","Validators","required","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","withLatestFrom","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","valid","back","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","selectedCountry$","BehaviorSubject","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","goBack","closeForm","payment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","clearAddressVerificationResults","decision","MSG_TYPE_ERROR","openSuggestedAddress","year","Date","getFullYear","j","toString","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","then","catch","verifyAddress","paymentDetails","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","getCardIcon","msg","field","cardLabels","title","img","actions","header","goNext","goPrevious","paymentMethodSelected","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","UserService","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","getOrderDetails","order","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","userService","showCancelBtn","submitAddress","backToAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","obj","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","cards","goTo","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","tempAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","addressSelected","addNewAddress","setAddressSub","selectedAddressSub","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","outlet","position","OutletPosition","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","layoutModules","LayoutModule","OutletDirective","vcr","_context","nodes","renderTemplate","cxOutlet","ref","createEmbeddedView","$implicit","rootNodes","ViewContainerRef","OutletModule","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","componentType","Promise","resolve","split","path","script","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","CmsConfig","Inject","DOCUMENT","PLATFORM_ID","CxApiService","auth","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","kyma","occEndpoints","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","userAddress","userConsent","userOrder","userPayment","ngZone","CartDataService","CmsService","PageMetaService","FeatureConfigService","KymaService","OccEndpointsService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","CurrencyService","LanguageService","BaseSiteService","UserConsentService","UserOrderService","NgZone","ComponentWrapperDirective","componentMapper","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","cmpRef","createComponent","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","element","parentElement","P","reject","fulfilled","rejected","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","DynamicAttributeService","PageComponentModule","PageSlotComponent","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","a","addComponentClass","addClass","PageSlotModule","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","breakpoint$","resolveSlots","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","layoutSlots","pageTemplateConfig","getSlotConfigForSection","getResponsiveSlotConfig","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","cls","currentClass","removeClass","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","useFactory","APP_INITIALIZER","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","JsonLdScriptFactory","rendererFactory","build","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","JSON","stringify","scriptElement","getElementById","createRenderer","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","sanitizer","writeJsonLd","html","jsonLD","bypassSecurityTrustHtml","DomSanitizer","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","AnonymousConsentFormComponent","consentGiven$","accordionExpanded","accordionHeight","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentGivenTranslation$","toggleAccordion","keyEvent","expand","accordionContent","clientHeight","isRequired","templateId","AnonymousConsentsModule","StorefrontComponent","isExpanded$","navigateSubscription","isNavigating","val","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","AsmMainUiComponent","asmService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","searchResultsLoading$","getCustomerSearchResultsLoading","customer$","handleCustomerSessionStartRedirection","isCustomerEmulationToken","loginCustomerSupportAgent","userId","password","authorizeCustomerSupporAgent","logoutCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","updateAsmUiState","visible","AsmService","AsmRootComponent","asmUi$","getAsmUiState","queryParamMap","queryParams","showUi","CSAgentLoginFormComponent","submitClicked","csAgentTokenLoading","submitEvent","onSubmit","isNotValid","CustomerSelectionComponent","searchTerm","customerSearchReset","getCustomerSearchResults","handleSearchResults","customerHit","toLowerCase","customerSearch","query","AssistedServiceModule","AsmComponent","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","first","Error","endWith","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesService","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","children","resetConfig","CmsPageGuard","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","protectedRoutesGuard","getCmsPage","getNextPageContext","getPage","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","SemanticPathService","ProtectedRoutesGuard","cmsRoute","addCmsRoute","ɵ0","CmsRouteModule","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","brand","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","trim","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tab","select","tabNum","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","featureConfigService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","isLevel","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","AuthGuard","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","onSuccess","getRemoveUserResultError","onError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ConsentManagementFormComponent","consentGiven","isAnonymousConsentsEnabled","isLevel13","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","isFeatureEnabled","isFeatureLevel","loading$","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","isUserLoggedIn","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","OrderDetailsService","userOrderService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","bufferSize","refCount","OrderDetailHeadlineComponent","orderDetailsService","order$","OrderDetailItemsComponent","getConsignmentProducts","consignment","products","orderEntry","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentStatus","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","moduleComponents","ɵ1","OrderDetailsModule","forChild","ɵ0$1","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","features","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","isLoaded$","getOrderHistoryListLoaded","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","AccountOrderHistoryComponent","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","validator","isPasswordReset","reset","resetPassword","ac","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","logout","UpdateEmailModule","UpdatePasswordFormComponent","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","createNode","nodeData","root","itemsList","superType","itemSuperType","itemId","processChildren","rootUid","loadNavigationItems","node","child","addLinkToNode","createChildren","itemType","linkName","getLink","categoryCode","transform","childNode","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","relatedTarget","ownerDocument","activeElement","matches","wrapper","querySelector","navBar","removeStyle","offsetLeft","offsetWidth","setStyle","navs","tagName","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","iif","footerLink","openDialog","FooterNavigationModule","SearchBoxComponentService","searchService","search","minCharactersBeforeRequest","displayProducts","pageSize","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","contains","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","launchSearchPage","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","ignoreCloseEvent","results$","config$","c","blur","avoidReopen","launchSearchResult","disableClose","HighlightPipe","Pipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","submit","registerGuest","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","source","ProductCarouselComponent","productCodes","ProductCarouselModule","ProductReferencesComponent","current","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","ProductIntroComponent","reviewsTabAvailable","product$","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","scrollIntoView","behavior","click","h3Elements","h3Element","ProductIntroModule","Grid","List","ProductViewComponent","modeChange","viewMode","newMode","ViewModes","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_CATEGORY","RELEVANCE_BRAND","searchResults$","searchResult","searchByRouting$","x","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","infiniteScroll","active","setViewMode","ViewConfig","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","Map","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","slice","ProductGridItemComponent","ProductListItemComponent","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","showMoreButton","configProductLimit","productLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","defaultScrollConfig","ViewConfigModule","forRoot","ngModule","provideConfig","ProductListModule","CMSProductListComponent","SearchResultsListComponent","ProductRefinementComponent","InfiniteScrollModule","INTRO","PRICE","SHARE","SUMMARY","ProductSummaryComponent","outlets","ProductDetailOutlets","ProductSummaryModule","ProductAttributesComponent","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","alias","reviewerName","ProductReviewsModule","ProductReviewsTabComponent","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductTabsModule","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","isActive","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ScheduleComponent","storeDataService","displayDays","changes","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","viewStore","prepareRouteUrl","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","markerIndex","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","totalResults","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","block","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","initialize","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","onKey","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","store","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","formBuilder","emailConfirmation","emailsMatch","isEmailConfirmInvalid","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","routeState","history","prefillForm","login","authorize","markAsTouched","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","hasPage","ɵ0$2","LogoutModule","RegisterComponent","isNewRegisterFlowEnabled","isAnonymousConsentEnabled","isEnabled","userRegistrationForm","newsletter","isConsentRequired","termsandconditions","requiredTrue","getRegisterUserResultLoading","registerUserProcessInit","getRegisterUserResultSuccess","collectDataFromRegisterForm","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","formData","onRegisterUserSuccess","resetRegisterUserProcessState","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","ɵ0$3","ɵ1$1","ProductDetailsPageModule","matcher","ɵ0$4","ɵ1$2","ɵ2","ɵ3","ProductListingPageModule","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","SearchResultsListPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","pages","defaultStorefrontRoutesConfig","home","notFound","protected","forgotPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","termsAndConditions","defaultRoutingConfig","RoutingModule","CoreRoutingModule","StorefrontFoundationModule","AsmModule","StateModule","AuthModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","scrollPositionRestoration","anchorScrolling","StoreModule","runtimeChecks","strictStateImmutability","strictStateSerializability","strictActionImmutability","strictActionSerializability","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","withConfigFactory","LANGUAGE","CURRENCY"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consents-dialog',\n  templateUrl: './anonymous-consents-dialog.component.html',\n})\nexport class AnonymousConsentsDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                consent.consentState == null ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentsDialogComponent } from '../../shared/components/anonymous-consents/dialog/anonymous-consents-dialog.component';\nimport { ModalService } from '../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent\n  implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  anonymousConsentsFeature = ANONYMOUS_CONSENTS_FEATURE;\n  bannerVisible$: Observable<boolean>;\n  templatesUpdated$: Observable<boolean>;\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  ngOnInit(): void {\n    this.templatesUpdated$ = this.anonymousConsentsService\n      .getTemplatesUpdated()\n      .pipe(\n        tap(updated => {\n          if (updated) {\n            this.anonymousConsentsService.toggleAnonymousConsentsBannerVisibility(\n              true\n            );\n          }\n        })\n      );\n    this.bannerVisible$ = this.anonymousConsentsService.isAnonymousConsentsBannerVisible();\n  }\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentsDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(_ => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleAnonymousConsentsBannerVisibility(\n      false\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './anonymous-consent-management-banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AnonymousConsentManagementBannerComponent],\n  exports: [AnonymousConsentManagementBannerComponent],\n  entryComponents: [AnonymousConsentManagementBannerComponent],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  getProduct(): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) => this.productService.get(productCode))\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n\n  quantity = 0;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n        }\n      })\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {\n  CartService,\n  OrderEntry,\n  Product,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  constructor(\n    cartService: CartService,\n    modalService: ModalService,\n    currentProductService: CurrentProductService,\n    cd: ChangeDetectorRef,\n    // tslint:disable-next-line: unified-signatures\n    productService: ProductService\n  );\n  /**\n   * @deprecated since version 1.4\n   *  Use constructor(store: Store<StateWithUser | StateWithProcess<void>>,\n   *  authService: AuthService) instead\n   */\n  constructor(\n    cartService: CartService,\n    modalService: ModalService,\n    currentProductService: CurrentProductService,\n    cd: ChangeDetectorRef\n  );\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    @Optional() private productService?: ProductService\n  ) {}\n\n  ngOnInit() {\n    if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.subscription = this.productService\n        .get(this.productCode)\n        .pipe(filter(p => !!p))\n        .subscribe((product: Product) => {\n          this.setStockInfo(product);\n          this.cd.markForCheck();\n        });\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock &&\n      product.stock.stockLevelStatus !== 'outOfStock' &&\n      product.stock.stockLevel > 0;\n    if (this.hasStock) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.cartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.cartService.addEntry(this.productCode, this.quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map(totalWidth => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the itesm can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","export enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else {\n      return null;\n    }\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges, OnDestroy {\n  @ViewChild('itemCounterInput', { static: false })\n  public input: ElementRef;\n  @ViewChild('incrementBtn', { static: false })\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn', { static: false })\n  public decrementBtn: ElementRef;\n\n  @Input()\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  subscription: Subscription;\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.subscription = this.inputValue.valueChanges\n      .pipe(debounceTime(300))\n      .subscribe(value => {\n        if (value) {\n          this.manualChange(Number(value));\n        }\n      });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return incomingValue < this.min || !this.min\n      ? this.min\n      : incomingValue > this.max || !this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    value = value.replace(/[^0-9]+/g, '');\n    this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    return e.key;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OnlyNumberDirective } from './only-number.directive';\n\n@NgModule({\n  declarations: [OnlyNumberDirective],\n  exports: [OnlyNumberDirective],\n})\nexport class OnlyNumberDirectiveModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ItemCounterComponent } from './item-counter.component';\nimport { OnlyNumberDirectiveModule } from '../../directives/only-number/only-number.directive.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    OnlyNumberDirectiveModule,\n  ],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Input() hideOnSinglePage = false;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n\n  showPagination() {\n    return !(this.hideOnSinglePage && this.pagination.totalPages <= 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter(s => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(el: ElementRef, renderer: Renderer2); // tslint:disable-line\n  /**\n   * @deprecated since version 1.0.2\n   *  Use constructor(el: ElementRef, renderer: Renderer2) instead\n   *\n   *  TODO(issue:#3803) deprecated since 1.0.2\n   */\n  constructor(el: ElementRef);\n  constructor(protected el: ElementRef, protected renderer?: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      // TODO(issue:#3803) deprecated since 1.0.2\n      if (this.renderer) {\n        this.renderer.setAttribute(\n          this.el.nativeElement,\n          'style',\n          `--star-fill:${value || this.initialRate};`\n        );\n      } else {\n        this.el.nativeElement.style.setProperty(\n          '--star-fill',\n          value || this.initialRate\n        );\n      }\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { FormGroup, AbstractControl } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Validates a field of the given form group\n   *\n   * If the field is NOT valid (or invalid), the method returns `true`.\n   *\n   * @param form Form with fields to check\n   * @param formControlName Name of the form field to check\n   * @param submitted Has the form been submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    const control: AbstractControl = form.get(formControlName);\n    return control.invalid && (submitted || (control.touched && control.dirty));\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(EMAIL_PATTERN) ? null : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(PASSWORD_PATTERN) ? null : { InvalidPassword: true };\n  }\n\n  static matchPassword(control: AbstractControl): { NotEqual: boolean } {\n    if (control.get('password').value !== control.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { CartService, PromotionResult } from '@spartacus/core';\nimport { Item } from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  items: Item[] = [];\n\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(protected cartService: CartService, protected fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.items.forEach(item => {\n      const { code } = item.product;\n      if (!this.form.controls[code]) {\n        this.form.setControl(code, this.createEntryFormGroup(item));\n      } else {\n        const entryForm = this.form.controls[code] as FormGroup;\n        entryForm.controls.quantity.setValue(item.quantity);\n      }\n    });\n  }\n\n  removeEntry(item: Item): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumendEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumendEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumendEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n  @Input()\n  potentialProductPromotions: any[];\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  ngOnInit() {}\n\n  isProductOutOfStock(product) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = this.cartService.getLoaded();\n  }\n\n  getAllPromotionsForCart(cart: Cart): any[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n    potentialPromotions.push(...(cart.potentialProductPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n    appliedPromotions.push(...(cart.appliedProductPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Cart, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.cartService.getActive().pipe(\n      map(cart => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable()\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(private cartService: CartService) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([slots$, this.cartService.getActive()]).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Cart, OrderEntry, CartService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport {\n  UrlModule,\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n} from '@spartacus/core';\nimport { CartTotalsComponent } from './cart-totals.component';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\n\n@NgModule({\n  imports: [NgbModule, CartDetailsModule, CartTotalsModule, CartSharedModule],\n  exports: [\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n  ],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useClass: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          deliveryMode => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          deliveryMode => deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  CartService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private cartService: CartService,\n    private checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.cartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.cartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.cartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find(address => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find(address => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map(data => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { CartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService,\n    checkoutConfigService: CheckoutConfigService,\n    expressCheckoutService: ExpressCheckoutService,\n    cartService: CartService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(router: Router,\n   *  config: CheckoutConfig - @deprecated since 2.x,\n   *  routingConfigService: RoutingConfigService,\n   *  checkoutConfigService: CheckoutConfigService,\n   *  expressCheckoutService: ExpressCheckoutService\n   *  cartService: CartService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService\n  );\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService,\n    protected checkoutConfigService?: CheckoutConfigService,\n    protected expressCheckoutService?: ExpressCheckoutService,\n    protected cartService?: CartService\n  ) {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (this.checkoutConfigService) {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.checkoutConfigService.getFirstCheckoutStepRoute()\n          ).paths[0]\n        )\n      );\n    } else {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.config.checkout.steps[0].routeName\n          ).paths[0]\n        )\n      );\n    }\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.checkoutConfigService &&\n      this.expressCheckoutService &&\n      this.cartService\n    ) {\n      if (\n        this.checkoutConfigService.isExpressCheckout() &&\n        !this.cartService.isGuestCart()\n      ) {\n        return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n          switchMap((expressCheckoutPossible: boolean) => {\n            return expressCheckoutPossible\n              ? of(\n                  this.router.parseUrl(\n                    this.routingConfigService.getRouteConfig(\n                      this.checkoutConfigService.getCheckoutStepRoute(\n                        CheckoutStepType.REVIEW_ORDER\n                      )\n                    ).paths[0]\n                  )\n                )\n              : this.firstStep$;\n          })\n        );\n      }\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address !== undefined &&\n          address.country !== undefined &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n  CartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService,\n    cartService: CartService // tslint:disable-line\n  );\n  /**\n   * @deprecated since 1.x\n   * NOTE: check issue:#1181 for more info\n   *\n   * TODO(issue:#1181) Deprecated since 1.x\n   */\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService\n  );\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected cartService?: CartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.cartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use selectPaymentMethod() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  paymentMethodSelected(paymentDetails: PaymentDetails): void {\n    this.selectPaymentMethod(paymentDetails);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/index';\nimport { CheckoutStepType } from '../../model/index';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * NOTE: check issue:#4121 for more info\n   *\n   * TODO(issue:#4121) Deprecated since 1.1.0\n   */\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService\n  );\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    // TODO(issue:#4121) Deprecated since 1.1.0\n    if (this.checkoutConfigService) {\n      const step = this.checkoutConfigService.getCheckoutStep(stepType);\n\n      return step && step.routeName;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const sortedTitles = titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...sortedTitles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.address.controls['region'].value.isocode) {\n      this.regionsSub = this.regions$.pipe(take(1)).subscribe(regions => {\n        const obj = regions.find(\n          region =>\n            region.isocode === this.address.controls['region'].value.isocode\n        );\n        Object.assign(this.address.value.region, {\n          isocodeShort: obj.isocodeShort,\n        });\n      });\n    }\n\n    if (this.address.dirty) {\n      this.checkoutDeliveryService.verifyAddress(this.address.value);\n    } else {\n      // address form value not changed\n      // ignore duplicate address\n      this.submitAddress.emit(undefined);\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\nimport { CheckoutStepType } from '../..';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use cards$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  cards: Card[] = [];\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  goTo: CheckoutStepType = null;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddress: Address;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getNextCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n    this.activatedRoute\n  );\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getPreviousCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlPrevious = 'cart';\n\n  isGuestCheckout = false;\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddress: Address;\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected ||\n              Object.keys(selected).length === 0 ||\n              !this.selectedAddress)\n          ) {\n            const defaultAddress = addresses.find(\n              address => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.cartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.selectedAddress = address;\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addAddress(address: { newAddress: boolean; address: Address } | any);\n  addAddress(\n    address: Address | { newAddress: boolean; address: Address }\n  ): void {\n    // TODO(issue:#3921) deprecated since 1.3 - Remove temp address\n    const tempAddress: Address = address['address']\n      ? address['address']\n      : address;\n\n    const selectedSub = this.selectedAddress$.subscribe(selected => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    // TODO(issue:#3921) deprecated since 1.3 - Remove this condition\n    if (address['address'] || address['newAddress']) {\n      address['newAddress']\n        ? this.checkoutDeliveryService.createAndSetAddress(tempAddress)\n        : this.selectAddress(tempAddress);\n    } else {\n      // TODO(issue:#3921) deprecated since 1.3 - Use instead of condition\n      this.existingAddresses$.pipe(take(1)).subscribe(addresses => {\n        addresses.includes(tempAddress)\n          ? this.selectAddress(tempAddress)\n          : this.checkoutDeliveryService.createAndSetAddress(tempAddress);\n      });\n    }\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addressSelected(address: Address): void {\n    this.selectAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addNewAddress(address: Address): void {\n    this.addAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Remove.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { AuthService, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private cartService: CartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.cartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService {\n  private templatesRefs = {};\n  private templatesRefsBefore = {};\n  private templatesRefsAfter = {};\n\n  add(\n    outlet: string,\n    template: TemplateRef<any>,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.templatesRefsBefore[outlet] = template;\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.templatesRefs[outlet] = template;\n    }\n    if (position === OutletPosition.AFTER) {\n      this.templatesRefsAfter[outlet] = template;\n    }\n  }\n\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): TemplateRef<any> {\n    let templateRef;\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore[outlet];\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter[outlet];\n        break;\n      default:\n        templateRef = this.templatesRefs[outlet];\n    }\n    return templateRef;\n    // return this.templatesRefs[outlet] ? this.templatesRefs[outlet] : null;\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\nconst layoutModules = [OutletRefModule];\n\n@NgModule({\n  imports: [...layoutModules],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [...layoutModules],\n})\nexport class LayoutModule {}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { OutletPosition } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnInit {\n  @Input() cxOutlet: string;\n\n  private _context: any;\n  @Input()\n  set cxOutletContext(value: any) {\n    this._context = value;\n  }\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit(): void {\n    const nodes = [];\n    nodes.push(...this.renderTemplate(OutletPosition.BEFORE));\n    nodes.push(...this.renderTemplate(OutletPosition.REPLACE, true));\n    nodes.push(...this.renderTemplate(OutletPosition.AFTER));\n  }\n\n  private renderTemplate(position: OutletPosition, replace = false): any[] {\n    const nodes = [];\n    const template = this.outletService.get(this.cxOutlet, position);\n    if (template || replace) {\n      const ref = this.vcr.createEmbeddedView(template || this.templateRef, {\n        $implicit: this._context,\n      });\n      nodes.push(...ref.rootNodes);\n    }\n    return nodes;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  AuthService,\n  BaseSiteService,\n  CartDataService,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: CartService,\n    @Optional() public cartData: CartDataService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: cmsComponentData, // TODO: remove / deprecated since 1.0.x\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-page-slot',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent {\n  @Input() set position(position: string) {\n    this.position$.next(position);\n    // add the position name as a css class so that\n    // layout can be applied to it, using the position based class.\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  /**\n   * observable with components (`ContentSlotComponentData[]`)\n   * for the current slot\n   */\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    ),\n    tap(components => this.addComponentClass(components))\n  );\n\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef\n  ) {}\n\n  // add a class to indicate whether the class is empty or not\n  private addComponentClass(components): void {\n    if (components && components.length > 0) {\n      this.renderer.addClass(this.hostElement.nativeElement, 'has-components');\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // we print warn messages on missing layout configs\n  // only once to not polute the console log\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter(slot => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(page => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = JSON.stringify(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const html = `<script type=\"application/ld+json\">${JSON.stringify(\n        schema\n      )}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(this.builders.map(builder => builder.build())).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-anonymous-consent-form',\n  templateUrl: './anonymous-consent-form.component.html',\n})\nexport class AnonymousConsentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  consentGiven$ = new BehaviorSubject<boolean>(false);\n  consentGivenTranslation$: Observable<string>;\n  accordionExpanded = false;\n  accordionHeight = '0px';\n\n  @ViewChild('accordionContent', { static: false })\n  accordionContent: ElementRef<HTMLDivElement>;\n\n  @Input()\n  template: ConsentTemplate;\n\n  @Input()\n  consent: AnonymousConsent;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consent) {\n      this.consentGiven$.next(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    }\n    this.consentGivenTranslation$ = this.consentGiven$.pipe(\n      map(given =>\n        given ? 'anonymousConsents.dialog.on' : 'anonymousConsents.dialog.off'\n      )\n    );\n  }\n\n  onConsentChange(): void {\n    this.consentGiven$.next(!this.consentGiven$.value);\n\n    this.consentChanged.emit({\n      given: this.consentGiven$.value,\n      template: this.template,\n    });\n  }\n\n  toggleAccordion(keyEvent?: KeyboardEvent): void {\n    let expand = true;\n    if (keyEvent && keyEvent.key !== ' ' && keyEvent.key !== 'Enter') {\n      expand = false;\n    }\n\n    if (expand) {\n      this.accordionExpanded = !this.accordionExpanded;\n      this.accordionHeight = this.accordionExpanded\n        ? `${this.accordionContent.nativeElement.clientHeight}px`\n        : '0px';\n    }\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.requiredConsents.includes(templateId);\n  }\n\n  ngOnDestroy(): void {\n    this.consentGiven$.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AnonymousConsentsDialogComponent } from './dialog/anonymous-consents-dialog.component';\nimport { AnonymousConsentFormComponent } from './dialog/form/anonymous-consent-form.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [\n    AnonymousConsentsDialogComponent,\n    AnonymousConsentFormComponent,\n  ],\n  entryComponents: [AnonymousConsentsDialogComponent],\n  exports: [AnonymousConsentsDialogComponent, AnonymousConsentFormComponent],\n})\nexport class AnonymousConsentsModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  AsmService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n  searchResultsLoading$: Observable<boolean>;\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected userService: UserService,\n    protected asmService: AsmService,\n    protected globalMessageService: GlobalMessageService,\n    protected routing: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.authService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.authService.getCustomerSupportAgentTokenLoading();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.authService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routing.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.authService.authorizeCustomerSupporAgent(userId, password);\n  }\n\n  logoutCustomerSupportAgent(): void {\n    this.authService.logoutCustomerSupportAgent();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.authService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe(customerSupportAgentToken =>\n        this.authService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.asmService.updateAsmUiState({ visible: false });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { AsmService, AsmUi } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-asm',\n  templateUrl: './asm-root.component.html',\n})\nexport class AsmRootComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  asmUi$: Observable<AsmUi>;\n\n  constructor(\n    protected asmService: AsmService,\n    protected activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.asmUi$ = this.asmService.getAsmUiState();\n\n    this.subscription.add(\n      this.activatedRoute.queryParamMap.subscribe(queryParams => {\n        if (queryParams.get('asm') === 'true') {\n          this.showUi();\n        }\n      })\n    );\n  }\n\n  private showUi(): void {\n    this.asmService.updateAsmUiState({ visible: true });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, EventEmitter, OnInit, Output, Input } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  form: FormGroup;\n  private submitClicked = false;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submitEvent.emit({\n      userId: this.form.controls.userId.value,\n      password: this.form.controls.password.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmService,\n  CustomerSearchPage,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  private submitClicked = false;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      searchTerm: ['', [Validators.required]],\n    });\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.asmService.customerSearchReset();\n    this.subscription.add(\n      this.asmService.getCustomerSearchResults().subscribe(results => {\n        this.handleSearchResults(results);\n      })\n    );\n  }\n\n  private handleSearchResults(results: CustomerSearchPage): void {\n    if (!!results && results.entries) {\n      const customerHit = results.entries.find(\n        element =>\n          element.uid.toLowerCase() ===\n          this.form.controls.searchTerm.value.toLowerCase()\n      );\n      if (customerHit) {\n        this.submitEvent.emit({ customerId: customerHit.customerId });\n      } else {\n        this.globalMessageService.add(\n          {\n            key: 'asm.customerSearch.noMatch',\n            params: { uid: this.form.controls.searchTerm.value },\n          },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      }\n    }\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n    this.asmService.customerSearch({\n      query: this.form.controls.searchTerm.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmRootComponent } from './asm-root/asm-root.component';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AsmComponent: {\n          component: AsmRootComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmRootComponent,\n  ],\n  exports: [AsmRootComponent],\n  entryComponents: [AsmRootComponent],\n})\nexport class AssistedServiceModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  ProtectedRoutesGuard,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService,\n    protectedRoutesGuard: ProtectedRoutesGuard // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since version 1.2.0\n   * Use constructor with more dependencies and make them all required.\n   *\n   * TODO(issue:4646) deprecated since version 1.2.0\n   */\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService\n  );\n  constructor(\n    // expose as `protected` only services from public API:\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutesGuard?: ProtectedRoutesGuard\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:4646) Expect that `ProtectedRoutesGuard` dependency is required (remove `if` logic)\n     */\n    return this.protectedRoutesGuard\n      ? this.protectedRoutesGuard\n          .canActivate(route)\n          .pipe(\n            switchMap(result =>\n              result ? this.getCmsPage(route, state) : of(result)\n            )\n          )\n      : this.getCmsPage(route, state);\n  }\n\n  private getCmsPage(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.getPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap(notFoundPage => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map(review => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter(rev => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter(rev => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${date.getMonth() +\n        1}-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      startWith(null as Product),\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map(builder => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map(data => data.banners.trim().split(' ')),\n    map(codes => codes.map(code => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/index';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n    PageComponentModule,\n    CarouselModule,\n    MediaModule,\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsService, CMSTabParagraphContainer } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent {\n  activeTabNum = 0;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n              return {\n                ...tab,\n                title: `CMSTabParagraphContainer.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe(error => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { ConsentTemplate } from '@spartacus/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n  consentGivenTranslation$ = new BehaviorSubject<string>(\n    'consentManagementForm.off'\n  );\n  accordionExpanded = false;\n  accordionHeight = '0px';\n  consentGiven = false;\n\n  @ViewChild('accordionContent', { static: false })\n  accordionContent: ElementRef<HTMLDivElement>;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  isAnonymousConsentsEnabled = false;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  @Input()\n  isLevel13 = false;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consentTemplate && this.consentTemplate.currentConsent) {\n      if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n        this.consentGiven = false;\n        this.consentGivenTranslation$.next('consentManagementForm.off');\n      } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n        this.consentGiven = true;\n        this.consentGivenTranslation$.next('consentManagementForm.on');\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n    if (this.consentGiven) {\n      this.consentGivenTranslation$.next('consentManagementForm.on');\n    } else {\n      this.consentGivenTranslation$.next('consentManagementForm.off');\n    }\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  toggleAccordion(keyEvent?: KeyboardEvent): void {\n    let expand = true;\n    if (keyEvent && keyEvent.key !== ' ' && keyEvent.key !== 'Enter') {\n      expand = false;\n    }\n\n    if (expand) {\n      this.accordionExpanded = !this.accordionExpanded;\n      this.accordionHeight = this.accordionExpanded\n        ? `${this.accordionContent.nativeElement.clientHeight}px`\n        : '0px';\n    }\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.isAnonymousConsentsEnabled\n      ? this.requiredConsents.includes(templateId)\n      : false;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  isFeatureEnabled,\n  isFeatureLevel,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  isAnonymousConsentsEnabled = isFeatureEnabled(\n    this.anonymousConsentsConfig,\n    ANONYMOUS_CONSENTS_FEATURE\n  );\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.anonymousConsentsConfig, '1.3');\n\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    anonymousConsentsService: AnonymousConsentsService,\n    authService: AuthService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   ```ts\n   constructor(\n     userConsentService: UserConsentService,\n     globalMessageService: GlobalMessageService,\n     anonymousConsentsConfig : AnonymousConsentsConfig,\n     anonymousConsentsService : AnonymousConsentsService,\n     authService: AuthService,\n   ) \n   ```\n   */\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService\n  );\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService,\n    private anonymousConsentsConfig?: AnonymousConsentsConfig,\n    private anonymousConsentsService?: AnonymousConsentsService,\n    private authService?: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (!this.isAnonymousConsentsEnabled) {\n          return templateList;\n        }\n\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map(template => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.isConsentGiven(template)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isConsentGiven(consentTemplate: ConsentTemplate): boolean {\n    return (\n      Boolean(consentTemplate.currentConsent) &&\n      Boolean(consentTemplate.currentConsent.consentGivenDate) &&\n      !Boolean(consentTemplate.currentConsent.consentWithdrawnDate)\n    );\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.isConsentWithdrawn(template)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isConsentWithdrawn(consentTemplate: ConsentTemplate): boolean {\n    if (Boolean(consentTemplate.currentConsent)) {\n      return Boolean(consentTemplate.currentConsent.consentWithdrawnDate);\n    }\n    return true;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    if (!this.isAnonymousConsentsEnabled) {\n      return false;\n    }\n\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/index';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order, Consignment, OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    RouterModule.forChild([\n      {\n        path: 'guest/order/:orderCode',\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    SpinnerModule,\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n})\nexport class OrderHistoryComponent implements OnInit, OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  orders$: Observable<OrderHistoryList>;\n  isLoaded$: Observable<boolean>;\n\n  private PAGE_SIZE = 5;\n\n  sortType: string;\n\n  ngOnInit(): void {\n    this.orders$ = this.userOrderService\n      .getOrderHistoryList(this.PAGE_SIZE)\n      .pipe(\n        tap((orders: OrderHistoryList) => {\n          if (orders.pagination) {\n            this.sortType = orders.pagination.sort;\n          }\n        })\n      );\n\n    this.isLoaded$ = this.userOrderService.getOrderHistoryListLoaded();\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { NgModule } from '@angular/core';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { OrderDetailsModule } from './order-details/order-details.module';\n\n@NgModule({\n  imports: [OrderHistoryModule, OrderDetailsModule],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta && meta.breadcrumbs\n          ? meta.breadcrumbs\n          : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(data => !!data),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.getNavigationEntryItems(navigation, true);\n            }\n          }),\n          filter(Boolean),\n          map(items => this.createNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Get all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private getNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ) {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      this.processChildren(nodeData, itemsList);\n    }\n\n    if (root) {\n      const rootUid = nodeData.uid;\n      this.cmsService.loadNavigationItems(rootUid, itemsList);\n    }\n  }\n\n  private processChildren(node, itemsList): void {\n    for (const child of node.children) {\n      this.getNavigationEntryItems(child, false, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for display\n   * @param nodeData\n   * @param items\n   */\n  private createNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    node.title = nodeData.title;\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.addLinkToNode(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = this.createChildren(nodeData, items);\n      node.children = children;\n    }\n\n    return node;\n  }\n\n  private addLinkToNode(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (entry.itemType === 'CMSLinkComponent' && item !== undefined) {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n\n      node.url = this.getLink(item);\n\n      // if \"NEWWINDOW\", target is true\n      node.target = item.target;\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n\n  private createChildren(node, items) {\n    const children = [];\n\n    for (const child of node.children) {\n      const childNode = this.createNode(child, items);\n      children.push(childNode);\n    }\n\n    return children;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      this.openNodes = this.openNodes.filter(n => n !== node);\n      this.renderer.removeClass(node, 'is-open');\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthService,\n  CmsNavigationComponent,\n  isFeatureEnabled,\n} from '@spartacus/core';\nimport { iif, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { AnonymousConsentsDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consents-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/index';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  data$ = this.componentData.data$;\n\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    authService: AuthService,\n    modalService: ModalService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   * \n    ```ts\n      constructor(\n      componentData: CmsComponentData<CmsNavigationComponent>,\n      service: NavigationService,\n      anonymousConsentsConfig: AnonymousConsentsConfig,\n      authService: AuthService,\n      modalService: ModalService\n    )\n    ```\n   */\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService\n  );\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig,\n    protected authService?: AuthService,\n    protected modalService?: ModalService\n  ) {}\n\n  get showConsentPreferences(): Observable<boolean> {\n    return iif(\n      () =>\n        Boolean(this.anonymousConsentsConfig) &&\n        isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        ),\n      this.authService\n        .isUserLoggedIn()\n        .pipe(\n          map(\n            isUserLoggedIn =>\n              !isUserLoggedIn &&\n              Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n              this.anonymousConsentsConfig.anonymousConsents.footerLink\n          )\n        ),\n      of(false)\n    );\n  }\n\n  openDialog(): void {\n    if (\n      Boolean(this.anonymousConsentsConfig) &&\n      isFeatureEnabled(this.anonymousConsentsConfig, ANONYMOUS_CONSENTS_FEATURE)\n    ) {\n      this.modalService.open(AnonymousConsentsDialogComponent, {\n        centered: true,\n        size: 'lg',\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AnonymousConsentsConfig,\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: AnonymousConsentsConfig, useExisting: Config }],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(_ => Boolean(deliveryAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(_ => Boolean(deliveryMode)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(_ => Boolean(billingAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(_ => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap(order => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    this.userService.registerGuest(\n      this.guid,\n      this.guestRegisterForm.value.password\n    );\n    if (!this.subscription) {\n      this.subscription = this.authService.getUserToken().subscribe(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    I18nModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map(data => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map(data => data.productCodes.trim().split(' ')),\n    map(codes => codes.map(code => this.productService.get(code)))\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map(ref => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('CMSTabParagraphContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_CATEGORY = ':relevance:category:';\n  protected readonly RELEVANCE_BRAND = ':relevance:brand:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(\n    pluck(0),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_CATEGORY + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_BRAND + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe(route => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Subscription, Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\nimport { ViewConfig } from '../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n        this.viewMode$.next(\n          template === 'ProductGridPageTemplate'\n            ? ViewModes.Grid\n            : ViewModes.List\n        );\n      })\n    );\n  }\n\n  viewPage(pageNumber: number): void {\n    this.productListComponentService.viewPage(pageNumber);\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  StarRatingModule,\n  SpinnerModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport { ViewConfig } from '../../../shared/config/view-config';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<ViewConfig>defaultScrollConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { CurrentProductService } from '../../current-product.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(p => !!p),\n    switchMap(product => this.reviewService.getByProductCode(product.code)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map(product => this.createThumbs(product))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n    CarouselModule,\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RoutingService, StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      markerIndex => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap', { static: false })\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe(params =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { AuthRedirectService, CartService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  form: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    { validator: this.emailsMatch }\n  );\n\n  sub: Subscription;\n\n  private submitClicked = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cartService: CartService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isEmailConfirmInvalid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('emailConfirmation').touched &&\n          this.form.get('emailConfirmation').dirty))\n    );\n  }\n\n  onSubmit() {\n    this.submitClicked = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const email = this.form.value.email;\n    this.cartService.addEmail(email);\n\n    if (!this.sub) {\n      this.sub = this.cartService.getAssignedUser().subscribe(_ => {\n        if (this.cartService.isGuestCart()) {\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private emailsMatch(abstractControl: AbstractControl): { NotEqual: boolean } {\n    return abstractControl.get('email').value !==\n      abstractControl.get('emailConfirmation').value\n      ? { NotEqual: true }\n      : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService,\n    winRef: WindowRef, // tslint:disable-line,\n    activatedRoute: ActivatedRoute,\n    checkoutConfigService: CheckoutConfigService\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * Use constructor(\n   * auth: AuthService,\n   * globalMessageService: GlobalMessageService,\n   * fb: FormBuilder,\n   * authRedirectService: AuthRedirectService,\n   *  winRef: WindowRef,\n   * activatedRoute: ActivatedRoute,\n   * checkoutConfigService: CheckoutConfigService) instead\n   *\n   * TODO(issue:#4055) Deprecated since 1.1.0\n   */\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService\n  );\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService,\n    private winRef?: WindowRef,\n    private activatedRoute?: ActivatedRoute,\n    private checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n\n    if (\n      this.checkoutConfigService &&\n      this.checkoutConfigService.isGuestCheckout()\n    ) {\n      this.loginAsGuest = this.activatedRoute.snapshot.queryParams['forced'];\n    }\n\n    // TODO(issue:#4055) Deprecated since 1.1.0\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['newUid'] && routeState['newUid'].length) {\n        this.prefillForm('userId', routeState['newUid']);\n      }\n    }\n  }\n\n  login(): void {\n    const { userId, password } = this.form.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private prefillForm(field: string, value: string): void {\n    this.form.patchValue({\n      [field]: value,\n    });\n\n    this.form.get(field).markAsTouched(); // this action will check field validity on load\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap(isUserLoggedIn => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.routing.go({ cxRoute: 'home' });\n          }\n        })\n      );\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthRedirectService,\n  AuthService,\n  ConsentTemplate,\n  FeatureConfigService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles } from '../../../shared/utils/forms/title-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  // TODO(issue:4237) Register flow\n  isNewRegisterFlowEnabled: boolean =\n    this.featureConfig && this.featureConfig.isLevel('1.1');\n\n  isAnonymousConsentEnabled =\n    this.featureConfig &&\n    this.featureConfig.isEnabled(ANONYMOUS_CONSENTS_FEATURE);\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isAnonymousConsentEnabled\n          ? this.isConsentRequired()\n          : false,\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    // tslint:disable-next-line:unified-signatures\n    router: RoutingService,\n    featureConfig: FeatureConfigService,\n    anonymousConsentsService: AnonymousConsentsService,\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   *\n   * Use constructor(\n   * protected auth: AuthService,\n   * protected authRedirectService: AuthRedirectService,\n   * protected userService: UserService,\n   * protected globalMessageService: GlobalMessageService,\n   * protected fb: FormBuilder,\n   * protected router?: RoutingService,\n   * protected featureConfig?: FeatureConfigService,\n   * protected anonymousConsentsService?: AnonymousConsentsService,\n   * protected anonymousConsentsConfig?: AnonymousConsentsConfig) instead\n   *\n   * TODO(issue:4237) Register flow\n   * TODO(issue:4989) Anonymous consents\n   */\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder\n  );\n  constructor(\n    protected auth: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router?: RoutingService,\n    protected featureConfig?: FeatureConfigService,\n    protected anonymousConsentsService?: AnonymousConsentsService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const sortedTitles = titles.sort(sortTitles);\n        return sortedTitles;\n      })\n    );\n\n    // TODO(issue:4237) Register flow\n    if (this.isNewRegisterFlowEnabled) {\n      this.loading$ = this.userService.getRegisterUserResultLoading();\n      this.registerUserProcessInit();\n    } else {\n      if (this.auth && this.authRedirectService) {\n        this.subscription.add(\n          this.userService\n            .getRegisterUserResultSuccess()\n            .subscribe((success: boolean) => {\n              if (success) {\n                const { uid, password } = this.collectDataFromRegisterForm(\n                  this.userRegistrationForm.value\n                );\n                this.auth.authorize(uid, password);\n              }\n            })\n        );\n        this.subscription.add(\n          this.auth.getUserToken().subscribe(data => {\n            if (data && data.access_token) {\n              this.globalMessageService.remove(\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n              this.authRedirectService.redirect();\n            }\n          })\n        );\n      }\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(messages => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some(message => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    if (\n      this.isAnonymousConsentEnabled &&\n      Boolean(this.anonymousConsentsConfig) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent)\n    ) {\n      this.anonymousConsent$ = combineLatest([\n        this.anonymousConsentsService.getConsent(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n        this.anonymousConsentsService.getTemplate(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n      ]).pipe(\n        map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n          return {\n            consent,\n            template: template.description,\n          };\n        })\n      );\n    }\n  }\n\n  submit(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.userRegistrationForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.userRegistrationForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    if (\n      Boolean(this.anonymousConsentsService) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.requiredConsents)\n    ) {\n      return this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (this.router && success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      if (\n        this.isAnonymousConsentEnabled &&\n        Boolean(this.userRegistrationForm.get('newsletter').value)\n      ) {\n        this.anonymousConsentsService.giveConsent(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        );\n      }\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe(success => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    SpinnerModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AssistedServiceModule } from './asm/assisted-service.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AssistedServiceModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  Route,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n  AsmModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    AsmModule.forRoot(),\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('1.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot(\n      {},\n      {\n        runtimeChecks: {\n          strictStateImmutability: true,\n          strictStateSerializability: true,\n          strictActionImmutability: true,\n          strictActionSerializability: true,\n        },\n      }\n    ),\n    EffectsModule.forRoot([]),\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n"]}