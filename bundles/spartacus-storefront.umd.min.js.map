{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-root/asm-root.component.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/assisted-service.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","Injectable","args","providedIn","NgbModal","CurrentProductService","routingService","productService","getProduct","_this","getRouterState","pipe","map","state","params","filter","Boolean","switchMap","productCode","get","RoutingService","ProductService","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","CLOSE","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","EXPAND","COLLAPSE","RESET","CIRCLE","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","WindowRef","IconConfig","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","undefined","staticStyleClasses","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","AddedToCartDialogComponent","modalService","cartService","fb","iconTypes","ICON_TYPE","quantity","form","group","ngOnInit","entry$","tap","entry","code","product","controls","setValue","setControl","createEntryFormGroup","markAsPristine","dismissModal","removeEntry","item","updateEntry","_a","updatedQuantity","entryNumber","CartService","FormBuilder","ViewChild","static","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","increment","cartEntry$","getEntry","subscription","subscribe","stock","stockLevelStatus","stockLevel","maxQuantity","markForCheck","updateCount","addToCart","openModal","addEntry","unsubscribe","modalInstance","modalRef","centered","size","componentInstance","cart$","getActive","loaded$","getLoaded","ngOnDestroy","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","AutoFocusDirective","hostElement","ngAfterViewInit","focus","Directive","AutoFocusDirectiveModule","CardComponent","deleteCard","EventEmitter","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","emit","delete","setDefault","send","edit","Output","CardModule","I18nModule","CarouselService","getItemsPerSlide","itemWidth","resize$","clientWidth","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","Math","floor","CarouselComponent","el","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","isDevMode","size$","console","xs","sm","md","lg","xl","DEFAULT_BREAKPOINTS","BREAKPOINT","BreakpointService","getSize","breakpoint","breakpoints","window","fromEvent","debounceTime","startWith","target","event","getBreakpoint","innerWidth","distinctUntilChanged","of","windowWidth","getClosest","reverse","br","nativeWindow","LayoutConfig","MediaService","breakpointService","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","altText","mediaFormats","reduce","set","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","renderer","async","cartIsLoading","isValueChangeable","update","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","valueChanges","manualChange","Number","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","setProperty","input","onKeyDown","handlers","ArrowDown","decrement","ArrowUp","preventDefault","stopPropagation","onBlur","onFocus","setFocus","registerOnTouched","fn","registerOnChange","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","Renderer2","OnlyNumberDirective","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","onKeyUp","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","replace","HostListener","OnlyNumberDirectiveModule","ItemCounterModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","GenericLinkModule","PaginationComponent","hideOnSinglePage","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","showPagination","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","tslib_1.__values","items_1_1","getOptionLabel","getActiveItem","getLabel","setActive","take","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","decorators","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","cmsComponents","CMSSiteContextComponent","component","useClass","deps","SiteContextModule","entryComponents","StarRatingComponent","change","initialRate","setRate","rating","force","setAttribute","style","saveRate","StarRatingModule","FormUtils","isNotValidField","formControlName","submitted","control","invalid","touched","dirty","CustomFormValidators","emailDomainValidator","match","InvalidEmail","emailValidator","EMAIL_PATTERN","passwordValidator","PASSWORD_PATTERN","InvalidPassword","matchPassword","NotEqual","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","PromotionsComponent","PromotionsModule","CartItemListComponent","isReadOnly","hasHeader","potentialProductPromotions","forEach","getPotentialProductPromotionsForItem","entryPromotions","_c","_d","promotion","description","consumedEntries","_e","e_2","_f","consumedEntry","isConsumedByEntry","consumendEntryNumber","orderEntryNumber","entries","_b","CartItemComponent","compact","view","isProductOutOfStock","updateItem","removeItem","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","entries$","getEntries","cartLoaded$","getAllPromotionsForCart","cart","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","appliedProductPromotions","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","go","cxRoute","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","combineLatest","slots","slot","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","CartComponentModule","CartModule","FREE","LEAST_EXPENSIVE","MOST_EXPENSIVE","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","checkout","steps","id","name","routeName","CheckoutStepType","express","defaultDeliveryMode","DeliveryModePreferences","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","leastExpensiveFound","deliveryMode","codeFound","getPreferredDeliveryMode","sort","isExpressCheckout","isGuestCheckout","snapshot","join","stepRoute","getRouteConfig","paths","findIndex","CheckoutConfig","RoutingConfigService","CheckoutAuthGuard","authService","authRedirectService","checkoutConfigService","getUserToken","getAssignedUser","token","user","access_token","isGuestCart","forced","reportAuthGuard","AuthService","AuthRedirectService","CheckoutDetailsService","checkoutService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","uid","OCC_USER_ID_ANONYMOUS","guid","cartId","getCheckoutDetailsLoaded$","loadCheckoutDetails","shareReplay","getCheckoutDetailsLoaded","skipWhile","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","keys","success","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","UserAddressService","UserPaymentService","CheckoutGuard","router","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","guards","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","warn","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","Validators","required","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","getSelectedDeliveryMode","withLatestFrom","currentDeliveryModeId","changeMode","valid","back","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","selectedCountry$","BehaviorSubject","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","closeModal","PaymentFormComponent","months","years","sameAsShippingAddress","goBack","closeForm","payment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","clearAddressVerificationResults","decision","add","MSG_TYPE_ERROR","openSuggestedAddress","year","Date","getFullYear","j","toString","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","then","catch","verifyAddress","paymentDetails","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","field","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","title","img","getCardIcon","actions","header","paymentMethodSelected","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","UserService","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","getOrderDetails","order","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","FeaturesConfigModule","CheckoutReviewOrder","AddressFormComponent","userService","showCancelBtn","submitAddress","backToAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","obj","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","cards","selectedAddress$","forceLoader","goTo","getAddressesLoading","existingAddresses$","cards$","asObservable","textDefaultShippingAddress","textShipToThisAddress","setAddressSub","setAddress","goNext","selectedAddressSub","addressSelected","addAddress","newAddress","createAndSetAddress","addNewAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","outlet","position","OutletPosition","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","layoutModules","LayoutModule","OutletDirective","vcr","_context","nodes","renderTemplate","cxOutlet","ref","createEmbeddedView","$implicit","rootNodes","ViewContainerRef","OutletModule","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","componentType","Promise","resolve","split","path","script","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","CmsConfig","Inject","DOCUMENT","PLATFORM_ID","CxApiService","auth","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","kyma","occEndpoints","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","userAddress","userConsent","userOrder","userPayment","ngZone","CartDataService","CmsService","PageMetaService","FeatureConfigService","KymaService","OccEndpointsService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","CurrencyService","LanguageService","BaseSiteService","UserConsentService","UserOrderService","NgZone","ComponentWrapperDirective","componentMapper","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","cmpRef","createComponent","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","element","parentElement","P","reject","fulfilled","rejected","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","DynamicAttributeService","PageComponentModule","PageSlotComponent","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","a","addComponentClass","addClass","PageSlotModule","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","breakpoint$","resolveSlots","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","layoutSlots","pageTemplateConfig","getSlotConfigForSection","getResponsiveSlotConfig","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","cls","currentClass","removeClass","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","useFactory","APP_INITIALIZER","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","initSeoService","SeoModule","StorefrontComponent","isExpanded$","navigateSubscription","isNavigating","val","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","AsmMainUiComponent","asmService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","searchResultsLoading$","getCustomerSearchResultsLoading","customer$","handleCustomerSessionStartRedirection","isCustomerEmulationToken","loginCustomerSupportAgent","userId","password","authorizeCustomerSupporAgent","logoutCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","updateAsmUiState","visible","AsmService","AsmRootComponent","Subscription","asmUi$","getAsmUiState","queryParamMap","queryParams","showUi","CSAgentLoginFormComponent","submitClicked","csAgentTokenLoading","submitEvent","onSubmit","isNotValid","CustomerSelectionComponent","searchTerm","customerSearchReset","getCustomerSearchResults","handleSearchResults","customerHit","toLowerCase","customerSearch","query","AssistedServiceModule","AsmComponent","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","first","Error","endWith","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesService","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","children","resetConfig","CmsPageGuard","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","protectedRoutesGuard","getCmsPage","getNextPageContext","getPage","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","SemanticPathService","ProtectedRoutesGuard","cmsRoute","addCmsRoute","ɵ0","CmsRouteModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","trim","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tab","select","tabNum","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","featureConfigService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","isLevel","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","AuthGuard","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","onSuccess","getRemoveUserResultError","onError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ConsentManagementFormComponent","consentChanged","consentGiven","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","onConsentChange","given","ConsentManagementComponent","userConsentService","subscriptions","loading$","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","getConsents","templateList","consentsExists","loadConsents","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","giveConsent","version","withdrawConsent","ConsentManagementModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","OrderDetailsService","userOrderService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","bufferSize","refCount","OrderDetailHeadlineComponent","orderDetailsService","order$","OrderDetailItemsComponent","getConsignmentProducts","consignment","products","orderEntry","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentStatus","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","moduleComponents","ɵ1","OrderDetailsModule","forChild","ɵ0$1","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","features","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","isLoaded$","getOrderHistoryListLoaded","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","AccountOrderHistoryComponent","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","validator","isPasswordReset","reset","resetPassword","ac","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","logout","UpdateEmailModule","UpdatePasswordFormComponent","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","breadcrumbs","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","createNode","nodeData","root","itemsList","superType","itemSuperType","itemId","processChildren","rootUid","loadNavigationItems","node","child","addLinkToNode","createChildren","itemType","linkName","getLink","categoryCode","transform","childNode","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","relatedTarget","ownerDocument","activeElement","matches","wrapper","querySelector","navBar","removeStyle","offsetLeft","offsetWidth","setStyle","navs","tagName","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","search","minCharactersBeforeRequest","displayProducts","pageSize","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","contains","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","launchSearchPage","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","ignoreCloseEvent","results$","config$","c","blur","avoidReopen","launchSearchResult","disableClose","HighlightPipe","Pipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","submit","registerGuest","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","source","price","images","PRIMARY","ProductCarouselComponent","productCodes","ProductCarouselModule","ProductReferencesComponent","current","currentProductCode$","productReferenceTypes","ProductReferencesModule","ProductIntroComponent","reviewsTabAvailable","product$","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","scrollIntoView","behavior","click","h3Elements","h3Element","innerHTML","ProductIntroModule","Grid","List","ProductViewComponent","modeChange","viewMode","newMode","ViewModes","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_CATEGORY","RELEVANCE_BRAND","searchResults$","searchResult","searchByRouting$","x","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","infiniteScroll","active","setViewMode","ViewConfig","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","Map","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","slice","ProductGridItemComponent","ProductListItemComponent","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","showMoreButton","configProductLimit","productLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","defaultScrollConfig","ViewConfigModule","forRoot","ngModule","provideConfig","ProductListModule","CMSProductListComponent","SearchResultsListComponent","ProductRefinementComponent","InfiniteScrollModule","INTRO","PRICE","SHARE","SUMMARY","ProductSummaryComponent","outlets","ProductDetailOutlets","ProductSummaryModule","ProductAttributesComponent","ProductReviewsComponent","reviewService","isWritingReview","initialMaxListItems","reviews$","getByProductCode","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","review","headline","comment","alias","reviewerName","ProductReviewsModule","ProductReviewsTabComponent","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductTabsModule","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","isActive","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ScheduleComponent","storeDataService","displayDays","changes","initialDate","getInitialDate","date","valueOf","setDate","getDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","viewStore","prepareRouteUrl","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","markerIndex","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","totalResults","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","getElementById","block","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","initialize","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","onKey","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","store","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","formBuilder","emailConfirmation","emailsMatch","isEmailConfirmInvalid","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","routeState","history","prefillForm","login","authorize","markAsTouched","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","hasPage","ɵ0$2","LogoutModule","RegisterComponent","userRegistrationForm","newsletter","termsandconditions","requiredTrue","isNewRegisterFlowEnabled","getRegisterUserResultLoading","registerUserProcessInit","getRegisterUserResultSuccess","collectDataFromRegisterForm","messages","globalMessageEntities","formData","onRegisterUserSuccess","resetRegisterUserProcessState","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","ɵ0$3","ɵ1$1","ProductDetailsPageModule","matcher","ɵ0$4","ɵ1$2","ɵ2","ɵ3","ProductListingPageModule","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","SearchResultsListPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","pages","defaultStorefrontRoutesConfig","home","notFound","protected","forgotPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","brand","termsAndConditions","defaultRoutingConfig","RoutingModule","CoreRoutingModule","StorefrontFoundationModule","AsmModule","StateModule","AuthModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","scrollPositionRestoration","anchorScrolling","StoreModule","runtimeChecks","strictStateImmutability","strictStateSerializability","strictActionImmutability","strictActionSerializability","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","withConfigFactory","LANGUAGE","CURRENCY"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  getProduct(): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) => this.productService.get(productCode))\n    );\n  }\n}\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n\n  quantity = 0;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n        }\n      })\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.hasStock = true;\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.quantity = 1;\n\n          if (\n            product.stock &&\n            product.stock.stockLevelStatus !== 'outOfStock' &&\n            product.stock.stockLevel > 0\n          ) {\n            this.maxQuantity = product.stock.stockLevel;\n            this.hasStock = true;\n          } else {\n            this.hasStock = false;\n          }\n\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.cartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.cartService.addEntry(this.productCode, this.quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map(totalWidth => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the itesm can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","export enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else {\n      return null;\n    }\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges, OnDestroy {\n  @ViewChild('itemCounterInput', { static: false })\n  public input: ElementRef;\n  @ViewChild('incrementBtn', { static: false })\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn', { static: false })\n  public decrementBtn: ElementRef;\n\n  @Input()\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  subscription: Subscription;\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.subscription = this.inputValue.valueChanges\n      .pipe(debounceTime(300))\n      .subscribe(value => {\n        if (value) {\n          this.manualChange(Number(value));\n        }\n      });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return incomingValue < this.min || !this.min\n      ? this.min\n      : incomingValue > this.max || !this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    value = value.replace(/[^0-9]+/g, '');\n    this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    return e.key;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OnlyNumberDirective } from './only-number.directive';\n\n@NgModule({\n  declarations: [OnlyNumberDirective],\n  exports: [OnlyNumberDirective],\n})\nexport class OnlyNumberDirectiveModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ItemCounterComponent } from './item-counter.component';\nimport { OnlyNumberDirectiveModule } from '../../directives/only-number/only-number.directive.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    OnlyNumberDirectiveModule,\n  ],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Input() hideOnSinglePage = false;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n\n  showPagination() {\n    return !(this.hideOnSinglePage && this.pagination.totalPages <= 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter(s => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(el: ElementRef, renderer: Renderer2); // tslint:disable-line\n  /**\n   * @deprecated since version 1.0.2\n   *  Use constructor(el: ElementRef, renderer: Renderer2) instead\n   *\n   *  TODO(issue:#3803) deprecated since 1.0.2\n   */\n  constructor(el: ElementRef);\n  constructor(protected el: ElementRef, protected renderer?: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      // TODO(issue:#3803) deprecated since 1.0.2\n      if (this.renderer) {\n        this.renderer.setAttribute(\n          this.el.nativeElement,\n          'style',\n          `--star-fill:${value || this.initialRate};`\n        );\n      } else {\n        this.el.nativeElement.style.setProperty(\n          '--star-fill',\n          value || this.initialRate\n        );\n      }\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { FormGroup, AbstractControl } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Validates a field of the given form group\n   *\n   * If the field is NOT valid (or invalid), the method returns `true`.\n   *\n   * @param form Form with fields to check\n   * @param formControlName Name of the form field to check\n   * @param submitted Has the form been submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    const control: AbstractControl = form.get(formControlName);\n    return control.invalid && (submitted || (control.touched && control.dirty));\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(EMAIL_PATTERN) ? null : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(PASSWORD_PATTERN) ? null : { InvalidPassword: true };\n  }\n\n  static matchPassword(control: AbstractControl): { NotEqual: boolean } {\n    if (control.get('password').value !== control.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { CartService, PromotionResult } from '@spartacus/core';\nimport { Item } from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  items: Item[] = [];\n\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(protected cartService: CartService, protected fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.items.forEach(item => {\n      const { code } = item.product;\n      if (!this.form.controls[code]) {\n        this.form.setControl(code, this.createEntryFormGroup(item));\n      } else {\n        const entryForm = this.form.controls[code] as FormGroup;\n        entryForm.controls.quantity.setValue(item.quantity);\n      }\n    });\n  }\n\n  removeEntry(item: Item): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumendEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumendEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumendEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n  @Input()\n  potentialProductPromotions: any[];\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  ngOnInit() {}\n\n  isProductOutOfStock(product) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = this.cartService.getLoaded();\n  }\n\n  getAllPromotionsForCart(cart: Cart): any[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n    potentialPromotions.push(...(cart.potentialProductPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n    appliedPromotions.push(...(cart.appliedProductPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Cart, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.cartService.getActive().pipe(\n      map(cart => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable()\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(private cartService: CartService) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([slots$, this.cartService.getActive()]).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Cart, OrderEntry, CartService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport {\n  UrlModule,\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n} from '@spartacus/core';\nimport { CartTotalsComponent } from './cart-totals.component';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\n\n@NgModule({\n  imports: [NgbModule, CartDetailsModule, CartTotalsModule, CartSharedModule],\n  exports: [\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n  ],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useClass: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          deliveryMode => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          deliveryMode => deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  CartService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private cartService: CartService,\n    private checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.cartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.cartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.cartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find(address => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find(address => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map(data => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { CartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService,\n    checkoutConfigService: CheckoutConfigService,\n    expressCheckoutService: ExpressCheckoutService,\n    cartService: CartService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(router: Router,\n   *  config: CheckoutConfig - @deprecated since 2.x,\n   *  routingConfigService: RoutingConfigService,\n   *  checkoutConfigService: CheckoutConfigService,\n   *  expressCheckoutService: ExpressCheckoutService\n   *  cartService: CartService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService\n  );\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService,\n    protected checkoutConfigService?: CheckoutConfigService,\n    protected expressCheckoutService?: ExpressCheckoutService,\n    protected cartService?: CartService\n  ) {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (this.checkoutConfigService) {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.checkoutConfigService.getFirstCheckoutStepRoute()\n          ).paths[0]\n        )\n      );\n    } else {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.config.checkout.steps[0].routeName\n          ).paths[0]\n        )\n      );\n    }\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.checkoutConfigService &&\n      this.expressCheckoutService &&\n      this.cartService\n    ) {\n      if (\n        this.checkoutConfigService.isExpressCheckout() &&\n        !this.cartService.isGuestCart()\n      ) {\n        return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n          switchMap((expressCheckoutPossible: boolean) => {\n            return expressCheckoutPossible\n              ? of(\n                  this.router.parseUrl(\n                    this.routingConfigService.getRouteConfig(\n                      this.checkoutConfigService.getCheckoutStepRoute(\n                        CheckoutStepType.REVIEW_ORDER\n                      )\n                    ).paths[0]\n                  )\n                )\n              : this.firstStep$;\n          })\n        );\n      }\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        map((deliveryMode: DeliveryMode) =>\n          deliveryMode && deliveryMode.code ? deliveryMode.code : null\n        ),\n        withLatestFrom(this.supportedDeliveryModes$)\n      )\n      .subscribe(([code, deliveryModes]: [string, DeliveryMode[]]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address !== undefined &&\n          address.country !== undefined &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n  CartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService,\n    cartService: CartService // tslint:disable-line\n  );\n  /**\n   * @deprecated since 1.x\n   * NOTE: check issue:#1181 for more info\n   *\n   * TODO(issue:#1181) Deprecated since 1.x\n   */\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService\n  );\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected cartService?: CartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.cartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.globalMessageService.add(\n                {\n                  key: 'paymentMethods.invalidField',\n                  params: { field: paymentInfo[key] },\n                },\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          const card: Card = {\n            title: payment.defaultPayment ? textDefaultPaymentMethod : '',\n            textBold: payment.accountHolderName,\n            text: [payment.cardNumber, textExpires],\n            img: this.getCardIcon(payment.cardType.code),\n            actions: [{ name: textUseThisPayment, event: 'send' }],\n          };\n          if (!this.selectedPayment && payment.defaultPayment) {\n            this.selectedPayment = payment;\n          }\n          if (this.selectedPayment && this.selectedPayment.id === payment.id) {\n            card.header = textSelected;\n          }\n          return card;\n        }\n      )\n    );\n  }\n\n  paymentMethodSelected(paymentDetails: PaymentDetails) {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  next(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/index';\nimport { CheckoutStepType } from '../../model/index';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * NOTE: check issue:#4121 for more info\n   *\n   * TODO(issue:#4121) Deprecated since 1.1.0\n   */\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService\n  );\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    // TODO(issue:#4121) Deprecated since 1.1.0\n    if (this.checkoutConfigService) {\n      const step = this.checkoutConfigService.getCheckoutStep(stepType);\n\n      return step && step.routeName;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const sortedTitles = titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...sortedTitles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.address.controls['region'].value.isocode) {\n      this.regionsSub = this.regions$.pipe(take(1)).subscribe(regions => {\n        const obj = regions.find(\n          region =>\n            region.isocode === this.address.controls['region'].value.isocode\n        );\n        Object.assign(this.address.value.region, {\n          isocodeShort: obj.isocodeShort,\n        });\n      });\n    }\n\n    if (this.address.dirty) {\n      this.checkoutDeliveryService.verifyAddress(this.address.value);\n    } else {\n      // address form value not changed\n      // ignore duplicate address\n      this.submitAddress.emit(undefined);\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/checkout-step.model';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  cards: Card[] = [];\n  isLoading$: Observable<boolean>;\n  selectedAddress: Address;\n  goTo: CheckoutStepType;\n  setAddress: Address;\n  setAddressSub: Subscription;\n  selectedAddressSub: Subscription;\n  selectedAddress$: BehaviorSubject<Address> = new BehaviorSubject<Address>(\n    null\n  );\n  cards$: Observable<CardWithAddress[]>;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  isGuestCheckout = false;\n  forceLoader = false; // this helps with smoother steps transition\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$.asObservable(),\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (selected && Object.keys(selected).length > 0) {\n            this.selectedAddress = selected;\n          } else {\n            const defaultAddress = addresses.find(\n              address => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectedAddress = defaultAddress;\n          }\n\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.cartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.setAddressSub = this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .subscribe(address => {\n        this.setAddress = address;\n        this.selectedAddress$.next(address);\n        if (this.goTo) {\n          this.goNext();\n          this.goTo = null;\n        }\n      });\n    this.selectedAddressSub = this.selectedAddress$.subscribe(address => {\n      this.selectedAddress = address;\n    });\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n    const card: Card = {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n\n    this.cards.push(card);\n\n    return card;\n  }\n\n  addressSelected(address: Address): void {\n    this.selectedAddress$.next(address);\n  }\n\n  next(): void {\n    this.addAddress({ address: this.selectedAddress, newAddress: false });\n  }\n\n  addAddress({\n    newAddress,\n    address,\n  }: {\n    newAddress: boolean;\n    address: Address;\n  }): void {\n    this.forceLoader = true;\n\n    if (newAddress) {\n      this.checkoutDeliveryService.createAndSetAddress(address);\n      this.goTo = CheckoutStepType.DELIVERY_MODE;\n      return;\n    }\n    if (\n      this.setAddress &&\n      this.selectedAddress &&\n      this.setAddress.id === this.selectedAddress.id\n    ) {\n      this.goNext();\n    } else {\n      this.goTo = CheckoutStepType.DELIVERY_MODE;\n      this.checkoutDeliveryService.setDeliveryAddress(address);\n    }\n  }\n\n  addNewAddress(address: Address): void {\n    if (address) {\n      this.addAddress({ address, newAddress: true });\n    } else {\n      this.goNext();\n    }\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goBack: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goBack) {\n      this.back();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { AuthService, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private cartService: CartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.cartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService {\n  private templatesRefs = {};\n  private templatesRefsBefore = {};\n  private templatesRefsAfter = {};\n\n  add(\n    outlet: string,\n    template: TemplateRef<any>,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.templatesRefsBefore[outlet] = template;\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.templatesRefs[outlet] = template;\n    }\n    if (position === OutletPosition.AFTER) {\n      this.templatesRefsAfter[outlet] = template;\n    }\n  }\n\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): TemplateRef<any> {\n    let templateRef;\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore[outlet];\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter[outlet];\n        break;\n      default:\n        templateRef = this.templatesRefs[outlet];\n    }\n    return templateRef;\n    // return this.templatesRefs[outlet] ? this.templatesRefs[outlet] : null;\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\nconst layoutModules = [OutletRefModule];\n\n@NgModule({\n  imports: [...layoutModules],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [...layoutModules],\n})\nexport class LayoutModule {}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { OutletPosition } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnInit {\n  @Input() cxOutlet: string;\n\n  private _context: any;\n  @Input()\n  set cxOutletContext(value: any) {\n    this._context = value;\n  }\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit(): void {\n    const nodes = [];\n    nodes.push(...this.renderTemplate(OutletPosition.BEFORE));\n    nodes.push(...this.renderTemplate(OutletPosition.REPLACE, true));\n    nodes.push(...this.renderTemplate(OutletPosition.AFTER));\n  }\n\n  private renderTemplate(position: OutletPosition, replace = false): any[] {\n    const nodes = [];\n    const template = this.outletService.get(this.cxOutlet, position);\n    if (template || replace) {\n      const ref = this.vcr.createEmbeddedView(template || this.templateRef, {\n        $implicit: this._context,\n      });\n      nodes.push(...ref.rootNodes);\n    }\n    return nodes;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  AuthService,\n  BaseSiteService,\n  CartDataService,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: CartService,\n    @Optional() public cartData: CartDataService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: cmsComponentData, // TODO: remove / deprecated since 1.0.x\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-page-slot',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent {\n  @Input() set position(position: string) {\n    this.position$.next(position);\n    // add the position name as a css class so that\n    // layout can be applied to it, using the position based class.\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  /**\n   * observable with components (`ContentSlotComponentData[]`)\n   * for the current slot\n   */\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    ),\n    tap(components => this.addComponentClass(components))\n  );\n\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef\n  ) {}\n\n  // add a class to indicate whether the class is empty or not\n  private addComponentClass(components): void {\n    if (components && components.length > 0) {\n      this.renderer.addClass(this.hostElement.nativeElement, 'has-components');\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // we print warn messages on missing layout configs\n  // only once to not polute the console log\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter(slot => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(page => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injectable } from '@angular/core';\nimport { Title, Meta, MetaDefinition } from '@angular/platform-browser';\nimport { PageMetaService, PageMeta, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { SeoMetaService } from './seo-meta.service';\nimport { htmlLangProvider } from './html-lang-provider';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { StorefrontComponent } from './storefront.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  AsmService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n  searchResultsLoading$: Observable<boolean>;\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected userService: UserService,\n    protected asmService: AsmService,\n    protected globalMessageService: GlobalMessageService,\n    protected routing: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.authService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.authService.getCustomerSupportAgentTokenLoading();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.authService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routing.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.authService.authorizeCustomerSupporAgent(userId, password);\n  }\n\n  logoutCustomerSupportAgent(): void {\n    this.authService.logoutCustomerSupportAgent();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.authService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe(customerSupportAgentToken =>\n        this.authService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.asmService.updateAsmUiState({ visible: false });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { AsmService, AsmUi } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-asm',\n  templateUrl: './asm-root.component.html',\n})\nexport class AsmRootComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  asmUi$: Observable<AsmUi>;\n\n  constructor(\n    protected asmService: AsmService,\n    protected activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.asmUi$ = this.asmService.getAsmUiState();\n\n    this.subscription.add(\n      this.activatedRoute.queryParamMap.subscribe(queryParams => {\n        if (queryParams.get('asm') === 'true') {\n          this.showUi();\n        }\n      })\n    );\n  }\n\n  private showUi(): void {\n    this.asmService.updateAsmUiState({ visible: true });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, EventEmitter, OnInit, Output, Input } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  form: FormGroup;\n  private submitClicked = false;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submitEvent.emit({\n      userId: this.form.controls.userId.value,\n      password: this.form.controls.password.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmService,\n  CustomerSearchPage,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  private submitClicked = false;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      searchTerm: ['', [Validators.required]],\n    });\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.asmService.customerSearchReset();\n    this.subscription.add(\n      this.asmService.getCustomerSearchResults().subscribe(results => {\n        this.handleSearchResults(results);\n      })\n    );\n  }\n\n  private handleSearchResults(results: CustomerSearchPage): void {\n    if (!!results && results.entries) {\n      const customerHit = results.entries.find(\n        element =>\n          element.uid.toLowerCase() ===\n          this.form.controls.searchTerm.value.toLowerCase()\n      );\n      if (customerHit) {\n        this.submitEvent.emit({ customerId: customerHit.customerId });\n      } else {\n        this.globalMessageService.add(\n          {\n            key: 'asm.customerSearch.noMatch',\n            params: { uid: this.form.controls.searchTerm.value },\n          },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      }\n    }\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n    this.asmService.customerSearch({\n      query: this.form.controls.searchTerm.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmRootComponent } from './asm-root/asm-root.component';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AsmComponent: {\n          component: AsmRootComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmRootComponent,\n  ],\n  exports: [AsmRootComponent],\n  entryComponents: [AsmRootComponent],\n})\nexport class AssistedServiceModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  ProtectedRoutesGuard,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService,\n    protectedRoutesGuard: ProtectedRoutesGuard // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since version 1.2.0\n   * Use constructor with more dependencies and make them all required.\n   *\n   * TODO(issue:4646) deprecated since version 1.2.0\n   */\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService\n  );\n  constructor(\n    // expose as `protected` only services from public API:\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutesGuard?: ProtectedRoutesGuard\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:4646) Expect that `ProtectedRoutesGuard` dependency is required (remove `if` logic)\n     */\n    return this.protectedRoutesGuard\n      ? this.protectedRoutesGuard\n          .canActivate(route)\n          .pipe(\n            switchMap(result =>\n              result ? this.getCmsPage(route, state) : of(result)\n            )\n          )\n      : this.getCmsPage(route, state);\n  }\n\n  private getCmsPage(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.getPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap(notFoundPage => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map(data => data.banners.trim().split(' ')),\n    map(codes => codes.map(code => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/index';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n    PageComponentModule,\n    CarouselModule,\n    MediaModule,\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsService, CMSTabParagraphContainer } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent {\n  activeTabNum = 0;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n              return {\n                ...tab,\n                title: `CMSTabParagraphContainer.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe(error => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ConsentTemplate } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  consentGiven = false;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consentTemplate && this.consentTemplate.currentConsent) {\n      if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n        this.consentGiven = false;\n      } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n        this.consentGiven = true;\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentChanged.emit({\n      given: !this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, skipWhile, tap, withLatestFrom } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n    ]).pipe(\n      map(\n        ([consentLoading, giveConsentLoading, withdrawConsentLoading]) =>\n          consentLoading || giveConsentLoading || withdrawConsentLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      tap(templateList => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      })\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order, Consignment, OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    RouterModule.forChild([\n      {\n        path: 'guest/order/:orderCode',\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    SpinnerModule,\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n})\nexport class OrderHistoryComponent implements OnInit, OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  orders$: Observable<OrderHistoryList>;\n  isLoaded$: Observable<boolean>;\n\n  private PAGE_SIZE = 5;\n\n  sortType: string;\n\n  ngOnInit(): void {\n    this.orders$ = this.userOrderService\n      .getOrderHistoryList(this.PAGE_SIZE)\n      .pipe(\n        tap((orders: OrderHistoryList) => {\n          if (orders.pagination) {\n            this.sortType = orders.pagination.sort;\n          }\n        })\n      );\n\n    this.isLoaded$ = this.userOrderService.getOrderHistoryListLoaded();\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { NgModule } from '@angular/core';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { OrderDetailsModule } from './order-details/order-details.module';\n\n@NgModule({\n  imports: [OrderHistoryModule, OrderDetailsModule],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta && meta.breadcrumbs\n          ? meta.breadcrumbs\n          : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(data => !!data),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.getNavigationEntryItems(navigation, true);\n            }\n          }),\n          filter(Boolean),\n          map(items => this.createNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Get all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private getNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ) {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      this.processChildren(nodeData, itemsList);\n    }\n\n    if (root) {\n      const rootUid = nodeData.uid;\n      this.cmsService.loadNavigationItems(rootUid, itemsList);\n    }\n  }\n\n  private processChildren(node, itemsList): void {\n    for (const child of node.children) {\n      this.getNavigationEntryItems(child, false, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for display\n   * @param nodeData\n   * @param items\n   */\n  private createNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    node.title = nodeData.title;\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.addLinkToNode(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = this.createChildren(nodeData, items);\n      node.children = children;\n    }\n\n    return node;\n  }\n\n  private addLinkToNode(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (entry.itemType === 'CMSLinkComponent' && item !== undefined) {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n\n      node.url = this.getLink(item);\n\n      // if \"NEWWINDOW\", target is true\n      node.target = item.target;\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n\n  private createChildren(node, items) {\n    const children = [];\n\n    for (const child of node.children) {\n      const childNode = this.createNode(child, items);\n      children.push(childNode);\n    }\n\n    return children;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      this.openNodes = this.openNodes.filter(n => n !== node);\n      this.renderer.removeClass(node, 'is-open');\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  data$ = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n    GenericLinkModule,\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a singe product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(_ => Boolean(deliveryAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(_ => Boolean(deliveryMode)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(_ => Boolean(billingAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(_ => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap(order => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    this.userService.registerGuest(\n      this.guid,\n      this.guestRegisterForm.value.password\n    );\n    if (!this.subscription) {\n      this.subscription = this.authService.getUserToken().subscribe(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    I18nModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map(data => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map(data => data.productCodes.trim().split(' ')),\n    map(codes => codes.map(code => this.productService.get(code)))\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code)\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map(ref => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('CMSTabParagraphContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_CATEGORY = ':relevance:category:';\n  protected readonly RELEVANCE_BRAND = ':relevance:brand:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(\n    pluck(0),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_CATEGORY + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_BRAND + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe(route => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Subscription, Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\nimport { ViewConfig } from '../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n        this.viewMode$.next(\n          template === 'ProductGridPageTemplate'\n            ? ViewModes.Grid\n            : ViewModes.List\n        );\n      })\n    );\n  }\n\n  viewPage(pageNumber: number): void {\n    this.productListComponentService.viewPage(pageNumber);\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  StarRatingModule,\n  SpinnerModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport { ViewConfig } from '../../../shared/config/view-config';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<ViewConfig>defaultScrollConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { CurrentProductService } from '../../current-product.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(p => !!p),\n    switchMap(product => this.reviewService.getByProductCode(product.code)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map(product => this.createThumbs(product))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n    CarouselModule,\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RoutingService, StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      markerIndex => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap', { static: false })\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe(params =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { AuthRedirectService, CartService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  form: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    { validator: this.emailsMatch }\n  );\n\n  sub: Subscription;\n\n  private submitClicked = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cartService: CartService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isEmailConfirmInvalid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('emailConfirmation').touched &&\n          this.form.get('emailConfirmation').dirty))\n    );\n  }\n\n  onSubmit() {\n    this.submitClicked = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const email = this.form.value.email;\n    this.cartService.addEmail(email);\n\n    if (!this.sub) {\n      this.sub = this.cartService.getAssignedUser().subscribe(_ => {\n        if (this.cartService.isGuestCart()) {\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private emailsMatch(abstractControl: AbstractControl): { NotEqual: boolean } {\n    return abstractControl.get('email').value !==\n      abstractControl.get('emailConfirmation').value\n      ? { NotEqual: true }\n      : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService,\n    winRef: WindowRef, // tslint:disable-line,\n    activatedRoute: ActivatedRoute,\n    checkoutConfigService: CheckoutConfigService\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * Use constructor(\n   * auth: AuthService,\n   * globalMessageService: GlobalMessageService,\n   * fb: FormBuilder,\n   * authRedirectService: AuthRedirectService,\n   *  winRef: WindowRef,\n   * activatedRoute: ActivatedRoute,\n   * checkoutConfigService: CheckoutConfigService) instead\n   *\n   * TODO(issue:#4055) Deprecated since 1.1.0\n   */\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService\n  );\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService,\n    private winRef?: WindowRef,\n    private activatedRoute?: ActivatedRoute,\n    private checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n\n    if (\n      this.checkoutConfigService &&\n      this.checkoutConfigService.isGuestCheckout()\n    ) {\n      this.loginAsGuest = this.activatedRoute.snapshot.queryParams['forced'];\n    }\n\n    // TODO(issue:#4055) Deprecated since 1.1.0\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['newUid'] && routeState['newUid'].length) {\n        this.prefillForm('userId', routeState['newUid']);\n      }\n    }\n  }\n\n  login(): void {\n    const { userId, password } = this.form.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private prefillForm(field: string, value: string): void {\n    this.form.patchValue({\n      [field]: value,\n    });\n\n    this.form.get(field).markAsTouched(); // this action will check field validity on load\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.routing.go({ cxRoute: 'home' });\n          }\n        })\n      );\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  FeatureConfigService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, tap, map } from 'rxjs/operators';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\nimport { sortTitles } from '../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: [false],\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   *\n   * TODO(issue:4237) Register flow\n   */\n  constructor(\n    protected auth: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router?: RoutingService,\n    protected featureConfig?: FeatureConfigService\n  ) {}\n\n  // TODO(issue:4237) Register flow\n  isNewRegisterFlowEnabled: boolean =\n    this.featureConfig && this.featureConfig.isLevel('1.1');\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const sortedTitles = titles.sort(sortTitles);\n        return sortedTitles;\n      })\n    );\n\n    // TODO(issue:4237) Register flow\n    if (this.isNewRegisterFlowEnabled) {\n      this.loading$ = this.userService.getRegisterUserResultLoading();\n      this.registerUserProcessInit();\n    } else {\n      if (this.auth && this.authRedirectService) {\n        this.subscription.add(\n          this.userService\n            .getRegisterUserResultSuccess()\n            .subscribe((success: boolean) => {\n              if (success) {\n                const { uid, password } = this.collectDataFromRegisterForm(\n                  this.userRegistrationForm.value\n                );\n                this.auth.authorize(uid, password);\n              }\n            })\n        );\n        this.subscription.add(\n          this.auth.getUserToken().subscribe(data => {\n            if (data && data.access_token) {\n              this.globalMessageService.remove(\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n              this.authRedirectService.redirect();\n            }\n          })\n        );\n      }\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(messages => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some(message => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n  }\n\n  submit(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.userRegistrationForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.userRegistrationForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (this.router && success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe(success => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    SpinnerModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AssistedServiceModule } from './asm/assisted-service.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\n\n@NgModule({\n  imports: [\n    AssistedServiceModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  Route,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n  AsmModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    AsmModule.forRoot(),\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    ConfigModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('1.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot(\n      {},\n      {\n        runtimeChecks: {\n          strictStateImmutability: true,\n          strictStateSerializability: true,\n          strictActionImmutability: true,\n          strictActionSerializability: true,\n        },\n      }\n    ),\n    EffectsModule.forRoot([]),\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n"]}