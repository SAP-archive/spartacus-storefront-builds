{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","CLOSE","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","EXPAND","COLLAPSE","RESET","CIRCLE","HEART","EMPTY_HEART","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","Injectable","args","providedIn","WindowRef","IconConfig","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","undefined","staticStyleClasses","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","ICON_TYPE","requiredConsents","isLevel13","isFeatureLevel","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","_this","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","forEach","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","tslib_1.__values","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","CardComponent","deleteCard","EventEmitter","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","emit","delete","setDefault","send","edit","Output","CardModule","I18nModule","CarouselService","getItemsPerSlide","itemWidth","resize$","map","clientWidth","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","Math","floor","CarouselComponent","el","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","isDevMode","size$","console","changeDetection","ChangeDetectionStrategy","OnPush","xs","sm","md","lg","xl","DEFAULT_BREAKPOINTS","BREAKPOINT","BreakpointService","getSize","breakpoint","breakpoints","window","fromEvent","debounceTime","startWith","target","event","getBreakpoint","innerWidth","of","windowWidth","getClosest","reverse","br","nativeWindow","LayoutConfig","MediaService","breakpointService","code","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","getHighestAvailableFormat","mediaFormat_1","mediaFormats","altText","reduce","set","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","ItemCounterComponent","min","allowZero","readonly","handleClick","input","focus","increment","control","setValue","markAsDirty","decrement","getControl","_control$","valueChanges","getValidCount","emitEvent","max","ViewChild","static","HostListener","ItemCounterModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","test","GenericLinkModule","defaultPaginationConfig","pagination","addStart","addEnd","GAP","FIRST","LAST","PREVIOUS","NEXT","START","END","PAGE","ASIDE","BEFORE","AFTER","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","from","number","String","PaginationItemType","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","addFirstGap","nextPageNumber","last","addLast","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","PaginationNavigationPosition","list","addPrevious","addNext","count","delta","round","minStart","maxStart","PaginationConfig","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","render","totalPages","currentPage","isCurrent","item","isInactive","getQueryParams","queryParams","snapshot","queryParam","defaultPage","pageChange","page","ActivatedRoute","PaginationModule","provideConfig","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","FormsModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","get","clear","index","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","BehaviorSubject","isQualtricsConfigured","initialize","setup","qualtricsScript","defer","idScript","qualtrics","projectId","load","filter","switchMap","qsi","isDataLoaded","dataLoaded","API","unload","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","cmsComponents","component","entryComponents","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","decorators","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","CMSSiteContextComponent","useClass","deps","SiteContextModule","StarRatingComponent","renderer","disabled","change","initialRate","setRate","rating","force","setAttribute","style","setProperty","saveRate","Renderer2","StarRatingModule","ViewConfigModule","forRoot","ngModule","view","ViewConfig","AutoFocusDirective","hostElement","ngAfterViewInit","Directive","FormUtils","isNotValidField","form","formControlName","submitted","invalid","touched","dirty","CustomFormValidators","emailDomainValidator","match","InvalidEmail","emailValidator","EMAIL_PATTERN","passwordValidator","PASSWORD_PATTERN","InvalidPassword","matchPassword","NotEqual","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","OrderDetailsService","userOrderService","routingService","orderCode$","getRouterState","routingData","state","params","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","UserOrderService","RoutingService","PromotionService","cartService","orderDetailsService","checkoutService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","cart","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","_c","e_2","_d","consumedEntry","isConsumedByEntry","entry","consumedEntryNumber","orderEntryNumber","entries","entryNumber","CartService","CheckoutService","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","FeaturesConfigModule","deferLoading","DeferLoadingStrategy","INSTANT","CmsMappingService","platformId","isComponentEnabled","flexType","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","componentType","getRoutesForComponent","getGuardsForComponents","guards","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","key","mappingConfig","childRoutes","CmsConfig","Inject","PLATFORM_ID","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","canActivate","isCanActivate","isObservable","obj","then","Promise","resolve","wrapIntoObservable","first","Error","skipWhile","endWith","CmsI18nService","translation","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationService","TranslationChunkService","PAGE_LAYOUT_HANDLER","InjectionToken","PageLayoutService","cms","handlers","warnLogMessages","logSlots","getSlots","section","page$","breakpoint$","pageTemplate","slots","resolveSlots","result","handle","a","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","keys","slot","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","join","cacheKey","warn","CmsService","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","name","styleClass","slots$","pageFoldSlot$","templateName","cls","currentClass","removeClass","addClass","CmsRoutesService","router","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","path","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","children","resetConfig","Router","CmsPageGuard","cmsService","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","protectedRoutesGuard","getCmsPage","getNextPageContext","getPage","withLatestFrom","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","SemanticPathService","ProtectedRoutesGuard","REPLACE","OutletService","templatesRefs","Map","templatesRefsBefore","templatesRefsAfter","outlet","templateOrFactory","position","OutletPosition","store","stacked","templateRef","newValue","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","IntersectionService","isIntersected","element","intersects","Observable","observer","rootMargin","getRootMargin","intersectionObserver","IntersectionObserver","observe","disconnect","flatMap","isIntersecting","layoutConfig","deferredLoading","intersectionMargin","DeferLoaderService","intersectionService","globalLoadStrategy","strategy","shouldLoadInstantly","elementLoadingStrategy","DEFER","OutletDirective","vcr","deferLoaderService","subscription","initializeOutlet","cxOutletDefer","changes","cxOutlet","getHostElement","renderOutlet","isArray","tmplOrFactory","ComponentFactory","createComponent","createEmbeddedView","$implicit","cxOutletContext","markForCheck","HTMLElement","parentElement","ViewContainerRef","OutletModule","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","split","script","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","DOCUMENT","CxApiService","auth","cartData","checkout","checkoutDelivery","checkoutPayment","pageMeta","featureConfig","globalMessage","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","selectiveCartService","ngZone","AuthService","CartDataService","CheckoutDeliveryService","CheckoutPaymentService","PageMetaService","FeatureConfigService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserConsentService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","SelectiveCartService","NgZone","ComponentWrapperDirective","componentMapper","dynamicAttributeService","shouldRenderComponent","cxComponentWrapper","launchWebComponent","launchComponent","cmpRef","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","P","reject","fulfilled","rejected","uid","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","DynamicAttributeService","PageComponentModule","PageSlotComponent","isPending","hasComponents","isPageFold","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","pendingComponentCount","isLoaded","loadState","getComponentDeferOptions","getDeferLoadingStrategy","SkipLinkService","skipLinks$","getSkipLinks","found","skipLinks","skipLink","existing","getSkipLinkIndexInArray","i18nKey","scrollToTarget","blur","SkipLinkScrollPosition","inline","scrollIntoView","findIndex","previous","this_1","SkipLinkConfig","SkipLinkComponent","skipLinkService","observeOn","asyncScheduler","tabNext","isElement","nextSibling","tabPrev","previousSibling","defaultSkipLinkConfig","SkipLinkDirective","elRef","cxSkipLink","SkipLinkModule","APP_INITIALIZER","useFactory","skipLinkFactory","multi","PageSlotModule","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","preventDefault","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","cmsRoute","addCmsRoute","ɵ0","CmsRouteModule","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","title","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","JsonLdScriptFactory","rendererFactory","sanitizer","build","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","createRenderer","JSON","stringify","_key","SecurityContext","HTML","RendererFactory2","DomSanitizer","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","bypassSecurityTrustHtml","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","brand","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","stock","stockLevelStatus","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","Date","datePublished","getFullYear","getMonth","getDate","headline","reviewRating","toString","CurrentProductService","productService","features","DEFAULT_PRODUCT_SCOPE","isLevel","ProductScope","DETAILS","getProduct","scopes","productCode","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","AsmComponentService","authService","asmAuthService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","go","cxRoute","isCustomerEmulationSessionInProgress","mergeMap","userToken","localStorage","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","password","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","encapsulation","ViewEncapsulation","None","AsmEnablerService","isUiAdded","isEnabled","addUi","isLaunched","isUsedBefore","setItem","getItem","Location","AsmLoaderModule","asmFactory","asmEnablerService","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","seconds","slice","Pipe","CSAgentLoginFormComponent","fb","submitClicked","csAgentTokenLoading","submitEvent","group","Validators","required","onSubmit","controls","isNotValid","FormBuilder","CustomerEmulationComponent","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","query","pageSize","maxResults","selectCustomerFromList","onDocumentClick","resultList","contains","closeResults","host","(document:click)","AsmService","AsmModule","AsmCoreModule","AddedToCartDialogComponent","promotionService","quantity","modalIsOpen","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","addToCartForm","cartEntry$","getEntry","setStockInfo","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","getLoaded","AutoFocusDirectiveModule","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","sort","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","getCustomerCoupons","customerCoupons","cartId","OCC_USER_ID_ANONYMOUS","guid","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponCode","submitDisabled$","valid","getAddVoucherResultLoading","btnEnabled","addVoucherIsLoading","getAddVoucherResultSuccess","success","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","filteredCoupons","applyVoucher","addVoucher","applyCustomerCoupon","filterValue","toLowerCase","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","isSaveForLater","optionalBtn","_items","potentialProductPromotions","resolveItems","createForm","disable","enable","isSaveForLaterEnabled","every","consignmentEntry","orderEntry","updateable","removeEntry","getPotentialProductPromotionsForItem","_e","_f","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","cartLoaded$","isUserLoggedIn","cartLoaded","sflLoaded","getAllPromotionsForCart","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","isEmpty","totalItems","CartPageLayoutHandler","getCart","selectiveCart","CartTotalsComponent","CartTotalsModule","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","isCartEmpty$","saveForLater$","moveToCart","ActiveCartService","SaveForLaterModule","CartComponentModule","CartModule","FREE","LEAST_EXPENSIVE","MOST_EXPENSIVE","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","steps","routeName","CheckoutStepType","express","defaultDeliveryMode","DeliveryModePreferences","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","leastExpensiveFound","deliveryMode","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","paths","CheckoutConfig","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","selectedCountry$","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","goBack","closeForm","payment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","year","j","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","catch","verifyAddress","paymentDetails","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","msg","field","cardLabels","img","actions","header","goNext","goPrevious","paymentMethodSelected","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","cards","goTo","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","tempAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","addressSelected","addNewAddress","setAddressSub","selectedAddressSub","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","LayoutModule","ConsentManagementFormComponent","consentGiven","isAnonymousConsentsEnabled","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","isFeatureEnabled","ANONYMOUS_CONSENTS_FEATURE","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","navigateSubscription","val","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","distinctUntilKeyChanged","tab","select","tabNum","routeState","history","getTitleParams","tabComps","comp","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","featureConfigService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","AmendOrderActionsModule","CANCEL","RETURN","ValidateQuantity","q","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","AmendOrderType","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","ɵ0$1","CancelOrderConfirmationModule","forChild","CancelOrderComponent","ɵ0$2","CancelOrderModule","OrderCancellationModule","OrderReturnService","returnRequestService","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ɵ0$3","ReturnOrderConfirmationModule","ReturnOrderComponent","ɵ0$4","ReturnOrderModule","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderDetailActionsComponent","OrderConsignedEntriesComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","ɵ0$6","OrderHistoryModule","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","returnCode","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","activeTab","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","validator","isPasswordReset","resetPassword","ac","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","ɵ0$8","MyCouponsModule","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","getLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","child","node","populateLink","itemType","linkName","getLink","categoryCode","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","updateClasses","stopImmediatePropagation","stopPropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","activeElement","matches","wrapper","querySelector","navBar","removeStyle","offsetLeft","offsetWidth","setStyle","navs","tagName","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","search","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","c","avoidReopen","launchSearchResult","HighlightPipe","replace","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","active","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","thumbs","isThumbsEmpty","mainImage$","openImage","isActive","thumbnail","zoom","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","behavior","click","h3Elements","h3Element","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","x","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","Grid","List","ProductViewComponent","modeChange","viewMode","newMode","ViewModes","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","ProductFacetNavigationComponent","collapsedFacets","showAllPerFacetMap","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","visible","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","topValueCount","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","property","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductRefinementComponent","InfiniteScrollModule","INTRO","PRICE","SHARE","SUMMARY","ProductSummaryComponent","outlets","ProductDetailOutlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","alias","reviewerName","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","viewStore","prepareRouteUrl","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","markerIndex","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","block","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","onKey","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","emailConfirmation","emailsMatch","isEmailConfirmInvalid","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","prefillForm","login","authorize","markAsTouched","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","ɵ0$9","LogoutModule","RegisterComponent","isNewRegisterFlowEnabled","isAnonymousConsentEnabled","userRegistrationForm","newsletter","isConsentRequired","termsandconditions","requiredTrue","getRegisterUserResultLoading","registerUserProcessInit","getRegisterUserResultSuccess","collectDataFromRegisterForm","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","formData","onRegisterUserSuccess","resetRegisterUserProcessState","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","ɵ0$a","ɵ1$1","ProductDetailsPageModule","matcher","ɵ0$b","ɵ1$2","ɵ2","ɵ3","ProductListingPageModule","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","defaultStorefrontRoutesConfig","home","notFound","protected","forgotPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","termsAndConditions","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","couponClaim","defaultRoutingConfig","RoutingModule","CoreRoutingModule","StorefrontFoundationModule","StateModule","AuthModule","ConfigInitializerModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","scrollPositionRestoration","anchorScrolling","StoreModule","runtimeChecks","strictStateImmutability","strictStateSerializability","strictActionImmutability","strictActionSerializability","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","withConfigFactory","LANGUAGE","CURRENCY"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  isFeatureLevel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.config, '1.3');\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(_ => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map(totalWidth => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","import { DeferLoadingStrategy } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else if (media && media[this.getHighestAvailableFormat(media)]) {\n      return this.getImageUrl(media[this.getHighestAvailableFormat(media)].url);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * returns highest resolution format name from media formats\n   */\n  private getHighestAvailableFormat(media): string {\n    if (media) {\n      let mediaFormat: MediaFormats;\n\n      this.mediaFormats.forEach(format => {\n        if (\n          !mediaFormat ||\n          (mediaFormat.threshold < format.threshold && media[format.code])\n        ) {\n          mediaFormat = format;\n        }\n      });\n\n      return mediaFormat.code;\n    }\n\n    return null;\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functinality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive inteteger or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Inidicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  private _control$: Observable<FormControl>;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty', { static: false }) private input: ElementRef<\n    HTMLInputElement\n  >;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Returns an observable with the control. The value changes of the\n   * control are intercepted in order to suppress invalid values.\n   */\n  getControl(): Observable<FormControl> {\n    if (!this._control$) {\n      this._control$ = this.control.valueChanges.pipe(\n        startWith(this.control.value),\n        tap(value =>\n          this.control.setValue(this.getValidCount(value), { emitEvent: false })\n        ),\n        map(() => this.control)\n      );\n    }\n    return this._control$;\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\n\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `Â« 4 (5) 6 Â»`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `Â«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `â¹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `âº`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `Â»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/index';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: 'Â«',\n  previousLabel: 'â¹',\n  nextLabel: 'âº',\n  endLabel: 'Â»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `Â« â¹ 1 ... 4 (5) 6 ... 9 âº Â»`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE âÂ all navigation links are added in the front of the pagination list\n   * - AFTER âÂ all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { Config, provideConfig } from '@spartacus/core';\nimport { defaultPaginationConfig, PaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [\n    provideConfig(defaultPaginationConfig),\n    { provide: PaginationConfig, useExisting: Config },\n  ],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(_ =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter(loaded => loaded),\n      switchMap(_ => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap(dataLoaded => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: `\n    <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container>\n  `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    ConfigModule.withConfig(defaultQualtricsConfig),\n  ],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter(s => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(el: ElementRef, renderer: Renderer2); // tslint:disable-line\n  /**\n   * @deprecated since version 1.0.2\n   *  Use constructor(el: ElementRef, renderer: Renderer2) instead\n   *\n   *  TODO(issue:#3803) deprecated since 1.0.2\n   */\n  constructor(el: ElementRef);\n  constructor(protected el: ElementRef, protected renderer?: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      // TODO(issue:#3803) deprecated since 1.0.2\n      if (this.renderer) {\n        this.renderer.setAttribute(\n          this.el.nativeElement,\n          'style',\n          `--star-fill:${value || this.initialRate};`\n        );\n      } else {\n        this.el.nativeElement.style.setProperty(\n          '--star-fill',\n          value || this.initialRate\n        );\n      }\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { FormGroup, AbstractControl } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Validates a field of the given form group\n   *\n   * If the field is NOT valid (or invalid), the method returns `true`.\n   *\n   * @param form Form with fields to check\n   * @param formControlName Name of the form field to check\n   * @param submitted Has the form been submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    const control: AbstractControl = form.get(formControlName);\n    return control.invalid && (submitted || (control.touched && control.dirty));\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(EMAIL_PATTERN) ? null : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(PASSWORD_PATTERN) ? null : { InvalidPassword: true };\n  }\n\n  static matchPassword(control: AbstractControl): { NotEqual: boolean } {\n    if (control.get('password').value !== control.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderEntry,\n  PromotionResult,\n  CartService,\n  Cart,\n  Order,\n  CheckoutService,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected cartService: CartService,\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.cartService\n      .getActive()\n      .pipe(map(cart => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map(order => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map(order => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.cartService\n          .getActive()\n          .pipe(\n            map(cart =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map(order =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map(order =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  ConfigModule,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map(breakpoint => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter(slot => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(page => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap(templateName =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  ProtectedRoutesGuard,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService,\n    protectedRoutesGuard: ProtectedRoutesGuard // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since version 1.2.0\n   * Use constructor with more dependencies and make them all required.\n   *\n   * TODO(issue:4646) deprecated since version 1.2.0\n   */\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService\n  );\n  constructor(\n    // expose as `protected` only services from public API:\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutesGuard?: ProtectedRoutesGuard\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:4646) Expect that `ProtectedRoutesGuard` dependency is required (remove `if` logic)\n     */\n    return this.protectedRoutesGuard\n      ? this.protectedRoutesGuard\n          .canActivate(route)\n          .pipe(\n            switchMap(result =>\n              result ? this.getCmsPage(route, state) : of(result)\n            )\n          )\n      : this.getCmsPage(route, state);\n  }\n\n  private getCmsPage(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.getPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap(notFoundPage => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, (T)[]>();\n  private templatesRefsBefore = new Map<string, (T)[]>();\n  private templatesRefsAfter = new Map<string, (T)[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  private store(store: Map<string, (T)[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned obervable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first(v => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable(observer => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin };\n      const intersectionObserver = new IntersectionObserver(entries => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options?: IntersectionOptions) {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evalutes whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>,\n    // tslint:disable-next-line: unified-signatures\n    intersectionService: DeferLoaderService\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(vcr: ViewContainerRef, templateRef: TemplateRef<any>, outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>, intersectionService?: IntersectionService) instead\n   */\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>\n  );\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService?: DeferLoaderService\n  ) {}\n\n  private initializeOutlet(): void {\n    this.vcr.clear();\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.render();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.initializeOutlet();\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.render();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private render() {\n    this.renderOutlet(OutletPosition.BEFORE);\n    this.renderOutlet(OutletPosition.REPLACE);\n    this.renderOutlet(OutletPosition.AFTER);\n  }\n\n  private renderOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    templates.forEach(obj => {\n      this.create(obj);\n    });\n  }\n\n  private create(tmplOrFactory: any): void {\n    if (tmplOrFactory instanceof ComponentFactory) {\n      this.vcr.createComponent(tmplOrFactory);\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n    }\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent elements of the given element.\n   *\n   * @param element\n   */\n  private getHostElement(element: Element): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentElement);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  AuthService,\n  BaseSiteService,\n  CartDataService,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n  UserNotificationPreferenceService,\n  UserInterestsService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: CartService,\n    @Optional() public cartData: CartDataService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    @Optional() public selectiveCartService: SelectiveCartService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: cmsComponentData, // TODO: remove / deprecated since 1.0.x\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DeferLoadingStrategy,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\n\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position is used to find the CMS page slot (and optional outlet)\n   * that is rendered in the PageSlotComponent. Furthermore, the position\n   * is added as a CSS class name to the host element.\n   */\n  @Input()\n  set position(position: string) {\n    this.position$.next(position);\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  @HostBinding('class.cx-pending') isPending = true;\n  @HostBinding('class.has-components') hasComponents = false;\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  private pendingComponentCount: number;\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   *\n   * @deprecated we'll stop supporting this property in 2.0 as\n   * it is not used separately.\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    )\n  );\n\n  private subscription = new Subscription();\n\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef,\n    // tslint:disable-next-line:unified-signatures\n    config: CmsConfig\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(cmsService: CmsService, dynamicAttributeService: DynamicAttributeService, renderer: Renderer2, hostElement: ElementRef, config?: CmsConfig) instead\n   */\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef\n  );\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef,\n    protected config?: CmsConfig\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.components$.subscribe(components => {\n        this.hasComponents = components && components.length > 0;\n        this.pendingComponentCount = components ? components.length : 0;\n        this.isPending = this.pendingComponentCount > 0;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n   * Is triggered when a component is added to the view.\n   * We use this information to dropthe `is-pending` class from the page slot\n   * when all nested components have been added.\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pendingComponentCount--;\n    }\n    this.isPending = this.pendingComponentCount > 0;\n  }\n\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.getDeferLoadingStrategy(componentType);\n    return { deferLoading };\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether component rendering\n   * should be deferred.\n   */\n  private getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    if (this.config) {\n      return ((this.config as CmsConfig).cmsComponents[componentType] || {})\n        .deferLoading;\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","export abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport {\n  SkipLink,\n  SkipLinkConfig,\n  SkipLinkScrollPosition,\n} from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(protected config: SkipLinkConfig) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      skipLink => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target: target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key: key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      skipLink => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter(skipLink => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(\n    target: HTMLElement,\n    position: SkipLinkScrollPosition,\n    event: MouseEvent\n  ): void {\n    target = <HTMLElement>target.parentNode;\n    (<HTMLElement>event.target).blur();\n    const options: ScrollIntoViewOptions =\n      position === SkipLinkScrollPosition.AFTER ? { inline: 'end' } : {};\n\n    target.scrollIntoView(options);\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      skipLink => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          skipLink => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable, asyncScheduler } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\nimport { observeOn } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService\n    .getSkipLinks()\n    .pipe(observeOn(asyncScheduler)); // delay view's update to avoid ExpressionChangedAfterItHasBeenCheckedError\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink, event: MouseEvent): void {\n    this.skipLinkService.scrollToTarget(\n      skipLink.target,\n      skipLink.position,\n      event\n    );\n  }\n\n  /**\n   * Hides the skip link by removing the focus.\n   */\n  blur(event: MouseEvent): void {\n    (<HTMLElement>event.target).blur();\n  }\n\n  tabNext(event: MouseEvent): void {\n    if (this.isElement((<HTMLElement>event.target).nextSibling)) {\n      (<HTMLElement>(<HTMLElement>event.target).nextSibling).focus();\n    }\n  }\n  tabPrev(event: MouseEvent): void {\n    if (this.isElement((<HTMLElement>event.target).previousSibling)) {\n      (<HTMLElement>(<HTMLElement>event.target).previousSibling).focus();\n    }\n  }\n\n  private isElement(element: Node): boolean {\n    return !!element && element instanceof HTMLElement;\n  }\n}\n","import { SkipLinkConfig, SkipLinkScrollPosition } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'SiteContext',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'BottomHeaderSlot',\n      position: SkipLinkScrollPosition.AFTER,\n      i18nKey: 'skipLink.labels.main',\n    },\n    {\n      key: 'ProductLeftRefinements',\n      i18nKey: 'skipLink.labels.productFacets',\n    },\n    { key: 'ProductListSlot', i18nKey: 'skipLink.labels.productList' },\n    { key: 'Footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, Input, OnDestroy, OnInit, ElementRef } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input()\n  cxSkipLink: string;\n\n  constructor(\n    private elRef: ElementRef<HTMLElement>,\n    private skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkConfig } from './config/skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    { provide: SkipLinkConfig, useExisting: Config },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\nimport { SkipLinkModule } from '../../../layout/a11y/skip-link/skip-link.module';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule, SkipLinkModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(this.builders.map(builder => builder.build())).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map(review => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter(rev => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter(rev => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${date.getMonth() +\n        1}-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  FeatureConfigService,\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    routingService: RoutingService,\n    productService: ProductService,\n    // tslint:disable-next-line: unified-signatures\n    features?: FeatureConfigService\n  );\n\n  /**\n   * @deprecated since 1.4\n   */\n  constructor(routingService: RoutingService, productService: ProductService);\n\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService,\n    protected features?: FeatureConfigService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE =\n    this.features && this.features.isLevel('1.4') ? ProductScope.DETAILS : '';\n\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) =>\n        this.productService.get(\n          productCode,\n          // TODO deprecated since 1.4 - should be replaced with 'scopes || this.DEFAULT_PRODUCT_SCOPE'\n          this.features && this.features.isLevel('1.4')\n            ? scopes || this.DEFAULT_PRODUCT_SCOPE\n            : undefined\n          // deprecated END\n        )\n      )\n    );\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      startWith(null as Product),\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map(builder => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe(token => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap(userToken =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe(customerSupportAgentToken =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import { Location } from '@angular/common';\nimport {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injectable,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { OutletPosition, OutletService } from '../../../cms-structure/index';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\nimport { AsmMainUiComponent } from '../asm-main-ui/asm-main-ui.component';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  /** indicates whether the ASM UI has been added already */\n  private isUiAdded = false;\n\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletService: OutletService<ComponentFactory<any>>\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  private isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  private isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  private isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  private addUi(): void {\n    if (this.isUiAdded) {\n      return;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      AsmMainUiComponent\n    );\n    this.outletService.add('cx-storefront', factory, OutletPosition.BEFORE);\n    this.isUiAdded = true;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/index';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe(isNavigating => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(_ => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  form: FormGroup;\n  private submitClicked = false;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submitEvent.emit({\n      userId: this.form.controls.userId.value,\n      password: this.form.controls.password.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe(user => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList', { static: false }) resultList: ElementRef;\n  @ViewChild('searchTerm', { static: false }) searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      searchTerm: [''],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.form.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe(searchTermValue => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.form.controls.searchTerm.setValue(this.selectedCustomer.name);\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsmModule as AsmCoreModule, I18nModule } from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  CartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    modalService: ModalService,\n    cartService: CartService,\n    // tslint:disable-next-line:unified-signatures\n    promotionService: PromotionService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(modalService: ModalService, cartService: CartService);\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected promotionService?: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter(e => !!e),\n        map(entry => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap(valueChange => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { CartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    cartService: CartService,\n    modalService: ModalService,\n    currentProductService: CurrentProductService,\n    cd: ChangeDetectorRef\n  );\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.cartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.cartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\nimport { FeaturesConfigModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, FeaturesConfigModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Cart,\n  CartService,\n  CartVoucherService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  CustomerCouponService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  FeatureConfigService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Subscription } from 'rxjs/internal/Subscription';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  form: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  submitDisabled$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n  filteredCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    cartService: CartService,\n    authService: AuthService,\n    cartVoucherService: CartVoucherService,\n    formBuilder: FormBuilder,\n    customerCouponService: CustomerCouponService,\n    featureConfig: FeatureConfigService\n  );\n  /**\n   * @deprecated Since 1.5\n   * Add customerCouponService,featureConfig for customer coupon feature.\n   * Remove issue: #5971\n   */\n  constructor(\n    cartService: CartService,\n    authService: AuthService,\n    cartVoucherService: CartVoucherService,\n    formBuilder: FormBuilder\n  );\n\n  constructor(\n    private cartService: CartService,\n    private authService: AuthService,\n    private cartVoucherService: CartVoucherService,\n    private formBuilder: FormBuilder,\n    protected customerCouponService?: CustomerCouponService,\n    protected featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n    if (this.featureConfig && this.featureConfig.isLevel('1.5')) {\n      this.cart$ = combineLatest([\n        this.cartService.getActive(),\n        this.authService.getOccUserId(),\n        this.customerCouponService.getCustomerCoupons(\n          this.MAX_CUSTOMER_COUPON_PAGE\n        ),\n      ]).pipe(\n        tap(\n          ([cart, userId, customerCoupons]: [\n            Cart,\n            string,\n            CustomerCouponSearchResult\n          ]) => {\n            this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code;\n            this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n          }\n        ),\n        map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n    else {\n      this.cart$ = combineLatest([\n        this.cartService.getActive(),\n        this.authService.getOccUserId(),\n      ]).pipe(\n        tap(\n          ([cart, userId]: [Cart, string]) =>\n            (this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code)\n        ),\n        map(([cart]: [Cart, string]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n\n    this.cartIsLoading$ = this.cartService\n      .getLoaded()\n      .pipe(map(loaded => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.form = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    this.submitDisabled$ = combineLatest([\n      this.cartIsLoading$,\n      this.form.valueChanges.pipe(\n        startWith(true),\n        map(() => this.form.valid)\n      ),\n      this.cartVoucherService.getAddVoucherResultLoading(),\n    ]).pipe(\n      map(\n        ([cartIsLoading, btnEnabled, addVoucherIsLoading]) =>\n          cartIsLoading || !btnEnabled || addVoucherIsLoading\n      )\n    );\n\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe(success => {\n          this.onSuccess(success);\n        })\n    );\n\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe(error => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.form.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach(appliedVoucher => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          coupon => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n    this.filteredCoupons = this.applicableCoupons;\n  }\n\n  applyVoucher(): void {\n    this.cartVoucherService.addVoucher(this.form.value.couponCode, this.cartId);\n  }\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  filter(query: string): void {\n    const filterValue = query.toLowerCase();\n\n    this.filteredCoupons = this.applicableCoupons.filter(\n      coupon => coupon.couponId.toLowerCase().indexOf(filterValue) > -1\n    );\n  }\n\n  open(): void {\n    this.filteredCoupons = this.applicableCoupons;\n    if (this.applicableCoupons.length > 0) {\n      this.couponBoxIsActive = true;\n    }\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    FeaturesConfigModule,\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  CartService,\n  ConsignmentEntry,\n  FeatureConfigService,\n  PromotionLocation,\n  PromotionResult,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() potentialProductPromotions: PromotionResult[] = [];\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    cartService: CartService,\n    selectiveCartService: SelectiveCartService,\n    featureConfig: FeatureConfigService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Add selectiveCartService authService routingService and featureConfig for save for later.\n   * Remove issue: #5958\n   */\n  constructor(cartService: CartService);\n\n  constructor(\n    protected cartService: CartService,\n    protected selectiveCartService?: SelectiveCartService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every(item => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map(consignmentEntry => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach(item => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.cartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map(value => {\n        if (value) {\n          this.cartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    //don't show promotions in saveforlater\n    if (this.options.isSaveForLater) {\n      return entryPromotions;\n    }\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport {\n  FeatureConfigService,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() potentialProductPromotions: any[];\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    promotionService: PromotionService,\n    // tslint:disable-next-line:unified-signatures\n    featureConfig: FeatureConfigService\n  );\n  /**\n   * @deprecated Since 1.5\n   * Add featureConfig for save for later.\n   * Remove issue: #5958\n   */\n  constructor(promotionService: PromotionService);\n\n  constructor(\n    protected promotionService: PromotionService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  Cart,\n  CartService,\n  FeatureConfigService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    cartService: CartService,\n    // tslint:disable-next-line:unified-signatures\n    promotionService: PromotionService,\n    selectiveCartService: SelectiveCartService,\n    authService: AuthService,\n    routingService: RoutingService,\n    featureConfig: FeatureConfigService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(cartService: CartService);\n\n  constructor(\n    protected cartService: CartService,\n    protected promotionService?: PromotionService,\n    protected selectiveCartService?: SelectiveCartService,\n    private authService?: AuthService,\n    private routingService?: RoutingService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n\n    /**\n     * TODO Remove the check for promotion service\n     * Issue: GH-5670\n     */\n    if (this.promotionService) {\n      this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n    }\n\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n\n    if (this.isSaveForLaterEnabled()) {\n      this.cartLoaded$ = combineLatest([\n        this.cartService.getLoaded(),\n        this.selectiveCartService.getLoaded(),\n        this.authService.isUserLoggedIn(),\n      ]).pipe(\n        tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n        map(([cartLoaded, sflLoaded, loggedIn]) =>\n          loggedIn ? cartLoaded && sflLoaded : cartLoaded\n        )\n      );\n    }\n    //TODO remove for #5958\n    else {\n      this.cartLoaded$ = this.cartService.getLoaded();\n    }\n    //TODO  remove for #5958 end\n    if (this.promotionService) {\n      this.orderPromotions$ = this.promotionService.getOrderPromotions(\n        this.promotionLocation\n      );\n    }\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958 end\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  getAllPromotionsForCart(cart: Cart): any[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n    potentialPromotions.push(...(cart.potentialProductPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n    appliedPromotions.push(...(cart.appliedProductPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.cartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Cart, CartService, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.cartService.getActive(),\n      this.cartService.getLoaded(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CartService,\n  SelectiveCartService,\n  FeatureConfigService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    cartService: CartService,\n    selectiveCartService: SelectiveCartService,\n    featureConfig: FeatureConfigService\n  );\n  /**\n   * @deprecated Since 1.5\n   * Add selectiveCartService and featureConfig for save for later.\n   * Remove issue: #5958\n   */\n  constructor(cartService: CartService);\n\n  constructor(\n    private cartService: CartService,\n    private selectiveCartService?: SelectiveCartService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      if (this.featureConfig && this.featureConfig.isEnabled('saveForLater')) {\n        return combineLatest([\n          slots$,\n          this.cartService.getActive(),\n          this.selectiveCartService.getCart(),\n        ]).pipe(\n          map(([slots, cart, selectiveCart]) => {\n            if (cart.totalItems) {\n              return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n            } else if (selectiveCart.totalItems) {\n              return slots.filter(\n                slot =>\n                  slot !== 'EmptyCartMiddleContent' &&\n                  slot !== 'CenterRightContentSlot'\n              );\n            } else {\n              return slots.filter(\n                slot =>\n                  slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n              );\n            }\n          })\n        );\n      }\n      //TODO remove old code for #5958\n      return combineLatest([slots$, this.cartService.getActive()]).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n      ////TODO remove old code for #5958\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter(product => Boolean(product)),\n    tap(product => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter(wishlist => Boolean(wishlist)),\n    map(wishList => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find(entry => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n    I18nModule,\n    IconModule,\n    RouterModule,\n    UrlModule,\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  SelectiveCartService,\n  Cart,\n  OrderEntry,\n  ActiveCartService,\n  CmsParagraphComponent,\n  CmsService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map(cart => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.getLoaded(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SaveForLaterComponent } from './save-for-later.component';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  FeaturesConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n      features: {\n        saveForLater: '1.5',\n      },\n    }),\n    I18nModule,\n    CartSharedModule,\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          deliveryMode => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          deliveryMode => deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  CartService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private cartService: CartService,\n    private checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.cartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.cartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.cartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find(address => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find(address => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map(data => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { CartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService,\n    checkoutConfigService: CheckoutConfigService,\n    expressCheckoutService: ExpressCheckoutService,\n    cartService: CartService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(router: Router,\n   *  config: CheckoutConfig - @deprecated since 2.x,\n   *  routingConfigService: RoutingConfigService,\n   *  checkoutConfigService: CheckoutConfigService,\n   *  expressCheckoutService: ExpressCheckoutService\n   *  cartService: CartService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService\n  );\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService,\n    protected checkoutConfigService?: CheckoutConfigService,\n    protected expressCheckoutService?: ExpressCheckoutService,\n    protected cartService?: CartService\n  ) {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (this.checkoutConfigService) {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.checkoutConfigService.getFirstCheckoutStepRoute()\n          ).paths[0]\n        )\n      );\n    } else {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.config.checkout.steps[0].routeName\n          ).paths[0]\n        )\n      );\n    }\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.checkoutConfigService &&\n      this.expressCheckoutService &&\n      this.cartService\n    ) {\n      if (\n        this.checkoutConfigService.isExpressCheckout() &&\n        !this.cartService.isGuestCart()\n      ) {\n        return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n          switchMap((expressCheckoutPossible: boolean) => {\n            return expressCheckoutPossible\n              ? of(\n                  this.router.parseUrl(\n                    this.routingConfigService.getRouteConfig(\n                      this.checkoutConfigService.getCheckoutStepRoute(\n                        CheckoutStepType.REVIEW_ORDER\n                      )\n                    ).paths[0]\n                  )\n                )\n              : this.firstStep$;\n          })\n        );\n      }\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  LoaderState,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<LoaderState<void>>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address !== undefined &&\n          address.country !== undefined &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService,\n    cartService: CartService // tslint:disable-line\n  );\n  /**\n   * @deprecated since 1.x\n   * NOTE: check issue:#1181 for more info\n   *\n   * TODO(issue:#1181) Deprecated since 1.x\n   */\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService\n  );\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected cartService?: CartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.cartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use selectPaymentMethod() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  paymentMethodSelected(paymentDetails: PaymentDetails): void {\n    this.selectPaymentMethod(paymentDetails);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService, // tslint:disable-line\n    promotionService: PromotionService // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * NOTE: check issue:#4121 for more info\n   *\n   * TODO(issue:#4121) Deprecated since 1.1.0\n   */\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService // tslint:disable-line\n  );\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService?: CheckoutConfigService,\n    protected promotionService?: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    // TODO(issue:#4121) Deprecated since 1.1.0\n    if (this.checkoutConfigService) {\n      const step = this.checkoutConfigService.getCheckoutStep(stepType);\n\n      return step && step.routeName;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.address.controls['region'].value.isocode) {\n      this.regionsSub = this.regions$.pipe(take(1)).subscribe(regions => {\n        const obj = regions.find(\n          region =>\n            region.isocode === this.address.controls['region'].value.isocode\n        );\n        Object.assign(this.address.value.region, {\n          isocodeShort: obj.isocodeShort,\n        });\n      });\n    }\n\n    if (this.address.dirty) {\n      this.checkoutDeliveryService.verifyAddress(this.address.value);\n    } else {\n      // address form value not changed\n      // ignore duplicate address\n      this.submitAddress.emit(undefined);\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\nimport { CheckoutStepType } from '../..';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use cards$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  cards: Card[] = [];\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  goTo: CheckoutStepType = null;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddress: Address;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getNextCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n    this.activatedRoute\n  );\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getPreviousCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlPrevious = 'cart';\n\n  isGuestCheckout = false;\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddress: Address;\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected ||\n              Object.keys(selected).length === 0 ||\n              !this.selectedAddress)\n          ) {\n            const defaultAddress = addresses.find(\n              address => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.cartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.selectedAddress = address;\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addAddress(address: { newAddress: boolean; address: Address } | any);\n  addAddress(\n    address: Address | { newAddress: boolean; address: Address }\n  ): void {\n    // TODO(issue:#3921) deprecated since 1.3 - Remove temp address\n    const tempAddress: Address = address['address']\n      ? address['address']\n      : address;\n\n    const selectedSub = this.selectedAddress$.subscribe(selected => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    // TODO(issue:#3921) deprecated since 1.3 - Remove this condition\n    if (address['address'] || address['newAddress']) {\n      address['newAddress']\n        ? this.checkoutDeliveryService.createAndSetAddress(tempAddress)\n        : this.selectAddress(tempAddress);\n    } else {\n      // TODO(issue:#3921) deprecated since 1.3 - Use instead of condition\n      this.existingAddresses$.pipe(take(1)).subscribe(addresses => {\n        addresses.includes(tempAddress)\n          ? this.selectAddress(tempAddress)\n          : this.checkoutDeliveryService.createAndSetAddress(tempAddress);\n      });\n    }\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addressSelected(address: Address): void {\n    this.selectAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addNewAddress(address: Address): void {\n    this.addAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Remove.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { AuthService, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private cartService: CartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.cartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\n@NgModule({\n  imports: [OutletRefModule],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  isAnonymousConsentsEnabled = false;\n\n  @Input()\n  consent: AnonymousConsent;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  @Input()\n  isLevel13 = false;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.isAnonymousConsentsEnabled && this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.isAnonymousConsentsEnabled\n      ? this.requiredConsents.includes(templateId)\n      : false;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  isFeatureEnabled,\n  isFeatureLevel,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  isAnonymousConsentsEnabled = isFeatureEnabled(\n    this.anonymousConsentsConfig,\n    ANONYMOUS_CONSENTS_FEATURE\n  );\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.anonymousConsentsConfig, '1.3');\n\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    anonymousConsentsService: AnonymousConsentsService,\n    authService: AuthService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   ```ts\n   constructor(\n     userConsentService: UserConsentService,\n     globalMessageService: GlobalMessageService,\n     anonymousConsentsConfig : AnonymousConsentsConfig,\n     anonymousConsentsService : AnonymousConsentsService,\n     authService: AuthService,\n   ) \n   ```\n   */\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService\n  );\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService,\n    private anonymousConsentsConfig?: AnonymousConsentsConfig,\n    private anonymousConsentsService?: AnonymousConsentsService,\n    private authService?: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (!this.isAnonymousConsentsEnabled) {\n          return templateList;\n        }\n\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map(template => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    if (!this.isAnonymousConsentsEnabled) {\n      return false;\n    }\n\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/index';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/index';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletModule, OutletRefModule } from '../../cms-structure/index';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map(data => data.banners.trim().split(' ')),\n    map(codes => codes.map(code => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/index';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n    PageComponentModule,\n    CarouselModule,\n    MediaModule,\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  map,\n  switchMap,\n} from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    // tslint:disable-next-line:unified-signatures\n    winRef: WindowRef\n  );\n  /**\n   * @deprecated since 1.4\n   *\n   * TODO(issue:#5813) Deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService,\n    private winRef?: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilKeyChanged('components'),\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['activeTab']) {\n        this.activeTabNum = routeState['activeTab'];\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach(comp => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe(error => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() isValid: string;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantity(control: FormControl) {\n  let q = 0;\n  Object.keys(control.value).forEach(key => (q += control.value[key]));\n\n  return q > 0 ? null : { required: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap(form => {\n        return this.getEntries().pipe(\n          map(entries =>\n            entries.filter(entry => this.getFormControl(form, entry).value > 0)\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap(order => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup({}, { validators: [ValidateQuantity] });\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach(entry => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    if (this.isConfirmation) {\n      control.disable();\n    }\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach(entry =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter(order => Boolean(order)),\n      map(order =>\n        order.entries.filter(\n          entry => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter(entryNumber => <number>entries[entryNumber] > 0)\n      .map(\n        entryNumber =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map(form => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, ConfigModule } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter(order => !!order.entries),\n      map(order =>\n        order.entries.filter(\n          entry => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter(entryNumber => <number>entries[entryNumber] > 0)\n      .map(\n        entryNumber =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first(r => !!r))\n      .subscribe(returnRequest => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map(form => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    orderDetailsService: OrderDetailsService,\n    // tslint:disable-next-line:unified-signatures\n    promotionService: PromotionService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(orderDetailsService: OrderDetailsService);\n\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    protected promotionService?: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map(order => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(consignment =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map(order => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            consignment => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  /**\n   * @deprecated\n   * NOTE: This function will be removed in version 2.0\n   */\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/index';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    SpinnerModule,\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map(order => order.pagination.totalResults),\n    filter(totalResults => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap(returnRequest => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      success => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map(returnRequests => returnRequests.pagination.totalResults),\n    filter(totalResults => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { map } from 'rxjs/operators';\nimport { combineLatest } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Observable, combineLatest, Subscription } from 'rxjs';\nimport {\n  CustomerCouponService,\n  CustomerCouponSearchResult,\n  PaginationModel,\n} from '@spartacus/core';\nimport { tap, map } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          coupons =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe(error => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe(error => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe(k => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe(success => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  I18nModule,\n  ConfigModule,\n  CmsConfig,\n  AuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap(preferences => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach(p => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [\n    CommonModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          interests =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map(interest => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map(result => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  UrlModule,\n  AuthGuard,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta && meta.breadcrumbs\n          ? meta.breadcrumbs\n          : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(data => !!data),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                key => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                it => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map(items => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach(child =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map(child => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      this.openNodes = this.openNodes.filter(n => n !== node);\n      this.renderer.removeClass(node, 'is-open');\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  ANONYMOUS_CONSENTS_FEATURE,\n  CmsNavigationComponent,\n  isFeatureEnabled,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  // in order to preserve the backwards compatibility, this should render only if anonymous consents feature is disabled\n  data$ = this.componentData.data$.pipe(\n    filter(\n      _ =>\n        !isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        )\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService,\n    // tslint:disable-next-line: unified-signatures\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   * \n    ```ts\n      constructor(\n      componentData: CmsComponentData<CmsNavigationComponent>,\n      service: NavigationService,\n      anonymousConsentsConfig: AnonymousConsentsConfig\n    )\n    ```\n   */\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService\n  );\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    checkoutService: CheckoutService,\n    // tslint:disable-next-line:unified-signatures\n    promotionService: PromotionService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(checkoutService: CheckoutService);\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService?: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(_ => Boolean(deliveryAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(_ => Boolean(deliveryMode)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(_ => Boolean(billingAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(_ => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap(order => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    this.userService.registerGuest(\n      this.guid,\n      this.guestRegisterForm.value.password\n    );\n    if (!this.subscription) {\n      this.subscription = this.authService.getUserToken().subscribe(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  FeatureConfigService,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE =\n    this.features && this.features.isLevel('1.4') ? ProductScope.LIST : '';\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map(data => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map(data => data.productCodes.trim().split(' ')),\n    map(codes =>\n      codes.map(code => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<model>,\n    productService: ProductService,\n    // tslint:disable-next-line: unified-signatures\n    features?: FeatureConfigService\n  );\n\n  /**\n   * @deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<model>,\n    productService: ProductService\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService,\n    protected features?: FeatureConfigService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map(ref => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  /**\n   * @deprecated since version 1.5\n   * This variable will no longer be in use. Use thumbs$ observable instead.\n   * TODO(issue:#6166).\n   */\n  isThumbsEmpty: boolean;\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map(product => this.createThumbs(product)),\n    // TODO: deprecated, remove the below tap (issue:#6166)\n    tap(thumbs => {\n      this.isThumbsEmpty = thumbs.length === 0;\n    })\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n    CarouselModule,\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(\n    pluck(0),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe(route => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n        this.viewMode$.next(\n          template === 'ProductGridPageTemplate'\n            ? ViewModes.Grid\n            : ViewModes.List\n        );\n      })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet: Facet): Facet[] {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : facet.topValueCount\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter(product => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap(product => {\n        product.baseOptions.forEach(option => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find(item => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach(variant => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      item => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      item => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          item => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(\n                  filter(Boolean),\n                  take(1)\n                )\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter(variant => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  ConfigModule,\n  UrlModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<ViewConfig>defaultScrollConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  // TODO deprecated since 1.4, remove\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(p => !!p),\n    map(p => p.code),\n    distinctUntilChanged(),\n    switchMap(productCode => this.reviewService.getByProductCode(productCode)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe(success => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(interests => !!interests.results && interests.results.length === 1)\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap(prefs => (this.enabledPrefs = prefs)),\n        map(prefs => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe(error => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe(success => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe(text =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    I18nModule,\n    SpinnerModule,\n    UrlModule,\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RoutingService, StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      markerIndex => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap', { static: false })\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe(params =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { AuthRedirectService, CartService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  form: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    { validator: this.emailsMatch }\n  );\n\n  sub: Subscription;\n\n  private submitClicked = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cartService: CartService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isEmailConfirmInvalid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('emailConfirmation').touched &&\n          this.form.get('emailConfirmation').dirty))\n    );\n  }\n\n  onSubmit() {\n    this.submitClicked = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const email = this.form.value.email;\n    this.cartService.addEmail(email);\n\n    if (!this.sub) {\n      this.sub = this.cartService.getAssignedUser().subscribe(_ => {\n        if (this.cartService.isGuestCart()) {\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private emailsMatch(abstractControl: AbstractControl): { NotEqual: boolean } {\n    return abstractControl.get('email').value !==\n      abstractControl.get('emailConfirmation').value\n      ? { NotEqual: true }\n      : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService,\n    winRef: WindowRef, // tslint:disable-line,\n    activatedRoute: ActivatedRoute,\n    checkoutConfigService: CheckoutConfigService\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * Use constructor(\n   * auth: AuthService,\n   * globalMessageService: GlobalMessageService,\n   * fb: FormBuilder,\n   * authRedirectService: AuthRedirectService,\n   *  winRef: WindowRef,\n   * activatedRoute: ActivatedRoute,\n   * checkoutConfigService: CheckoutConfigService) instead\n   *\n   * TODO(issue:#4055) Deprecated since 1.1.0\n   */\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService\n  );\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService,\n    private winRef?: WindowRef,\n    private activatedRoute?: ActivatedRoute,\n    private checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n\n    if (\n      this.checkoutConfigService &&\n      this.checkoutConfigService.isGuestCheckout()\n    ) {\n      this.loginAsGuest = this.activatedRoute.snapshot.queryParams['forced'];\n    }\n\n    // TODO(issue:#4055) Deprecated since 1.1.0\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['newUid'] && routeState['newUid'].length) {\n        this.prefillForm('userId', routeState['newUid']);\n      }\n    }\n  }\n\n  login(): void {\n    const { userId, password } = this.form.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private prefillForm(field: string, value: string): void {\n    this.form.patchValue({\n      [field]: value,\n    });\n\n    this.form.get(field).markAsTouched(); // this action will check field validity on load\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap(isUserLoggedIn => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n  ProtectedRoutesService,\n  FeatureConfigService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  /**\n   * @deprecated since 1.4\n   * Check #5666 for more info\n   *\n   * TODO(issue:5666) Deprecated since 1.4\n   */\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes?: ProtectedRoutesService,\n    protected featureConfig?: FeatureConfigService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  protected redirect(): void {\n    // TODO(issue:5666) Deprecated since 1.4\n    const cxRoute: string =\n      this.featureConfig.isLevel('1.4') &&\n      this.protectedRoutes &&\n      this.protectedRoutes.shouldProtect\n        ? 'login'\n        : 'home';\n\n    this.routing.go({ cxRoute });\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthRedirectService,\n  AuthService,\n  ConsentTemplate,\n  FeatureConfigService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles } from '../../../shared/utils/forms/title-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  // TODO(issue:4237) Register flow\n  isNewRegisterFlowEnabled: boolean =\n    this.featureConfig && this.featureConfig.isLevel('1.1');\n\n  isAnonymousConsentEnabled =\n    this.featureConfig &&\n    this.featureConfig.isEnabled(ANONYMOUS_CONSENTS_FEATURE);\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isAnonymousConsentEnabled\n          ? this.isConsentRequired()\n          : false,\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    // tslint:disable-next-line:unified-signatures\n    router: RoutingService,\n    featureConfig: FeatureConfigService,\n    anonymousConsentsService: AnonymousConsentsService,\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   *\n   * Use constructor(\n   * protected auth: AuthService,\n   * protected authRedirectService: AuthRedirectService,\n   * protected userService: UserService,\n   * protected globalMessageService: GlobalMessageService,\n   * protected fb: FormBuilder,\n   * protected router?: RoutingService,\n   * protected featureConfig?: FeatureConfigService,\n   * protected anonymousConsentsService?: AnonymousConsentsService,\n   * protected anonymousConsentsConfig?: AnonymousConsentsConfig) instead\n   *\n   * TODO(issue:4237) Register flow\n   * TODO(issue:4989) Anonymous consents\n   */\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder\n  );\n  constructor(\n    protected auth: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router?: RoutingService,\n    protected featureConfig?: FeatureConfigService,\n    protected anonymousConsentsService?: AnonymousConsentsService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    // TODO(issue:4237) Register flow\n    if (this.isNewRegisterFlowEnabled) {\n      this.loading$ = this.userService.getRegisterUserResultLoading();\n      this.registerUserProcessInit();\n    } else {\n      if (this.auth && this.authRedirectService) {\n        this.subscription.add(\n          this.userService\n            .getRegisterUserResultSuccess()\n            .subscribe((success: boolean) => {\n              if (success) {\n                const { uid, password } = this.collectDataFromRegisterForm(\n                  this.userRegistrationForm.value\n                );\n                this.auth.authorize(uid, password);\n              }\n            })\n        );\n        this.subscription.add(\n          this.auth.getUserToken().subscribe(data => {\n            if (data && data.access_token) {\n              this.globalMessageService.remove(\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n              this.authRedirectService.redirect();\n            }\n          })\n        );\n      }\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(messages => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some(message => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    if (\n      this.isAnonymousConsentEnabled &&\n      Boolean(this.anonymousConsentsConfig) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent)\n    ) {\n      this.anonymousConsent$ = combineLatest([\n        this.anonymousConsentsService.getConsent(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n        this.anonymousConsentsService.getTemplate(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n      ]).pipe(\n        map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n          return {\n            consent,\n            template: template ? template.description : '',\n          };\n        })\n      );\n\n      this.subscription.add(\n        this.userRegistrationForm\n          .get('newsletter')\n          .valueChanges.subscribe(_ => {\n            this.toggleAnonymousConsent();\n          })\n      );\n    }\n  }\n\n  submit(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.userRegistrationForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.userRegistrationForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    if (\n      Boolean(this.anonymousConsentsService) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.requiredConsents)\n    ) {\n      return this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (this.router && success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    if (Boolean(this.userRegistrationForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    } else {\n      this.anonymousConsentsService.withdrawConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe(success => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    SpinnerModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n  MyCouponsModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  Route,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      md: {\n        pageFold: 'UpSelling',\n      },\n      xs: {\n        pageFold: 'Summary',\n      },\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('1.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot(\n      {},\n      {\n        runtimeChecks: {\n          strictStateImmutability: true,\n          strictStateSerializability: true,\n          strictActionImmutability: true,\n          strictActionSerializability: true,\n        },\n      }\n    ),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n"]}