{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consents-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/form/anonymous-consent-form.component.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-root/asm-root.component.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/assisted-service.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","CLOSE","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","EXPAND","COLLAPSE","RESET","CIRCLE","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","Injectable","args","providedIn","WindowRef","IconConfig","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","undefined","staticStyleClasses","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","NgbModal","AnonymousConsentsDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","ICON_TYPE","requiredConsents","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","closeModal","rejectAll","_this","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","forEach","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","tslib_1.__values","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","templatesUpdated$","getTemplatesUpdated","updated","toggleAnonymousConsentsBannerVisibility","bannerVisible$","isAnonymousConsentsBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","cmsComponents","component","entryComponents","CurrentProductService","routingService","productService","getProduct","getRouterState","map","state","params","filter","switchMap","productCode","get","RoutingService","ProductService","AddedToCartDialogComponent","cartService","fb","quantity","form","group","entry$","entry","code","product","controls","setValue","setControl","createEntryFormGroup","markAsPristine","dismissModal","removeEntry","item","updateEntry","updatedQuantity","entryNumber","CartService","FormBuilder","ViewChild","static","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","increment","cartEntry$","getEntry","subscription","stock","stockLevelStatus","stockLevel","maxQuantity","markForCheck","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","getActive","loaded$","getLoaded","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","AutoFocusDirective","hostElement","ngAfterViewInit","focus","Directive","AutoFocusDirectiveModule","CardComponent","deleteCard","EventEmitter","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","emit","delete","setDefault","send","edit","Output","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","clientWidth","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","Math","floor","CarouselComponent","el","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","isDevMode","size$","console","xs","sm","md","lg","xl","DEFAULT_BREAKPOINTS","BREAKPOINT","BreakpointService","getSize","breakpoint","breakpoints","window","fromEvent","debounceTime","startWith","target","event","getBreakpoint","innerWidth","of","windowWidth","getClosest","reverse","br","nativeWindow","LayoutConfig","MediaService","breakpointService","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","altText","mediaFormats","reduce","set","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","renderer","async","cartIsLoading","isValueChangeable","update","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","valueChanges","manualChange","Number","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","setProperty","input","onKeyDown","handlers","ArrowDown","decrement","ArrowUp","preventDefault","stopPropagation","onBlur","onFocus","setFocus","registerOnTouched","fn","registerOnChange","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","Renderer2","OnlyNumberDirective","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","onKeyUp","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","replace","HostListener","OnlyNumberDirectiveModule","ItemCounterModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","GenericLinkModule","PaginationComponent","hideOnSinglePage","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","showPagination","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","decorators","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","CMSSiteContextComponent","useClass","deps","SiteContextModule","StarRatingComponent","change","initialRate","setRate","rating","force","setAttribute","style","saveRate","StarRatingModule","FormUtils","isNotValidField","formControlName","submitted","control","invalid","touched","dirty","CustomFormValidators","emailDomainValidator","match","InvalidEmail","emailValidator","EMAIL_PATTERN","passwordValidator","PASSWORD_PATTERN","InvalidPassword","matchPassword","NotEqual","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","PromotionsComponent","PromotionsModule","CartItemListComponent","isReadOnly","hasHeader","potentialProductPromotions","getPotentialProductPromotionsForItem","entryPromotions","_c","_d","promotion","description","consumedEntries","_e","e_2","_f","consumedEntry","isConsumedByEntry","consumendEntryNumber","orderEntryNumber","entries","CartItemComponent","compact","view","isProductOutOfStock","updateItem","removeItem","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","entries$","getEntries","cartLoaded$","getAllPromotionsForCart","cart","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","appliedProductPromotions","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","go","cxRoute","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","slots","slot","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","CartComponentModule","CartModule","FREE","LEAST_EXPENSIVE","MOST_EXPENSIVE","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","checkout","steps","name","routeName","CheckoutStepType","express","defaultDeliveryMode","DeliveryModePreferences","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","leastExpensiveFound","deliveryMode","codeFound","getPreferredDeliveryMode","sort","isExpressCheckout","isGuestCheckout","snapshot","join","stepRoute","getRouteConfig","paths","findIndex","CheckoutConfig","RoutingConfigService","CheckoutAuthGuard","authService","authRedirectService","checkoutConfigService","getUserToken","getAssignedUser","token","user","access_token","isGuestCart","forced","reportAuthGuard","AuthService","AuthRedirectService","CheckoutDetailsService","checkoutService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","uid","OCC_USER_ID_ANONYMOUS","guid","cartId","getCheckoutDetailsLoaded$","loadCheckoutDetails","shareReplay","getCheckoutDetailsLoaded","skipWhile","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","keys","success","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","UserAddressService","UserPaymentService","CheckoutGuard","router","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","guards","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","warn","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","Validators","required","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","withLatestFrom","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","valid","back","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","selectedCountry$","BehaviorSubject","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","goBack","closeForm","payment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","clearAddressVerificationResults","decision","MSG_TYPE_ERROR","openSuggestedAddress","year","Date","getFullYear","j","toString","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","then","catch","verifyAddress","paymentDetails","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","getCardIcon","msg","field","cardLabels","title","img","actions","header","goNext","goPrevious","paymentMethodSelected","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","UserService","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","getOrderDetails","order","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","userService","showCancelBtn","submitAddress","backToAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","obj","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","cards","goTo","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","tempAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","addressSelected","addNewAddress","setAddressSub","selectedAddressSub","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","outlet","position","OutletPosition","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","layoutModules","LayoutModule","OutletDirective","vcr","_context","nodes","renderTemplate","cxOutlet","ref","createEmbeddedView","$implicit","rootNodes","ViewContainerRef","OutletModule","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","componentType","Promise","resolve","split","path","script","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","CmsConfig","Inject","DOCUMENT","PLATFORM_ID","CxApiService","auth","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","kyma","occEndpoints","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","userAddress","userConsent","userOrder","userPayment","ngZone","CartDataService","CmsService","PageMetaService","FeatureConfigService","KymaService","OccEndpointsService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","CurrencyService","LanguageService","BaseSiteService","UserConsentService","UserOrderService","NgZone","ComponentWrapperDirective","componentMapper","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","cmpRef","createComponent","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","element","parentElement","P","reject","fulfilled","rejected","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","DynamicAttributeService","PageComponentModule","PageSlotComponent","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","a","addComponentClass","addClass","PageSlotModule","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","breakpoint$","resolveSlots","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","layoutSlots","pageTemplateConfig","getSlotConfigForSection","getResponsiveSlotConfig","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","cls","currentClass","removeClass","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","useFactory","APP_INITIALIZER","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","JsonLdScriptFactory","rendererFactory","build","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","JSON","stringify","scriptElement","getElementById","createRenderer","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","sanitizer","writeJsonLd","html","jsonLD","bypassSecurityTrustHtml","DomSanitizer","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","AnonymousConsentFormComponent","consentGiven$","accordionExpanded","accordionHeight","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentGivenTranslation$","toggleAccordion","keyEvent","expand","accordionContent","clientHeight","isRequired","templateId","AnonymousConsentsModule","StorefrontComponent","isExpanded$","navigateSubscription","isNavigating","val","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","AsmMainUiComponent","asmService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","searchResultsLoading$","getCustomerSearchResultsLoading","customer$","handleCustomerSessionStartRedirection","isCustomerEmulationToken","loginCustomerSupportAgent","userId","password","authorizeCustomerSupporAgent","logoutCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","updateAsmUiState","visible","AsmService","AsmRootComponent","asmUi$","getAsmUiState","queryParamMap","queryParams","showUi","CSAgentLoginFormComponent","submitClicked","csAgentTokenLoading","submitEvent","onSubmit","isNotValid","CustomerSelectionComponent","searchTerm","customerSearchReset","getCustomerSearchResults","handleSearchResults","customerHit","toLowerCase","customerSearch","query","AssistedServiceModule","AsmComponent","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","first","Error","endWith","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesService","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","children","resetConfig","CmsPageGuard","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","protectedRoutesGuard","getCmsPage","getNextPageContext","getPage","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","SemanticPathService","ProtectedRoutesGuard","cmsRoute","addCmsRoute","ɵ0","CmsRouteModule","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","brand","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","trim","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tab","select","tabNum","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","featureConfigService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","isLevel","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","AuthGuard","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","onSuccess","getRemoveUserResultError","onError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ConsentManagementFormComponent","consentGiven","isAnonymousConsentsEnabled","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","isFeatureLevel","loading$","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","isUserLoggedIn","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","OrderDetailsService","userOrderService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","bufferSize","refCount","OrderDetailHeadlineComponent","orderDetailsService","order$","OrderDetailItemsComponent","getConsignmentProducts","consignment","products","orderEntry","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentStatus","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","moduleComponents","ɵ1","OrderDetailsModule","forChild","ɵ0$1","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","features","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","isLoaded$","getOrderHistoryListLoaded","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","AccountOrderHistoryComponent","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","validator","isPasswordReset","reset","resetPassword","ac","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","logout","UpdateEmailModule","UpdatePasswordFormComponent","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","createNode","nodeData","root","itemsList","superType","itemSuperType","itemId","processChildren","rootUid","loadNavigationItems","node","child","addLinkToNode","createChildren","itemType","linkName","getLink","categoryCode","transform","childNode","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","relatedTarget","ownerDocument","activeElement","matches","wrapper","querySelector","navBar","removeStyle","offsetLeft","offsetWidth","setStyle","navs","tagName","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","iif","footerLink","openDialog","FooterNavigationModule","SearchBoxComponentService","searchService","search","minCharactersBeforeRequest","displayProducts","pageSize","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","contains","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","launchSearchPage","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","ignoreCloseEvent","results$","config$","c","blur","avoidReopen","launchSearchResult","disableClose","HighlightPipe","Pipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","submit","registerGuest","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","source","ProductCarouselComponent","productCodes","ProductCarouselModule","ProductReferencesComponent","current","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","ProductIntroComponent","reviewsTabAvailable","product$","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","scrollIntoView","behavior","click","h3Elements","h3Element","ProductIntroModule","Grid","List","ProductViewComponent","modeChange","viewMode","newMode","ViewModes","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_CATEGORY","RELEVANCE_BRAND","searchResults$","searchResult","searchByRouting$","x","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","infiniteScroll","active","setViewMode","ViewConfig","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","Map","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","slice","ProductGridItemComponent","ProductListItemComponent","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","showMoreButton","configProductLimit","productLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","defaultScrollConfig","ViewConfigModule","forRoot","ngModule","provideConfig","ProductListModule","CMSProductListComponent","SearchResultsListComponent","ProductRefinementComponent","InfiniteScrollModule","INTRO","PRICE","SHARE","SUMMARY","ProductSummaryComponent","outlets","ProductDetailOutlets","ProductSummaryModule","ProductAttributesComponent","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","alias","reviewerName","ProductReviewsModule","ProductReviewsTabComponent","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductTabsModule","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","isActive","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ScheduleComponent","storeDataService","displayDays","changes","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","viewStore","prepareRouteUrl","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","markerIndex","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","totalResults","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","block","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","initialize","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","onKey","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","store","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","formBuilder","emailConfirmation","emailsMatch","isEmailConfirmInvalid","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","routeState","history","prefillForm","login","authorize","markAsTouched","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","hasPage","ɵ0$2","LogoutModule","RegisterComponent","isNewRegisterFlowEnabled","isAnonymousConsentEnabled","userRegistrationForm","newsletter","isConsentRequired","termsandconditions","requiredTrue","getRegisterUserResultLoading","registerUserProcessInit","getRegisterUserResultSuccess","collectDataFromRegisterForm","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","formData","onRegisterUserSuccess","resetRegisterUserProcessState","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","ɵ0$3","ɵ1$1","ProductDetailsPageModule","matcher","ɵ0$4","ɵ1$2","ɵ2","ɵ3","ProductListingPageModule","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","SearchResultsListPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","pages","defaultStorefrontRoutesConfig","home","notFound","protected","forgotPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","termsAndConditions","defaultRoutingConfig","RoutingModule","CoreRoutingModule","StorefrontFoundationModule","AsmModule","StateModule","AuthModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","scrollPositionRestoration","anchorScrolling","StoreModule","runtimeChecks","strictStateImmutability","strictStateSerializability","strictActionImmutability","strictActionSerializability","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","withConfigFactory","LANGUAGE","CURRENCY"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consents-dialog',\n  templateUrl: './anonymous-consents-dialog.component.html',\n})\nexport class AnonymousConsentsDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                consent.consentState == null ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentsDialogComponent } from '../../shared/components/anonymous-consents/dialog/anonymous-consents-dialog.component';\nimport { ModalService } from '../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent\n  implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<boolean>;\n  templatesUpdated$: Observable<boolean>;\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  ngOnInit(): void {\n    this.templatesUpdated$ = this.anonymousConsentsService\n      .getTemplatesUpdated()\n      .pipe(\n        tap(updated => {\n          if (updated) {\n            this.anonymousConsentsService.toggleAnonymousConsentsBannerVisibility(\n              true\n            );\n          }\n        })\n      );\n    this.bannerVisible$ = this.anonymousConsentsService.isAnonymousConsentsBannerVisible();\n  }\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentsDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(_ => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleAnonymousConsentsBannerVisibility(\n      false\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './anonymous-consent-management-banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AnonymousConsentManagementBannerComponent],\n  exports: [AnonymousConsentManagementBannerComponent],\n  entryComponents: [AnonymousConsentManagementBannerComponent],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  getProduct(): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) => this.productService.get(productCode))\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n\n  quantity = 0;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n        }\n      })\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.hasStock = true;\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.quantity = 1;\n\n          if (\n            product.stock &&\n            product.stock.stockLevelStatus !== 'outOfStock' &&\n            product.stock.stockLevel > 0\n          ) {\n            this.maxQuantity = product.stock.stockLevel;\n            this.hasStock = true;\n          } else {\n            this.hasStock = false;\n          }\n\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.cartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.cartService.addEntry(this.productCode, this.quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map(totalWidth => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the itesm can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","export enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else {\n      return null;\n    }\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges, OnDestroy {\n  @ViewChild('itemCounterInput', { static: false })\n  public input: ElementRef;\n  @ViewChild('incrementBtn', { static: false })\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn', { static: false })\n  public decrementBtn: ElementRef;\n\n  @Input()\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  subscription: Subscription;\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.subscription = this.inputValue.valueChanges\n      .pipe(debounceTime(300))\n      .subscribe(value => {\n        if (value) {\n          this.manualChange(Number(value));\n        }\n      });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return incomingValue < this.min || !this.min\n      ? this.min\n      : incomingValue > this.max || !this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    value = value.replace(/[^0-9]+/g, '');\n    this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    return e.key;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OnlyNumberDirective } from './only-number.directive';\n\n@NgModule({\n  declarations: [OnlyNumberDirective],\n  exports: [OnlyNumberDirective],\n})\nexport class OnlyNumberDirectiveModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ItemCounterComponent } from './item-counter.component';\nimport { OnlyNumberDirectiveModule } from '../../directives/only-number/only-number.directive.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    OnlyNumberDirectiveModule,\n  ],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Input() hideOnSinglePage = false;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n\n  showPagination() {\n    return !(this.hideOnSinglePage && this.pagination.totalPages <= 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter(s => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(el: ElementRef, renderer: Renderer2); // tslint:disable-line\n  /**\n   * @deprecated since version 1.0.2\n   *  Use constructor(el: ElementRef, renderer: Renderer2) instead\n   *\n   *  TODO(issue:#3803) deprecated since 1.0.2\n   */\n  constructor(el: ElementRef);\n  constructor(protected el: ElementRef, protected renderer?: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      // TODO(issue:#3803) deprecated since 1.0.2\n      if (this.renderer) {\n        this.renderer.setAttribute(\n          this.el.nativeElement,\n          'style',\n          `--star-fill:${value || this.initialRate};`\n        );\n      } else {\n        this.el.nativeElement.style.setProperty(\n          '--star-fill',\n          value || this.initialRate\n        );\n      }\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { FormGroup, AbstractControl } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Validates a field of the given form group\n   *\n   * If the field is NOT valid (or invalid), the method returns `true`.\n   *\n   * @param form Form with fields to check\n   * @param formControlName Name of the form field to check\n   * @param submitted Has the form been submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    const control: AbstractControl = form.get(formControlName);\n    return control.invalid && (submitted || (control.touched && control.dirty));\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(EMAIL_PATTERN) ? null : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(PASSWORD_PATTERN) ? null : { InvalidPassword: true };\n  }\n\n  static matchPassword(control: AbstractControl): { NotEqual: boolean } {\n    if (control.get('password').value !== control.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { CartService, PromotionResult } from '@spartacus/core';\nimport { Item } from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  items: Item[] = [];\n\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(protected cartService: CartService, protected fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.items.forEach(item => {\n      const { code } = item.product;\n      if (!this.form.controls[code]) {\n        this.form.setControl(code, this.createEntryFormGroup(item));\n      } else {\n        const entryForm = this.form.controls[code] as FormGroup;\n        entryForm.controls.quantity.setValue(item.quantity);\n      }\n    });\n  }\n\n  removeEntry(item: Item): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumendEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumendEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumendEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n  @Input()\n  potentialProductPromotions: any[];\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  ngOnInit() {}\n\n  isProductOutOfStock(product) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = this.cartService.getLoaded();\n  }\n\n  getAllPromotionsForCart(cart: Cart): any[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n    potentialPromotions.push(...(cart.potentialProductPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n    appliedPromotions.push(...(cart.appliedProductPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Cart, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.cartService.getActive().pipe(\n      map(cart => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable()\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(private cartService: CartService) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([slots$, this.cartService.getActive()]).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Cart, OrderEntry, CartService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport {\n  UrlModule,\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n} from '@spartacus/core';\nimport { CartTotalsComponent } from './cart-totals.component';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\n\n@NgModule({\n  imports: [NgbModule, CartDetailsModule, CartTotalsModule, CartSharedModule],\n  exports: [\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n  ],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useClass: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          deliveryMode => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          deliveryMode => deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  CartService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private cartService: CartService,\n    private checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.cartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.cartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.cartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find(address => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find(address => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map(data => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { CartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService,\n    checkoutConfigService: CheckoutConfigService,\n    expressCheckoutService: ExpressCheckoutService,\n    cartService: CartService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(router: Router,\n   *  config: CheckoutConfig - @deprecated since 2.x,\n   *  routingConfigService: RoutingConfigService,\n   *  checkoutConfigService: CheckoutConfigService,\n   *  expressCheckoutService: ExpressCheckoutService\n   *  cartService: CartService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService\n  );\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService,\n    protected checkoutConfigService?: CheckoutConfigService,\n    protected expressCheckoutService?: ExpressCheckoutService,\n    protected cartService?: CartService\n  ) {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (this.checkoutConfigService) {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.checkoutConfigService.getFirstCheckoutStepRoute()\n          ).paths[0]\n        )\n      );\n    } else {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.config.checkout.steps[0].routeName\n          ).paths[0]\n        )\n      );\n    }\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.checkoutConfigService &&\n      this.expressCheckoutService &&\n      this.cartService\n    ) {\n      if (\n        this.checkoutConfigService.isExpressCheckout() &&\n        !this.cartService.isGuestCart()\n      ) {\n        return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n          switchMap((expressCheckoutPossible: boolean) => {\n            return expressCheckoutPossible\n              ? of(\n                  this.router.parseUrl(\n                    this.routingConfigService.getRouteConfig(\n                      this.checkoutConfigService.getCheckoutStepRoute(\n                        CheckoutStepType.REVIEW_ORDER\n                      )\n                    ).paths[0]\n                  )\n                )\n              : this.firstStep$;\n          })\n        );\n      }\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address !== undefined &&\n          address.country !== undefined &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n  CartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService,\n    cartService: CartService // tslint:disable-line\n  );\n  /**\n   * @deprecated since 1.x\n   * NOTE: check issue:#1181 for more info\n   *\n   * TODO(issue:#1181) Deprecated since 1.x\n   */\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService\n  );\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected cartService?: CartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.cartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use selectPaymentMethod() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  paymentMethodSelected(paymentDetails: PaymentDetails): void {\n    this.selectPaymentMethod(paymentDetails);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/index';\nimport { CheckoutStepType } from '../../model/index';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * NOTE: check issue:#4121 for more info\n   *\n   * TODO(issue:#4121) Deprecated since 1.1.0\n   */\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService\n  );\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    // TODO(issue:#4121) Deprecated since 1.1.0\n    if (this.checkoutConfigService) {\n      const step = this.checkoutConfigService.getCheckoutStep(stepType);\n\n      return step && step.routeName;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const sortedTitles = titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...sortedTitles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.address.controls['region'].value.isocode) {\n      this.regionsSub = this.regions$.pipe(take(1)).subscribe(regions => {\n        const obj = regions.find(\n          region =>\n            region.isocode === this.address.controls['region'].value.isocode\n        );\n        Object.assign(this.address.value.region, {\n          isocodeShort: obj.isocodeShort,\n        });\n      });\n    }\n\n    if (this.address.dirty) {\n      this.checkoutDeliveryService.verifyAddress(this.address.value);\n    } else {\n      // address form value not changed\n      // ignore duplicate address\n      this.submitAddress.emit(undefined);\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\nimport { CheckoutStepType } from '../..';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use cards$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  cards: Card[] = [];\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  goTo: CheckoutStepType = null;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddress: Address;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getNextCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n    this.activatedRoute\n  );\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getPreviousCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlPrevious = 'cart';\n\n  isGuestCheckout = false;\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddress: Address;\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected ||\n              Object.keys(selected).length === 0 ||\n              !this.selectedAddress)\n          ) {\n            const defaultAddress = addresses.find(\n              address => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.cartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.selectedAddress = address;\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addAddress(address: { newAddress: boolean; address: Address } | any);\n  addAddress(\n    address: Address | { newAddress: boolean; address: Address }\n  ): void {\n    // TODO(issue:#3921) deprecated since 1.3 - Remove temp address\n    const tempAddress: Address = address['address']\n      ? address['address']\n      : address;\n\n    const selectedSub = this.selectedAddress$.subscribe(selected => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    // TODO(issue:#3921) deprecated since 1.3 - Remove this condition\n    if (address['address'] || address['newAddress']) {\n      address['newAddress']\n        ? this.checkoutDeliveryService.createAndSetAddress(tempAddress)\n        : this.selectAddress(tempAddress);\n    } else {\n      // TODO(issue:#3921) deprecated since 1.3 - Use instead of condition\n      this.existingAddresses$.pipe(take(1)).subscribe(addresses => {\n        addresses.includes(tempAddress)\n          ? this.selectAddress(tempAddress)\n          : this.checkoutDeliveryService.createAndSetAddress(tempAddress);\n      });\n    }\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addressSelected(address: Address): void {\n    this.selectAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addNewAddress(address: Address): void {\n    this.addAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Remove.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { AuthService, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private cartService: CartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.cartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService {\n  private templatesRefs = {};\n  private templatesRefsBefore = {};\n  private templatesRefsAfter = {};\n\n  add(\n    outlet: string,\n    template: TemplateRef<any>,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.templatesRefsBefore[outlet] = template;\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.templatesRefs[outlet] = template;\n    }\n    if (position === OutletPosition.AFTER) {\n      this.templatesRefsAfter[outlet] = template;\n    }\n  }\n\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): TemplateRef<any> {\n    let templateRef;\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore[outlet];\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter[outlet];\n        break;\n      default:\n        templateRef = this.templatesRefs[outlet];\n    }\n    return templateRef;\n    // return this.templatesRefs[outlet] ? this.templatesRefs[outlet] : null;\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\nconst layoutModules = [OutletRefModule];\n\n@NgModule({\n  imports: [...layoutModules],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [...layoutModules],\n})\nexport class LayoutModule {}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { OutletPosition } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnInit {\n  @Input() cxOutlet: string;\n\n  private _context: any;\n  @Input()\n  set cxOutletContext(value: any) {\n    this._context = value;\n  }\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit(): void {\n    const nodes = [];\n    nodes.push(...this.renderTemplate(OutletPosition.BEFORE));\n    nodes.push(...this.renderTemplate(OutletPosition.REPLACE, true));\n    nodes.push(...this.renderTemplate(OutletPosition.AFTER));\n  }\n\n  private renderTemplate(position: OutletPosition, replace = false): any[] {\n    const nodes = [];\n    const template = this.outletService.get(this.cxOutlet, position);\n    if (template || replace) {\n      const ref = this.vcr.createEmbeddedView(template || this.templateRef, {\n        $implicit: this._context,\n      });\n      nodes.push(...ref.rootNodes);\n    }\n    return nodes;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  AuthService,\n  BaseSiteService,\n  CartDataService,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: CartService,\n    @Optional() public cartData: CartDataService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: cmsComponentData, // TODO: remove / deprecated since 1.0.x\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-page-slot',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent {\n  @Input() set position(position: string) {\n    this.position$.next(position);\n    // add the position name as a css class so that\n    // layout can be applied to it, using the position based class.\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  /**\n   * observable with components (`ContentSlotComponentData[]`)\n   * for the current slot\n   */\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    ),\n    tap(components => this.addComponentClass(components))\n  );\n\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef\n  ) {}\n\n  // add a class to indicate whether the class is empty or not\n  private addComponentClass(components): void {\n    if (components && components.length > 0) {\n      this.renderer.addClass(this.hostElement.nativeElement, 'has-components');\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // we print warn messages on missing layout configs\n  // only once to not polute the console log\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter(slot => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(page => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = JSON.stringify(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const html = `<script type=\"application/ld+json\">${JSON.stringify(\n        schema\n      )}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(this.builders.map(builder => builder.build())).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-anonymous-consent-form',\n  templateUrl: './anonymous-consent-form.component.html',\n})\nexport class AnonymousConsentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  consentGiven$ = new BehaviorSubject<boolean>(false);\n  consentGivenTranslation$: Observable<string>;\n  accordionExpanded = false;\n  accordionHeight = '0px';\n\n  @ViewChild('accordionContent', { static: false })\n  accordionContent: ElementRef<HTMLDivElement>;\n\n  @Input()\n  template: ConsentTemplate;\n\n  @Input()\n  consent: AnonymousConsent;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consent) {\n      this.consentGiven$.next(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    }\n    this.consentGivenTranslation$ = this.consentGiven$.pipe(\n      map(given =>\n        given ? 'anonymousConsents.dialog.on' : 'anonymousConsents.dialog.off'\n      )\n    );\n  }\n\n  onConsentChange(): void {\n    this.consentGiven$.next(!this.consentGiven$.value);\n\n    this.consentChanged.emit({\n      given: this.consentGiven$.value,\n      template: this.template,\n    });\n  }\n\n  toggleAccordion(keyEvent?: KeyboardEvent): void {\n    let expand = true;\n    if (keyEvent && keyEvent.key !== ' ' && keyEvent.key !== 'Enter') {\n      expand = false;\n    }\n\n    if (expand) {\n      this.accordionExpanded = !this.accordionExpanded;\n      this.accordionHeight = this.accordionExpanded\n        ? `${this.accordionContent.nativeElement.clientHeight}px`\n        : '0px';\n    }\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.requiredConsents.includes(templateId);\n  }\n\n  ngOnDestroy(): void {\n    this.consentGiven$.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AnonymousConsentsDialogComponent } from './dialog/anonymous-consents-dialog.component';\nimport { AnonymousConsentFormComponent } from './dialog/form/anonymous-consent-form.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [\n    AnonymousConsentsDialogComponent,\n    AnonymousConsentFormComponent,\n  ],\n  entryComponents: [AnonymousConsentsDialogComponent],\n  exports: [AnonymousConsentsDialogComponent, AnonymousConsentFormComponent],\n})\nexport class AnonymousConsentsModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  AsmService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n  searchResultsLoading$: Observable<boolean>;\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected userService: UserService,\n    protected asmService: AsmService,\n    protected globalMessageService: GlobalMessageService,\n    protected routing: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.authService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.authService.getCustomerSupportAgentTokenLoading();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.authService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routing.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.authService.authorizeCustomerSupporAgent(userId, password);\n  }\n\n  logoutCustomerSupportAgent(): void {\n    this.authService.logoutCustomerSupportAgent();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.authService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe(customerSupportAgentToken =>\n        this.authService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.asmService.updateAsmUiState({ visible: false });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { AsmService, AsmUi } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-asm',\n  templateUrl: './asm-root.component.html',\n})\nexport class AsmRootComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  asmUi$: Observable<AsmUi>;\n\n  constructor(\n    protected asmService: AsmService,\n    protected activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.asmUi$ = this.asmService.getAsmUiState();\n\n    this.subscription.add(\n      this.activatedRoute.queryParamMap.subscribe(queryParams => {\n        if (queryParams.get('asm') === 'true') {\n          this.showUi();\n        }\n      })\n    );\n  }\n\n  private showUi(): void {\n    this.asmService.updateAsmUiState({ visible: true });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, EventEmitter, OnInit, Output, Input } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  form: FormGroup;\n  private submitClicked = false;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submitEvent.emit({\n      userId: this.form.controls.userId.value,\n      password: this.form.controls.password.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmService,\n  CustomerSearchPage,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  private submitClicked = false;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      searchTerm: ['', [Validators.required]],\n    });\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.asmService.customerSearchReset();\n    this.subscription.add(\n      this.asmService.getCustomerSearchResults().subscribe(results => {\n        this.handleSearchResults(results);\n      })\n    );\n  }\n\n  private handleSearchResults(results: CustomerSearchPage): void {\n    if (!!results && results.entries) {\n      const customerHit = results.entries.find(\n        element =>\n          element.uid.toLowerCase() ===\n          this.form.controls.searchTerm.value.toLowerCase()\n      );\n      if (customerHit) {\n        this.submitEvent.emit({ customerId: customerHit.customerId });\n      } else {\n        this.globalMessageService.add(\n          {\n            key: 'asm.customerSearch.noMatch',\n            params: { uid: this.form.controls.searchTerm.value },\n          },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      }\n    }\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n    this.asmService.customerSearch({\n      query: this.form.controls.searchTerm.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmRootComponent } from './asm-root/asm-root.component';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AsmComponent: {\n          component: AsmRootComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmRootComponent,\n  ],\n  exports: [AsmRootComponent],\n  entryComponents: [AsmRootComponent],\n})\nexport class AssistedServiceModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  ProtectedRoutesGuard,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService,\n    protectedRoutesGuard: ProtectedRoutesGuard // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since version 1.2.0\n   * Use constructor with more dependencies and make them all required.\n   *\n   * TODO(issue:4646) deprecated since version 1.2.0\n   */\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService\n  );\n  constructor(\n    // expose as `protected` only services from public API:\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutesGuard?: ProtectedRoutesGuard\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:4646) Expect that `ProtectedRoutesGuard` dependency is required (remove `if` logic)\n     */\n    return this.protectedRoutesGuard\n      ? this.protectedRoutesGuard\n          .canActivate(route)\n          .pipe(\n            switchMap(result =>\n              result ? this.getCmsPage(route, state) : of(result)\n            )\n          )\n      : this.getCmsPage(route, state);\n  }\n\n  private getCmsPage(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.getPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap(notFoundPage => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map(review => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter(rev => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter(rev => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${date.getMonth() +\n        1}-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      startWith(null as Product),\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map(builder => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map(data => data.banners.trim().split(' ')),\n    map(codes => codes.map(code => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/index';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n    PageComponentModule,\n    CarouselModule,\n    MediaModule,\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsService, CMSTabParagraphContainer } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent {\n  activeTabNum = 0;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n              return {\n                ...tab,\n                title: `CMSTabParagraphContainer.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe(error => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { ConsentTemplate } from '@spartacus/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n  consentGivenTranslation$ = new BehaviorSubject<string>(\n    'consentManagementForm.off'\n  );\n  accordionExpanded = false;\n  accordionHeight = '0px';\n  consentGiven = false;\n\n  @ViewChild('accordionContent', { static: false })\n  accordionContent: ElementRef<HTMLDivElement>;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  // TODO(issue:4989) Anonymous consents - remove\n  @Input()\n  isAnonymousConsentsEnabled = false;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consentTemplate && this.consentTemplate.currentConsent) {\n      if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n        this.consentGiven = false;\n        this.consentGivenTranslation$.next('consentManagementForm.off');\n      } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n        this.consentGiven = true;\n        this.consentGivenTranslation$.next('consentManagementForm.on');\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n    if (this.consentGiven) {\n      this.consentGivenTranslation$.next('consentManagementForm.on');\n    } else {\n      this.consentGivenTranslation$.next('consentManagementForm.off');\n    }\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  toggleAccordion(keyEvent?: KeyboardEvent): void {\n    let expand = true;\n    if (keyEvent && keyEvent.key !== ' ' && keyEvent.key !== 'Enter') {\n      expand = false;\n    }\n\n    if (expand) {\n      this.accordionExpanded = !this.accordionExpanded;\n      this.accordionHeight = this.accordionExpanded\n        ? `${this.accordionContent.nativeElement.clientHeight}px`\n        : '0px';\n    }\n  }\n\n  isRequired(templateId: string): boolean {\n    // TODO(issue:4989) Anonymous consents - remove this.isAnonymousConsentsEnabled check\n    return this.isAnonymousConsentsEnabled\n      ? this.requiredConsents.includes(templateId)\n      : false;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  isFeatureLevel,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isAnonymousConsentsEnabled = isFeatureLevel(\n    this.anonymousConsentsConfig,\n    '1.3'\n  );\n\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    anonymousConsentsService: AnonymousConsentsService,\n    authService: AuthService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   ```ts\n   constructor(\n     userConsentService: UserConsentService,\n     globalMessageService: GlobalMessageService,\n     anonymousConsentsConfig : AnonymousConsentsConfig,\n     anonymousConsentsService : AnonymousConsentsService,\n     authService: AuthService,\n   ) \n   ```\n   */\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService\n  );\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService,\n    private anonymousConsentsConfig?: AnonymousConsentsConfig,\n    private anonymousConsentsService?: AnonymousConsentsService,\n    private authService?: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (!this.isAnonymousConsentsEnabled) {\n          return templateList;\n        }\n\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map(template => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.isConsentGiven(template)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isConsentGiven(consentTemplate: ConsentTemplate): boolean {\n    return (\n      Boolean(consentTemplate.currentConsent) &&\n      Boolean(consentTemplate.currentConsent.consentGivenDate) &&\n      !Boolean(consentTemplate.currentConsent.consentWithdrawnDate)\n    );\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.isConsentWithdrawn(template)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isConsentWithdrawn(consentTemplate: ConsentTemplate): boolean {\n    if (Boolean(consentTemplate.currentConsent)) {\n      return Boolean(consentTemplate.currentConsent.consentWithdrawnDate);\n    }\n    return true;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/index';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order, Consignment, OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    RouterModule.forChild([\n      {\n        path: 'guest/order/:orderCode',\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    SpinnerModule,\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n})\nexport class OrderHistoryComponent implements OnInit, OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  orders$: Observable<OrderHistoryList>;\n  isLoaded$: Observable<boolean>;\n\n  private PAGE_SIZE = 5;\n\n  sortType: string;\n\n  ngOnInit(): void {\n    this.orders$ = this.userOrderService\n      .getOrderHistoryList(this.PAGE_SIZE)\n      .pipe(\n        tap((orders: OrderHistoryList) => {\n          if (orders.pagination) {\n            this.sortType = orders.pagination.sort;\n          }\n        })\n      );\n\n    this.isLoaded$ = this.userOrderService.getOrderHistoryListLoaded();\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { NgModule } from '@angular/core';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { OrderDetailsModule } from './order-details/order-details.module';\n\n@NgModule({\n  imports: [OrderHistoryModule, OrderDetailsModule],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta && meta.breadcrumbs\n          ? meta.breadcrumbs\n          : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(data => !!data),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.getNavigationEntryItems(navigation, true);\n            }\n          }),\n          filter(Boolean),\n          map(items => this.createNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Get all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private getNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ) {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      this.processChildren(nodeData, itemsList);\n    }\n\n    if (root) {\n      const rootUid = nodeData.uid;\n      this.cmsService.loadNavigationItems(rootUid, itemsList);\n    }\n  }\n\n  private processChildren(node, itemsList): void {\n    for (const child of node.children) {\n      this.getNavigationEntryItems(child, false, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for display\n   * @param nodeData\n   * @param items\n   */\n  private createNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    node.title = nodeData.title;\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.addLinkToNode(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = this.createChildren(nodeData, items);\n      node.children = children;\n    }\n\n    return node;\n  }\n\n  private addLinkToNode(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (entry.itemType === 'CMSLinkComponent' && item !== undefined) {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n\n      node.url = this.getLink(item);\n\n      // if \"NEWWINDOW\", target is true\n      node.target = item.target;\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n\n  private createChildren(node, items) {\n    const children = [];\n\n    for (const child of node.children) {\n      const childNode = this.createNode(child, items);\n      children.push(childNode);\n    }\n\n    return children;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      this.openNodes = this.openNodes.filter(n => n !== node);\n      this.renderer.removeClass(node, 'is-open');\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AuthService,\n  CmsNavigationComponent,\n  isFeatureLevel,\n} from '@spartacus/core';\nimport { iif, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { AnonymousConsentsDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consents-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/index';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  data$ = this.componentData.data$;\n\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    authService: AuthService,\n    modalService: ModalService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   * \n    ```ts\n      constructor(\n      componentData: CmsComponentData<CmsNavigationComponent>,\n      service: NavigationService,\n      anonymousConsentsConfig: AnonymousConsentsConfig,\n      authService: AuthService,\n      modalService: ModalService\n    )\n    ```\n   */\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService\n  );\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig,\n    protected authService?: AuthService,\n    protected modalService?: ModalService\n  ) {}\n\n  get showConsentPreferences(): Observable<boolean> {\n    // TODO(issue:4989) Anonymous consents - remove the `iif` operator and just return the `trueResult` parameter\n    return iif(\n      () =>\n        Boolean(this.anonymousConsentsConfig) &&\n        isFeatureLevel(this.anonymousConsentsConfig, '1.3'),\n      this.authService\n        .isUserLoggedIn()\n        .pipe(\n          map(\n            isUserLoggedIn =>\n              !isUserLoggedIn &&\n              Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n              this.anonymousConsentsConfig.anonymousConsents.footerLink\n          )\n        ),\n      of(false)\n    );\n  }\n\n  openDialog(): void {\n    if (\n      Boolean(this.anonymousConsentsConfig) &&\n      // TODO(issue:4989) Anonymous consents - remove `isFeatureLevel(this.anonymousConsentsConfig, '1.3')` check\n      isFeatureLevel(this.anonymousConsentsConfig, '1.3')\n    ) {\n      this.modalService.open(AnonymousConsentsDialogComponent, {\n        centered: true,\n        size: 'lg',\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AnonymousConsentsConfig,\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: AnonymousConsentsConfig, useExisting: Config }],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(_ => Boolean(deliveryAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(_ => Boolean(deliveryMode)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(_ => Boolean(billingAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(_ => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap(order => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    this.userService.registerGuest(\n      this.guid,\n      this.guestRegisterForm.value.password\n    );\n    if (!this.subscription) {\n      this.subscription = this.authService.getUserToken().subscribe(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    I18nModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map(data => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map(data => data.productCodes.trim().split(' ')),\n    map(codes => codes.map(code => this.productService.get(code)))\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map(ref => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('CMSTabParagraphContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_CATEGORY = ':relevance:category:';\n  protected readonly RELEVANCE_BRAND = ':relevance:brand:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(\n    pluck(0),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_CATEGORY + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_BRAND + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe(route => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Subscription, Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\nimport { ViewConfig } from '../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n        this.viewMode$.next(\n          template === 'ProductGridPageTemplate'\n            ? ViewModes.Grid\n            : ViewModes.List\n        );\n      })\n    );\n  }\n\n  viewPage(pageNumber: number): void {\n    this.productListComponentService.viewPage(pageNumber);\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  StarRatingModule,\n  SpinnerModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport { ViewConfig } from '../../../shared/config/view-config';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<ViewConfig>defaultScrollConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { CurrentProductService } from '../../current-product.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(p => !!p),\n    switchMap(product => this.reviewService.getByProductCode(product.code)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map(product => this.createThumbs(product))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n    CarouselModule,\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RoutingService, StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      markerIndex => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap', { static: false })\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe(params =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { AuthRedirectService, CartService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  form: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    { validator: this.emailsMatch }\n  );\n\n  sub: Subscription;\n\n  private submitClicked = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cartService: CartService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isEmailConfirmInvalid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('emailConfirmation').touched &&\n          this.form.get('emailConfirmation').dirty))\n    );\n  }\n\n  onSubmit() {\n    this.submitClicked = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const email = this.form.value.email;\n    this.cartService.addEmail(email);\n\n    if (!this.sub) {\n      this.sub = this.cartService.getAssignedUser().subscribe(_ => {\n        if (this.cartService.isGuestCart()) {\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private emailsMatch(abstractControl: AbstractControl): { NotEqual: boolean } {\n    return abstractControl.get('email').value !==\n      abstractControl.get('emailConfirmation').value\n      ? { NotEqual: true }\n      : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService,\n    winRef: WindowRef, // tslint:disable-line,\n    activatedRoute: ActivatedRoute,\n    checkoutConfigService: CheckoutConfigService\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * Use constructor(\n   * auth: AuthService,\n   * globalMessageService: GlobalMessageService,\n   * fb: FormBuilder,\n   * authRedirectService: AuthRedirectService,\n   *  winRef: WindowRef,\n   * activatedRoute: ActivatedRoute,\n   * checkoutConfigService: CheckoutConfigService) instead\n   *\n   * TODO(issue:#4055) Deprecated since 1.1.0\n   */\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService\n  );\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService,\n    private winRef?: WindowRef,\n    private activatedRoute?: ActivatedRoute,\n    private checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n\n    if (\n      this.checkoutConfigService &&\n      this.checkoutConfigService.isGuestCheckout()\n    ) {\n      this.loginAsGuest = this.activatedRoute.snapshot.queryParams['forced'];\n    }\n\n    // TODO(issue:#4055) Deprecated since 1.1.0\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['newUid'] && routeState['newUid'].length) {\n        this.prefillForm('userId', routeState['newUid']);\n      }\n    }\n  }\n\n  login(): void {\n    const { userId, password } = this.form.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private prefillForm(field: string, value: string): void {\n    this.form.patchValue({\n      [field]: value,\n    });\n\n    this.form.get(field).markAsTouched(); // this action will check field validity on load\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap(isUserLoggedIn => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.routing.go({ cxRoute: 'home' });\n          }\n        })\n      );\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthRedirectService,\n  AuthService,\n  ConsentTemplate,\n  FeatureConfigService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles } from '../../../shared/utils/forms/title-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  // TODO(issue:4237) Register flow\n  isNewRegisterFlowEnabled: boolean =\n    this.featureConfig && this.featureConfig.isLevel('1.1');\n  // TODO(issue:4989) Anonymous consents - remove\n  isAnonymousConsentEnabled =\n    this.featureConfig && this.featureConfig.isLevel('1.3');\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isAnonymousConsentEnabled\n          ? this.isConsentRequired()\n          : false,\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    // tslint:disable-next-line:unified-signatures\n    router: RoutingService,\n    featureConfig: FeatureConfigService,\n    anonymousConsentsService: AnonymousConsentsService,\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   *\n   * Use constructor(\n   * protected auth: AuthService,\n   * protected authRedirectService: AuthRedirectService,\n   * protected userService: UserService,\n   * protected globalMessageService: GlobalMessageService,\n   * protected fb: FormBuilder,\n   * protected router?: RoutingService,\n   * protected featureConfig?: FeatureConfigService,\n   * protected anonymousConsentsService?: AnonymousConsentsService,\n   * protected anonymousConsentsConfig?: AnonymousConsentsConfig) instead\n   *\n   * TODO(issue:4237) Register flow\n   * TODO(issue:4989) Anonymous consents\n   */\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder\n  );\n  constructor(\n    protected auth: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router?: RoutingService,\n    protected featureConfig?: FeatureConfigService,\n    protected anonymousConsentsService?: AnonymousConsentsService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const sortedTitles = titles.sort(sortTitles);\n        return sortedTitles;\n      })\n    );\n\n    // TODO(issue:4237) Register flow\n    if (this.isNewRegisterFlowEnabled) {\n      this.loading$ = this.userService.getRegisterUserResultLoading();\n      this.registerUserProcessInit();\n    } else {\n      if (this.auth && this.authRedirectService) {\n        this.subscription.add(\n          this.userService\n            .getRegisterUserResultSuccess()\n            .subscribe((success: boolean) => {\n              if (success) {\n                const { uid, password } = this.collectDataFromRegisterForm(\n                  this.userRegistrationForm.value\n                );\n                this.auth.authorize(uid, password);\n              }\n            })\n        );\n        this.subscription.add(\n          this.auth.getUserToken().subscribe(data => {\n            if (data && data.access_token) {\n              this.globalMessageService.remove(\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n              this.authRedirectService.redirect();\n            }\n          })\n        );\n      }\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(messages => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some(message => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    if (\n      this.isAnonymousConsentEnabled &&\n      Boolean(this.anonymousConsentsConfig) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent)\n    ) {\n      this.anonymousConsent$ = combineLatest([\n        this.anonymousConsentsService.getConsent(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n        this.anonymousConsentsService.getTemplate(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n      ]).pipe(\n        map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n          return {\n            consent,\n            template: template.description,\n          };\n        })\n      );\n    }\n  }\n\n  submit(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.userRegistrationForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.userRegistrationForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  isConsentRequired(): boolean {\n    if (\n      Boolean(this.anonymousConsentsService) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.requiredConsents)\n    ) {\n      return this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (this.router && success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      if (\n        this.isAnonymousConsentEnabled &&\n        Boolean(this.userRegistrationForm.get('newsletter').value)\n      ) {\n        this.anonymousConsentsService.giveConsent(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        );\n      }\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe(success => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    SpinnerModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AssistedServiceModule } from './asm/assisted-service.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AssistedServiceModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  Route,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n  AsmModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    AsmModule.forRoot(),\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('1.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot(\n      {},\n      {\n        runtimeChecks: {\n          strictStateImmutability: true,\n          strictStateSerializability: true,\n          strictActionImmutability: true,\n          strictActionSerializability: true,\n        },\n      }\n    ),\n    EffectsModule.forRoot([]),\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n"]}